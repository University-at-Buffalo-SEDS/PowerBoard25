
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800dff0  0800dff0  0000eff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e390  0800e390  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e390  0800e390  0000f390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e398  0800e398  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e398  0800e398  0000f398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e39c  0800e39c  0000f39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e3a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007490  200001d8  0800e578  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007668  0800e578  00010668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d1c0  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dd8  00000000  00000000  0003d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  000431a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bca  00000000  00000000  00045598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255ce  00000000  00000000  00047162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b29f  00000000  00000000  0006c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5fa3  00000000  00000000  000979cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e74  00000000  00000000  0017d9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0018782c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dfd8 	.word	0x0800dfd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800dfd8 	.word	0x0800dfd8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	int8_t ack;

	handle->hi2c = hi2c;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	601a      	str	r2, [r3, #0]

	//Initialize voltages to NAN
	//Can this be changed so that it is in the struct
	//i.e. last_voltages = {NAN, NAN, NAN, NAN}
	for (int i = 0; i < 4; i++) {
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	e009      	b.n	8000616 <LTC2990_Init+0x2a>
		handle->last_voltages[i] = NAN;
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3302      	adds	r3, #2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <LTC2990_Init+0x94>)
 800060e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b03      	cmp	r3, #3
 800061a:	ddf2      	ble.n	8000602 <LTC2990_Init+0x16>
	}

	handle->i2c_address = LTC2990_I2C_ADDRESS;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	224c      	movs	r2, #76	@ 0x4c
 8000620:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, VOLTAGE_MODE_MASK);
 8000622:	2207      	movs	r2, #7
 8000624:	2107      	movs	r1, #7
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f8cc 	bl	80007c4 <LTC2990_Set_Mode>
 800062c:	4603      	mov	r3, r0
 800062e:	72fb      	strb	r3, [r7, #11]

	if(ack != 0) {
 8000630:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d004      	beq.n	8000642 <LTC2990_Init+0x56>
		CDC_Transmit_Print("Failed to set in Single Voltage Mode \n");
 8000638:	4812      	ldr	r0, [pc, #72]	@ (8000684 <LTC2990_Init+0x98>)
 800063a:	f000 fa2f 	bl	8000a9c <CDC_Transmit_Print>
		while(1);
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <LTC2990_Init+0x52>
	}


	// Enable all voltage channels
	ack = LTC2990_Enable_All_Voltages(handle);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f8b0 	bl	80007a8 <LTC2990_Enable_All_Voltages>
 8000648:	4603      	mov	r3, r0
 800064a:	72fb      	strb	r3, [r7, #11]
	if(ack != 0) {
 800064c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d007      	beq.n	8000664 <LTC2990_Init+0x78>
		HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	@ 0x32
 8000656:	f000 ff9d 	bl	8001594 <HAL_Delay>
		CDC_Transmit_Print("Failed to enable voltage channels. \n");
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <LTC2990_Init+0x9c>)
 800065c:	f000 fa1e 	bl	8000a9c <CDC_Transmit_Print>
		while(1);
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <LTC2990_Init+0x74>
	}

	HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	@ 0x64
 8000666:	f000 ff95 	bl	8001594 <HAL_Delay>
	CDC_Transmit_Print("LTC2990 configured for Single-Ended Voltage Monitoring. \n");
 800066a:	4808      	ldr	r0, [pc, #32]	@ (800068c <LTC2990_Init+0xa0>)
 800066c:	f000 fa16 	bl	8000a9c <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f80d 	bl	8000690 <LTC2990_Step>

	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	7fc00000 	.word	0x7fc00000
 8000684:	0800dff0 	.word	0x0800dff0
 8000688:	0800e018 	.word	0x0800e018
 800068c:	0800e040 	.word	0x0800e040

08000690 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	int8_t ack;
	int16_t adc_code;
	int8_t data_valid;
	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f8d7 	bl	800084c <LTC2990_Trigger_Conversion>
 800069e:	4603      	mov	r3, r0
 80006a0:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 80006a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <LTC2990_Step+0x22>
		CDC_Transmit_Print("Failed to trigger conversion.");
 80006aa:	4829      	ldr	r0, [pc, #164]	@ (8000750 <LTC2990_Step+0xc0>)
 80006ac:	f000 f9f6 	bl	8000a9c <CDC_Transmit_Print>
 80006b0:	e04b      	b.n	800074a <LTC2990_Step+0xba>
		return;
	}

	// Allow time for conversion
	HAL_Delay(10);
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 ff6e 	bl	8001594 <HAL_Delay>

	// Read voltages V1 to V4
	uint8_t msb_registers[4] = {V1_MSB_REG, V2_MSB_REG, V3_MSB_REG, V4_MSB_REG};
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <LTC2990_Step+0xc4>)
 80006ba:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 4; i++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e040      	b.n	8000744 <LTC2990_Step+0xb4>
		ack = LTC2990_ADC_Read_New_Data(handle, msb_registers[i], &adc_code, &data_valid);
 80006c2:	f107 0208 	add.w	r2, r7, #8
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	7819      	ldrb	r1, [r3, #0]
 80006cc:	f107 030f 	add.w	r3, r7, #15
 80006d0:	f107 0210 	add.w	r2, r7, #16
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f8c7 	bl	8000868 <LTC2990_ADC_Read_New_Data>
 80006da:	4603      	mov	r3, r0
 80006dc:	74fb      	strb	r3, [r7, #19]
		if(ack != 0 || data_valid != 1) {
 80006de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d103      	bne.n	80006ee <LTC2990_Step+0x5e>
 80006e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d017      	beq.n	800071e <LTC2990_Step+0x8e>
			CDC_Transmit_Print("Error reading Voltage %d \n", i);
 80006ee:	6979      	ldr	r1, [r7, #20]
 80006f0:	4819      	ldr	r0, [pc, #100]	@ (8000758 <LTC2990_Step+0xc8>)
 80006f2:	f000 f9d3 	bl	8000a9c <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the ack: %d \n", ack);
 80006f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4817      	ldr	r0, [pc, #92]	@ (800075c <LTC2990_Step+0xcc>)
 80006fe:	f000 f9cd 	bl	8000a9c <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8000702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000706:	4619      	mov	r1, r3
 8000708:	4815      	ldr	r0, [pc, #84]	@ (8000760 <LTC2990_Step+0xd0>)
 800070a:	f000 f9c7 	bl	8000a9c <CDC_Transmit_Print>
			handle->last_voltages[i] = NAN;
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3302      	adds	r3, #2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <LTC2990_Step+0xd4>)
 800071a:	601a      	str	r2, [r3, #0]
			continue;
 800071c:	e00f      	b.n	800073e <LTC2990_Step+0xae>
		}
		handle->last_voltages[i] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code);
 800071e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000722:	b29b      	uxth	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f922 	bl	8000970 <LTC2990_Code_To_Single_Ended_Voltage>
 800072c:	eef0 7a40 	vmov.f32	s15, s0
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	3302      	adds	r3, #2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 4; i++) {
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b03      	cmp	r3, #3
 8000748:	ddbb      	ble.n	80006c2 <LTC2990_Step+0x32>
		//CDC_Transmit_Print("Just Read Voltages, got: %x \n", handle->last_voltages[i]);
	}

}
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	0800e07c 	.word	0x0800e07c
 8000754:	0c0a0806 	.word	0x0c0a0806
 8000758:	0800e09c 	.word	0x0800e09c
 800075c:	0800e0b8 	.word	0x0800e0b8
 8000760:	0800e0d0 	.word	0x0800e0d0
 8000764:	7fc00000 	.word	0x7fc00000

08000768 <LTC2990_Get_Voltage>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
void LTC2990_Get_Voltage(LTC2990_Handle_t* handle, float* voltages) {
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00d      	b.n	8000794 <LTC2990_Get_Voltage+0x2c>
		voltages[i] = handle->last_voltages[i];
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	3202      	adds	r2, #2
 8000786:	0092      	lsls	r2, r2, #2
 8000788:	440a      	add	r2, r1
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) {
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b03      	cmp	r3, #3
 8000798:	ddee      	ble.n	8000778 <LTC2990_Get_Voltage+0x10>
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <LTC2990_Enable_All_Voltages>:


inline int8_t LTC2990_Enable_All_Voltages(LTC2990_Handle_t *handle) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	return LTC2990_Set_Mode(handle, ENABLE_ALL, TEMP_MEAS_MODE_MASK);
 80007b0:	2218      	movs	r2, #24
 80007b2:	2118      	movs	r1, #24
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f805 	bl	80007c4 <LTC2990_Set_Mode>
 80007ba:	4603      	mov	r3, r0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <LTC2990_Set_Mode>:


int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
 80007d0:	4613      	mov	r3, r2
 80007d2:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80007d4:	f107 030e 	add.w	r3, r7, #14
 80007d8:	461a      	mov	r2, r3
 80007da:	2101      	movs	r1, #1
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f903 	bl	80009e8 <LTC2990_Read_Register>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 80007ee:	4815      	ldr	r0, [pc, #84]	@ (8000844 <LTC2990_Set_Mode+0x80>)
 80007f0:	f000 f954 	bl	8000a9c <CDC_Transmit_Print>
		return ack;
 80007f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f8:	e01f      	b.n	800083a <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 80007fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80007fe:	43db      	mvns	r3, r3
 8000800:	b25a      	sxtb	r2, r3
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4013      	ands	r3, r2
 8000808:	b25b      	sxtb	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 800080e:	7bba      	ldrb	r2, [r7, #14]
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	4313      	orrs	r3, r2
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	461a      	mov	r2, r3
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f90e 	bl	8000a40 <LTC2990_Write_Register>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8000828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <LTC2990_Set_Mode+0x84>)
 8000832:	f000 f933 	bl	8000a9c <CDC_Transmit_Print>
	}
	return ack;
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	0800e0f0 	.word	0x0800e0f0
 8000848:	0800e118 	.word	0x0800e118

0800084c <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x00);
 8000854:	2200      	movs	r2, #0
 8000856:	2102      	movs	r1, #2
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f8f1 	bl	8000a40 <LTC2990_Write_Register>
 800085e:	4603      	mov	r3, r0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, int16_t* adc_code, int8_t* data_valid) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	460b      	mov	r3, r1
 8000876:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 8000878:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087c:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 800087e:	7afb      	ldrb	r3, [r7, #11]
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3b01      	subs	r3, #1
 8000886:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 8000888:	e01a      	b.n	80008c0 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 800088a:	f107 0319 	add.w	r3, r7, #25
 800088e:	461a      	mov	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f000 f8a8 	bl	80009e8 <LTC2990_Read_Register>
 8000898:	4603      	mov	r3, r0
 800089a:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 800089c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80008a4:	7f3b      	ldrb	r3, [r7, #28]
 80008a6:	e05c      	b.n	8000962 <LTC2990_ADC_Read_New_Data+0xfa>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80008a8:	7e7b      	ldrb	r3, [r7, #25]
 80008aa:	461a      	mov	r2, r3
 80008ac:	7f7b      	ldrb	r3, [r7, #29]
 80008ae:	fa42 f303 	asr.w	r3, r2, r3
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fe6a 	bl	8001594 <HAL_Delay>
	while (--timeout) {
 80008c0:	8bfb      	ldrh	r3, [r7, #30]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	83fb      	strh	r3, [r7, #30]
 80008c6:	8bfb      	ldrh	r3, [r7, #30]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1de      	bne.n	800088a <LTC2990_ADC_Read_New_Data+0x22>
 80008cc:	e000      	b.n	80008d0 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 80008ce:	bf00      	nop
	}


	if (timeout == 0) {
 80008d0:	8bfb      	ldrh	r3, [r7, #30]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80008d6:	4825      	ldr	r0, [pc, #148]	@ (800096c <LTC2990_ADC_Read_New_Data+0x104>)
 80008d8:	f000 f8e0 	bl	8000a9c <CDC_Transmit_Print>
		return 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	e040      	b.n	8000962 <LTC2990_ADC_Read_New_Data+0xfa>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 80008e0:	f107 0218 	add.w	r2, r7, #24
 80008e4:	7afb      	ldrb	r3, [r7, #11]
 80008e6:	4619      	mov	r1, r3
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f000 f87d 	bl	80009e8 <LTC2990_Read_Register>
 80008ee:	4603      	mov	r3, r0
 80008f0:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80008f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 80008fa:	7f3b      	ldrb	r3, [r7, #28]
 80008fc:	e031      	b.n	8000962 <LTC2990_ADC_Read_New_Data+0xfa>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 80008fe:	7afb      	ldrb	r3, [r7, #11]
 8000900:	3301      	adds	r3, #1
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f107 0217 	add.w	r2, r7, #23
 8000908:	4619      	mov	r1, r3
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f000 f86c 	bl	80009e8 <LTC2990_Read_Register>
 8000910:	4603      	mov	r3, r0
 8000912:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 8000914:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 800091c:	7f3b      	ldrb	r3, [r7, #28]
 800091e:	e020      	b.n	8000962 <LTC2990_ADC_Read_New_Data+0xfa>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8000920:	7e3b      	ldrb	r3, [r7, #24]
 8000922:	b21b      	sxth	r3, r3
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	b21a      	sxth	r2, r3
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	b21b      	sxth	r3, r3
 800092c:	4313      	orrs	r3, r2
 800092e:	b21b      	sxth	r3, r3
 8000930:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 8000932:	8b7b      	ldrh	r3, [r7, #26]
 8000934:	0bdb      	lsrs	r3, r3, #15
 8000936:	b29b      	uxth	r3, r3
 8000938:	b25b      	sxtb	r3, r3
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	b25a      	sxtb	r2, r3
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x3FFF;
 8000944:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000948:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800094c:	b21a      	sxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	801a      	strh	r2, [r3, #0]

	return (*data_valid == 1) ? 0 : 1;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	f993 3000 	ldrsb.w	r3, [r3]
 8000958:	2b01      	cmp	r3, #1
 800095a:	bf14      	ite	ne
 800095c:	2301      	movne	r3, #1
 800095e:	2300      	moveq	r3, #0
 8000960:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 8000962:	4618      	mov	r0, r3
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	0800e140 	.word	0x0800e140

08000970 <LTC2990_Code_To_Single_Ended_Voltage>:

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	81fb      	strh	r3, [r7, #14]

	if(adc_code & 0x4000) { //If the code is negative
 8000980:	887b      	ldrh	r3, [r7, #2]
 8000982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00a      	beq.n	80009a0 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x7FFF) + 1;// Two's compliment
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	f483 43ff 	eor.w	r3, r3, #32640	@ 0x7f80
 8000990:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000994:	b29b      	uxth	r3, r3
 8000996:	3301      	adds	r3, #1
 8000998:	807b      	strh	r3, [r7, #2]
		sign = -1;
 800099a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800099e:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 80009a0:	887b      	ldrh	r3, [r7, #2]
 80009a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80009a6:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * SINGLE_ENDED_LSB * sign;
 80009a8:	887b      	ldrh	r3, [r7, #2]
 80009aa:	ee07 3a90 	vmov	s15, r3
 80009ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80009e4 <LTC2990_Code_To_Single_Ended_Voltage+0x74>
 80009b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009be:	ee07 3a90 	vmov	s15, r3
 80009c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ca:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	ee07 3a90 	vmov	s15, r3
}
 80009d4:	eeb0 0a67 	vmov.f32	s0, s15
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	39a00000 	.word	0x39a00000

080009e8 <LTC2990_Read_Register>:

int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af04      	add	r7, sp, #16
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	460b      	mov	r3, r1
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	b299      	uxth	r1, r3
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	9302      	str	r3, [sp, #8]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	f001 fc79 	bl	800230c <HAL_I2C_Mem_Read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <LTC2990_Read_Register+0x40>
		return 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	e005      	b.n	8000a34 <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <LTC2990_Read_Register+0x54>)
 8000a2e:	f000 f835 	bl	8000a9c <CDC_Transmit_Print>
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800e154 	.word	0x0800e154

08000a40 <LTC2990_Write_Register>:
//	}
//	return 0;
//}


int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af04      	add	r7, sp, #16
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	791b      	ldrb	r3, [r3, #4]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	1cbb      	adds	r3, r7, #2
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f001 fb38 	bl	80020e4 <HAL_I2C_Mem_Write>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <LTC2990_Write_Register+0x42>
		return 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e005      	b.n	8000a8e <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <LTC2990_Write_Register+0x58>)
 8000a88:	f000 f808 	bl	8000a9c <CDC_Transmit_Print>

	return 1;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800e17c 	.word	0x0800e17c

08000a9c <CDC_Transmit_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char * format, ...) {
 8000a9c:	b40f      	push	{r0, r1, r2, r3}
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b09c      	sub	sp, #112	@ 0x70
 8000aa2:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 8000aa4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000aa8:	607b      	str	r3, [r7, #4]
	int n = vsprintf(buf, format, args);
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00c fdaa 	bl	800d60c <vsiprintf>
 8000ab8:	66f8      	str	r0, [r7, #108]	@ 0x6c
	va_end(args);
	CDC_Transmit_FS(buf, n);
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f00c f91f 	bl	800cd04 <CDC_Transmit_FS>
}
 8000ac6:	bf00      	nop
 8000ac8:	3770      	adds	r7, #112	@ 0x70
 8000aca:	46bd      	mov	sp, r7
 8000acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b09e      	sub	sp, #120	@ 0x78
 8000ad8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f000 fd24 	bl	8001526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f8dd 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 f9ef 	bl	8000ec4 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000ae6:	f000 f91b 	bl	8000d20 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000aea:	f000 f961 	bl	8000db0 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8000aee:	f000 f99f 	bl	8000e30 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	  FDCAN_FilterTypeDef sFilterConfig;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000af2:	2300      	movs	r3, #0
 8000af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sFilterConfig.FilterIndex = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	653b      	str	r3, [r7, #80]	@ 0x50
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	657b      	str	r3, [r7, #84]	@ 0x54
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000afe:	2301      	movs	r3, #1
 8000b00:	65bb      	str	r3, [r7, #88]	@ 0x58
	sFilterConfig.FilterID1 = 0x321;
 8000b02:	f240 3321 	movw	r3, #801	@ 0x321
 8000b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
	sFilterConfig.FilterID2 = 0x7FF;
 8000b08:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b0c:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000b0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b12:	4619      	mov	r1, r3
 8000b14:	4850      	ldr	r0, [pc, #320]	@ (8000c58 <main+0x184>)
 8000b16:	f000 ff99 	bl	8001a4c <HAL_FDCAN_ConfigFilter>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <main+0x52>
	{
	  CDC_Transmit_Print("Error while configuring filter for FDCAN2");
 8000b20:	484e      	ldr	r0, [pc, #312]	@ (8000c5c <main+0x188>)
 8000b22:	f7ff ffbb 	bl	8000a9c <CDC_Transmit_Print>
	}

	/* Configure global filter:
	   Filter all remote frames with STD and EXT ID
	   Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000b26:	2300      	movs	r3, #0
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4849      	ldr	r0, [pc, #292]	@ (8000c58 <main+0x184>)
 8000b32:	f000 ffe5 	bl	8001b00 <HAL_FDCAN_ConfigGlobalFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <main+0x6e>
	{
		CDC_Transmit_Print("Error while configuring global filter\n");
 8000b3c:	4848      	ldr	r0, [pc, #288]	@ (8000c60 <main+0x18c>)
 8000b3e:	f7ff ffad 	bl	8000a9c <CDC_Transmit_Print>
	}

  HAL_StatusTypeDef err = HAL_FDCAN_Start(&hfdcan2);
 8000b42:	4845      	ldr	r0, [pc, #276]	@ (8000c58 <main+0x184>)
 8000b44:	f001 f80d 	bl	8001b62 <HAL_FDCAN_Start>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (err != HAL_OK) {
 8000b4e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00c      	beq.n	8000b70 <main+0x9c>
  	  char buf[60];// to send
  	  int n = sprintf(buf, "init err: = 0x%02x\n", err);
 8000b56:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4941      	ldr	r1, [pc, #260]	@ (8000c64 <main+0x190>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00c fd1c 	bl	800d59c <siprintf>
 8000b64:	6678      	str	r0, [r7, #100]	@ 0x64
  	  CDC_Transmit_FS(buf, n);
 8000b66:	463b      	mov	r3, r7
 8000b68:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c f8ca 	bl	800cd04 <CDC_Transmit_FS>
    }

    /* TEMPORARY TILL I FIGURE OUR LED DRIVER */
    HAL_Delay(1000);
 8000b70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b74:	f000 fd0e 	bl	8001594 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b7e:	483a      	ldr	r0, [pc, #232]	@ (8000c68 <main+0x194>)
 8000b80:	f001 f9fc 	bl	8001f7c <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b84:	f009 fa50 	bl	800a028 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b88:	4a38      	ldr	r2, [pc, #224]	@ (8000c6c <main+0x198>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4838      	ldr	r0, [pc, #224]	@ (8000c70 <main+0x19c>)
 8000b8e:	f009 fa95 	bl	800a0bc <osThreadNew>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a37      	ldr	r2, [pc, #220]	@ (8000c74 <main+0x1a0>)
 8000b96:	6013      	str	r3, [r2, #0]

  /* creation of readVoltageTask */
  readVoltageTaskHandle = osThreadNew(startReadVoltageTask, NULL, &readVoltageTask_attributes);
 8000b98:	4a37      	ldr	r2, [pc, #220]	@ (8000c78 <main+0x1a4>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4837      	ldr	r0, [pc, #220]	@ (8000c7c <main+0x1a8>)
 8000b9e:	f009 fa8d 	bl	800a0bc <osThreadNew>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a36      	ldr	r2, [pc, #216]	@ (8000c80 <main+0x1ac>)
 8000ba6:	6013      	str	r3, [r2, #0]

  /* creation of blinkLEDTask */
  blinkLEDTaskHandle = osThreadNew(startBlinkLEDTask, NULL, &blinkLEDTask_attributes);
 8000ba8:	4a36      	ldr	r2, [pc, #216]	@ (8000c84 <main+0x1b0>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4836      	ldr	r0, [pc, #216]	@ (8000c88 <main+0x1b4>)
 8000bae:	f009 fa85 	bl	800a0bc <osThreadNew>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a35      	ldr	r2, [pc, #212]	@ (8000c8c <main+0x1b8>)
 8000bb6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bb8:	f009 fa5a 	bl	800a070 <osKernelStart>
//	  		  CDC_Transmit_Print("NO MESSAGES IN FIFO0\n"); //Data to send
//	  		  CDC_Transmit_Print("Current FDCAN state: 0x%02x\n", hfdcan2.State);
//	  	  }


	LTC2990_Step(&LTC2990_Handle);
 8000bbc:	4834      	ldr	r0, [pc, #208]	@ (8000c90 <main+0x1bc>)
 8000bbe:	f7ff fd67 	bl	8000690 <LTC2990_Step>

	float voltages[4];
	LTC2990_Get_Voltage(&LTC2990_Handle, voltages);
 8000bc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4831      	ldr	r0, [pc, #196]	@ (8000c90 <main+0x1bc>)
 8000bca:	f7ff fdcd 	bl	8000768 <LTC2990_Get_Voltage>

	for (int i = 0; i < 4; i++) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000bd2:	e02e      	b.n	8000c32 <main+0x15e>
		CDC_Transmit_Print("Voltage %d: %d.%03d V\n", i + 1,  (int)voltages[i], (int)((voltages[i] - (int)voltages[i]) * 1000));;
 8000bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bd6:	1c59      	adds	r1, r3, #1
 8000bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	3370      	adds	r3, #112	@ 0x70
 8000bde:	443b      	add	r3, r7
 8000be0:	3b34      	subs	r3, #52	@ 0x34
 8000be2:	edd3 7a00 	vldr	s15, [r3]
 8000be6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	3370      	adds	r3, #112	@ 0x70
 8000bf0:	443b      	add	r3, r7
 8000bf2:	3b34      	subs	r3, #52	@ 0x34
 8000bf4:	ed93 7a00 	vldr	s14, [r3]
 8000bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	3370      	adds	r3, #112	@ 0x70
 8000bfe:	443b      	add	r3, r7
 8000c00:	3b34      	subs	r3, #52	@ 0x34
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c12:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000c94 <main+0x1c0>
 8000c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c1e:	ee17 3a90 	vmov	r3, s15
 8000c22:	ee16 2a90 	vmov	r2, s13
 8000c26:	481c      	ldr	r0, [pc, #112]	@ (8000c98 <main+0x1c4>)
 8000c28:	f7ff ff38 	bl	8000a9c <CDC_Transmit_Print>
	for (int i = 0; i < 4; i++) {
 8000c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c2e:	3301      	adds	r3, #1
 8000c30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	ddcd      	ble.n	8000bd4 <main+0x100>
	}

	 //HAL_Delay(500);
	 HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <main+0x194>)
 8000c3e:	f001 f99d 	bl	8001f7c <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 8000c42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c46:	f000 fca5 	bl	8001594 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <main+0x194>)
 8000c50:	f001 f994 	bl	8001f7c <HAL_GPIO_WritePin>
  {
 8000c54:	e7b2      	b.n	8000bbc <main+0xe8>
 8000c56:	bf00      	nop
 8000c58:	200001f4 	.word	0x200001f4
 8000c5c:	0800e1d0 	.word	0x0800e1d0
 8000c60:	0800e1fc 	.word	0x0800e1fc
 8000c64:	0800e224 	.word	0x0800e224
 8000c68:	48000400 	.word	0x48000400
 8000c6c:	0800e2b0 	.word	0x0800e2b0
 8000c70:	08000f85 	.word	0x08000f85
 8000c74:	20000340 	.word	0x20000340
 8000c78:	0800e2d4 	.word	0x0800e2d4
 8000c7c:	08000f99 	.word	0x08000f99
 8000c80:	20000344 	.word	0x20000344
 8000c84:	0800e2f8 	.word	0x0800e2f8
 8000c88:	0800103d 	.word	0x0800103d
 8000c8c:	20000348 	.word	0x20000348
 8000c90:	2000034c 	.word	0x2000034c
 8000c94:	447a0000 	.word	0x447a0000
 8000c98:	0800e238 	.word	0x0800e238

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	@ 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2238      	movs	r2, #56	@ 0x38
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00c fcb8 	bl	800d620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cc2:	f003 fc97 	bl	80045f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000cc6:	2322      	movs	r3, #34	@ 0x22
 8000cc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd0:	2340      	movs	r3, #64	@ 0x40
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fd3b 	bl	800475c <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000cec:	f000 f9d2 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 f839 	bl	8004d80 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000d14:	f000 f9be 	bl	8001094 <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3750      	adds	r7, #80	@ 0x50
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d26:	4a21      	ldr	r2, [pc, #132]	@ (8000dac <MX_FDCAN2_Init+0x8c>)
 8000d28:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d32:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d36:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d58:	2210      	movs	r2, #16
 8000d5a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d5e:	223f      	movs	r2, #63	@ 0x3f
 8000d60:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d64:	2210      	movs	r2, #16
 8000d66:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d76:	220d      	movs	r2, #13
 8000d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <MX_FDCAN2_Init+0x88>)
 8000d94:	f000 fd00 	bl	8001798 <HAL_FDCAN_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8000d9e:	f000 f979 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001f4 	.word	0x200001f4
 8000dac:	40006800 	.word	0x40006800

08000db0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <MX_I2C2_Init+0x78>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <MX_I2C2_Init+0x7c>)
 8000dbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dea:	480e      	ldr	r0, [pc, #56]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dec:	f001 f8de 	bl	8001fac <HAL_I2C_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000df6:	f000 f94d 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000dfe:	f001 fe61 	bl	8002ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e08:	f000 f944 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_I2C2_Init+0x74>)
 8000e10:	f001 fea3 	bl	8002b5a <HAL_I2CEx_ConfigDigitalFilter>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e1a:	f000 f93b 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000258 	.word	0x20000258
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	00503d58 	.word	0x00503d58

08000e30 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_LPUART1_UART_Init+0x8c>)
 8000e38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e3c:	4a20      	ldr	r2, [pc, #128]	@ (8000ec0 <MX_LPUART1_UART_Init+0x90>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e54:	220c      	movs	r2, #12
 8000e56:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e70:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e72:	f004 ff49 	bl	8005d08 <HAL_UART_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000e7c:	f000 f90a 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e80:	2100      	movs	r1, #0
 8000e82:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e84:	f005 fce4 	bl	8006850 <HAL_UARTEx_SetTxFifoThreshold>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000e8e:	f000 f901 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4808      	ldr	r0, [pc, #32]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000e96:	f005 fd19 	bl	80068cc <HAL_UARTEx_SetRxFifoThreshold>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000ea0:	f000 f8f8 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <MX_LPUART1_UART_Init+0x88>)
 8000ea6:	f005 fc9a 	bl	80067de <HAL_UARTEx_DisableFifoMode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000eb0:	f000 f8f0 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200002ac 	.word	0x200002ac
 8000ebc:	40008000 	.word	0x40008000
 8000ec0:	00033324 	.word	0x00033324

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a26      	ldr	r2, [pc, #152]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	4a20      	ldr	r2, [pc, #128]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_GPIO_Init+0xb4>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin|BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000f40:	480e      	ldr	r0, [pc, #56]	@ (8000f7c <MX_GPIO_Init+0xb8>)
 8000f42:	f001 f81b 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin|BACKLIGHT_LEDS_Pin;
 8000f46:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_GPIO_Init+0xb8>)
 8000f60:	f000 fe8a 	bl	8001c78 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_GPIO_Init+0xbc>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <MX_GPIO_Init+0xbc>)
 8000f6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f6e:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	40010000 	.word	0x40010000

08000f84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8000f8c:	f00b fdfc 	bl	800cb88 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f009 f926 	bl	800a1e2 <osDelay>
 8000f96:	e7fb      	b.n	8000f90 <StartDefaultTask+0xc>

08000f98 <startReadVoltageTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadVoltageTask */
void startReadVoltageTask(void *argument)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadVoltageTask */
	LTC2990_Init(&LTC2990_Handle, &hi2c2);
 8000fa0:	4922      	ldr	r1, [pc, #136]	@ (800102c <startReadVoltageTask+0x94>)
 8000fa2:	4823      	ldr	r0, [pc, #140]	@ (8001030 <startReadVoltageTask+0x98>)
 8000fa4:	f7ff fb22 	bl	80005ec <LTC2990_Init>
  /* Infinite loop */
  for(;;)
  {
	  LTC2990_Step(&LTC2990_Handle);
 8000fa8:	4821      	ldr	r0, [pc, #132]	@ (8001030 <startReadVoltageTask+0x98>)
 8000faa:	f7ff fb71 	bl	8000690 <LTC2990_Step>
	  float voltages[4];
	  LTC2990_Get_Voltage(&LTC2990_Handle, voltages);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481e      	ldr	r0, [pc, #120]	@ (8001030 <startReadVoltageTask+0x98>)
 8000fb6:	f7ff fbd7 	bl	8000768 <LTC2990_Get_Voltage>

	  for (int i = 0; i < 4; i++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e02d      	b.n	800101c <startReadVoltageTask+0x84>
		  CDC_Transmit_Print("Voltage %d: %d.%03d V\n", i ,  (int)voltages[i], (int)((voltages[i] - (int)voltages[i]) * 1000));;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	3320      	adds	r3, #32
 8000fc6:	443b      	add	r3, r7
 8000fc8:	3b14      	subs	r3, #20
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	443b      	add	r3, r7
 8000fda:	3b14      	subs	r3, #20
 8000fdc:	ed93 7a00 	vldr	s14, [r3]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	3320      	adds	r3, #32
 8000fe6:	443b      	add	r3, r7
 8000fe8:	3b14      	subs	r3, #20
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001034 <startReadVoltageTask+0x9c>
 8000ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	ee16 2a90 	vmov	r2, s13
 800100e:	69f9      	ldr	r1, [r7, #28]
 8001010:	4809      	ldr	r0, [pc, #36]	@ (8001038 <startReadVoltageTask+0xa0>)
 8001012:	f7ff fd43 	bl	8000a9c <CDC_Transmit_Print>
	  for (int i = 0; i < 4; i++) {
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b03      	cmp	r3, #3
 8001020:	ddce      	ble.n	8000fc0 <startReadVoltageTask+0x28>
	  }
	  osDelay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f009 f8dd 	bl	800a1e2 <osDelay>
  {
 8001028:	e7be      	b.n	8000fa8 <startReadVoltageTask+0x10>
 800102a:	bf00      	nop
 800102c:	20000258 	.word	0x20000258
 8001030:	2000034c 	.word	0x2000034c
 8001034:	447a0000 	.word	0x447a0000
 8001038:	0800e238 	.word	0x0800e238

0800103c <startBlinkLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBlinkLEDTask */
void startBlinkLEDTask(void *argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBlinkLEDTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	4808      	ldr	r0, [pc, #32]	@ (800106c <startBlinkLEDTask+0x30>)
 800104a:	f000 ff97 	bl	8001f7c <HAL_GPIO_WritePin>
	osDelay(500);
 800104e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001052:	f009 f8c6 	bl	800a1e2 <osDelay>
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	4804      	ldr	r0, [pc, #16]	@ (800106c <startBlinkLEDTask+0x30>)
 800105c:	f000 ff8e 	bl	8001f7c <HAL_GPIO_WritePin>
    osDelay(500);
 8001060:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001064:	f009 f8bd 	bl	800a1e2 <osDelay>
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_SET);
 8001068:	bf00      	nop
 800106a:	e7eb      	b.n	8001044 <startBlinkLEDTask+0x8>
 800106c:	48000400 	.word	0x48000400

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001082:	f000 fa69 	bl	8001558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012c00 	.word	0x40012c00

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_MspInit+0x50>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010aa:	4a11      	ldr	r2, [pc, #68]	@ (80010f0 <HAL_MspInit+0x50>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_MspInit+0x50>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <HAL_MspInit+0x50>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	4a0b      	ldr	r2, [pc, #44]	@ (80010f0 <HAL_MspInit+0x50>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_MspInit+0x50>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	210f      	movs	r1, #15
 80010da:	f06f 0001 	mvn.w	r0, #1
 80010de:	f000 fb33 	bl	8001748 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010e2:	f003 fb2b 	bl	800473c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b09e      	sub	sp, #120	@ 0x78
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2250      	movs	r2, #80	@ 0x50
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00c fa83 	bl	800d620 <memset>
  if(hfdcan->Instance==FDCAN2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a20      	ldr	r2, [pc, #128]	@ (80011a0 <HAL_FDCAN_MspInit+0xac>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d138      	bne.n	8001196 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001128:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800112a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800112e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f004 f871 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001140:	f7ff ffa8 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_FDCAN_MspInit+0xb0>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	4a16      	ldr	r2, [pc, #88]	@ (80011a4 <HAL_FDCAN_MspInit+0xb0>)
 800114a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800114e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_FDCAN_MspInit+0xb0>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_FDCAN_MspInit+0xb0>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <HAL_FDCAN_MspInit+0xb0>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_FDCAN_MspInit+0xb0>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001174:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001178:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001186:	2309      	movs	r3, #9
 8001188:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_FDCAN_MspInit+0xb4>)
 8001192:	f000 fd71 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001196:	bf00      	nop
 8001198:	3778      	adds	r7, #120	@ 0x78
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40006800 	.word	0x40006800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09e      	sub	sp, #120	@ 0x78
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2250      	movs	r2, #80	@ 0x50
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00c fa27 	bl	800d620 <memset>
  if(hi2c->Instance==I2C2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001254 <HAL_I2C_MspInit+0xa8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d137      	bne.n	800124c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 f817 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011f4:	f7ff ff4e 	bl	8001094 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_I2C_MspInit+0xac>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	4a16      	ldr	r2, [pc, #88]	@ (8001258 <HAL_I2C_MspInit+0xac>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <HAL_I2C_MspInit+0xac>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001210:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001214:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001216:	2312      	movs	r3, #18
 8001218:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001222:	2304      	movs	r3, #4
 8001224:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f000 fd22 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_I2C_MspInit+0xac>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_I2C_MspInit+0xac>)
 800123a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800123e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_I2C_MspInit+0xac>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800124c:	bf00      	nop
 800124e:	3778      	adds	r7, #120	@ 0x78
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005800 	.word	0x40005800
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b09e      	sub	sp, #120	@ 0x78
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2250      	movs	r2, #80	@ 0x50
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f00c f9cf 	bl	800d620 <memset>
  if(huart->Instance==LPUART1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <HAL_UART_MspInit+0xa8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d136      	bne.n	80012fa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800128c:	2320      	movs	r3, #32
 800128e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4618      	mov	r0, r3
 800129a:	f003 ffbf 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012a4:	f7ff fef6 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <HAL_UART_MspInit+0xac>)
 80012aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ac:	4a16      	ldr	r2, [pc, #88]	@ (8001308 <HAL_UART_MspInit+0xac>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_UART_MspInit+0xac>)
 80012b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <HAL_UART_MspInit+0xac>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <HAL_UART_MspInit+0xac>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <HAL_UART_MspInit+0xac>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012d8:	230c      	movs	r3, #12
 80012da:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80012e8:	230c      	movs	r3, #12
 80012ea:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f6:	f000 fcbf 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80012fa:	bf00      	nop
 80012fc:	3778      	adds	r7, #120	@ 0x78
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40008000 	.word	0x40008000
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <HAL_InitTick+0xc4>)
 800131e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001320:	4a2b      	ldr	r2, [pc, #172]	@ (80013d0 <HAL_InitTick+0xc4>)
 8001322:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001326:	6613      	str	r3, [r2, #96]	@ 0x60
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <HAL_InitTick+0xc4>)
 800132a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800132c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fef4 	bl	800512c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001344:	f003 fedc 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8001348:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800134a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134c:	4a21      	ldr	r2, [pc, #132]	@ (80013d4 <HAL_InitTick+0xc8>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	3b01      	subs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_InitTick+0xcc>)
 800135a:	4a20      	ldr	r2, [pc, #128]	@ (80013dc <HAL_InitTick+0xd0>)
 800135c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800135e:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <HAL_InitTick+0xcc>)
 8001360:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001364:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001366:	4a1c      	ldr	r2, [pc, #112]	@ (80013d8 <HAL_InitTick+0xcc>)
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <HAL_InitTick+0xcc>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_InitTick+0xcc>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001378:	4817      	ldr	r0, [pc, #92]	@ (80013d8 <HAL_InitTick+0xcc>)
 800137a:	f004 f98b 	bl	8005694 <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001388:	2b00      	cmp	r3, #0
 800138a:	d11b      	bne.n	80013c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800138c:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <HAL_InitTick+0xcc>)
 800138e:	f004 f9e3 	bl	8005758 <HAL_TIM_Base_Start_IT>
 8001392:	4603      	mov	r3, r0
 8001394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001398:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800139c:	2b00      	cmp	r3, #0
 800139e:	d111      	bne.n	80013c4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013a0:	2019      	movs	r0, #25
 80013a2:	f000 f9eb 	bl	800177c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d808      	bhi.n	80013be <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	2019      	movs	r0, #25
 80013b2:	f000 f9c9 	bl	8001748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_InitTick+0xd4>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e002      	b.n	80013c4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3730      	adds	r7, #48	@ 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	431bde83 	.word	0x431bde83
 80013d8:	20000364 	.word	0x20000364
 80013dc:	40012c00 	.word	0x40012c00
 80013e0:	20000004 	.word	0x20000004

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <NMI_Handler+0x4>

080013ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <MemManage_Handler+0x4>

080013fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <UsageFault_Handler+0x4>

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <USB_LP_IRQHandler+0x10>)
 8001422:	f001 fcd6 	bl	8002dd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20007024 	.word	0x20007024

08001430 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001436:	f004 f9ff 	bl	8005838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000364 	.word	0x20000364

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f00c f93a 	bl	800d6ec <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2001c000 	.word	0x2001c000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200003b0 	.word	0x200003b0
 80014ac:	20007668 	.word	0x20007668

080014b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d4:	480d      	ldr	r0, [pc, #52]	@ (800150c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff ffea 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f00c f8f9 	bl	800d6f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001506:	f7ff fae5 	bl	8000ad4 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   r0, =_estack
 800150c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001518:	0800e3a0 	.word	0x0800e3a0
  ldr r2, =_sbss
 800151c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001520:	20007668 	.word	0x20007668

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>

08001526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f8fe 	bl	8001732 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	200f      	movs	r0, #15
 8001538:	f7ff fee8 	bl	800130c <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e001      	b.n	800154c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001548:	f7ff fdaa 	bl	80010a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154c:	79fb      	ldrb	r3, [r7, #7]

}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_IncTick+0x1c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_IncTick+0x20>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	4a03      	ldr	r2, [pc, #12]	@ (8001574 <HAL_IncTick+0x1c>)
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	200003b4 	.word	0x200003b4
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200003b4 	.word	0x200003b4

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d004      	beq.n	80015b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_Delay+0x40>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b8:	bf00      	nop
 80015ba:	f7ff ffdf 	bl	800157c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d8f7      	bhi.n	80015ba <HAL_Delay+0x26>
  {
  }
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000008 	.word	0x20000008

080015d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	@ (800161c <__NVIC_SetPriorityGrouping+0x44>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <__NVIC_GetPriorityGrouping+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	f003 0307 	and.w	r3, r3, #7
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4907      	ldr	r1, [pc, #28]	@ (8001674 <__NVIC_EnableIRQ+0x38>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2001      	movs	r0, #1
 800165e:	fa00 f202 	lsl.w	r2, r0, r2
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	@ 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ff4c 	bl	80015d8 <__NVIC_SetPriorityGrouping>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001756:	f7ff ff63 	bl	8001620 <__NVIC_GetPriorityGrouping>
 800175a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	6978      	ldr	r0, [r7, #20]
 8001762:	f7ff ffb3 	bl	80016cc <NVIC_EncodePriority>
 8001766:	4602      	mov	r2, r0
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff82 	bl	8001678 <__NVIC_SetPriority>
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff56 	bl	800163c <__NVIC_EnableIRQ>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e147      	b.n	8001a3a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fc98 	bl	80010f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d4:	f7ff fed2 	bl	800157c <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017da:	e012      	b.n	8001802 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017dc:	f7ff fece 	bl	800157c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b0a      	cmp	r3, #10
 80017e8:	d90b      	bls.n	8001802 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2203      	movs	r2, #3
 80017fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e11b      	b.n	8001a3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b08      	cmp	r3, #8
 800180e:	d0e5      	beq.n	80017dc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001820:	f7ff feac 	bl	800157c <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001826:	e012      	b.n	800184e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001828:	f7ff fea8 	bl	800157c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b0a      	cmp	r3, #10
 8001834:	d90b      	bls.n	800184e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0f5      	b.n	8001a3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0e5      	beq.n	8001828 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0202 	orr.w	r2, r2, #2
 800186a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a74      	ldr	r2, [pc, #464]	@ (8001a44 <HAL_FDCAN_Init+0x2ac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d103      	bne.n	800187e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001876:	4a74      	ldr	r2, [pc, #464]	@ (8001a48 <HAL_FDCAN_Init+0x2b0>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7c1b      	ldrb	r3, [r3, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001894:	619a      	str	r2, [r3, #24]
 8001896:	e007      	b.n	80018a8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699a      	ldr	r2, [r3, #24]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7c5b      	ldrb	r3, [r3, #17]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d108      	bne.n	80018c2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018be:	619a      	str	r2, [r3, #24]
 80018c0:	e007      	b.n	80018d2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7c9b      	ldrb	r3, [r3, #18]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018e8:	619a      	str	r2, [r3, #24]
 80018ea:	e007      	b.n	80018fc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018fa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001920:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0210 	bic.w	r2, r2, #16
 8001930:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0204 	orr.w	r2, r2, #4
 8001948:	619a      	str	r2, [r3, #24]
 800194a:	e02c      	b.n	80019a6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d028      	beq.n	80019a6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d01c      	beq.n	8001996 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699a      	ldr	r2, [r3, #24]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800196a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0210 	orr.w	r2, r2, #16
 800197a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d110      	bne.n	80019a6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0220 	orr.w	r2, r2, #32
 8001992:	619a      	str	r2, [r3, #24]
 8001994:	e007      	b.n	80019a6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0220 	orr.w	r2, r2, #32
 80019a4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019b6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019be:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019ce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019d0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019da:	d115      	bne.n	8001a08 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	3b01      	subs	r3, #1
 80019e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	3b01      	subs	r3, #1
 80019f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019f4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a04:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a06:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f8c8 	bl	8001bb4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40006400 	.word	0x40006400
 8001a48:	40006500 	.word	0x40006500

08001a4c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a5c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <HAL_FDCAN_ConfigFilter+0x1e>
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d13d      	bne.n	8001ae6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d119      	bne.n	8001aa6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a7e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001a86:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e01d      	b.n	8001ae2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	075a      	lsls	r2, r3, #29
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	079a      	lsls	r2, r3, #30
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e006      	b.n	8001af4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d116      	bne.n	8001b48 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b22:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	011a      	lsls	r2, r3, #4
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	431a      	orrs	r2, r3
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e006      	b.n	8001b56 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4c:	f043 0204 	orr.w	r2, r3, #4
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d110      	bne.n	8001b98 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e006      	b.n	8001ba6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9c:	f043 0204 	orr.w	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001bbe:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c74 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d103      	bne.n	8001bd2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bd0:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001be0:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c06:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0e:	061a      	lsls	r2, r3, #24
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e005      	b.n	8001c54 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3f3      	bcc.n	8001c48 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	4000a400 	.word	0x4000a400
 8001c74:	40006800 	.word	0x40006800

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c86:	e15a      	b.n	8001f3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 814c 	beq.w	8001f38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d005      	beq.n	8001cb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d130      	bne.n	8001d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 0201 	and.w	r2, r3, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d017      	beq.n	8001d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d123      	bne.n	8001daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	6939      	ldr	r1, [r7, #16]
 8001da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0203 	and.w	r2, r3, #3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80a6 	beq.w	8001f38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dec:	4b5b      	ldr	r3, [pc, #364]	@ (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df8:	4b58      	ldr	r3, [pc, #352]	@ (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e04:	4a56      	ldr	r2, [pc, #344]	@ (8001f60 <HAL_GPIO_Init+0x2e8>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e2e:	d01f      	beq.n	8001e70 <HAL_GPIO_Init+0x1f8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a4c      	ldr	r2, [pc, #304]	@ (8001f64 <HAL_GPIO_Init+0x2ec>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d019      	beq.n	8001e6c <HAL_GPIO_Init+0x1f4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_GPIO_Init+0x1f0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a4a      	ldr	r2, [pc, #296]	@ (8001f6c <HAL_GPIO_Init+0x2f4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1ec>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a49      	ldr	r2, [pc, #292]	@ (8001f70 <HAL_GPIO_Init+0x2f8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1e8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a48      	ldr	r2, [pc, #288]	@ (8001f74 <HAL_GPIO_Init+0x2fc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1e4>
 8001e58:	2305      	movs	r3, #5
 8001e5a:	e00a      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e5c:	2306      	movs	r3, #6
 8001e5e:	e008      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e006      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e004      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e002      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e70:	2300      	movs	r3, #0
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	f002 0203 	and.w	r2, r2, #3
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4093      	lsls	r3, r2
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e82:	4937      	ldr	r1, [pc, #220]	@ (8001f60 <HAL_GPIO_Init+0x2e8>)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e90:	4b39      	ldr	r3, [pc, #228]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eb4:	4a30      	ldr	r2, [pc, #192]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eba:	4b2f      	ldr	r3, [pc, #188]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ede:	4a26      	ldr	r2, [pc, #152]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ee4:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f08:	4a1b      	ldr	r2, [pc, #108]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f32:	4a11      	ldr	r2, [pc, #68]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f47f ae9d 	bne.w	8001c88 <HAL_GPIO_Init+0x10>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	48000400 	.word	0x48000400
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	48000c00 	.word	0x48000c00
 8001f70:	48001000 	.word	0x48001000
 8001f74:	48001400 	.word	0x48001400
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08d      	b.n	80020da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff f8ea 	bl	80011ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800200c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e006      	b.n	8002034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d108      	bne.n	800204e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	e007      	b.n	800205e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800206c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002070:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69d9      	ldr	r1, [r3, #28]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	f040 80f9 	bne.w	80022fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_I2C_Mem_Write+0x34>
 8002112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0ed      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Mem_Write+0x4e>
 800212e:	2302      	movs	r3, #2
 8002130:	e0e6      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800213a:	f7ff fa1f 	bl	800157c <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2319      	movs	r3, #25
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fac3 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d1      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2221      	movs	r2, #33	@ 0x21
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800217c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002184:	88f8      	ldrh	r0, [r7, #6]
 8002186:	893a      	ldrh	r2, [r7, #8]
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4603      	mov	r3, r0
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f9d3 	bl	8002540 <I2C_RequestMemoryWrite>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0a9      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2bff      	cmp	r3, #255	@ 0xff
 80021b4:	d90e      	bls.n	80021d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	22ff      	movs	r2, #255	@ 0xff
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	8979      	ldrh	r1, [r7, #10]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fc47 	bl	8002a60 <I2C_TransferConfig>
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fc36 	bl	8002a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fac6 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e07b      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d034      	beq.n	80022ac <HAL_I2C_Mem_Write+0x1c8>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d130      	bne.n	80022ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	2200      	movs	r2, #0
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa3f 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e04d      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d90e      	bls.n	800228c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	22ff      	movs	r2, #255	@ 0xff
 8002272:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002278:	b2da      	uxtb	r2, r3
 800227a:	8979      	ldrh	r1, [r7, #10]
 800227c:	2300      	movs	r3, #0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fbeb 	bl	8002a60 <I2C_TransferConfig>
 800228a:	e00f      	b.n	80022ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229a:	b2da      	uxtb	r2, r3
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	2300      	movs	r3, #0
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fbda 	bl	8002a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d19e      	bne.n	80021f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 faac 	bl	8002818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e01a      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2220      	movs	r2, #32
 80022d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_I2C_Mem_Write+0x224>)
 80022de:	400b      	ands	r3, r1
 80022e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
  }
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	fe00e800 	.word	0xfe00e800

0800230c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	817b      	strh	r3, [r7, #10]
 800231e:	460b      	mov	r3, r1
 8002320:	813b      	strh	r3, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 80fd 	bne.w	800252e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_I2C_Mem_Read+0x34>
 800233a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002346:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0f1      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_I2C_Mem_Read+0x4e>
 8002356:	2302      	movs	r3, #2
 8002358:	e0ea      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002362:	f7ff f90b 	bl	800157c <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2319      	movs	r3, #25
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f9af 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0d5      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2222      	movs	r2, #34	@ 0x22
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2240      	movs	r2, #64	@ 0x40
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ac:	88f8      	ldrh	r0, [r7, #6]
 80023ae:	893a      	ldrh	r2, [r7, #8]
 80023b0:	8979      	ldrh	r1, [r7, #10]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4603      	mov	r3, r0
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f913 	bl	80025e8 <I2C_RequestMemoryRead>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0ad      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2bff      	cmp	r3, #255	@ 0xff
 80023dc:	d90e      	bls.n	80023fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	22ff      	movs	r2, #255	@ 0xff
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <HAL_I2C_Mem_Read+0x22c>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fb33 	bl	8002a60 <I2C_TransferConfig>
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_I2C_Mem_Read+0x22c>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fb22 	bl	8002a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002422:	2200      	movs	r2, #0
 8002424:	2104      	movs	r1, #4
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f956 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07c      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d034      	beq.n	80024dc <HAL_I2C_Mem_Read+0x1d0>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d130      	bne.n	80024dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f927 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e04d      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	2bff      	cmp	r3, #255	@ 0xff
 800249c:	d90e      	bls.n	80024bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	22ff      	movs	r2, #255	@ 0xff
 80024a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fad3 	bl	8002a60 <I2C_TransferConfig>
 80024ba:	e00f      	b.n	80024dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	8979      	ldrh	r1, [r7, #10]
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fac2 	bl	8002a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d19a      	bne.n	800241c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f994 	bl	8002818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e01a      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2220      	movs	r2, #32
 8002500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_I2C_Mem_Read+0x230>)
 800250e:	400b      	ands	r3, r1
 8002510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	80002400 	.word	0x80002400
 800253c:	fe00e800 	.word	0xfe00e800

08002540 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	817b      	strh	r3, [r7, #10]
 8002552:	460b      	mov	r3, r1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	8979      	ldrh	r1, [r7, #10]
 8002560:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <I2C_RequestMemoryWrite+0xa4>)
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa79 	bl	8002a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	69b9      	ldr	r1, [r7, #24]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f909 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e02c      	b.n	80025dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28
 8002592:	e015      	b.n	80025c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002594:	893b      	ldrh	r3, [r7, #8]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f8ef 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e012      	b.n	80025dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b6:	893b      	ldrh	r3, [r7, #8]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2200      	movs	r2, #0
 80025c8:	2180      	movs	r1, #128	@ 0x80
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f884 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	80002000 	.word	0x80002000

080025e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	8979      	ldrh	r1, [r7, #10]
 8002608:	4b20      	ldr	r3, [pc, #128]	@ (800268c <I2C_RequestMemoryRead+0xa4>)
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2300      	movs	r3, #0
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa26 	bl	8002a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f8b6 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e02c      	b.n	8002682 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28
 8002638:	e015      	b.n	8002666 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800263a:	893b      	ldrh	r3, [r7, #8]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b29b      	uxth	r3, r3
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f89c 	bl	800278a <I2C_WaitOnTXISFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e012      	b.n	8002682 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800265c:	893b      	ldrh	r3, [r7, #8]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f831 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	80002000 	.word	0x80002000

08002690 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d103      	bne.n	80026ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d007      	beq.n	80026cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	619a      	str	r2, [r3, #24]
  }
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e8:	e03b      	b.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f8d6 	bl	80028a0 <I2C_IsErrorOccurred>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e041      	b.n	8002782 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d02d      	beq.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7fe ff39 	bl	800157c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d122      	bne.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	429a      	cmp	r2, r3
 8002738:	d113      	bne.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f043 0220 	orr.w	r2, r3, #32
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4013      	ands	r3, r2
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	429a      	cmp	r2, r3
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	429a      	cmp	r2, r3
 800277e:	d0b4      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002796:	e033      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f87f 	bl	80028a0 <I2C_IsErrorOccurred>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e031      	b.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d025      	beq.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b4:	f7fe fee2 	bl	800157c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d302      	bcc.n	80027ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11a      	bne.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d013      	beq.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d1c4      	bne.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002824:	e02f      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f838 	bl	80028a0 <I2C_IsErrorOccurred>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e02d      	b.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7fe fe9f 	bl	800157c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11a      	bne.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b20      	cmp	r3, #32
 800285c:	d013      	beq.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b20      	cmp	r3, #32
 8002892:	d1c8      	bne.n	8002826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d068      	beq.n	800299e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2210      	movs	r2, #16
 80028d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028d4:	e049      	b.n	800296a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d045      	beq.n	800296a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7fe fe4d 	bl	800157c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <I2C_IsErrorOccurred+0x54>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d13a      	bne.n	800296a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002906:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002916:	d121      	bne.n	800295c <I2C_IsErrorOccurred+0xbc>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800291e:	d01d      	beq.n	800295c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	2b20      	cmp	r3, #32
 8002924:	d01a      	beq.n	800295c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002934:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002936:	f7fe fe21 	bl	800157c <HAL_GetTick>
 800293a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293c:	e00e      	b.n	800295c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800293e:	f7fe fe1d 	bl	800157c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b19      	cmp	r3, #25
 800294a:	d907      	bls.n	800295c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	f043 0320 	orr.w	r3, r3, #32
 8002952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800295a:	e006      	b.n	800296a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d1e9      	bne.n	800293e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b20      	cmp	r3, #32
 8002976:	d003      	beq.n	8002980 <I2C_IsErrorOccurred+0xe0>
 8002978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0aa      	beq.n	80028d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2220      	movs	r2, #32
 800298e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01c      	beq.n	8002a4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff fe3b 	bl	8002690 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <I2C_IsErrorOccurred+0x1bc>)
 8002a26:	400b      	ands	r3, r1
 8002a28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3728      	adds	r7, #40	@ 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	fe00e800 	.word	0xfe00e800

08002a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a78:	7a7b      	ldrb	r3, [r7, #9]
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	0d5b      	lsrs	r3, r3, #21
 8002a9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <I2C_TransferConfig+0x60>)
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	ea02 0103 	and.w	r1, r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	03ff63ff 	.word	0x03ff63ff

08002ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d138      	bne.n	8002b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e032      	b.n	8002b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2224      	movs	r2, #36	@ 0x24
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d139      	bne.n	8002be4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e033      	b.n	8002be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2224      	movs	r2, #36	@ 0x24
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0c0      	b.n	8002d86 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f00a f9bb 	bl	800cf94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fef1 	bl	8006a12 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e03e      	b.n	8002cb4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	3311      	adds	r3, #17
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	3310      	adds	r3, #16
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3313      	adds	r3, #19
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	3320      	adds	r3, #32
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3324      	adds	r3, #36	@ 0x24
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	791b      	ldrb	r3, [r3, #4]
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3bb      	bcc.n	8002c36 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
 8002cc2:	e044      	b.n	8002d4e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	791b      	ldrb	r3, [r3, #4]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3b5      	bcc.n	8002cc4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d64:	f003 fe70 	bl	8006a48 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7a9b      	ldrb	r3, [r3, #10]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f001 fc0e 	bl	80045a0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_PCD_Start+0x16>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e012      	b.n	8002dca <HAL_PCD_Start+0x3c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fe17 	bl	80069e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f005 fbf4 	bl	80085a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f005 fbf9 	bl	80085d6 <USB_ReadInterrupts>
 8002de4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fb06 	bl	8003402 <PCD_EP_ISR_Handler>

    return;
 8002df6:	e110      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d013      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e14:	b292      	uxth	r2, r2
 8002e16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f00a f94b 	bl	800d0b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e20:	2100      	movs	r1, #0
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8fc 	bl	8003020 <HAL_PCD_SetAddress>

    return;
 8002e28:	e0f7      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00c      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e46:	b292      	uxth	r2, r2
 8002e48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e4c:	e0e5      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00c      	beq.n	8002e72 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e70:	e0d3      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d034      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0204 	bic.w	r2, r2, #4
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0208 	bic.w	r2, r2, #8
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f00a faeb 	bl	800d49c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f00a f92e 	bl	800d128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ee4:	e099      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d027      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0208 	orr.w	r2, r2, #8
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0204 	orr.w	r2, r2, #4
 8002f32:	b292      	uxth	r2, r2
 8002f34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f00a f8db 	bl	800d0f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f3e:	e06c      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d040      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d12b      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0204 	orr.w	r2, r2, #4
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0208 	orr.w	r2, r2, #8
 8002f96:	b292      	uxth	r2, r2
 8002f98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002fba:	2101      	movs	r1, #1
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f00a fa6d 	bl	800d49c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002fc2:	e02a      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f00a f895 	bl	800d0f4 <HAL_PCD_SuspendCallback>
    return;
 8002fca:	e026      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00f      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f00a f853 	bl	800d09a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ff4:	e011      	b.n	800301a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003012:	b292      	uxth	r2, r2
 8003014:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003018:	bf00      	nop
  }
}
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_SetAddress+0x1a>
 8003036:	2302      	movs	r3, #2
 8003038:	e012      	b.n	8003060 <HAL_PCD_SetAddress+0x40>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f005 fa95 	bl	8008580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	70fb      	strb	r3, [r7, #3]
 800307a:	460b      	mov	r3, r1
 800307c:	803b      	strh	r3, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da0e      	bge.n	80030ac <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 0207 	and.w	r2, r3, #7
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	3310      	adds	r3, #16
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	705a      	strb	r2, [r3, #1]
 80030aa:	e00e      	b.n	80030ca <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 0207 	and.w	r2, r3, #7
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030d6:	883b      	ldrh	r3, [r7, #0]
 80030d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	78ba      	ldrb	r2, [r7, #2]
 80030e4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030e6:	78bb      	ldrb	r3, [r7, #2]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d102      	bne.n	80030f2 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_EP_Open+0x98>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e00e      	b.n	800311e <HAL_PCD_EP_Open+0xb6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fcb8 	bl	8006a84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800311c:	7afb      	ldrb	r3, [r7, #11]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	da0e      	bge.n	8003158 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 0207 	and.w	r2, r3, #7
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	3310      	adds	r3, #16
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	705a      	strb	r2, [r3, #1]
 8003156:	e00e      	b.n	8003176 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_PCD_EP_Close+0x6a>
 800318c:	2302      	movs	r3, #2
 800318e:	e00e      	b.n	80031ae <HAL_PCD_EP_Close+0x88>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 f958 	bl	8007454 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	460b      	mov	r3, r1
 80031c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c6:	7afb      	ldrb	r3, [r7, #11]
 80031c8:	f003 0207 	and.w	r2, r3, #7
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2200      	movs	r2, #0
 80031ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6979      	ldr	r1, [r7, #20]
 8003208:	4618      	mov	r0, r3
 800320a:	f004 fb10 	bl	800782e <USB_EPStartXfer>

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 0207 	and.w	r2, r3, #7
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	460b      	mov	r3, r1
 8003256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	f003 0207 	and.w	r2, r3, #7
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	3310      	adds	r3, #16
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2201      	movs	r2, #1
 8003292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	b2da      	uxtb	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6979      	ldr	r1, [r7, #20]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fac1 	bl	800782e <USB_EPStartXfer>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	7912      	ldrb	r2, [r2, #4]
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e03e      	b.n	8003352 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0e      	bge.n	80032fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 0207 	and.w	r2, r3, #7
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	3310      	adds	r3, #16
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	705a      	strb	r2, [r3, #1]
 80032f8:	e00c      	b.n	8003314 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_PCD_EP_SetStall+0x7e>
 8003330:	2302      	movs	r3, #2
 8003332:	e00e      	b.n	8003352 <HAL_PCD_EP_SetStall+0x9c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	4618      	mov	r0, r3
 8003344:	f005 f822 	bl	800838c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	7912      	ldrb	r2, [r2, #4]
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e040      	b.n	80033fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	da0e      	bge.n	800339e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 0207 	and.w	r2, r3, #7
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	3310      	adds	r3, #16
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	705a      	strb	r2, [r3, #1]
 800339c:	e00e      	b.n	80033bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 0207 	and.w	r2, r3, #7
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_PCD_EP_ClrStall+0x82>
 80033d8:	2302      	movs	r3, #2
 80033da:	e00e      	b.n	80033fa <HAL_PCD_EP_ClrStall+0xa0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f005 f81f 	bl	800842e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b092      	sub	sp, #72	@ 0x48
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800340a:	e333      	b.n	8003a74 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003414:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003416:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003422:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 8108 	bne.w	800363c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800342c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d14c      	bne.n	80034d0 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	813b      	strh	r3, [r7, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	893b      	ldrh	r3, [r7, #8]
 800344e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003456:	b29b      	uxth	r3, r3
 8003458:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3310      	adds	r3, #16
 800345e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	4413      	add	r3, r2
 800347a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003486:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	441a      	add	r2, r3
 8003492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003494:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003496:	2100      	movs	r1, #0
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f009 fde4 	bl	800d066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7b1b      	ldrb	r3, [r3, #12]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 82e5 	beq.w	8003a74 <PCD_EP_ISR_Handler+0x672>
 80034aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 82e0 	bne.w	8003a74 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7b1b      	ldrb	r3, [r3, #12]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	731a      	strb	r2, [r3, #12]
 80034ce:	e2d1      	b.n	8003a74 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034d6:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80034e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d032      	beq.n	8003550 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4413      	add	r3, r2
 8003504:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800350e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003510:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800351c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003522:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003524:	b29b      	uxth	r3, r3
 8003526:	f005 f8a9 	bl	800867c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003536:	4013      	ands	r3, r2
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	897a      	ldrh	r2, [r7, #10]
 8003540:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003544:	b292      	uxth	r2, r2
 8003546:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f009 fd5f 	bl	800d00c <HAL_PCD_SetupStageCallback>
 800354e:	e291      	b.n	8003a74 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003550:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003554:	2b00      	cmp	r3, #0
 8003556:	f280 828d 	bge.w	8003a74 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29a      	uxth	r2, r3
 8003562:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003566:	4013      	ands	r3, r2
 8003568:	81fb      	strh	r3, [r7, #14]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	89fa      	ldrh	r2, [r7, #14]
 8003570:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003574:	b292      	uxth	r2, r2
 8003576:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003580:	b29b      	uxth	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	4413      	add	r3, r2
 8003592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800359c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800359e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d019      	beq.n	80035dc <PCD_EP_ISR_Handler+0x1da>
 80035a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d015      	beq.n	80035dc <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b6:	6959      	ldr	r1, [r3, #20]
 80035b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f005 f85b 	bl	800867c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	441a      	add	r2, r3
 80035d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035d4:	2100      	movs	r1, #0
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f009 fd2a 	bl	800d030 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80035e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8242 	bne.w	8003a74 <PCD_EP_ISR_Handler+0x672>
 80035f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80035f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035fa:	f000 823b 	beq.w	8003a74 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	81bb      	strh	r3, [r7, #12]
 8003610:	89bb      	ldrh	r3, [r7, #12]
 8003612:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003616:	81bb      	strh	r3, [r7, #12]
 8003618:	89bb      	ldrh	r3, [r7, #12]
 800361a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800361e:	81bb      	strh	r3, [r7, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	89bb      	ldrh	r3, [r7, #12]
 8003626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800362a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800362e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003636:	b29b      	uxth	r3, r3
 8003638:	8013      	strh	r3, [r2, #0]
 800363a:	e21b      	b.n	8003a74 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800364e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003652:	2b00      	cmp	r3, #0
 8003654:	f280 80f1 	bge.w	800383a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29a      	uxth	r2, r3
 800366a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800366e:	4013      	ands	r3, r2
 8003670:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003682:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003686:	b292      	uxth	r2, r2
 8003688:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800368a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a2:	7b1b      	ldrb	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d123      	bne.n	80036f0 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80036d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 808b 	beq.w	80037f0 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e0:	6959      	ldr	r1, [r3, #20]
 80036e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e4:	88da      	ldrh	r2, [r3, #6]
 80036e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036ea:	f004 ffc7 	bl	800867c <USB_ReadPMA>
 80036ee:	e07f      	b.n	80037f0 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f2:	78db      	ldrb	r3, [r3, #3]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d109      	bne.n	800370c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036fa:	461a      	mov	r2, r3
 80036fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9c6 	bl	8003a90 <HAL_PCD_EP_DB_Receive>
 8003704:	4603      	mov	r3, r0
 8003706:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800370a:	e071      	b.n	80037f0 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003726:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800373c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003744:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003748:	b29b      	uxth	r3, r3
 800374a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d022      	beq.n	80037ac <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800376e:	b29b      	uxth	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	4413      	add	r3, r2
 8003780:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800378e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003792:	2b00      	cmp	r3, #0
 8003794:	d02c      	beq.n	80037f0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379c:	6959      	ldr	r1, [r3, #20]
 800379e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a0:	891a      	ldrh	r2, [r3, #8]
 80037a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037a6:	f004 ff69 	bl	800867c <USB_ReadPMA>
 80037aa:	e021      	b.n	80037f0 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80037d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e2:	6959      	ldr	r1, [r3, #20]
 80037e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e6:	895a      	ldrh	r2, [r3, #10]
 80037e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037ec:	f004 ff46 	bl	800867c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037f8:	441a      	add	r2, r3
 80037fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003806:	441a      	add	r2, r3
 8003808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800380c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <PCD_EP_ISR_Handler+0x41e>
 8003814:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	429a      	cmp	r2, r3
 800381e:	d206      	bcs.n	800382e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f009 fc02 	bl	800d030 <HAL_PCD_DataOutStageCallback>
 800382c:	e005      	b.n	800383a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003834:	4618      	mov	r0, r3
 8003836:	f003 fffa 	bl	800782e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800383a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800383c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8117 	beq.w	8003a74 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003846:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	3310      	adds	r3, #16
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003874:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	441a      	add	r2, r3
 8003884:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388e:	b29b      	uxth	r3, r3
 8003890:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003894:	78db      	ldrb	r3, [r3, #3]
 8003896:	2b01      	cmp	r3, #1
 8003898:	f040 80a1 	bne.w	80039de <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800389c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80038a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a4:	7b1b      	ldrb	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8092 	beq.w	80039d0 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d046      	beq.n	8003944 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d126      	bne.n	800390c <PCD_EP_ISR_Handler+0x50a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	4413      	add	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	00da      	lsls	r2, r3, #3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4413      	add	r3, r2
 80038e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003904:	b29a      	uxth	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	801a      	strh	r2, [r3, #0]
 800390a:	e061      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5ce>
 800390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d15d      	bne.n	80039d0 <PCD_EP_ISR_Handler+0x5ce>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003922:	b29b      	uxth	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00da      	lsls	r2, r3, #3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2200      	movs	r2, #0
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e045      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800394a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d126      	bne.n	80039a0 <PCD_EP_ISR_Handler+0x59e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	4413      	add	r3, r2
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00da      	lsls	r2, r3, #3
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	4413      	add	r3, r2
 8003974:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003984:	b29a      	uxth	r2, r3
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003998:	b29a      	uxth	r2, r3
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e017      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5ce>
 80039a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d113      	bne.n	80039d0 <PCD_EP_ISR_Handler+0x5ce>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b6:	4413      	add	r3, r2
 80039b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00da      	lsls	r2, r3, #3
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	4413      	add	r3, r2
 80039c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	2200      	movs	r2, #0
 80039ce:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f009 fb45 	bl	800d066 <HAL_PCD_DataInStageCallback>
 80039dc:	e04a      	b.n	8003a74 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80039de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d13f      	bne.n	8003a68 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d906      	bls.n	8003a26 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a22:	619a      	str	r2, [r3, #24]
 8003a24:	e002      	b.n	8003a2c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f009 fb13 	bl	800d066 <HAL_PCD_DataInStageCallback>
 8003a40:	e018      	b.n	8003a74 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a48:	441a      	add	r2, r3
 8003a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a54:	441a      	add	r2, r3
 8003a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a58:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a60:	4618      	mov	r0, r3
 8003a62:	f003 fee4 	bl	800782e <USB_EPStartXfer>
 8003a66:	e005      	b.n	8003a74 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f917 	bl	8003ca2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f6ff acc3 	blt.w	800340c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3748      	adds	r7, #72	@ 0x48
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d07c      	beq.n	8003ba2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003acc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	8b7b      	ldrh	r3, [r7, #26]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d306      	bcc.n	8003ae6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	8b7b      	ldrh	r3, [r7, #26]
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	619a      	str	r2, [r3, #24]
 8003ae4:	e002      	b.n	8003aec <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d123      	bne.n	8003b3c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0e:	833b      	strh	r3, [r7, #24]
 8003b10:	8b3b      	ldrh	r3, [r7, #24]
 8003b12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b16:	833b      	strh	r3, [r7, #24]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	441a      	add	r2, r3
 8003b26:	8b3b      	ldrh	r3, [r7, #24]
 8003b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01f      	beq.n	8003b86 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b60:	82fb      	strh	r3, [r7, #22]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	441a      	add	r2, r3
 8003b70:	8afb      	ldrh	r3, [r7, #22]
 8003b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b86:	8b7b      	ldrh	r3, [r7, #26]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8085 	beq.w	8003c98 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6959      	ldr	r1, [r3, #20]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	891a      	ldrh	r2, [r3, #8]
 8003b9a:	8b7b      	ldrh	r3, [r7, #26]
 8003b9c:	f004 fd6e 	bl	800867c <USB_ReadPMA>
 8003ba0:	e07a      	b.n	8003c98 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	8b7b      	ldrh	r3, [r7, #26]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d306      	bcc.n	8003be0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	1ad2      	subs	r2, r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	619a      	str	r2, [r3, #24]
 8003bde:	e002      	b.n	8003be6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d123      	bne.n	8003c36 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c08:	83fb      	strh	r3, [r7, #30]
 8003c0a:	8bfb      	ldrh	r3, [r7, #30]
 8003c0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c10:	83fb      	strh	r3, [r7, #30]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	8bfb      	ldrh	r3, [r7, #30]
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11f      	bne.n	8003c80 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5a:	83bb      	strh	r3, [r7, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	8bbb      	ldrh	r3, [r7, #28]
 8003c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c80:	8b7b      	ldrh	r3, [r7, #26]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6959      	ldr	r1, [r3, #20]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	895a      	ldrh	r2, [r3, #10]
 8003c92:	8b7b      	ldrh	r3, [r7, #26]
 8003c94:	f004 fcf2 	bl	800867c <USB_ReadPMA>
    }
  }

  return count;
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b0a6      	sub	sp, #152	@ 0x98
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 81f7 	beq.w	80040aa <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d907      	bls.n	8003d00 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	619a      	str	r2, [r3, #24]
 8003cfe:	e002      	b.n	8003d06 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2200      	movs	r2, #0
 8003d04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 80e1 	bne.w	8003ed2 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d126      	bne.n	8003d66 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	4413      	add	r3, r2
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	00da      	lsls	r2, r3, #3
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	4413      	add	r3, r2
 8003d3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d62:	801a      	strh	r2, [r3, #0]
 8003d64:	e01a      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	785b      	ldrb	r3, [r3, #1]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d116      	bne.n	8003d9c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d82:	4413      	add	r3, r2
 8003d84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	00da      	lsls	r2, r3, #3
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	4413      	add	r3, r2
 8003d90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	2200      	movs	r2, #0
 8003d9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d126      	bne.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x156>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	00da      	lsls	r2, r3, #3
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	e017      	b.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x186>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d113      	bne.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x186>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	4413      	add	r3, r2
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	00da      	lsls	r2, r3, #3
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	2200      	movs	r2, #0
 8003e26:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	78db      	ldrb	r3, [r3, #3]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d123      	bne.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e4a:	837b      	strh	r3, [r7, #26]
 8003e4c:	8b7b      	ldrh	r3, [r7, #26]
 8003e4e:	f083 0320 	eor.w	r3, r3, #32
 8003e52:	837b      	strh	r3, [r7, #26]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	441a      	add	r2, r3
 8003e62:	8b7b      	ldrh	r3, [r7, #26]
 8003e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f009 f8f1 	bl	800d066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01f      	beq.n	8003ece <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea8:	833b      	strh	r3, [r7, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	441a      	add	r2, r3
 8003eb8:	8b3b      	ldrh	r3, [r7, #24]
 8003eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ec2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e31f      	b.n	8004512 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d021      	beq.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	f040 82ca 	bne.w	80044c0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f34:	441a      	add	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f42:	441a      	add	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d309      	bcc.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f60:	1ad2      	subs	r2, r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	621a      	str	r2, [r3, #32]
 8003f66:	e015      	b.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003f70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f74:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f7e:	e009      	b.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d15f      	bne.n	800405c <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fb0:	4413      	add	r3, r2
 8003fb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	00da      	lsls	r2, r3, #3
 8003fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e051      	b.n	8004094 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ff4:	d816      	bhi.n	8004024 <HAL_PCD_EP_DB_Transmit+0x382>
 8003ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004008:	3301      	adds	r3, #1
 800400a:	653b      	str	r3, [r7, #80]	@ 0x50
 800400c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29a      	uxth	r2, r3
 8004012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	b29b      	uxth	r3, r3
 800401a:	4313      	orrs	r3, r2
 800401c:	b29a      	uxth	r2, r3
 800401e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	e037      	b.n	8004094 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	653b      	str	r3, [r7, #80]	@ 0x50
 800402a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <HAL_PCD_EP_DB_Transmit+0x398>
 8004034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004036:	3b01      	subs	r3, #1
 8004038:	653b      	str	r3, [r7, #80]	@ 0x50
 800403a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29a      	uxth	r2, r3
 8004040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	029b      	lsls	r3, r3, #10
 8004046:	b29b      	uxth	r3, r3
 8004048:	4313      	orrs	r3, r2
 800404a:	b29b      	uxth	r3, r3
 800404c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004054:	b29a      	uxth	r2, r3
 8004056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	e01b      	b.n	8004094 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d117      	bne.n	8004094 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004078:	4413      	add	r3, r2
 800407a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	00da      	lsls	r2, r3, #3
 8004082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004084:	4413      	add	r3, r2
 8004086:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800408a:	647b      	str	r3, [r7, #68]	@ 0x44
 800408c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800408e:	b29a      	uxth	r2, r3
 8004090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004092:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6959      	ldr	r1, [r3, #20]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	891a      	ldrh	r2, [r3, #8]
 80040a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f004 faa7 	bl	80085f6 <USB_WritePMA>
 80040a8:	e20a      	b.n	80044c0 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	4413      	add	r3, r2
 80040c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ce:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80040da:	429a      	cmp	r2, r3
 80040dc:	d307      	bcc.n	80040ee <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	619a      	str	r2, [r3, #24]
 80040ec:	e002      	b.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 80f6 	bne.w	80042ea <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d126      	bne.n	8004154 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	677b      	str	r3, [r7, #116]	@ 0x74
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004114:	b29b      	uxth	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800411a:	4413      	add	r3, r2
 800411c:	677b      	str	r3, [r7, #116]	@ 0x74
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	00da      	lsls	r2, r3, #3
 8004124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004126:	4413      	add	r3, r2
 8004128:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800412c:	673b      	str	r3, [r7, #112]	@ 0x70
 800412e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004138:	b29a      	uxth	r2, r3
 800413a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414c:	b29a      	uxth	r2, r3
 800414e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	e01a      	b.n	800418a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d116      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x4e8>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004170:	4413      	add	r3, r2
 8004172:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	00da      	lsls	r2, r3, #3
 800417a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800417c:	4413      	add	r3, r2
 800417e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004182:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004186:	2200      	movs	r2, #0
 8004188:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	785b      	ldrb	r3, [r3, #1]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d12f      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0x558>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041b2:	4413      	add	r3, r2
 80041b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	00da      	lsls	r2, r3, #3
 80041be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c2:	4413      	add	r3, r2
 80041c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d8:	b29a      	uxth	r2, r3
 80041da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	e01c      	b.n	8004234 <HAL_PCD_EP_DB_Transmit+0x592>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d118      	bne.n	8004234 <HAL_PCD_EP_DB_Transmit+0x592>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004212:	4413      	add	r3, r2
 8004214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	00da      	lsls	r2, r3, #3
 800421e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004222:	4413      	add	r3, r2
 8004224:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800422c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004230:	2200      	movs	r2, #0
 8004232:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	78db      	ldrb	r3, [r3, #3]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d127      	bne.n	800428c <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004256:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800425a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800425e:	f083 0320 	eor.w	r3, r3, #32
 8004262:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800427c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004288:	b29b      	uxth	r3, r3
 800428a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f008 fee7 	bl	800d066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d121      	bne.n	80042e6 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042bc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e113      	b.n	8004512 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d121      	bne.n	8004338 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800430a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800432c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 80be 	bne.w	80044c0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800434c:	441a      	add	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800435a:	441a      	add	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d309      	bcc.n	8004380 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004378:	1ad2      	subs	r2, r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	621a      	str	r2, [r3, #32]
 800437e:	e015      	b.n	80043ac <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004388:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800438c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004396:	e009      	b.n	80043ac <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d15f      	bne.n	800447a <HAL_PCD_EP_DB_Transmit+0x7d8>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043ce:	4413      	add	r3, r2
 80043d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	00da      	lsls	r2, r3, #3
 80043d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043da:	4413      	add	r3, r2
 80043dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80043e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <HAL_PCD_EP_DB_Transmit+0x76c>
 80043f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004406:	b29a      	uxth	r2, r3
 8004408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	e04e      	b.n	80044ac <HAL_PCD_EP_DB_Transmit+0x80a>
 800440e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004410:	2b3e      	cmp	r3, #62	@ 0x3e
 8004412:	d816      	bhi.n	8004442 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	663b      	str	r3, [r7, #96]	@ 0x60
 800441a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_PCD_EP_DB_Transmit+0x788>
 8004424:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004426:	3301      	adds	r3, #1
 8004428:	663b      	str	r3, [r7, #96]	@ 0x60
 800442a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29a      	uxth	r2, r3
 8004430:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004432:	b29b      	uxth	r3, r3
 8004434:	029b      	lsls	r3, r3, #10
 8004436:	b29b      	uxth	r3, r3
 8004438:	4313      	orrs	r3, r2
 800443a:	b29a      	uxth	r2, r3
 800443c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e034      	b.n	80044ac <HAL_PCD_EP_DB_Transmit+0x80a>
 8004442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	663b      	str	r3, [r7, #96]	@ 0x60
 8004448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004452:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004454:	3b01      	subs	r3, #1
 8004456:	663b      	str	r3, [r7, #96]	@ 0x60
 8004458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29a      	uxth	r2, r3
 800445e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004460:	b29b      	uxth	r3, r3
 8004462:	029b      	lsls	r3, r3, #10
 8004464:	b29b      	uxth	r3, r3
 8004466:	4313      	orrs	r3, r2
 8004468:	b29b      	uxth	r3, r3
 800446a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004472:	b29a      	uxth	r2, r3
 8004474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	e018      	b.n	80044ac <HAL_PCD_EP_DB_Transmit+0x80a>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d114      	bne.n	80044ac <HAL_PCD_EP_DB_Transmit+0x80a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800448a:	b29b      	uxth	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004490:	4413      	add	r3, r2
 8004492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	00da      	lsls	r2, r3, #3
 800449a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800449c:	4413      	add	r3, r2
 800449e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	6959      	ldr	r1, [r3, #20]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	895a      	ldrh	r2, [r3, #10]
 80044b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f004 f89b 	bl	80085f6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044da:	82fb      	strh	r3, [r7, #22]
 80044dc:	8afb      	ldrh	r3, [r7, #22]
 80044de:	f083 0310 	eor.w	r3, r3, #16
 80044e2:	82fb      	strh	r3, [r7, #22]
 80044e4:	8afb      	ldrh	r3, [r7, #22]
 80044e6:	f083 0320 	eor.w	r3, r3, #32
 80044ea:	82fb      	strh	r3, [r7, #22]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	8afb      	ldrh	r3, [r7, #22]
 80044fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800450c:	b29b      	uxth	r3, r3
 800450e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3798      	adds	r7, #152	@ 0x98
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	817b      	strh	r3, [r7, #10]
 8004528:	4613      	mov	r3, r2
 800452a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800452c:	897b      	ldrh	r3, [r7, #10]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004538:	897b      	ldrh	r3, [r7, #10]
 800453a:	f003 0207 	and.w	r2, r3, #7
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	3310      	adds	r3, #16
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e009      	b.n	8004564 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004550:	897a      	ldrh	r2, [r7, #10]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004564:	893b      	ldrh	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d107      	bne.n	800457a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	b29a      	uxth	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	80da      	strh	r2, [r3, #6]
 8004578:	e00b      	b.n	8004592 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2201      	movs	r2, #1
 800457e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	b29a      	uxth	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	b29a      	uxth	r2, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f043 0302 	orr.w	r3, r3, #2
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d141      	bne.n	8004686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004602:	4b4b      	ldr	r3, [pc, #300]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460e:	d131      	bne.n	8004674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004610:	4b47      	ldr	r3, [pc, #284]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004616:	4a46      	ldr	r2, [pc, #280]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800461c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004620:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004628:	4a41      	ldr	r2, [pc, #260]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800462e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004630:	4b40      	ldr	r3, [pc, #256]	@ (8004734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2232      	movs	r2, #50	@ 0x32
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	4a3f      	ldr	r2, [pc, #252]	@ (8004738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	0c9b      	lsrs	r3, r3, #18
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004646:	e002      	b.n	800464e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3b01      	subs	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800464e:	4b38      	ldr	r3, [pc, #224]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800465a:	d102      	bne.n	8004662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f2      	bne.n	8004648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004662:	4b33      	ldr	r3, [pc, #204]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466e:	d158      	bne.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e057      	b.n	8004724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004674:	4b2e      	ldr	r3, [pc, #184]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800467a:	4a2d      	ldr	r2, [pc, #180]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004680:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004684:	e04d      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800468c:	d141      	bne.n	8004712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800468e:	4b28      	ldr	r3, [pc, #160]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469a:	d131      	bne.n	8004700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800469c:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046a2:	4a23      	ldr	r2, [pc, #140]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ac:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2232      	movs	r2, #50	@ 0x32
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	0c9b      	lsrs	r3, r3, #18
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d2:	e002      	b.n	80046da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046da:	4b15      	ldr	r3, [pc, #84]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e6:	d102      	bne.n	80046ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f2      	bne.n	80046d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ee:	4b10      	ldr	r3, [pc, #64]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d112      	bne.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e011      	b.n	8004724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004706:	4a0a      	ldr	r2, [pc, #40]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800470c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004710:	e007      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800471a:	4a05      	ldr	r2, [pc, #20]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004720:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40007000 	.word	0x40007000
 8004734:	20000000 	.word	0x20000000
 8004738:	431bde83 	.word	0x431bde83

0800473c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a04      	ldr	r2, [pc, #16]	@ (8004758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800474a:	6093      	str	r3, [r2, #8]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40007000 	.word	0x40007000

0800475c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e2fe      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d075      	beq.n	8004866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477a:	4b97      	ldr	r3, [pc, #604]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004784:	4b94      	ldr	r3, [pc, #592]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	d102      	bne.n	800479a <HAL_RCC_OscConfig+0x3e>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d002      	beq.n	80047a0 <HAL_RCC_OscConfig+0x44>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d10b      	bne.n	80047b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	4b8d      	ldr	r3, [pc, #564]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d05b      	beq.n	8004864 <HAL_RCC_OscConfig+0x108>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d157      	bne.n	8004864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e2d9      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c0:	d106      	bne.n	80047d0 <HAL_RCC_OscConfig+0x74>
 80047c2:	4b85      	ldr	r3, [pc, #532]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a84      	ldr	r2, [pc, #528]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e01d      	b.n	800480c <HAL_RCC_OscConfig+0xb0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x98>
 80047da:	4b7f      	ldr	r3, [pc, #508]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7e      	ldr	r2, [pc, #504]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b7c      	ldr	r3, [pc, #496]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7b      	ldr	r2, [pc, #492]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e00b      	b.n	800480c <HAL_RCC_OscConfig+0xb0>
 80047f4:	4b78      	ldr	r3, [pc, #480]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a77      	ldr	r2, [pc, #476]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80047fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b75      	ldr	r3, [pc, #468]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a74      	ldr	r2, [pc, #464]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800480a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d013      	beq.n	800483c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fc feb2 	bl	800157c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481c:	f7fc feae 	bl	800157c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	@ 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e29e      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800482e:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0xc0>
 800483a:	e014      	b.n	8004866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fc fe9e 	bl	800157c <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004844:	f7fc fe9a 	bl	800157c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	@ 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e28a      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004856:	4b60      	ldr	r3, [pc, #384]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0xe8>
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d075      	beq.n	800495e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004872:	4b59      	ldr	r3, [pc, #356]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800487c:	4b56      	ldr	r3, [pc, #344]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b0c      	cmp	r3, #12
 800488a:	d102      	bne.n	8004892 <HAL_RCC_OscConfig+0x136>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d002      	beq.n	8004898 <HAL_RCC_OscConfig+0x13c>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b04      	cmp	r3, #4
 8004896:	d11f      	bne.n	80048d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004898:	4b4f      	ldr	r3, [pc, #316]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_OscConfig+0x154>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e25d      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b49      	ldr	r3, [pc, #292]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	4946      	ldr	r1, [pc, #280]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048c4:	4b45      	ldr	r3, [pc, #276]	@ (80049dc <HAL_RCC_OscConfig+0x280>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fc fd1f 	bl	800130c <HAL_InitTick>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d043      	beq.n	800495c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e249      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d023      	beq.n	8004928 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e0:	4b3d      	ldr	r3, [pc, #244]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3c      	ldr	r2, [pc, #240]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80048e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fc fe46 	bl	800157c <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fc fe42 	bl	800157c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e232      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004906:	4b34      	ldr	r3, [pc, #208]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004912:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	061b      	lsls	r3, r3, #24
 8004920:	492d      	ldr	r1, [pc, #180]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
 8004926:	e01a      	b.n	800495e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004928:	4b2b      	ldr	r3, [pc, #172]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2a      	ldr	r2, [pc, #168]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800492e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc fe22 	bl	800157c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493c:	f7fc fe1e 	bl	800157c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e20e      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800494e:	4b22      	ldr	r3, [pc, #136]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x1e0>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d041      	beq.n	80049ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01c      	beq.n	80049ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004978:	4a17      	ldr	r2, [pc, #92]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fc fdfb 	bl	800157c <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498a:	f7fc fdf7 	bl	800157c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e1e7      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800499c:	4b0e      	ldr	r3, [pc, #56]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ef      	beq.n	800498a <HAL_RCC_OscConfig+0x22e>
 80049aa:	e020      	b.n	80049ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ac:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b2:	4a09      	ldr	r2, [pc, #36]	@ (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fc fdde 	bl	800157c <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c2:	e00d      	b.n	80049e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c4:	f7fc fdda 	bl	800157c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d906      	bls.n	80049e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e1ca      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 80049e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ea      	bne.n	80049c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80a6 	beq.w	8004b48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a00:	4b84      	ldr	r3, [pc, #528]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_OscConfig+0x2b4>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x2b6>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a16:	4b7f      	ldr	r3, [pc, #508]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a22:	4b7c      	ldr	r3, [pc, #496]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a32:	4b79      	ldr	r3, [pc, #484]	@ (8004c18 <HAL_RCC_OscConfig+0x4bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d118      	bne.n	8004a70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a3e:	4b76      	ldr	r3, [pc, #472]	@ (8004c18 <HAL_RCC_OscConfig+0x4bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a75      	ldr	r2, [pc, #468]	@ (8004c18 <HAL_RCC_OscConfig+0x4bc>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4a:	f7fc fd97 	bl	800157c <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a52:	f7fc fd93 	bl	800157c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e183      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a64:	4b6c      	ldr	r3, [pc, #432]	@ (8004c18 <HAL_RCC_OscConfig+0x4bc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d108      	bne.n	8004a8a <HAL_RCC_OscConfig+0x32e>
 8004a78:	4b66      	ldr	r3, [pc, #408]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	4a65      	ldr	r2, [pc, #404]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a88:	e024      	b.n	8004ad4 <HAL_RCC_OscConfig+0x378>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d110      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x358>
 8004a92:	4b60      	ldr	r3, [pc, #384]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a98:	4a5e      	ldr	r2, [pc, #376]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004a9a:	f043 0304 	orr.w	r3, r3, #4
 8004a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ab2:	e00f      	b.n	8004ad4 <HAL_RCC_OscConfig+0x378>
 8004ab4:	4b57      	ldr	r3, [pc, #348]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aba:	4a56      	ldr	r2, [pc, #344]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac4:	4b53      	ldr	r3, [pc, #332]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aca:	4a52      	ldr	r2, [pc, #328]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d016      	beq.n	8004b0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fc fd4e 	bl	800157c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fc fd4a 	bl	800157c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e138      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afa:	4b46      	ldr	r3, [pc, #280]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ed      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x388>
 8004b08:	e015      	b.n	8004b36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fc fd37 	bl	800157c <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fc fd33 	bl	800157c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e121      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b28:	4b3a      	ldr	r3, [pc, #232]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ed      	bne.n	8004b12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b35      	ldr	r3, [pc, #212]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b40:	4a34      	ldr	r2, [pc, #208]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d03c      	beq.n	8004bce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01c      	beq.n	8004b96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b62:	4a2c      	ldr	r2, [pc, #176]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fc fd06 	bl	800157c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b74:	f7fc fd02 	bl	800157c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0f2      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b86:	4b23      	ldr	r3, [pc, #140]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ef      	beq.n	8004b74 <HAL_RCC_OscConfig+0x418>
 8004b94:	e01b      	b.n	8004bce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b96:	4b1f      	ldr	r3, [pc, #124]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba6:	f7fc fce9 	bl	800157c <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bae:	f7fc fce5 	bl	800157c <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0d5      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc0:	4b14      	ldr	r3, [pc, #80]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ef      	bne.n	8004bae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80c9 	beq.w	8004d6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	f000 8083 	beq.w	8004cec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d15e      	bne.n	8004cac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b09      	ldr	r3, [pc, #36]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fc fcbf 	bl	800157c <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c00:	e00c      	b.n	8004c1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fc fcbb 	bl	800157c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d905      	bls.n	8004c1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0ab      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
 8004c14:	40021000 	.word	0x40021000
 8004c18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1c:	4b55      	ldr	r3, [pc, #340]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ec      	bne.n	8004c02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c28:	4b52      	ldr	r3, [pc, #328]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	4b52      	ldr	r3, [pc, #328]	@ (8004d78 <HAL_RCC_OscConfig+0x61c>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6a11      	ldr	r1, [r2, #32]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c38:	3a01      	subs	r2, #1
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	4311      	orrs	r1, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c42:	0212      	lsls	r2, r2, #8
 8004c44:	4311      	orrs	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0552      	lsls	r2, r2, #21
 8004c50:	4311      	orrs	r1, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c56:	0852      	lsrs	r2, r2, #1
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	0652      	lsls	r2, r2, #25
 8004c5c:	4311      	orrs	r1, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c62:	06d2      	lsls	r2, r2, #27
 8004c64:	430a      	orrs	r2, r1
 8004c66:	4943      	ldr	r1, [pc, #268]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c6c:	4b41      	ldr	r3, [pc, #260]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a40      	ldr	r2, [pc, #256]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c78:	4b3e      	ldr	r3, [pc, #248]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc fc7a 	bl	800157c <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fc fc76 	bl	800157c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e066      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9e:	4b35      	ldr	r3, [pc, #212]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x530>
 8004caa:	e05e      	b.n	8004d6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cac:	4b31      	ldr	r3, [pc, #196]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a30      	ldr	r2, [pc, #192]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fc fc60 	bl	800157c <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fc fc5c 	bl	800157c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e04c      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd2:	4b28      	ldr	r3, [pc, #160]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004cde:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	4924      	ldr	r1, [pc, #144]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004ce4:	4b25      	ldr	r3, [pc, #148]	@ (8004d7c <HAL_RCC_OscConfig+0x620>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60cb      	str	r3, [r1, #12]
 8004cea:	e03e      	b.n	8004d6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e039      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0203 	and.w	r2, r3, #3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d12c      	bne.n	8004d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	3b01      	subs	r3, #1
 8004d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d123      	bne.n	8004d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d11b      	bne.n	8004d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d113      	bne.n	8004d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d109      	bne.n	8004d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	019f800c 	.word	0x019f800c
 8004d7c:	feeefffc 	.word	0xfeeefffc

08004d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e11e      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d98:	4b91      	ldr	r3, [pc, #580]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d910      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da6:	4b8e      	ldr	r3, [pc, #568]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 020f 	bic.w	r2, r3, #15
 8004dae:	498c      	ldr	r1, [pc, #560]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b8a      	ldr	r3, [pc, #552]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e106      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d073      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d129      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ddc:	4b81      	ldr	r3, [pc, #516]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0f4      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004dec:	f000 f9d0 	bl	8005190 <RCC_GetSysClockFreqFromPLLSource>
 8004df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe8 <HAL_RCC_ClockConfig+0x268>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d93f      	bls.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d033      	beq.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d12f      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e1a:	4b72      	ldr	r3, [pc, #456]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e22:	4a70      	ldr	r2, [pc, #448]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e024      	b.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e38:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0c6      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e48:	4b66      	ldr	r3, [pc, #408]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0be      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e58:	f000 f8ce 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4a61      	ldr	r2, [pc, #388]	@ (8004fe8 <HAL_RCC_ClockConfig+0x268>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d909      	bls.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e66:	4b5f      	ldr	r3, [pc, #380]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4957      	ldr	r1, [pc, #348]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fc fb76 	bl	800157c <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fc fb72 	bl	800157c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e095      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d023      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed4:	4b43      	ldr	r3, [pc, #268]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a42      	ldr	r2, [pc, #264]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ede:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004eec:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004ef6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b39      	ldr	r3, [pc, #228]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4936      	ldr	r1, [pc, #216]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b80      	cmp	r3, #128	@ 0x80
 8004f14:	d105      	bne.n	8004f22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f16:	4b33      	ldr	r3, [pc, #204]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4a32      	ldr	r2, [pc, #200]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f22:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d21d      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f30:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 020f 	bic.w	r2, r3, #15
 8004f38:	4929      	ldr	r1, [pc, #164]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f40:	f7fc fb1c 	bl	800157c <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f48:	f7fc fb18 	bl	800157c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e03b      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b20      	ldr	r3, [pc, #128]	@ (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d1ed      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4917      	ldr	r1, [pc, #92]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f96:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490f      	ldr	r1, [pc, #60]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004faa:	f000 f825 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490c      	ldr	r1, [pc, #48]	@ (8004fec <HAL_RCC_ClockConfig+0x26c>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff0 <HAL_RCC_ClockConfig+0x270>)
 8004fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <HAL_RCC_ClockConfig+0x274>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fc f99c 	bl	800130c <HAL_InitTick>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40022000 	.word	0x40022000
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	04c4b400 	.word	0x04c4b400
 8004fec:	0800e31c 	.word	0x0800e31c
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	20000004 	.word	0x20000004

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d102      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800500a:	4b2a      	ldr	r3, [pc, #168]	@ (80050b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e047      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005010:	4b27      	ldr	r3, [pc, #156]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b08      	cmp	r3, #8
 800501a:	d102      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800501c:	4b26      	ldr	r3, [pc, #152]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e03e      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005022:	4b23      	ldr	r3, [pc, #140]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d136      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800502e:	4b20      	ldr	r3, [pc, #128]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005038:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	3301      	adds	r3, #1
 8005044:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d10c      	bne.n	8005066 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800504c:	4a1a      	ldr	r2, [pc, #104]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005056:	68d2      	ldr	r2, [r2, #12]
 8005058:	0a12      	lsrs	r2, r2, #8
 800505a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
      break;
 8005064:	e00c      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005066:	4a13      	ldr	r2, [pc, #76]	@ (80050b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	fbb2 f3f3 	udiv	r3, r2, r3
 800506e:	4a10      	ldr	r2, [pc, #64]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	68d2      	ldr	r2, [r2, #12]
 8005072:	0a12      	lsrs	r2, r2, #8
 8005074:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
      break;
 800507e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005080:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	0e5b      	lsrs	r3, r3, #25
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	3301      	adds	r3, #1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e001      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050a0:	693b      	ldr	r3, [r7, #16]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	007a1200 	.word	0x007a1200

080050bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c0:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050d8:	f7ff fff0 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4904      	ldr	r1, [pc, #16]	@ (80050fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800e32c 	.word	0x0800e32c

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005104:	f7ff ffda 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0adb      	lsrs	r3, r3, #11
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	@ (8005128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800e32c 	.word	0x0800e32c

0800512c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	220f      	movs	r2, #15
 800513a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800513c:	4b12      	ldr	r3, [pc, #72]	@ (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0203 	and.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005148:	4b0f      	ldr	r3, [pc, #60]	@ (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005160:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800516e:	4b07      	ldr	r3, [pc, #28]	@ (800518c <HAL_RCC_GetClockConfig+0x60>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 020f 	and.w	r2, r3, #15
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	40022000 	.word	0x40022000

08005190 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005196:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d10c      	bne.n	80051ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051b4:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	4a14      	ldr	r2, [pc, #80]	@ (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051be:	68d2      	ldr	r2, [r2, #12]
 80051c0:	0a12      	lsrs	r2, r2, #8
 80051c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	617b      	str	r3, [r7, #20]
    break;
 80051cc:	e00c      	b.n	80051e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ce:	4a12      	ldr	r2, [pc, #72]	@ (8005218 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d8:	68d2      	ldr	r2, [r2, #12]
 80051da:	0a12      	lsrs	r2, r2, #8
 80051dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
    break;
 80051e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051e8:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	0e5b      	lsrs	r3, r3, #25
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	3301      	adds	r3, #1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005202:	687b      	ldr	r3, [r7, #4]
}
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40021000 	.word	0x40021000
 8005214:	007a1200 	.word	0x007a1200
 8005218:	00f42400 	.word	0x00f42400

0800521c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005224:	2300      	movs	r3, #0
 8005226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005228:	2300      	movs	r3, #0
 800522a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8098 	beq.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523e:	4b43      	ldr	r3, [pc, #268]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	4b40      	ldr	r3, [pc, #256]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524e:	4a3f      	ldr	r2, [pc, #252]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005254:	6593      	str	r3, [r2, #88]	@ 0x58
 8005256:	4b3d      	ldr	r3, [pc, #244]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005262:	2301      	movs	r3, #1
 8005264:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005266:	4b3a      	ldr	r3, [pc, #232]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a39      	ldr	r2, [pc, #228]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005272:	f7fc f983 	bl	800157c <HAL_GetTick>
 8005276:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005278:	e009      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fc f97f 	bl	800157c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d902      	bls.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	74fb      	strb	r3, [r7, #19]
        break;
 800528c:	e005      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800528e:	4b30      	ldr	r3, [pc, #192]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ef      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d159      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a0:	4b2a      	ldr	r3, [pc, #168]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d019      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052bc:	4b23      	ldr	r3, [pc, #140]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c8:	4b20      	ldr	r3, [pc, #128]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ce:	4a1f      	ldr	r2, [pc, #124]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d8:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052de:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e8:	4a18      	ldr	r2, [pc, #96]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc f93f 	bl	800157c <HAL_GetTick>
 80052fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005300:	e00b      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fc f93b 	bl	800157c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d902      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	74fb      	strb	r3, [r7, #19]
            break;
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ec      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532e:	4b07      	ldr	r3, [pc, #28]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800533c:	4903      	ldr	r1, [pc, #12]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005344:	e008      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	74bb      	strb	r3, [r7, #18]
 800534a:	e005      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535e:	4ba7      	ldr	r3, [pc, #668]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005362:	4aa6      	ldr	r2, [pc, #664]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005368:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005376:	4ba1      	ldr	r3, [pc, #644]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f023 0203 	bic.w	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	499d      	ldr	r1, [pc, #628]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005398:	4b98      	ldr	r3, [pc, #608]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539e:	f023 020c 	bic.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	4995      	ldr	r1, [pc, #596]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ba:	4b90      	ldr	r3, [pc, #576]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	498c      	ldr	r1, [pc, #560]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053dc:	4b87      	ldr	r3, [pc, #540]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4984      	ldr	r1, [pc, #528]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fe:	4b7f      	ldr	r3, [pc, #508]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	497b      	ldr	r1, [pc, #492]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005420:	4b76      	ldr	r3, [pc, #472]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005426:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	4973      	ldr	r1, [pc, #460]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005442:	4b6e      	ldr	r3, [pc, #440]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005448:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	496a      	ldr	r1, [pc, #424]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005464:	4b65      	ldr	r3, [pc, #404]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	4962      	ldr	r1, [pc, #392]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005486:	4b5d      	ldr	r3, [pc, #372]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	4959      	ldr	r1, [pc, #356]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a8:	4b54      	ldr	r3, [pc, #336]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	4951      	ldr	r1, [pc, #324]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d015      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ca:	4b4c      	ldr	r3, [pc, #304]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	4948      	ldr	r1, [pc, #288]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e8:	d105      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ea:	4b44      	ldr	r3, [pc, #272]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4a43      	ldr	r2, [pc, #268]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054f4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d015      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005502:	4b3e      	ldr	r3, [pc, #248]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005510:	493a      	ldr	r1, [pc, #232]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005520:	d105      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005522:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4a35      	ldr	r2, [pc, #212]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d015      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800553a:	4b30      	ldr	r3, [pc, #192]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005548:	492c      	ldr	r1, [pc, #176]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005558:	d105      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800555a:	4b28      	ldr	r3, [pc, #160]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	4a27      	ldr	r2, [pc, #156]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005564:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d015      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005572:	4b22      	ldr	r3, [pc, #136]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005578:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	491e      	ldr	r1, [pc, #120]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005590:	d105      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005592:	4b1a      	ldr	r3, [pc, #104]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4a19      	ldr	r2, [pc, #100]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800559c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d015      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055aa:	4b14      	ldr	r3, [pc, #80]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b8:	4910      	ldr	r1, [pc, #64]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055c8:	d105      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ca:	4b0c      	ldr	r3, [pc, #48]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4a0b      	ldr	r2, [pc, #44]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d018      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055e2:	4b06      	ldr	r3, [pc, #24]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	4902      	ldr	r1, [pc, #8]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	e001      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055fc:	40021000 	.word	0x40021000
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005606:	d105      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005608:	4b21      	ldr	r3, [pc, #132]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4a20      	ldr	r2, [pc, #128]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005612:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005620:	4b1b      	ldr	r3, [pc, #108]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005626:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	4918      	ldr	r1, [pc, #96]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005640:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a12      	ldr	r2, [pc, #72]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800564a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005658:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800565a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800565e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005666:	490a      	ldr	r1, [pc, #40]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a04      	ldr	r2, [pc, #16]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005684:	7cbb      	ldrb	r3, [r7, #18]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000

08005694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e049      	b.n	800573a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f841 	bl	8005742 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f000 fa28 	bl	8005b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d001      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e04f      	b.n	8005810 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a23      	ldr	r2, [pc, #140]	@ (800581c <HAL_TIM_Base_Start_IT+0xc4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579a:	d018      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <HAL_TIM_Base_Start_IT+0xc8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005824 <HAL_TIM_Base_Start_IT+0xcc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <HAL_TIM_Base_Start_IT+0xd0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	@ (800582c <HAL_TIM_Base_Start_IT+0xd4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x76>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d115      	bne.n	80057fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <HAL_TIM_Base_Start_IT+0xdc>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d015      	beq.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e6:	d011      	beq.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	e008      	b.n	800580c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e000      	b.n	800580e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40013400 	.word	0x40013400
 800582c:	40014000 	.word	0x40014000
 8005830:	40015000 	.word	0x40015000
 8005834:	00010007 	.word	0x00010007

08005838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d020      	beq.n	800589c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01b      	beq.n	800589c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0202 	mvn.w	r2, #2
 800586c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f931 	bl	8005aea <HAL_TIM_IC_CaptureCallback>
 8005888:	e005      	b.n	8005896 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f923 	bl	8005ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f934 	bl	8005afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d020      	beq.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01b      	beq.n	80058e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0204 	mvn.w	r2, #4
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f90b 	bl	8005aea <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f8fd 	bl	8005ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f90e 	bl	8005afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d020      	beq.n	8005934 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01b      	beq.n	8005934 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0208 	mvn.w	r2, #8
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2204      	movs	r2, #4
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8e5 	bl	8005aea <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8d7 	bl	8005ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f8e8 	bl	8005afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	d020      	beq.n	8005980 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0210 	mvn.w	r2, #16
 8005950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2208      	movs	r2, #8
 8005956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f8bf 	bl	8005aea <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8b1 	bl	8005ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f8c2 	bl	8005afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0201 	mvn.w	r2, #1
 800599c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fb fb66 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00c      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f95f 	bl	8005c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f957 	bl	8005ca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00c      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f87c 	bl	8005b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f06f 0220 	mvn.w	r2, #32
 8005a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f91f 	bl	8005c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00c      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f92b 	bl	8005cb8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f923 	bl	8005ccc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f91b 	bl	8005ce0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00c      	beq.n	8005ace <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f913 	bl	8005cf4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a48      	ldr	r2, [pc, #288]	@ (8005c5c <TIM_Base_SetConfig+0x134>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b46:	d00f      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a45      	ldr	r2, [pc, #276]	@ (8005c60 <TIM_Base_SetConfig+0x138>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a44      	ldr	r2, [pc, #272]	@ (8005c64 <TIM_Base_SetConfig+0x13c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a43      	ldr	r2, [pc, #268]	@ (8005c68 <TIM_Base_SetConfig+0x140>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a42      	ldr	r2, [pc, #264]	@ (8005c6c <TIM_Base_SetConfig+0x144>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d108      	bne.n	8005b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a37      	ldr	r2, [pc, #220]	@ (8005c5c <TIM_Base_SetConfig+0x134>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01f      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b88:	d01b      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a34      	ldr	r2, [pc, #208]	@ (8005c60 <TIM_Base_SetConfig+0x138>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d017      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <TIM_Base_SetConfig+0x13c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a32      	ldr	r2, [pc, #200]	@ (8005c68 <TIM_Base_SetConfig+0x140>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00f      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a32      	ldr	r2, [pc, #200]	@ (8005c70 <TIM_Base_SetConfig+0x148>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a31      	ldr	r2, [pc, #196]	@ (8005c74 <TIM_Base_SetConfig+0x14c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d007      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a30      	ldr	r2, [pc, #192]	@ (8005c78 <TIM_Base_SetConfig+0x150>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_Base_SetConfig+0x9a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8005c6c <TIM_Base_SetConfig+0x144>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d108      	bne.n	8005bd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <TIM_Base_SetConfig+0x134>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <TIM_Base_SetConfig+0x100>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a19      	ldr	r2, [pc, #100]	@ (8005c68 <TIM_Base_SetConfig+0x140>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00f      	beq.n	8005c28 <TIM_Base_SetConfig+0x100>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a19      	ldr	r2, [pc, #100]	@ (8005c70 <TIM_Base_SetConfig+0x148>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_Base_SetConfig+0x100>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a18      	ldr	r2, [pc, #96]	@ (8005c74 <TIM_Base_SetConfig+0x14c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_Base_SetConfig+0x100>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	@ (8005c78 <TIM_Base_SetConfig+0x150>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_Base_SetConfig+0x100>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a12      	ldr	r2, [pc, #72]	@ (8005c6c <TIM_Base_SetConfig+0x144>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d103      	bne.n	8005c30 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d105      	bne.n	8005c4e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	611a      	str	r2, [r3, #16]
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40013400 	.word	0x40013400
 8005c6c:	40015000 	.word	0x40015000
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e042      	b.n	8005da0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fb fa95 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2224      	movs	r2, #36	@ 0x24
 8005d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fb24 	bl	80063a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f825 	bl	8005da8 <UART_SetConfig>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e01b      	b.n	8005da0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fba3 	bl	80064e4 <UART_CheckIdleState>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dac:	b08c      	sub	sp, #48	@ 0x30
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4baa      	ldr	r3, [pc, #680]	@ (8006080 <UART_SetConfig+0x2d8>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a9f      	ldr	r2, [pc, #636]	@ (8006084 <UART_SetConfig+0x2dc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e10:	4313      	orrs	r3, r2
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005e1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	f023 010f 	bic.w	r1, r3, #15
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a90      	ldr	r2, [pc, #576]	@ (8006088 <UART_SetConfig+0x2e0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d125      	bne.n	8005e98 <UART_SetConfig+0xf0>
 8005e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800608c <UART_SetConfig+0x2e4>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d81a      	bhi.n	8005e90 <UART_SetConfig+0xe8>
 8005e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0xb8>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e71 	.word	0x08005e71
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e116      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e112      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e10e      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	e10a      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e96:	e106      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006090 <UART_SetConfig+0x2e8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d138      	bne.n	8005f14 <UART_SetConfig+0x16c>
 8005ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800608c <UART_SetConfig+0x2e4>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f003 030c 	and.w	r3, r3, #12
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	d82d      	bhi.n	8005f0c <UART_SetConfig+0x164>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0x110>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005f0d 	.word	0x08005f0d
 8005ec0:	08005f0d 	.word	0x08005f0d
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005efd 	.word	0x08005efd
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f0d 	.word	0x08005f0d
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f0d 	.word	0x08005f0d
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef2:	e0d8      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005efa:	e0d4      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f02:	e0d0      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f0a:	e0cc      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f12:	e0c8      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5e      	ldr	r2, [pc, #376]	@ (8006094 <UART_SetConfig+0x2ec>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d125      	bne.n	8005f6a <UART_SetConfig+0x1c2>
 8005f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800608c <UART_SetConfig+0x2e4>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f28:	2b30      	cmp	r3, #48	@ 0x30
 8005f2a:	d016      	beq.n	8005f5a <UART_SetConfig+0x1b2>
 8005f2c:	2b30      	cmp	r3, #48	@ 0x30
 8005f2e:	d818      	bhi.n	8005f62 <UART_SetConfig+0x1ba>
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d00a      	beq.n	8005f4a <UART_SetConfig+0x1a2>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d814      	bhi.n	8005f62 <UART_SetConfig+0x1ba>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <UART_SetConfig+0x19a>
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d008      	beq.n	8005f52 <UART_SetConfig+0x1aa>
 8005f40:	e00f      	b.n	8005f62 <UART_SetConfig+0x1ba>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f48:	e0ad      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f50:	e0a9      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f52:	2304      	movs	r3, #4
 8005f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f58:	e0a5      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f60:	e0a1      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f62:	2310      	movs	r3, #16
 8005f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f68:	e09d      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006098 <UART_SetConfig+0x2f0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d125      	bne.n	8005fc0 <UART_SetConfig+0x218>
 8005f74:	4b45      	ldr	r3, [pc, #276]	@ (800608c <UART_SetConfig+0x2e4>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f80:	d016      	beq.n	8005fb0 <UART_SetConfig+0x208>
 8005f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f84:	d818      	bhi.n	8005fb8 <UART_SetConfig+0x210>
 8005f86:	2b80      	cmp	r3, #128	@ 0x80
 8005f88:	d00a      	beq.n	8005fa0 <UART_SetConfig+0x1f8>
 8005f8a:	2b80      	cmp	r3, #128	@ 0x80
 8005f8c:	d814      	bhi.n	8005fb8 <UART_SetConfig+0x210>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <UART_SetConfig+0x1f0>
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d008      	beq.n	8005fa8 <UART_SetConfig+0x200>
 8005f96:	e00f      	b.n	8005fb8 <UART_SetConfig+0x210>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9e:	e082      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fa6:	e07e      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fae:	e07a      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fb6:	e076      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fbe:	e072      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a35      	ldr	r2, [pc, #212]	@ (800609c <UART_SetConfig+0x2f4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d12a      	bne.n	8006020 <UART_SetConfig+0x278>
 8005fca:	4b30      	ldr	r3, [pc, #192]	@ (800608c <UART_SetConfig+0x2e4>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd8:	d01a      	beq.n	8006010 <UART_SetConfig+0x268>
 8005fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fde:	d81b      	bhi.n	8006018 <UART_SetConfig+0x270>
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe4:	d00c      	beq.n	8006000 <UART_SetConfig+0x258>
 8005fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fea:	d815      	bhi.n	8006018 <UART_SetConfig+0x270>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <UART_SetConfig+0x250>
 8005ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff4:	d008      	beq.n	8006008 <UART_SetConfig+0x260>
 8005ff6:	e00f      	b.n	8006018 <UART_SetConfig+0x270>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffe:	e052      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006000:	2302      	movs	r3, #2
 8006002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006006:	e04e      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800600e:	e04a      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006016:	e046      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800601e:	e042      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a17      	ldr	r2, [pc, #92]	@ (8006084 <UART_SetConfig+0x2dc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d13a      	bne.n	80060a0 <UART_SetConfig+0x2f8>
 800602a:	4b18      	ldr	r3, [pc, #96]	@ (800608c <UART_SetConfig+0x2e4>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006038:	d01a      	beq.n	8006070 <UART_SetConfig+0x2c8>
 800603a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800603e:	d81b      	bhi.n	8006078 <UART_SetConfig+0x2d0>
 8006040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006044:	d00c      	beq.n	8006060 <UART_SetConfig+0x2b8>
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604a:	d815      	bhi.n	8006078 <UART_SetConfig+0x2d0>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <UART_SetConfig+0x2b0>
 8006050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006054:	d008      	beq.n	8006068 <UART_SetConfig+0x2c0>
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x2d0>
 8006058:	2300      	movs	r3, #0
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605e:	e022      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006060:	2302      	movs	r3, #2
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006066:	e01e      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800606e:	e01a      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006076:	e016      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800607e:	e012      	b.n	80060a6 <UART_SetConfig+0x2fe>
 8006080:	cfff69f3 	.word	0xcfff69f3
 8006084:	40008000 	.word	0x40008000
 8006088:	40013800 	.word	0x40013800
 800608c:	40021000 	.word	0x40021000
 8006090:	40004400 	.word	0x40004400
 8006094:	40004800 	.word	0x40004800
 8006098:	40004c00 	.word	0x40004c00
 800609c:	40005000 	.word	0x40005000
 80060a0:	2310      	movs	r3, #16
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4aae      	ldr	r2, [pc, #696]	@ (8006364 <UART_SetConfig+0x5bc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	f040 8097 	bne.w	80061e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d823      	bhi.n	8006102 <UART_SetConfig+0x35a>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0x318>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	08006103 	.word	0x08006103
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	08006103 	.word	0x08006103
 80060d0:	080060f3 	.word	0x080060f3
 80060d4:	08006103 	.word	0x08006103
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006103 	.word	0x08006103
 80060e0:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fe fff6 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 80060e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060ea:	e010      	b.n	800610e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b9e      	ldr	r3, [pc, #632]	@ (8006368 <UART_SetConfig+0x5c0>)
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060f0:	e00d      	b.n	800610e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fe ff81 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 80060f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060f8:	e009      	b.n	800610e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006100:	e005      	b.n	800610e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800610c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8130 	beq.w	8006376 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	4a94      	ldr	r2, [pc, #592]	@ (800636c <UART_SetConfig+0x5c4>)
 800611c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006120:	461a      	mov	r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	fbb3 f3f2 	udiv	r3, r3, r2
 8006128:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	4413      	add	r3, r2
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	429a      	cmp	r2, r3
 8006138:	d305      	bcc.n	8006146 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	429a      	cmp	r2, r3
 8006144:	d903      	bls.n	800614e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800614c:	e113      	b.n	8006376 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	2200      	movs	r2, #0
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	60fa      	str	r2, [r7, #12]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	4a84      	ldr	r2, [pc, #528]	@ (800636c <UART_SetConfig+0x5c4>)
 800615c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006160:	b29b      	uxth	r3, r3
 8006162:	2200      	movs	r2, #0
 8006164:	603b      	str	r3, [r7, #0]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006170:	f7fa f8a6 	bl	80002c0 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	020b      	lsls	r3, r1, #8
 8006186:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800618a:	0202      	lsls	r2, r0, #8
 800618c:	6979      	ldr	r1, [r7, #20]
 800618e:	6849      	ldr	r1, [r1, #4]
 8006190:	0849      	lsrs	r1, r1, #1
 8006192:	2000      	movs	r0, #0
 8006194:	460c      	mov	r4, r1
 8006196:	4605      	mov	r5, r0
 8006198:	eb12 0804 	adds.w	r8, r2, r4
 800619c:	eb43 0905 	adc.w	r9, r3, r5
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	469a      	mov	sl, r3
 80061a8:	4693      	mov	fp, r2
 80061aa:	4652      	mov	r2, sl
 80061ac:	465b      	mov	r3, fp
 80061ae:	4640      	mov	r0, r8
 80061b0:	4649      	mov	r1, r9
 80061b2:	f7fa f885 	bl	80002c0 <__aeabi_uldivmod>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4613      	mov	r3, r2
 80061bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061c4:	d308      	bcc.n	80061d8 <UART_SetConfig+0x430>
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061cc:	d204      	bcs.n	80061d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a3a      	ldr	r2, [r7, #32]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	e0ce      	b.n	8006376 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061de:	e0ca      	b.n	8006376 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061e8:	d166      	bne.n	80062b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80061ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d827      	bhi.n	8006242 <UART_SetConfig+0x49a>
 80061f2:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <UART_SetConfig+0x450>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006225 	.word	0x08006225
 8006200:	0800622d 	.word	0x0800622d
 8006204:	08006243 	.word	0x08006243
 8006208:	08006233 	.word	0x08006233
 800620c:	08006243 	.word	0x08006243
 8006210:	08006243 	.word	0x08006243
 8006214:	08006243 	.word	0x08006243
 8006218:	0800623b 	.word	0x0800623b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800621c:	f7fe ff5a 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006222:	e014      	b.n	800624e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006224:	f7fe ff6c 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8006228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800622a:	e010      	b.n	800624e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800622c:	4b4e      	ldr	r3, [pc, #312]	@ (8006368 <UART_SetConfig+0x5c0>)
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006230:	e00d      	b.n	800624e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006232:	f7fe fee1 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8006236:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006238:	e009      	b.n	800624e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800623a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800623e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006240:	e005      	b.n	800624e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800624c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8090 	beq.w	8006376 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	4a44      	ldr	r2, [pc, #272]	@ (800636c <UART_SetConfig+0x5c4>)
 800625c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006260:	461a      	mov	r2, r3
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	fbb3 f3f2 	udiv	r3, r3, r2
 8006268:	005a      	lsls	r2, r3, #1
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	441a      	add	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	fbb2 f3f3 	udiv	r3, r2, r3
 800627a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b0f      	cmp	r3, #15
 8006280:	d916      	bls.n	80062b0 <UART_SetConfig+0x508>
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006288:	d212      	bcs.n	80062b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f023 030f 	bic.w	r3, r3, #15
 8006292:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	b29b      	uxth	r3, r3
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	b29a      	uxth	r2, r3
 80062a0:	8bfb      	ldrh	r3, [r7, #30]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	8bfa      	ldrh	r2, [r7, #30]
 80062ac:	60da      	str	r2, [r3, #12]
 80062ae:	e062      	b.n	8006376 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062b6:	e05e      	b.n	8006376 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d828      	bhi.n	8006312 <UART_SetConfig+0x56a>
 80062c0:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <UART_SetConfig+0x520>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062fd 	.word	0x080062fd
 80062d4:	08006313 	.word	0x08006313
 80062d8:	08006303 	.word	0x08006303
 80062dc:	08006313 	.word	0x08006313
 80062e0:	08006313 	.word	0x08006313
 80062e4:	08006313 	.word	0x08006313
 80062e8:	0800630b 	.word	0x0800630b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ec:	f7fe fef2 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 80062f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062f2:	e014      	b.n	800631e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f4:	f7fe ff04 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062fa:	e010      	b.n	800631e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006368 <UART_SetConfig+0x5c0>)
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006300:	e00d      	b.n	800631e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006302:	f7fe fe79 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8006306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006308:	e009      	b.n	800631e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006310:	e005      	b.n	800631e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800631c:	bf00      	nop
    }

    if (pclk != 0U)
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d028      	beq.n	8006376 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006328:	4a10      	ldr	r2, [pc, #64]	@ (800636c <UART_SetConfig+0x5c4>)
 800632a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800632e:	461a      	mov	r2, r3
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	fbb3 f2f2 	udiv	r2, r3, r2
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	441a      	add	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	2b0f      	cmp	r3, #15
 800634c:	d910      	bls.n	8006370 <UART_SetConfig+0x5c8>
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006354:	d20c      	bcs.n	8006370 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	b29a      	uxth	r2, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60da      	str	r2, [r3, #12]
 8006360:	e009      	b.n	8006376 <UART_SetConfig+0x5ce>
 8006362:	bf00      	nop
 8006364:	40008000 	.word	0x40008000
 8006368:	00f42400 	.word	0x00f42400
 800636c:	0800e334 	.word	0x0800e334
      }
      else
      {
        ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2201      	movs	r2, #1
 800637a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2201      	movs	r2, #1
 8006382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2200      	movs	r2, #0
 800638a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2200      	movs	r2, #0
 8006390:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006392:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006396:	4618      	mov	r0, r3
 8006398:	3730      	adds	r7, #48	@ 0x30
 800639a:	46bd      	mov	sp, r7
 800639c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080063a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01a      	beq.n	80064b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800649e:	d10a      	bne.n	80064b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
  }
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b098      	sub	sp, #96	@ 0x60
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064f4:	f7fb f842 	bl	800157c <HAL_GetTick>
 80064f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b08      	cmp	r3, #8
 8006506:	d12f      	bne.n	8006568 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006510:	2200      	movs	r2, #0
 8006512:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f88e 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d022      	beq.n	8006568 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006536:	653b      	str	r3, [r7, #80]	@ 0x50
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006540:	647b      	str	r3, [r7, #68]	@ 0x44
 8006542:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800654e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e6      	bne.n	8006522 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e063      	b.n	8006630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d149      	bne.n	800660a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006576:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800657e:	2200      	movs	r2, #0
 8006580:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f857 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d03c      	beq.n	800660a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	623b      	str	r3, [r7, #32]
   return(result);
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80065b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e6      	bne.n	8006590 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3308      	adds	r3, #8
 80065c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	69b9      	ldr	r1, [r7, #24]
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	617b      	str	r3, [r7, #20]
   return(result);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e5      	bne.n	80065c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e012      	b.n	8006630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3758      	adds	r7, #88	@ 0x58
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006648:	e04f      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d04b      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fa ff93 	bl	800157c <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <UART_WaitOnFlagUntilTimeout+0x30>
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e04e      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d037      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b80      	cmp	r3, #128	@ 0x80
 800667e:	d034      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d031      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b08      	cmp	r3, #8
 8006692:	d110      	bne.n	80066b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2208      	movs	r2, #8
 800669a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f838 	bl	8006712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2208      	movs	r2, #8
 80066a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e029      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066c4:	d111      	bne.n	80066ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 f81e 	bl	8006712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e00f      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	bf0c      	ite	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	2300      	movne	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	429a      	cmp	r2, r3
 8006706:	d0a0      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006712:	b480      	push	{r7}
 8006714:	b095      	sub	sp, #84	@ 0x54
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800672e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006738:	643b      	str	r3, [r7, #64]	@ 0x40
 800673a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800673e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e6      	bne.n	800671a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3308      	adds	r3, #8
 8006752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	61fb      	str	r3, [r7, #28]
   return(result);
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3308      	adds	r3, #8
 800676e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e3      	bne.n	800674c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d118      	bne.n	80067be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	60bb      	str	r3, [r7, #8]
   return(result);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 0310 	bic.w	r3, r3, #16
 80067a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	613b      	str	r3, [r7, #16]
   return(result);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e6      	bne.n	800678c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067d2:	bf00      	nop
 80067d4:	3754      	adds	r7, #84	@ 0x54
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e027      	b.n	8006844 <HAL_UARTEx_DisableFifoMode+0x66>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	@ 0x24
 8006800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006822:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006864:	2302      	movs	r3, #2
 8006866:	e02d      	b.n	80068c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2224      	movs	r2, #36	@ 0x24
 8006874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f84f 	bl	8006948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e02d      	b.n	8006940 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2224      	movs	r2, #36	@ 0x24
 80068f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f811 	bl	8006948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006954:	2b00      	cmp	r3, #0
 8006956:	d108      	bne.n	800696a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006968:	e031      	b.n	80069ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800696a:	2308      	movs	r3, #8
 800696c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800696e:	2308      	movs	r3, #8
 8006970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	0e5b      	lsrs	r3, r3, #25
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	0f5b      	lsrs	r3, r3, #29
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	7b3a      	ldrb	r2, [r7, #12]
 8006996:	4911      	ldr	r1, [pc, #68]	@ (80069dc <UARTEx_SetNbDataToProcess+0x94>)
 8006998:	5c8a      	ldrb	r2, [r1, r2]
 800699a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800699e:	7b3a      	ldrb	r2, [r7, #12]
 80069a0:	490f      	ldr	r1, [pc, #60]	@ (80069e0 <UARTEx_SetNbDataToProcess+0x98>)
 80069a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	7b7a      	ldrb	r2, [r7, #13]
 80069b4:	4909      	ldr	r1, [pc, #36]	@ (80069dc <UARTEx_SetNbDataToProcess+0x94>)
 80069b6:	5c8a      	ldrb	r2, [r1, r2]
 80069b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069bc:	7b7a      	ldrb	r2, [r7, #13]
 80069be:	4908      	ldr	r1, [pc, #32]	@ (80069e0 <UARTEx_SetNbDataToProcess+0x98>)
 80069c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	0800e34c 	.word	0x0800e34c
 80069e0:	0800e354 	.word	0x0800e354

080069e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069f4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80069f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a1a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006a1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4013      	ands	r3, r2
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	1d3b      	adds	r3, r7, #4
 8006a52:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b0a7      	sub	sp, #156	@ 0x9c
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aaa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d81f      	bhi.n	8006af6 <USB_ActivateEndpoint+0x72>
 8006ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <USB_ActivateEndpoint+0x38>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006ae9 	.word	0x08006ae9
 8006ac4:	08006aff 	.word	0x08006aff
 8006ac8:	08006adb 	.word	0x08006adb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006acc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ad0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ad4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006ad8:	e012      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ada:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ade:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006ae2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006ae6:	e00b      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ae8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006aec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006af0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006af4:	e004      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006afc:	e000      	b.n	8006b00 <USB_ActivateEndpoint+0x7c>
      break;
 8006afe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b21b      	sxth	r3, r3
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3a:	b21a      	sxth	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	4313      	orrs	r3, r2
 8006b44:	b21b      	sxth	r3, r3
 8006b46:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	441a      	add	r2, r3
 8006b54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	7b1b      	ldrb	r3, [r3, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f040 8180 	bne.w	8006e76 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8084 	beq.w	8006c88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	4413      	add	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	00da      	lsls	r2, r3, #3
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	88db      	ldrh	r3, [r3, #6]
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	827b      	strh	r3, [r7, #18]
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01b      	beq.n	8006c04 <USB_ActivateEndpoint+0x180>
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be2:	823b      	strh	r3, [r7, #16]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	8a3b      	ldrh	r3, [r7, #16]
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	78db      	ldrb	r3, [r3, #3]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d020      	beq.n	8006c4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c22:	81bb      	strh	r3, [r7, #12]
 8006c24:	89bb      	ldrh	r3, [r7, #12]
 8006c26:	f083 0320 	eor.w	r3, r3, #32
 8006c2a:	81bb      	strh	r3, [r7, #12]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	89bb      	ldrh	r3, [r7, #12]
 8006c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	8013      	strh	r3, [r2, #0]
 8006c4c:	e3f9      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c64:	81fb      	strh	r3, [r7, #14]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	89fb      	ldrh	r3, [r7, #14]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
 8006c86:	e3dc      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	4413      	add	r3, r2
 8006c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	00da      	lsls	r2, r3, #3
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	88db      	ldrh	r3, [r3, #6]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	4413      	add	r3, r2
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	00da      	lsls	r2, r3, #3
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	4413      	add	r3, r2
 8006cda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <USB_ActivateEndpoint+0x28a>
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e041      	b.n	8006d92 <USB_ActivateEndpoint+0x30e>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d14:	d81c      	bhi.n	8006d50 <USB_ActivateEndpoint+0x2cc>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <USB_ActivateEndpoint+0x2b2>
 8006d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d30:	3301      	adds	r3, #1
 8006d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	029b      	lsls	r3, r3, #10
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	4313      	orrs	r3, r2
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e020      	b.n	8006d92 <USB_ActivateEndpoint+0x30e>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <USB_ActivateEndpoint+0x2ec>
 8006d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	029b      	lsls	r3, r3, #10
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006da0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01b      	beq.n	8006de2 <USB_ActivateEndpoint+0x35e>
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc0:	843b      	strh	r3, [r7, #32]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8c3b      	ldrh	r3, [r7, #32]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d124      	bne.n	8006e34 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e00:	83bb      	strh	r3, [r7, #28]
 8006e02:	8bbb      	ldrh	r3, [r7, #28]
 8006e04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e08:	83bb      	strh	r3, [r7, #28]
 8006e0a:	8bbb      	ldrh	r3, [r7, #28]
 8006e0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e10:	83bb      	strh	r3, [r7, #28]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	8bbb      	ldrh	r3, [r7, #28]
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]
 8006e32:	e306      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4a:	83fb      	strh	r3, [r7, #30]
 8006e4c:	8bfb      	ldrh	r3, [r7, #30]
 8006e4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e52:	83fb      	strh	r3, [r7, #30]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	8bfb      	ldrh	r3, [r7, #30]
 8006e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	8013      	strh	r3, [r2, #0]
 8006e74:	e2e5      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	78db      	ldrb	r3, [r3, #3]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d11e      	bne.n	8006ebc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e94:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	441a      	add	r2, r3
 8006ea2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	8013      	strh	r3, [r2, #0]
 8006eba:	e01d      	b.n	8006ef8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	441a      	add	r2, r3
 8006ee0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006ee4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f08:	4413      	add	r3, r2
 8006f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	00da      	lsls	r2, r3, #3
 8006f12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	891b      	ldrh	r3, [r3, #8]
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f2a:	801a      	strh	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f3c:	4413      	add	r3, r2
 8006f3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	00da      	lsls	r2, r3, #3
 8006f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	895b      	ldrh	r3, [r3, #10]
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 81af 	bne.w	80072c8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006f7a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01d      	beq.n	8006fc2 <USB_ActivateEndpoint+0x53e>
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006fd2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01d      	beq.n	800701a <USB_ActivateEndpoint+0x596>
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007012:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d16b      	bne.n	80070fa <USB_ActivateEndpoint+0x676>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800702c:	b29b      	uxth	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007032:	4413      	add	r3, r2
 8007034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	00da      	lsls	r2, r3, #3
 800703c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800703e:	4413      	add	r3, r2
 8007040:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007050:	b29a      	uxth	r2, r3
 8007052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <USB_ActivateEndpoint+0x5f0>
 800705e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706c:	b29a      	uxth	r2, r3
 800706e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	e05d      	b.n	8007130 <USB_ActivateEndpoint+0x6ac>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b3e      	cmp	r3, #62	@ 0x3e
 800707a:	d81c      	bhi.n	80070b6 <USB_ActivateEndpoint+0x632>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <USB_ActivateEndpoint+0x618>
 8007092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007096:	3301      	adds	r3, #1
 8007098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800709c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	029b      	lsls	r3, r3, #10
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4313      	orrs	r3, r2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	e03c      	b.n	8007130 <USB_ActivateEndpoint+0x6ac>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <USB_ActivateEndpoint+0x652>
 80070cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	029b      	lsls	r3, r3, #10
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e01a      	b.n	8007130 <USB_ActivateEndpoint+0x6ac>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d116      	bne.n	8007130 <USB_ActivateEndpoint+0x6ac>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	657b      	str	r3, [r7, #84]	@ 0x54
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800710c:	b29b      	uxth	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007112:	4413      	add	r3, r2
 8007114:	657b      	str	r3, [r7, #84]	@ 0x54
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00da      	lsls	r2, r3, #3
 800711c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800711e:	4413      	add	r3, r2
 8007120:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007124:	653b      	str	r3, [r7, #80]	@ 0x50
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	b29a      	uxth	r2, r3
 800712c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	647b      	str	r3, [r7, #68]	@ 0x44
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d16b      	bne.n	8007214 <USB_ActivateEndpoint+0x790>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007146:	b29b      	uxth	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714c:	4413      	add	r3, r2
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	00da      	lsls	r2, r3, #3
 8007156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007158:	4413      	add	r3, r2
 800715a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800715e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800716a:	b29a      	uxth	r2, r3
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	801a      	strh	r2, [r3, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <USB_ActivateEndpoint+0x70a>
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007186:	b29a      	uxth	r2, r3
 8007188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e05b      	b.n	8007246 <USB_ActivateEndpoint+0x7c2>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b3e      	cmp	r3, #62	@ 0x3e
 8007194:	d81c      	bhi.n	80071d0 <USB_ActivateEndpoint+0x74c>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <USB_ActivateEndpoint+0x732>
 80071ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071b0:	3301      	adds	r3, #1
 80071b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	029b      	lsls	r3, r3, #10
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	e03a      	b.n	8007246 <USB_ActivateEndpoint+0x7c2>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	095b      	lsrs	r3, r3, #5
 80071d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <USB_ActivateEndpoint+0x76c>
 80071e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071ea:	3b01      	subs	r3, #1
 80071ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b29b      	uxth	r3, r3
 8007204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720c:	b29a      	uxth	r2, r3
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	e018      	b.n	8007246 <USB_ActivateEndpoint+0x7c2>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d114      	bne.n	8007246 <USB_ActivateEndpoint+0x7c2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007228:	4413      	add	r3, r2
 800722a:	647b      	str	r3, [r7, #68]	@ 0x44
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	00da      	lsls	r2, r3, #3
 8007232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007234:	4413      	add	r3, r2
 8007236:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800723a:	643b      	str	r3, [r7, #64]	@ 0x40
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	b29a      	uxth	r2, r3
 8007242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007244:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800725e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007260:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007264:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007266:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007268:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800726c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	441a      	add	r2, r3
 8007278:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800727a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800727e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728a:	b29b      	uxth	r3, r3
 800728c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80072b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	8013      	strh	r3, [r2, #0]
 80072c6:	e0bc      	b.n	8007442 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80072d8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01d      	beq.n	8007320 <USB_ActivateEndpoint+0x89c>
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007330:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01d      	beq.n	8007378 <USB_ActivateEndpoint+0x8f4>
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800734e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007352:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	441a      	add	r2, r3
 8007360:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800736c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007370:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007374:	b29b      	uxth	r3, r3
 8007376:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	78db      	ldrb	r3, [r3, #3]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d024      	beq.n	80073ca <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007396:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800739a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800739e:	f083 0320 	eor.w	r3, r3, #32
 80073a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	441a      	add	r2, r3
 80073b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80073b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]
 80073c8:	e01d      	b.n	8007406 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80073f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007402:	b29b      	uxth	r3, r3
 8007404:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	441a      	add	r2, r3
 800742a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800742e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800743a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800743e:	b29b      	uxth	r3, r3
 8007440:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007442:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007446:	4618      	mov	r0, r3
 8007448:	379c      	adds	r7, #156	@ 0x9c
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop

08007454 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007454:	b480      	push	{r7}
 8007456:	b08d      	sub	sp, #52	@ 0x34
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	7b1b      	ldrb	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 808e 	bne.w	8007584 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d044      	beq.n	80074fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	81bb      	strh	r3, [r7, #12]
 800747e:	89bb      	ldrh	r3, [r7, #12]
 8007480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <USB_DeactivateEndpoint+0x6c>
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800749a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749e:	817b      	strh	r3, [r7, #10]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	441a      	add	r2, r3
 80074aa:	897b      	ldrh	r3, [r7, #10]
 80074ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d6:	813b      	strh	r3, [r7, #8]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	441a      	add	r2, r3
 80074e2:	893b      	ldrh	r3, [r7, #8]
 80074e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	8013      	strh	r3, [r2, #0]
 80074f8:	e192      	b.n	8007820 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	827b      	strh	r3, [r7, #18]
 8007508:	8a7b      	ldrh	r3, [r7, #18]
 800750a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01b      	beq.n	800754a <USB_DeactivateEndpoint+0xf6>
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007528:	823b      	strh	r3, [r7, #16]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	8a3b      	ldrh	r3, [r7, #16]
 8007536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800753e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007546:	b29b      	uxth	r3, r3
 8007548:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800755c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007560:	81fb      	strh	r3, [r7, #14]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	441a      	add	r2, r3
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757e:	b29b      	uxth	r3, r3
 8007580:	8013      	strh	r3, [r2, #0]
 8007582:	e14d      	b.n	8007820 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 80a5 	bne.w	80076d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	843b      	strh	r3, [r7, #32]
 800759c:	8c3b      	ldrh	r3, [r7, #32]
 800759e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <USB_DeactivateEndpoint+0x18a>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075bc:	83fb      	strh	r3, [r7, #30]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8bfb      	ldrh	r3, [r7, #30]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	83bb      	strh	r3, [r7, #28]
 80075ec:	8bbb      	ldrh	r3, [r7, #28]
 80075ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01b      	beq.n	800762e <USB_DeactivateEndpoint+0x1da>
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760c:	837b      	strh	r3, [r7, #26]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	441a      	add	r2, r3
 8007618:	8b7b      	ldrh	r3, [r7, #26]
 800761a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800761e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007626:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800762a:	b29b      	uxth	r3, r3
 800762c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007644:	833b      	strh	r3, [r7, #24]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	8b3b      	ldrh	r3, [r7, #24]
 8007652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800765a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800765e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767c:	82fb      	strh	r3, [r7, #22]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	441a      	add	r2, r3
 8007688:	8afb      	ldrh	r3, [r7, #22]
 800768a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800769a:	b29b      	uxth	r3, r3
 800769c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b4:	82bb      	strh	r3, [r7, #20]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	441a      	add	r2, r3
 80076c0:	8abb      	ldrh	r3, [r7, #20]
 80076c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8013      	strh	r3, [r2, #0]
 80076d6:	e0a3      	b.n	8007820 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80076e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80076e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01b      	beq.n	8007728 <USB_DeactivateEndpoint+0x2d4>
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007706:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800771c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007736:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01b      	beq.n	8007778 <USB_DeactivateEndpoint+0x324>
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007756:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800778a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800779c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	441a      	add	r2, r3
 80077d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	441a      	add	r2, r3
 800780a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800780c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781c:	b29b      	uxth	r3, r3
 800781e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3734      	adds	r7, #52	@ 0x34
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b0ac      	sub	sp, #176	@ 0xb0
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 84ca 	bne.w	80081d6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d904      	bls.n	8007858 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007856:	e003      	b.n	8007860 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	7b1b      	ldrb	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d122      	bne.n	80078ae <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	6959      	ldr	r1, [r3, #20]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	88da      	ldrh	r2, [r3, #6]
 8007870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007874:	b29b      	uxth	r3, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 febd 	bl	80085f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4413      	add	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	00da      	lsls	r2, r3, #3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	4413      	add	r3, r2
 800789a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	f000 bc6f 	b.w	800818c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	78db      	ldrb	r3, [r3, #3]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	f040 831e 	bne.w	8007ef4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	6a1a      	ldr	r2, [r3, #32]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	f240 82cf 	bls.w	8007e64 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	441a      	add	r2, r3
 80078ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80078ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80078fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fe:	b29b      	uxth	r3, r3
 8007900:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6a1a      	ldr	r2, [r3, #32]
 8007906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800790a:	1ad2      	subs	r2, r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 814f 	beq.w	8007bc6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	633b      	str	r3, [r7, #48]	@ 0x30
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d16b      	bne.n	8007a0c <USB_EPStartXfer+0x1de>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	4413      	add	r3, r2
 8007946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	00da      	lsls	r2, r3, #3
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	4413      	add	r3, r2
 8007952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007962:	b29a      	uxth	r2, r3
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <USB_EPStartXfer+0x158>
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797e:	b29a      	uxth	r2, r3
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	e05b      	b.n	8007a3e <USB_EPStartXfer+0x210>
 8007986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800798a:	2b3e      	cmp	r3, #62	@ 0x3e
 800798c:	d81c      	bhi.n	80079c8 <USB_EPStartXfer+0x19a>
 800798e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <USB_EPStartXfer+0x180>
 80079a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079a8:	3301      	adds	r3, #1
 80079aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	029b      	lsls	r3, r3, #10
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4313      	orrs	r3, r2
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e03a      	b.n	8007a3e <USB_EPStartXfer+0x210>
 80079c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <USB_EPStartXfer+0x1ba>
 80079de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079e2:	3b01      	subs	r3, #1
 80079e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	4313      	orrs	r3, r2
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	e018      	b.n	8007a3e <USB_EPStartXfer+0x210>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d114      	bne.n	8007a3e <USB_EPStartXfer+0x210>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	4413      	add	r3, r2
 8007a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	00da      	lsls	r2, r3, #3
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	895b      	ldrh	r3, [r3, #10]
 8007a42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6959      	ldr	r1, [r3, #20]
 8007a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fdce 	bl	80085f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a62:	441a      	add	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d907      	bls.n	8007a84 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	6a1a      	ldr	r2, [r3, #32]
 8007a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	621a      	str	r2, [r3, #32]
 8007a82:	e006      	b.n	8007a92 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d16b      	bne.n	8007b72 <USB_EPStartXfer+0x344>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	4413      	add	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00da      	lsls	r2, r3, #3
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <USB_EPStartXfer+0x2be>
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	e05d      	b.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007af2:	d81c      	bhi.n	8007b2e <USB_EPStartXfer+0x300>
 8007af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d004      	beq.n	8007b14 <USB_EPStartXfer+0x2e6>
 8007b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	029b      	lsls	r3, r3, #10
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	e03c      	b.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <USB_EPStartXfer+0x320>
 8007b44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e01a      	b.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d116      	bne.n	8007ba8 <USB_EPStartXfer+0x37a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	623b      	str	r3, [r7, #32]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00da      	lsls	r2, r3, #3
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	4413      	add	r3, r2
 8007b98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	891b      	ldrh	r3, [r3, #8]
 8007bac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6959      	ldr	r1, [r3, #20]
 8007bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd19 	bl	80085f6 <USB_WritePMA>
 8007bc4:	e2e2      	b.n	800818c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d16b      	bne.n	8007ca6 <USB_EPStartXfer+0x478>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bde:	4413      	add	r3, r2
 8007be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	00da      	lsls	r2, r3, #3
 8007be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bea:	4413      	add	r3, r2
 8007bec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <USB_EPStartXfer+0x3f2>
 8007c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1c:	801a      	strh	r2, [r3, #0]
 8007c1e:	e05d      	b.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c26:	d81c      	bhi.n	8007c62 <USB_EPStartXfer+0x434>
 8007c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <USB_EPStartXfer+0x41a>
 8007c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c42:	3301      	adds	r3, #1
 8007c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	029b      	lsls	r3, r3, #10
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	e03c      	b.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <USB_EPStartXfer+0x454>
 8007c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	029b      	lsls	r3, r3, #10
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4313      	orrs	r3, r2
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ca2:	801a      	strh	r2, [r3, #0]
 8007ca4:	e01a      	b.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d116      	bne.n	8007cdc <USB_EPStartXfer+0x4ae>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cbe:	4413      	add	r3, r2
 8007cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	00da      	lsls	r2, r3, #3
 8007cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	891b      	ldrh	r3, [r3, #8]
 8007ce0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6959      	ldr	r1, [r3, #20]
 8007ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fc7f 	bl	80085f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695a      	ldr	r2, [r3, #20]
 8007cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d00:	441a      	add	r2, r3
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	6a1a      	ldr	r2, [r3, #32]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d907      	bls.n	8007d22 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6a1a      	ldr	r2, [r3, #32]
 8007d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	621a      	str	r2, [r3, #32]
 8007d20:	e006      	b.n	8007d30 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d16b      	bne.n	8007e14 <USB_EPStartXfer+0x5e6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	4413      	add	r3, r2
 8007d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	00da      	lsls	r2, r3, #3
 8007d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <USB_EPStartXfer+0x560>
 8007d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	e05b      	b.n	8007e46 <USB_EPStartXfer+0x618>
 8007d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d92:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d94:	d81c      	bhi.n	8007dd0 <USB_EPStartXfer+0x5a2>
 8007d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <USB_EPStartXfer+0x588>
 8007dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007db0:	3301      	adds	r3, #1
 8007db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	029b      	lsls	r3, r3, #10
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dcc:	801a      	strh	r2, [r3, #0]
 8007dce:	e03a      	b.n	8007e46 <USB_EPStartXfer+0x618>
 8007dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <USB_EPStartXfer+0x5c2>
 8007de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dea:	3b01      	subs	r3, #1
 8007dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	029b      	lsls	r3, r3, #10
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e018      	b.n	8007e46 <USB_EPStartXfer+0x618>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d114      	bne.n	8007e46 <USB_EPStartXfer+0x618>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e28:	4413      	add	r3, r2
 8007e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	00da      	lsls	r2, r3, #3
 8007e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e34:	4413      	add	r3, r2
 8007e36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	895b      	ldrh	r3, [r3, #10]
 8007e4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6959      	ldr	r1, [r3, #20]
 8007e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fbca 	bl	80085f6 <USB_WritePMA>
 8007e62:	e193      	b.n	800818c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e82:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	441a      	add	r2, r3
 8007e90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb8:	4413      	add	r3, r2
 8007eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	00da      	lsls	r2, r3, #3
 8007ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ed4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	891b      	ldrh	r3, [r3, #8]
 8007eda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6959      	ldr	r1, [r3, #20]
 8007ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb82 	bl	80085f6 <USB_WritePMA>
 8007ef2:	e14b      	b.n	800818c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	6a1a      	ldr	r2, [r3, #32]
 8007ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007efc:	1ad2      	subs	r2, r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 809a 	beq.w	800804e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d16b      	bne.n	8007ffe <USB_EPStartXfer+0x7d0>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f36:	4413      	add	r3, r2
 8007f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	00da      	lsls	r2, r3, #3
 8007f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f42:	4413      	add	r3, r2
 8007f44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f48:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <USB_EPStartXfer+0x74a>
 8007f62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	e05b      	b.n	8008030 <USB_EPStartXfer+0x802>
 8007f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f7e:	d81c      	bhi.n	8007fba <USB_EPStartXfer+0x78c>
 8007f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <USB_EPStartXfer+0x772>
 8007f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	029b      	lsls	r3, r3, #10
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e03a      	b.n	8008030 <USB_EPStartXfer+0x802>
 8007fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fc8:	f003 031f 	and.w	r3, r3, #31
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d104      	bne.n	8007fda <USB_EPStartXfer+0x7ac>
 8007fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	029b      	lsls	r3, r3, #10
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4313      	orrs	r3, r2
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e018      	b.n	8008030 <USB_EPStartXfer+0x802>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d114      	bne.n	8008030 <USB_EPStartXfer+0x802>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800c:	b29b      	uxth	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008012:	4413      	add	r3, r2
 8008014:	673b      	str	r3, [r7, #112]	@ 0x70
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	00da      	lsls	r2, r3, #3
 800801c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800801e:	4413      	add	r3, r2
 8008020:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008024:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800802a:	b29a      	uxth	r2, r3
 800802c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800802e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	895b      	ldrh	r3, [r3, #10]
 8008034:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	6959      	ldr	r1, [r3, #20]
 800803c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008040:	b29b      	uxth	r3, r3
 8008042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fad5 	bl	80085f6 <USB_WritePMA>
 800804c:	e09e      	b.n	800818c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d16b      	bne.n	800812e <USB_EPStartXfer+0x900>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008060:	b29b      	uxth	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008066:	4413      	add	r3, r2
 8008068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	00da      	lsls	r2, r3, #3
 8008070:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008072:	4413      	add	r3, r2
 8008074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800807a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008084:	b29a      	uxth	r2, r3
 8008086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <USB_EPStartXfer+0x87a>
 8008092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	e063      	b.n	8008170 <USB_EPStartXfer+0x942>
 80080a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80080ae:	d81c      	bhi.n	80080ea <USB_EPStartXfer+0x8bc>
 80080b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <USB_EPStartXfer+0x8a2>
 80080c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080ca:	3301      	adds	r3, #1
 80080cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080da:	b29b      	uxth	r3, r3
 80080dc:	029b      	lsls	r3, r3, #10
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4313      	orrs	r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080e6:	801a      	strh	r2, [r3, #0]
 80080e8:	e042      	b.n	8008170 <USB_EPStartXfer+0x942>
 80080ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <USB_EPStartXfer+0x8dc>
 8008100:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008104:	3b01      	subs	r3, #1
 8008106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800810a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008114:	b29b      	uxth	r3, r3
 8008116:	029b      	lsls	r3, r3, #10
 8008118:	b29b      	uxth	r3, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	b29b      	uxth	r3, r3
 800811e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008126:	b29a      	uxth	r2, r3
 8008128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	e020      	b.n	8008170 <USB_EPStartXfer+0x942>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d11c      	bne.n	8008170 <USB_EPStartXfer+0x942>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008142:	b29b      	uxth	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800814a:	4413      	add	r3, r2
 800814c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	00da      	lsls	r2, r3, #3
 8008156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800815a:	4413      	add	r3, r2
 800815c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800816e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	891b      	ldrh	r3, [r3, #8]
 8008174:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	6959      	ldr	r1, [r3, #20]
 800817c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008180:	b29b      	uxth	r3, r3
 8008182:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa35 	bl	80085f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800819e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081a2:	817b      	strh	r3, [r7, #10]
 80081a4:	897b      	ldrh	r3, [r7, #10]
 80081a6:	f083 0310 	eor.w	r3, r3, #16
 80081aa:	817b      	strh	r3, [r7, #10]
 80081ac:	897b      	ldrh	r3, [r7, #10]
 80081ae:	f083 0320 	eor.w	r3, r3, #32
 80081b2:	817b      	strh	r3, [r7, #10]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	441a      	add	r2, r3
 80081be:	897b      	ldrh	r3, [r7, #10]
 80081c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	8013      	strh	r3, [r2, #0]
 80081d4:	e0d5      	b.n	8008382 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	7b1b      	ldrb	r3, [r3, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d156      	bne.n	800828c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d122      	bne.n	800822c <USB_EPStartXfer+0x9fe>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	78db      	ldrb	r3, [r3, #3]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d11e      	bne.n	800822c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008204:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	441a      	add	r2, r3
 8008212:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800821a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800821e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008226:	b29b      	uxth	r3, r3
 8008228:	8013      	strh	r3, [r2, #0]
 800822a:	e01d      	b.n	8008268 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800823e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008242:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	441a      	add	r2, r3
 8008250:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	699a      	ldr	r2, [r3, #24]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	d907      	bls.n	8008284 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	1ad2      	subs	r2, r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	619a      	str	r2, [r3, #24]
 8008282:	e054      	b.n	800832e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	619a      	str	r2, [r3, #24]
 800828a:	e050      	b.n	800832e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d142      	bne.n	800831a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d048      	beq.n	800832e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <USB_EPStartXfer+0xa96>
 80082b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10b      	bne.n	80082dc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d12e      	bne.n	800832e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d128      	bne.n	800832e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	441a      	add	r2, r3
 8008300:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800830c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008310:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008314:	b29b      	uxth	r3, r3
 8008316:	8013      	strh	r3, [r2, #0]
 8008318:	e009      	b.n	800832e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	78db      	ldrb	r3, [r3, #3]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d103      	bne.n	800832a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
 8008328:	e001      	b.n	800832e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e02a      	b.n	8008384 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008344:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008348:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800834c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008350:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008354:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008358:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800835c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	441a      	add	r2, r3
 800836a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800836e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800837a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800837e:	b29b      	uxth	r3, r3
 8008380:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	37b0      	adds	r7, #176	@ 0xb0
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d020      	beq.n	80083e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083b4:	81bb      	strh	r3, [r7, #12]
 80083b6:	89bb      	ldrh	r3, [r7, #12]
 80083b8:	f083 0310 	eor.w	r3, r3, #16
 80083bc:	81bb      	strh	r3, [r7, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	89bb      	ldrh	r3, [r7, #12]
 80083ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083da:	b29b      	uxth	r3, r3
 80083dc:	8013      	strh	r3, [r2, #0]
 80083de:	e01f      	b.n	8008420 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f6:	81fb      	strh	r3, [r7, #14]
 80083f8:	89fb      	ldrh	r3, [r7, #14]
 80083fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083fe:	81fb      	strh	r3, [r7, #14]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	441a      	add	r2, r3
 800840a:	89fb      	ldrh	r3, [r7, #14]
 800840c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800841c:	b29b      	uxth	r3, r3
 800841e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800842e:	b480      	push	{r7}
 8008430:	b087      	sub	sp, #28
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d04c      	beq.n	80084da <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	823b      	strh	r3, [r7, #16]
 800844e:	8a3b      	ldrh	r3, [r7, #16]
 8008450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01b      	beq.n	8008490 <USB_EPClearStall+0x62>
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800846a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846e:	81fb      	strh	r3, [r7, #14]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	89fb      	ldrh	r3, [r7, #14]
 800847c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008488:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800848c:	b29b      	uxth	r3, r3
 800848e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	78db      	ldrb	r3, [r3, #3]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d06c      	beq.n	8008572 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ae:	81bb      	strh	r3, [r7, #12]
 80084b0:	89bb      	ldrh	r3, [r7, #12]
 80084b2:	f083 0320 	eor.w	r3, r3, #32
 80084b6:	81bb      	strh	r3, [r7, #12]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	441a      	add	r2, r3
 80084c2:	89bb      	ldrh	r3, [r7, #12]
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]
 80084d8:	e04b      	b.n	8008572 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	82fb      	strh	r3, [r7, #22]
 80084e8:	8afb      	ldrh	r3, [r7, #22]
 80084ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d01b      	beq.n	800852a <USB_EPClearStall+0xfc>
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008508:	82bb      	strh	r3, [r7, #20]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	8abb      	ldrh	r3, [r7, #20]
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800851e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800853c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008540:	827b      	strh	r3, [r7, #18]
 8008542:	8a7b      	ldrh	r3, [r7, #18]
 8008544:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008548:	827b      	strh	r3, [r7, #18]
 800854a:	8a7b      	ldrh	r3, [r7, #18]
 800854c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008550:	827b      	strh	r3, [r7, #18]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	441a      	add	r2, r3
 800855c:	8a7b      	ldrh	r3, [r7, #18]
 800855e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800856a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d103      	bne.n	800859a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2280      	movs	r2, #128	@ 0x80
 8008596:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b08b      	sub	sp, #44	@ 0x2c
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	4611      	mov	r1, r2
 8008602:	461a      	mov	r2, r3
 8008604:	460b      	mov	r3, r1
 8008606:	80fb      	strh	r3, [r7, #6]
 8008608:	4613      	mov	r3, r2
 800860a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800860c:	88bb      	ldrh	r3, [r7, #4]
 800860e:	3301      	adds	r3, #1
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008626:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
 800862c:	e01c      	b.n	8008668 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3301      	adds	r3, #1
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b21b      	sxth	r3, r3
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	b21a      	sxth	r2, r3
 8008640:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008644:	4313      	orrs	r3, r2
 8008646:	b21b      	sxth	r3, r3
 8008648:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	8a7a      	ldrh	r2, [r7, #18]
 800864e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	3302      	adds	r3, #2
 8008654:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	3301      	adds	r3, #1
 800865a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	3301      	adds	r3, #1
 8008660:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	3b01      	subs	r3, #1
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1df      	bne.n	800862e <USB_WritePMA+0x38>
  }
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	372c      	adds	r7, #44	@ 0x2c
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800867c:	b480      	push	{r7}
 800867e:	b08b      	sub	sp, #44	@ 0x2c
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4611      	mov	r1, r2
 8008688:	461a      	mov	r2, r3
 800868a:	460b      	mov	r3, r1
 800868c:	80fb      	strh	r3, [r7, #6]
 800868e:	4613      	mov	r3, r2
 8008690:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008692:	88bb      	ldrh	r3, [r7, #4]
 8008694:	085b      	lsrs	r3, r3, #1
 8008696:	b29b      	uxth	r3, r3
 8008698:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80086b2:	e018      	b.n	80086e6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	3302      	adds	r3, #2
 80086c0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	3301      	adds	r3, #1
 80086ce:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3301      	adds	r3, #1
 80086de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	3b01      	subs	r3, #1
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e3      	bne.n	80086b4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086ec:	88bb      	ldrh	r3, [r7, #4]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	b2da      	uxtb	r2, r3
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	701a      	strb	r2, [r3, #0]
  }
}
 8008708:	bf00      	nop
 800870a:	372c      	adds	r7, #44	@ 0x2c
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008720:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008724:	f004 fef0 	bl	800d508 <USBD_static_malloc>
 8008728:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d105      	bne.n	800873c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008738:	2302      	movs	r3, #2
 800873a:	e066      	b.n	800880a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7c1b      	ldrb	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d119      	bne.n	8008780 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800874c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008750:	2202      	movs	r2, #2
 8008752:	2181      	movs	r1, #129	@ 0x81
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f004 fd7e 	bl	800d256 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008764:	2202      	movs	r2, #2
 8008766:	2101      	movs	r1, #1
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f004 fd74 	bl	800d256 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2210      	movs	r2, #16
 800877a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800877e:	e016      	b.n	80087ae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008780:	2340      	movs	r3, #64	@ 0x40
 8008782:	2202      	movs	r2, #2
 8008784:	2181      	movs	r1, #129	@ 0x81
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f004 fd65 	bl	800d256 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008792:	2340      	movs	r3, #64	@ 0x40
 8008794:	2202      	movs	r2, #2
 8008796:	2101      	movs	r1, #1
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f004 fd5c 	bl	800d256 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2210      	movs	r2, #16
 80087aa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087ae:	2308      	movs	r3, #8
 80087b0:	2203      	movs	r2, #3
 80087b2:	2182      	movs	r1, #130	@ 0x82
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f004 fd4e 	bl	800d256 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	7c1b      	ldrb	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d109      	bne.n	80087f8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087ee:	2101      	movs	r1, #1
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f004 fe1f 	bl	800d434 <USBD_LL_PrepareReceive>
 80087f6:	e007      	b.n	8008808 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087fe:	2340      	movs	r3, #64	@ 0x40
 8008800:	2101      	movs	r1, #1
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f004 fe16 	bl	800d434 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800881e:	2181      	movs	r1, #129	@ 0x81
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f004 fd3e 	bl	800d2a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800882c:	2101      	movs	r1, #1
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f004 fd37 	bl	800d2a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800883c:	2182      	movs	r1, #130	@ 0x82
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f004 fd2f 	bl	800d2a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00e      	beq.n	800887c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800886e:	4618      	mov	r0, r3
 8008870:	f004 fe58 	bl	800d524 <USBD_static_free>
    pdev->pClassData = NULL;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008898:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e0af      	b.n	8008a10 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d03f      	beq.n	800893c <USBD_CDC_Setup+0xb4>
 80088bc:	2b20      	cmp	r3, #32
 80088be:	f040 809f 	bne.w	8008a00 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	88db      	ldrh	r3, [r3, #6]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02e      	beq.n	8008928 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	da16      	bge.n	8008902 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80088e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	88d2      	ldrh	r2, [r2, #6]
 80088e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	88db      	ldrh	r3, [r3, #6]
 80088ec:	2b07      	cmp	r3, #7
 80088ee:	bf28      	it	cs
 80088f0:	2307      	movcs	r3, #7
 80088f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	89fa      	ldrh	r2, [r7, #14]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 facf 	bl	8009e9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008900:	e085      	b.n	8008a0e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	785a      	ldrb	r2, [r3, #1]
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	88db      	ldrh	r3, [r3, #6]
 8008910:	b2da      	uxtb	r2, r3
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008918:	6939      	ldr	r1, [r7, #16]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	88db      	ldrh	r3, [r3, #6]
 800891e:	461a      	mov	r2, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 fae8 	bl	8009ef6 <USBD_CtlPrepareRx>
      break;
 8008926:	e072      	b.n	8008a0e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	7850      	ldrb	r0, [r2, #1]
 8008934:	2200      	movs	r2, #0
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	4798      	blx	r3
      break;
 800893a:	e068      	b.n	8008a0e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b0b      	cmp	r3, #11
 8008942:	d852      	bhi.n	80089ea <USBD_CDC_Setup+0x162>
 8008944:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <USBD_CDC_Setup+0xc4>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	0800897d 	.word	0x0800897d
 8008950:	080089f9 	.word	0x080089f9
 8008954:	080089eb 	.word	0x080089eb
 8008958:	080089eb 	.word	0x080089eb
 800895c:	080089eb 	.word	0x080089eb
 8008960:	080089eb 	.word	0x080089eb
 8008964:	080089eb 	.word	0x080089eb
 8008968:	080089eb 	.word	0x080089eb
 800896c:	080089eb 	.word	0x080089eb
 8008970:	080089eb 	.word	0x080089eb
 8008974:	080089a7 	.word	0x080089a7
 8008978:	080089d1 	.word	0x080089d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b03      	cmp	r3, #3
 8008986:	d107      	bne.n	8008998 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008988:	f107 030a 	add.w	r3, r7, #10
 800898c:	2202      	movs	r2, #2
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fa84 	bl	8009e9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008996:	e032      	b.n	80089fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f001 fa0e 	bl	8009dbc <USBD_CtlError>
            ret = USBD_FAIL;
 80089a0:	2303      	movs	r3, #3
 80089a2:	75fb      	strb	r3, [r7, #23]
          break;
 80089a4:	e02b      	b.n	80089fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d107      	bne.n	80089c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80089b2:	f107 030d 	add.w	r3, r7, #13
 80089b6:	2201      	movs	r2, #1
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 fa6f 	bl	8009e9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089c0:	e01d      	b.n	80089fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f9f9 	bl	8009dbc <USBD_CtlError>
            ret = USBD_FAIL;
 80089ca:	2303      	movs	r3, #3
 80089cc:	75fb      	strb	r3, [r7, #23]
          break;
 80089ce:	e016      	b.n	80089fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d00f      	beq.n	80089fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 f9ec 	bl	8009dbc <USBD_CtlError>
            ret = USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089e8:	e008      	b.n	80089fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 f9e5 	bl	8009dbc <USBD_CtlError>
          ret = USBD_FAIL;
 80089f2:	2303      	movs	r3, #3
 80089f4:	75fb      	strb	r3, [r7, #23]
          break;
 80089f6:	e002      	b.n	80089fe <USBD_CDC_Setup+0x176>
          break;
 80089f8:	bf00      	nop
 80089fa:	e008      	b.n	8008a0e <USBD_CDC_Setup+0x186>
          break;
 80089fc:	bf00      	nop
      }
      break;
 80089fe:	e006      	b.n	8008a0e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 f9da 	bl	8009dbc <USBD_CtlError>
      ret = USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008a2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e04f      	b.n	8008ada <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	3318      	adds	r3, #24
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d029      	beq.n	8008aac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	3318      	adds	r3, #24
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	78f9      	ldrb	r1, [r7, #3]
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	440b      	add	r3, r1
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	4403      	add	r3, r0
 8008a78:	3320      	adds	r3, #32
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a80:	fb01 f303 	mul.w	r3, r1, r3
 8008a84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d110      	bne.n	8008aac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	3318      	adds	r3, #24
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a9e:	78f9      	ldrb	r1, [r7, #3]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f004 fca4 	bl	800d3f2 <USBD_LL_Transmit>
 8008aaa:	e015      	b.n	8008ad8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008af4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e015      	b.n	8008b30 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f004 fcb4 	bl	800d476 <USBD_LL_GetRxDataSize>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e01a      	b.n	8008b88 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d014      	beq.n	8008b86 <USBD_CDC_EP0_RxReady+0x4e>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b62:	2bff      	cmp	r3, #255	@ 0xff
 8008b64:	d00f      	beq.n	8008b86 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008b74:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	22ff      	movs	r2, #255	@ 0xff
 8008b82:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2243      	movs	r2, #67	@ 0x43
 8008b9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008b9e:	4b03      	ldr	r3, [pc, #12]	@ (8008bac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000094 	.word	0x20000094

08008bb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2243      	movs	r2, #67	@ 0x43
 8008bbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008bbe:	4b03      	ldr	r3, [pc, #12]	@ (8008bcc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000050 	.word	0x20000050

08008bd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2243      	movs	r2, #67	@ 0x43
 8008bdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008bde:	4b03      	ldr	r3, [pc, #12]	@ (8008bec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	200000d8 	.word	0x200000d8

08008bf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	220a      	movs	r2, #10
 8008bfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008bfe:	4b03      	ldr	r3, [pc, #12]	@ (8008c0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	2000000c 	.word	0x2000000c

08008c10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e004      	b.n	8008c2e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b087      	sub	sp, #28
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c4c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e008      	b.n	8008c6a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e004      	b.n	8008c9c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e01a      	b.n	8008d00 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d114      	bne.n	8008cfe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008cf2:	2181      	movs	r1, #129	@ 0x81
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f004 fb7c 	bl	800d3f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e016      	b.n	8008d54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	7c1b      	ldrb	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d109      	bne.n	8008d42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d38:	2101      	movs	r1, #1
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f004 fb7a 	bl	800d434 <USBD_LL_PrepareReceive>
 8008d40:	e007      	b.n	8008d52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d48:	2340      	movs	r3, #64	@ 0x40
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f004 fb71 	bl	800d434 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e01f      	b.n	8008db4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	79fa      	ldrb	r2, [r7, #7]
 8008da6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f004 f9d9 	bl	800d160 <USBD_LL_Init>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e016      	b.n	8008e02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	f107 020e 	add.w	r2, r7, #14
 8008df4:	4610      	mov	r0, r2
 8008df6:	4798      	blx	r3
 8008df8:	4602      	mov	r2, r0
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f004 fa04 	bl	800d220 <USBD_LL_Start>
 8008e18:	4603      	mov	r3, r0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	78fa      	ldrb	r2, [r7, #3]
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
  }

  return USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 ff48 	bl	8009d48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ed4:	f003 031f 	and.w	r3, r3, #31
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d01a      	beq.n	8008f12 <USBD_LL_SetupStage+0x72>
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d822      	bhi.n	8008f26 <USBD_LL_SetupStage+0x86>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <USBD_LL_SetupStage+0x4a>
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d00a      	beq.n	8008efe <USBD_LL_SetupStage+0x5e>
 8008ee8:	e01d      	b.n	8008f26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f9f0 	bl	80092d8 <USBD_StdDevReq>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
      break;
 8008efc:	e020      	b.n	8008f40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa54 	bl	80093b4 <USBD_StdItfReq>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	e016      	b.n	8008f40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa93 	bl	8009446 <USBD_StdEPReq>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
      break;
 8008f24:	e00c      	b.n	8008f40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f004 f9d3 	bl	800d2e0 <USBD_LL_StallEP>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3e:	bf00      	nop
  }

  return ret;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	460b      	mov	r3, r1
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008f58:	7afb      	ldrb	r3, [r7, #11]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d138      	bne.n	8008fd0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d14a      	bne.n	8009006 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d913      	bls.n	8008fa4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	1ad2      	subs	r2, r2, r3
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	4293      	cmp	r3, r2
 8008f94:	bf28      	it	cs
 8008f96:	4613      	movcs	r3, r2
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 ffc7 	bl	8009f30 <USBD_CtlContinueRx>
 8008fa2:	e030      	b.n	8009006 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d10b      	bne.n	8008fc8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d005      	beq.n	8008fc8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 ffc2 	bl	8009f52 <USBD_CtlSendStatus>
 8008fce:	e01a      	b.n	8009006 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d114      	bne.n	8009006 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00e      	beq.n	8009006 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	7afa      	ldrb	r2, [r7, #11]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	e000      	b.n	8009008 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	460b      	mov	r3, r1
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d16b      	bne.n	80090fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3314      	adds	r3, #20
 8009028:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009030:	2b02      	cmp	r3, #2
 8009032:	d156      	bne.n	80090e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d914      	bls.n	800906a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	1ad2      	subs	r2, r2, r3
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	461a      	mov	r2, r3
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 ff3c 	bl	8009ed4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800905c:	2300      	movs	r3, #0
 800905e:	2200      	movs	r2, #0
 8009060:	2100      	movs	r1, #0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f004 f9e6 	bl	800d434 <USBD_LL_PrepareReceive>
 8009068:	e03b      	b.n	80090e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	429a      	cmp	r2, r3
 8009074:	d11c      	bne.n	80090b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800907e:	429a      	cmp	r2, r3
 8009080:	d316      	bcc.n	80090b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800908c:	429a      	cmp	r2, r3
 800908e:	d20f      	bcs.n	80090b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009090:	2200      	movs	r2, #0
 8009092:	2100      	movs	r1, #0
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 ff1d 	bl	8009ed4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090a2:	2300      	movs	r3, #0
 80090a4:	2200      	movs	r2, #0
 80090a6:	2100      	movs	r1, #0
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f004 f9c3 	bl	800d434 <USBD_LL_PrepareReceive>
 80090ae:	e018      	b.n	80090e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d10b      	bne.n	80090d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090d4:	2180      	movs	r1, #128	@ 0x80
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f004 f902 	bl	800d2e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 ff4b 	bl	8009f78 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d122      	bne.n	8009132 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f7ff fe98 	bl	8008e22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80090fa:	e01a      	b.n	8009132 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b03      	cmp	r3, #3
 8009106:	d114      	bne.n	8009132 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00e      	beq.n	8009132 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	7afa      	ldrb	r2, [r7, #11]
 800911e:	4611      	mov	r1, r2
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	4798      	blx	r3
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	e000      	b.n	8009134 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800916c:	2303      	movs	r3, #3
 800916e:	e02f      	b.n	80091d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00f      	beq.n	800919a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6852      	ldr	r2, [r2, #4]
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	4611      	mov	r1, r2
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800919a:	2340      	movs	r3, #64	@ 0x40
 800919c:	2200      	movs	r2, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f004 f858 	bl	800d256 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2240      	movs	r2, #64	@ 0x40
 80091b2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091b6:	2340      	movs	r3, #64	@ 0x40
 80091b8:	2200      	movs	r2, #0
 80091ba:	2180      	movs	r1, #128	@ 0x80
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f004 f84a 	bl	800d256 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2240      	movs	r2, #64	@ 0x40
 80091cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	78fa      	ldrb	r2, [r7, #3]
 80091e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009206:	b2da      	uxtb	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2204      	movs	r2, #4
 8009212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b04      	cmp	r3, #4
 8009236:	d106      	bne.n	8009246 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800923e:	b2da      	uxtb	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	e012      	b.n	8009290 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b03      	cmp	r3, #3
 8009274:	d10b      	bne.n	800928e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	3301      	adds	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80092b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	b21a      	sxth	r2, r3
 80092be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	b21b      	sxth	r3, r3
 80092c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80092c8:	89fb      	ldrh	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
	...

080092d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092ee:	2b40      	cmp	r3, #64	@ 0x40
 80092f0:	d005      	beq.n	80092fe <USBD_StdDevReq+0x26>
 80092f2:	2b40      	cmp	r3, #64	@ 0x40
 80092f4:	d853      	bhi.n	800939e <USBD_StdDevReq+0xc6>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <USBD_StdDevReq+0x3a>
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	d14f      	bne.n	800939e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]
      break;
 8009310:	e04a      	b.n	80093a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	2b09      	cmp	r3, #9
 8009318:	d83b      	bhi.n	8009392 <USBD_StdDevReq+0xba>
 800931a:	a201      	add	r2, pc, #4	@ (adr r2, 8009320 <USBD_StdDevReq+0x48>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009375 	.word	0x08009375
 8009324:	08009389 	.word	0x08009389
 8009328:	08009393 	.word	0x08009393
 800932c:	0800937f 	.word	0x0800937f
 8009330:	08009393 	.word	0x08009393
 8009334:	08009353 	.word	0x08009353
 8009338:	08009349 	.word	0x08009349
 800933c:	08009393 	.word	0x08009393
 8009340:	0800936b 	.word	0x0800936b
 8009344:	0800935d 	.word	0x0800935d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f9de 	bl	800970c <USBD_GetDescriptor>
          break;
 8009350:	e024      	b.n	800939c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fb6d 	bl	8009a34 <USBD_SetAddress>
          break;
 800935a:	e01f      	b.n	800939c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fbac 	bl	8009abc <USBD_SetConfig>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
          break;
 8009368:	e018      	b.n	800939c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fc4b 	bl	8009c08 <USBD_GetConfig>
          break;
 8009372:	e013      	b.n	800939c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fc7c 	bl	8009c74 <USBD_GetStatus>
          break;
 800937c:	e00e      	b.n	800939c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fcab 	bl	8009cdc <USBD_SetFeature>
          break;
 8009386:	e009      	b.n	800939c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fcba 	bl	8009d04 <USBD_ClrFeature>
          break;
 8009390:	e004      	b.n	800939c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fd11 	bl	8009dbc <USBD_CtlError>
          break;
 800939a:	bf00      	nop
      }
      break;
 800939c:	e004      	b.n	80093a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fd0b 	bl	8009dbc <USBD_CtlError>
      break;
 80093a6:	bf00      	nop
  }

  return ret;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop

080093b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093ca:	2b40      	cmp	r3, #64	@ 0x40
 80093cc:	d005      	beq.n	80093da <USBD_StdItfReq+0x26>
 80093ce:	2b40      	cmp	r3, #64	@ 0x40
 80093d0:	d82f      	bhi.n	8009432 <USBD_StdItfReq+0x7e>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <USBD_StdItfReq+0x26>
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d12b      	bne.n	8009432 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d81d      	bhi.n	8009424 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	889b      	ldrh	r3, [r3, #4]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d813      	bhi.n	800941a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	4798      	blx	r3
 8009400:	4603      	mov	r3, r0
 8009402:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	88db      	ldrh	r3, [r3, #6]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d110      	bne.n	800942e <USBD_StdItfReq+0x7a>
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10d      	bne.n	800942e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fd9d 	bl	8009f52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009418:	e009      	b.n	800942e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fccd 	bl	8009dbc <USBD_CtlError>
          break;
 8009422:	e004      	b.n	800942e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fcc8 	bl	8009dbc <USBD_CtlError>
          break;
 800942c:	e000      	b.n	8009430 <USBD_StdItfReq+0x7c>
          break;
 800942e:	bf00      	nop
      }
      break;
 8009430:	e004      	b.n	800943c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fcc1 	bl	8009dbc <USBD_CtlError>
      break;
 800943a:	bf00      	nop
  }

  return ret;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	889b      	ldrh	r3, [r3, #4]
 8009458:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009462:	2b40      	cmp	r3, #64	@ 0x40
 8009464:	d007      	beq.n	8009476 <USBD_StdEPReq+0x30>
 8009466:	2b40      	cmp	r3, #64	@ 0x40
 8009468:	f200 8145 	bhi.w	80096f6 <USBD_StdEPReq+0x2b0>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00c      	beq.n	800948a <USBD_StdEPReq+0x44>
 8009470:	2b20      	cmp	r3, #32
 8009472:	f040 8140 	bne.w	80096f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]
      break;
 8009488:	e13a      	b.n	8009700 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b03      	cmp	r3, #3
 8009490:	d007      	beq.n	80094a2 <USBD_StdEPReq+0x5c>
 8009492:	2b03      	cmp	r3, #3
 8009494:	f300 8129 	bgt.w	80096ea <USBD_StdEPReq+0x2a4>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d07f      	beq.n	800959c <USBD_StdEPReq+0x156>
 800949c:	2b01      	cmp	r3, #1
 800949e:	d03c      	beq.n	800951a <USBD_StdEPReq+0xd4>
 80094a0:	e123      	b.n	80096ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d002      	beq.n	80094b4 <USBD_StdEPReq+0x6e>
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d016      	beq.n	80094e0 <USBD_StdEPReq+0x9a>
 80094b2:	e02c      	b.n	800950e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00d      	beq.n	80094d6 <USBD_StdEPReq+0x90>
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b80      	cmp	r3, #128	@ 0x80
 80094be:	d00a      	beq.n	80094d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f003 ff0b 	bl	800d2e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ca:	2180      	movs	r1, #128	@ 0x80
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f003 ff07 	bl	800d2e0 <USBD_LL_StallEP>
 80094d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094d4:	e020      	b.n	8009518 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fc6f 	bl	8009dbc <USBD_CtlError>
              break;
 80094de:	e01b      	b.n	8009518 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	885b      	ldrh	r3, [r3, #2]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10e      	bne.n	8009506 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <USBD_StdEPReq+0xc0>
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b80      	cmp	r3, #128	@ 0x80
 80094f2:	d008      	beq.n	8009506 <USBD_StdEPReq+0xc0>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	88db      	ldrh	r3, [r3, #6]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f003 feed 	bl	800d2e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fd23 	bl	8009f52 <USBD_CtlSendStatus>

              break;
 800950c:	e004      	b.n	8009518 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc53 	bl	8009dbc <USBD_CtlError>
              break;
 8009516:	bf00      	nop
          }
          break;
 8009518:	e0ec      	b.n	80096f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b02      	cmp	r3, #2
 8009524:	d002      	beq.n	800952c <USBD_StdEPReq+0xe6>
 8009526:	2b03      	cmp	r3, #3
 8009528:	d016      	beq.n	8009558 <USBD_StdEPReq+0x112>
 800952a:	e030      	b.n	800958e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00d      	beq.n	800954e <USBD_StdEPReq+0x108>
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b80      	cmp	r3, #128	@ 0x80
 8009536:	d00a      	beq.n	800954e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f003 fecf 	bl	800d2e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009542:	2180      	movs	r1, #128	@ 0x80
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f003 fecb 	bl	800d2e0 <USBD_LL_StallEP>
 800954a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800954c:	e025      	b.n	800959a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fc33 	bl	8009dbc <USBD_CtlError>
              break;
 8009556:	e020      	b.n	800959a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	885b      	ldrh	r3, [r3, #2]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d11b      	bne.n	8009598 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f003 fed5 	bl	800d31e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fcec 	bl	8009f52 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
 8009588:	4603      	mov	r3, r0
 800958a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800958c:	e004      	b.n	8009598 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fc13 	bl	8009dbc <USBD_CtlError>
              break;
 8009596:	e000      	b.n	800959a <USBD_StdEPReq+0x154>
              break;
 8009598:	bf00      	nop
          }
          break;
 800959a:	e0ab      	b.n	80096f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d002      	beq.n	80095ae <USBD_StdEPReq+0x168>
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d032      	beq.n	8009612 <USBD_StdEPReq+0x1cc>
 80095ac:	e097      	b.n	80096de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d007      	beq.n	80095c4 <USBD_StdEPReq+0x17e>
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2b80      	cmp	r3, #128	@ 0x80
 80095b8:	d004      	beq.n	80095c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fbfd 	bl	8009dbc <USBD_CtlError>
                break;
 80095c2:	e091      	b.n	80096e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da0b      	bge.n	80095e4 <USBD_StdEPReq+0x19e>
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	3310      	adds	r3, #16
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	4413      	add	r3, r2
 80095e0:	3304      	adds	r3, #4
 80095e2:	e00b      	b.n	80095fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4413      	add	r3, r2
 80095fa:	3304      	adds	r3, #4
 80095fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2202      	movs	r2, #2
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fc47 	bl	8009e9e <USBD_CtlSendData>
              break;
 8009610:	e06a      	b.n	80096e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	da11      	bge.n	800963e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	f003 020f 	and.w	r2, r3, #15
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	440b      	add	r3, r1
 800962c:	3324      	adds	r3, #36	@ 0x24
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d117      	bne.n	8009664 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fbc0 	bl	8009dbc <USBD_CtlError>
                  break;
 800963c:	e054      	b.n	80096e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	f003 020f 	and.w	r2, r3, #15
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	440b      	add	r3, r1
 8009650:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fbad 	bl	8009dbc <USBD_CtlError>
                  break;
 8009662:	e041      	b.n	80096e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009668:	2b00      	cmp	r3, #0
 800966a:	da0b      	bge.n	8009684 <USBD_StdEPReq+0x23e>
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	3310      	adds	r3, #16
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	4413      	add	r3, r2
 8009680:	3304      	adds	r3, #4
 8009682:	e00b      	b.n	800969c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	4413      	add	r3, r2
 800969a:	3304      	adds	r3, #4
 800969c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <USBD_StdEPReq+0x264>
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b80      	cmp	r3, #128	@ 0x80
 80096a8:	d103      	bne.n	80096b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	e00e      	b.n	80096d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f003 fe50 	bl	800d35c <USBD_LL_IsStallEP>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2201      	movs	r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e002      	b.n	80096d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2202      	movs	r2, #2
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fbe1 	bl	8009e9e <USBD_CtlSendData>
              break;
 80096dc:	e004      	b.n	80096e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fb6b 	bl	8009dbc <USBD_CtlError>
              break;
 80096e6:	bf00      	nop
          }
          break;
 80096e8:	e004      	b.n	80096f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fb65 	bl	8009dbc <USBD_CtlError>
          break;
 80096f2:	bf00      	nop
      }
      break;
 80096f4:	e004      	b.n	8009700 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fb5f 	bl	8009dbc <USBD_CtlError>
      break;
 80096fe:	bf00      	nop
  }

  return ret;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	885b      	ldrh	r3, [r3, #2]
 8009726:	0a1b      	lsrs	r3, r3, #8
 8009728:	b29b      	uxth	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	2b0e      	cmp	r3, #14
 800972e:	f200 8152 	bhi.w	80099d6 <USBD_GetDescriptor+0x2ca>
 8009732:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <USBD_GetDescriptor+0x2c>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	080097a9 	.word	0x080097a9
 800973c:	080097c1 	.word	0x080097c1
 8009740:	08009801 	.word	0x08009801
 8009744:	080099d7 	.word	0x080099d7
 8009748:	080099d7 	.word	0x080099d7
 800974c:	08009977 	.word	0x08009977
 8009750:	080099a3 	.word	0x080099a3
 8009754:	080099d7 	.word	0x080099d7
 8009758:	080099d7 	.word	0x080099d7
 800975c:	080099d7 	.word	0x080099d7
 8009760:	080099d7 	.word	0x080099d7
 8009764:	080099d7 	.word	0x080099d7
 8009768:	080099d7 	.word	0x080099d7
 800976c:	080099d7 	.word	0x080099d7
 8009770:	08009775 	.word	0x08009775
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009796:	e126      	b.n	80099e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fb0e 	bl	8009dbc <USBD_CtlError>
        err++;
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	3301      	adds	r3, #1
 80097a4:	72fb      	strb	r3, [r7, #11]
      break;
 80097a6:	e11e      	b.n	80099e6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	7c12      	ldrb	r2, [r2, #16]
 80097b4:	f107 0108 	add.w	r1, r7, #8
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	60f8      	str	r0, [r7, #12]
      break;
 80097be:	e112      	b.n	80099e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7c1b      	ldrb	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10d      	bne.n	80097e4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d0:	f107 0208 	add.w	r2, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	2202      	movs	r2, #2
 80097e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097e2:	e100      	b.n	80099e6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ec:	f107 0208 	add.w	r2, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	2202      	movs	r2, #2
 80097fc:	701a      	strb	r2, [r3, #0]
      break;
 80097fe:	e0f2      	b.n	80099e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	885b      	ldrh	r3, [r3, #2]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b05      	cmp	r3, #5
 8009808:	f200 80ac 	bhi.w	8009964 <USBD_GetDescriptor+0x258>
 800980c:	a201      	add	r2, pc, #4	@ (adr r2, 8009814 <USBD_GetDescriptor+0x108>)
 800980e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009812:	bf00      	nop
 8009814:	0800982d 	.word	0x0800982d
 8009818:	08009861 	.word	0x08009861
 800981c:	08009895 	.word	0x08009895
 8009820:	080098c9 	.word	0x080098c9
 8009824:	080098fd 	.word	0x080098fd
 8009828:	08009931 	.word	0x08009931
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	7c12      	ldrb	r2, [r2, #16]
 8009844:	f107 0108 	add.w	r1, r7, #8
 8009848:	4610      	mov	r0, r2
 800984a:	4798      	blx	r3
 800984c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800984e:	e091      	b.n	8009974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fab2 	bl	8009dbc <USBD_CtlError>
            err++;
 8009858:	7afb      	ldrb	r3, [r7, #11]
 800985a:	3301      	adds	r3, #1
 800985c:	72fb      	strb	r3, [r7, #11]
          break;
 800985e:	e089      	b.n	8009974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	7c12      	ldrb	r2, [r2, #16]
 8009878:	f107 0108 	add.w	r1, r7, #8
 800987c:	4610      	mov	r0, r2
 800987e:	4798      	blx	r3
 8009880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009882:	e077      	b.n	8009974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa98 	bl	8009dbc <USBD_CtlError>
            err++;
 800988c:	7afb      	ldrb	r3, [r7, #11]
 800988e:	3301      	adds	r3, #1
 8009890:	72fb      	strb	r3, [r7, #11]
          break;
 8009892:	e06f      	b.n	8009974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	7c12      	ldrb	r2, [r2, #16]
 80098ac:	f107 0108 	add.w	r1, r7, #8
 80098b0:	4610      	mov	r0, r2
 80098b2:	4798      	blx	r3
 80098b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098b6:	e05d      	b.n	8009974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa7e 	bl	8009dbc <USBD_CtlError>
            err++;
 80098c0:	7afb      	ldrb	r3, [r7, #11]
 80098c2:	3301      	adds	r3, #1
 80098c4:	72fb      	strb	r3, [r7, #11]
          break;
 80098c6:	e055      	b.n	8009974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	7c12      	ldrb	r2, [r2, #16]
 80098e0:	f107 0108 	add.w	r1, r7, #8
 80098e4:	4610      	mov	r0, r2
 80098e6:	4798      	blx	r3
 80098e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ea:	e043      	b.n	8009974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa64 	bl	8009dbc <USBD_CtlError>
            err++;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	3301      	adds	r3, #1
 80098f8:	72fb      	strb	r3, [r7, #11]
          break;
 80098fa:	e03b      	b.n	8009974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	7c12      	ldrb	r2, [r2, #16]
 8009914:	f107 0108 	add.w	r1, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991e:	e029      	b.n	8009974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fa4a 	bl	8009dbc <USBD_CtlError>
            err++;
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	3301      	adds	r3, #1
 800992c:	72fb      	strb	r3, [r7, #11]
          break;
 800992e:	e021      	b.n	8009974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009952:	e00f      	b.n	8009974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa30 	bl	8009dbc <USBD_CtlError>
            err++;
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	3301      	adds	r3, #1
 8009960:	72fb      	strb	r3, [r7, #11]
          break;
 8009962:	e007      	b.n	8009974 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fa28 	bl	8009dbc <USBD_CtlError>
          err++;
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	3301      	adds	r3, #1
 8009970:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009972:	bf00      	nop
      }
      break;
 8009974:	e037      	b.n	80099e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7c1b      	ldrb	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d109      	bne.n	8009992 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009986:	f107 0208 	add.w	r2, r7, #8
 800998a:	4610      	mov	r0, r2
 800998c:	4798      	blx	r3
 800998e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009990:	e029      	b.n	80099e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fa11 	bl	8009dbc <USBD_CtlError>
        err++;
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	3301      	adds	r3, #1
 800999e:	72fb      	strb	r3, [r7, #11]
      break;
 80099a0:	e021      	b.n	80099e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7c1b      	ldrb	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10d      	bne.n	80099c6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b2:	f107 0208 	add.w	r2, r7, #8
 80099b6:	4610      	mov	r0, r2
 80099b8:	4798      	blx	r3
 80099ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	2207      	movs	r2, #7
 80099c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099c4:	e00f      	b.n	80099e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f9f7 	bl	8009dbc <USBD_CtlError>
        err++;
 80099ce:	7afb      	ldrb	r3, [r7, #11]
 80099d0:	3301      	adds	r3, #1
 80099d2:	72fb      	strb	r3, [r7, #11]
      break;
 80099d4:	e007      	b.n	80099e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f9ef 	bl	8009dbc <USBD_CtlError>
      err++;
 80099de:	7afb      	ldrb	r3, [r7, #11]
 80099e0:	3301      	adds	r3, #1
 80099e2:	72fb      	strb	r3, [r7, #11]
      break;
 80099e4:	bf00      	nop
  }

  if (err != 0U)
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d11e      	bne.n	8009a2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	88db      	ldrh	r3, [r3, #6]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d016      	beq.n	8009a22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80099f4:	893b      	ldrh	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00e      	beq.n	8009a18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	88da      	ldrh	r2, [r3, #6]
 80099fe:	893b      	ldrh	r3, [r7, #8]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	bf28      	it	cs
 8009a04:	4613      	movcs	r3, r2
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a0a:	893b      	ldrh	r3, [r7, #8]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fa44 	bl	8009e9e <USBD_CtlSendData>
 8009a16:	e009      	b.n	8009a2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9ce 	bl	8009dbc <USBD_CtlError>
 8009a20:	e004      	b.n	8009a2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa95 	bl	8009f52 <USBD_CtlSendStatus>
 8009a28:	e000      	b.n	8009a2c <USBD_GetDescriptor+0x320>
    return;
 8009a2a:	bf00      	nop
  }
}
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop

08009a34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	889b      	ldrh	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d131      	bne.n	8009aaa <USBD_SetAddress+0x76>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	88db      	ldrh	r3, [r3, #6]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d12d      	bne.n	8009aaa <USBD_SetAddress+0x76>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a54:	d829      	bhi.n	8009aaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	885b      	ldrh	r3, [r3, #2]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d104      	bne.n	8009a78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f9a3 	bl	8009dbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a76:	e01d      	b.n	8009ab4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7bfa      	ldrb	r2, [r7, #15]
 8009a7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f003 fc95 	bl	800d3b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa61 	bl	8009f52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d004      	beq.n	8009aa0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9e:	e009      	b.n	8009ab4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa8:	e004      	b.n	8009ab4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f985 	bl	8009dbc <USBD_CtlError>
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	885b      	ldrh	r3, [r3, #2]
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009ad2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d905      	bls.n	8009ae8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f96c 	bl	8009dbc <USBD_CtlError>
    return USBD_FAIL;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e088      	b.n	8009bfa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d002      	beq.n	8009afa <USBD_SetConfig+0x3e>
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d025      	beq.n	8009b44 <USBD_SetConfig+0x88>
 8009af8:	e071      	b.n	8009bde <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009afa:	4b42      	ldr	r3, [pc, #264]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d01c      	beq.n	8009b3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009b02:	4b40      	ldr	r3, [pc, #256]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff f990 	bl	8008e38 <USBD_SetClassConfig>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f949 	bl	8009dbc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b2a:	e065      	b.n	8009bf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fa10 	bl	8009f52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2203      	movs	r2, #3
 8009b36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b3a:	e05d      	b.n	8009bf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa08 	bl	8009f52 <USBD_CtlSendStatus>
      break;
 8009b42:	e059      	b.n	8009bf8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b44:	4b2f      	ldr	r3, [pc, #188]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d112      	bne.n	8009b72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009b54:	4b2b      	ldr	r3, [pc, #172]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b5e:	4b29      	ldr	r3, [pc, #164]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff f983 	bl	8008e70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f9f1 	bl	8009f52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b70:	e042      	b.n	8009bf8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009b72:	4b24      	ldr	r3, [pc, #144]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d02a      	beq.n	8009bd6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff f971 	bl	8008e70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	461a      	mov	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b98:	4b1a      	ldr	r3, [pc, #104]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff f94a 	bl	8008e38 <USBD_SetClassConfig>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00f      	beq.n	8009bce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f903 	bl	8009dbc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff f956 	bl	8008e70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009bcc:	e014      	b.n	8009bf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f9bf 	bl	8009f52 <USBD_CtlSendStatus>
      break;
 8009bd4:	e010      	b.n	8009bf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f9bb 	bl	8009f52 <USBD_CtlSendStatus>
      break;
 8009bdc:	e00c      	b.n	8009bf8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f8eb 	bl	8009dbc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009be6:	4b07      	ldr	r3, [pc, #28]	@ (8009c04 <USBD_SetConfig+0x148>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff f93f 	bl	8008e70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf6:	bf00      	nop
  }

  return ret;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200003b8 	.word	0x200003b8

08009c08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	88db      	ldrh	r3, [r3, #6]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d004      	beq.n	8009c24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f8cd 	bl	8009dbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c22:	e023      	b.n	8009c6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	dc02      	bgt.n	8009c36 <USBD_GetConfig+0x2e>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	dc03      	bgt.n	8009c3c <USBD_GetConfig+0x34>
 8009c34:	e015      	b.n	8009c62 <USBD_GetConfig+0x5a>
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d00b      	beq.n	8009c52 <USBD_GetConfig+0x4a>
 8009c3a:	e012      	b.n	8009c62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3308      	adds	r3, #8
 8009c46:	2201      	movs	r2, #1
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f927 	bl	8009e9e <USBD_CtlSendData>
        break;
 8009c50:	e00c      	b.n	8009c6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3304      	adds	r3, #4
 8009c56:	2201      	movs	r2, #1
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f91f 	bl	8009e9e <USBD_CtlSendData>
        break;
 8009c60:	e004      	b.n	8009c6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8a9 	bl	8009dbc <USBD_CtlError>
        break;
 8009c6a:	bf00      	nop
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	3b01      	subs	r3, #1
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d81e      	bhi.n	8009cca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	88db      	ldrh	r3, [r3, #6]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d004      	beq.n	8009c9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f890 	bl	8009dbc <USBD_CtlError>
        break;
 8009c9c:	e01a      	b.n	8009cd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f043 0202 	orr.w	r2, r3, #2
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	330c      	adds	r3, #12
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f8eb 	bl	8009e9e <USBD_CtlSendData>
      break;
 8009cc8:	e004      	b.n	8009cd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f875 	bl	8009dbc <USBD_CtlError>
      break;
 8009cd2:	bf00      	nop
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	885b      	ldrh	r3, [r3, #2]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d106      	bne.n	8009cfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f92b 	bl	8009f52 <USBD_CtlSendStatus>
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d80b      	bhi.n	8009d34 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	885b      	ldrh	r3, [r3, #2]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d10c      	bne.n	8009d3e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f910 	bl	8009f52 <USBD_CtlSendStatus>
      }
      break;
 8009d32:	e004      	b.n	8009d3e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f840 	bl	8009dbc <USBD_CtlError>
      break;
 8009d3c:	e000      	b.n	8009d40 <USBD_ClrFeature+0x3c>
      break;
 8009d3e:	bf00      	nop
  }
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	781a      	ldrb	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3301      	adds	r3, #1
 8009d62:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	781a      	ldrb	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f7ff fa90 	bl	8009298 <SWAPBYTE>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3301      	adds	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7ff fa83 	bl	8009298 <SWAPBYTE>
 8009d92:	4603      	mov	r3, r0
 8009d94:	461a      	mov	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	3301      	adds	r3, #1
 8009da4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7ff fa76 	bl	8009298 <SWAPBYTE>
 8009dac:	4603      	mov	r3, r0
 8009dae:	461a      	mov	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	80da      	strh	r2, [r3, #6]
}
 8009db4:	bf00      	nop
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dc6:	2180      	movs	r1, #128	@ 0x80
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f003 fa89 	bl	800d2e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009dce:	2100      	movs	r1, #0
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f003 fa85 	bl	800d2e0 <USBD_LL_StallEP>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d036      	beq.n	8009e62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009df8:	6938      	ldr	r0, [r7, #16]
 8009dfa:	f000 f836 	bl	8009e6a <USBD_GetLen>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	3301      	adds	r3, #1
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	4413      	add	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	7812      	ldrb	r2, [r2, #0]
 8009e16:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	4413      	add	r3, r2
 8009e24:	2203      	movs	r2, #3
 8009e26:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e2e:	e013      	b.n	8009e58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	4413      	add	r3, r2
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	7812      	ldrb	r2, [r2, #0]
 8009e3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	613b      	str	r3, [r7, #16]
    idx++;
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	3301      	adds	r3, #1
 8009e46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e48:	7dfb      	ldrb	r3, [r7, #23]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	3301      	adds	r3, #1
 8009e56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e7      	bne.n	8009e30 <USBD_GetString+0x52>
 8009e60:	e000      	b.n	8009e64 <USBD_GetString+0x86>
    return;
 8009e62:	bf00      	nop
  }
}
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e7a:	e005      	b.n	8009e88 <USBD_GetLen+0x1e>
  {
    len++;
 8009e7c:	7bfb      	ldrb	r3, [r7, #15]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	3301      	adds	r3, #1
 8009e86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1f5      	bne.n	8009e7c <USBD_GetLen+0x12>
  }

  return len;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2202      	movs	r2, #2
 8009eae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f003 fa94 	bl	800d3f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f003 fa83 	bl	800d3f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2203      	movs	r2, #3
 8009f06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	2100      	movs	r1, #0
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f003 fa87 	bl	800d434 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	2100      	movs	r1, #0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f003 fa76 	bl	800d434 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b082      	sub	sp, #8
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2204      	movs	r2, #4
 8009f5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f62:	2300      	movs	r3, #0
 8009f64:	2200      	movs	r2, #0
 8009f66:	2100      	movs	r1, #0
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f003 fa42 	bl	800d3f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2205      	movs	r2, #5
 8009f84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f88:	2300      	movs	r3, #0
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f003 fa50 	bl	800d434 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <__NVIC_SetPriority>:
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	6039      	str	r1, [r7, #0]
 8009faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	db0a      	blt.n	8009fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	490c      	ldr	r1, [pc, #48]	@ (8009fec <__NVIC_SetPriority+0x4c>)
 8009fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fbe:	0112      	lsls	r2, r2, #4
 8009fc0:	b2d2      	uxtb	r2, r2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009fc8:	e00a      	b.n	8009fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	4908      	ldr	r1, [pc, #32]	@ (8009ff0 <__NVIC_SetPriority+0x50>)
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	f003 030f 	and.w	r3, r3, #15
 8009fd6:	3b04      	subs	r3, #4
 8009fd8:	0112      	lsls	r2, r2, #4
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	440b      	add	r3, r1
 8009fde:	761a      	strb	r2, [r3, #24]
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	e000e100 	.word	0xe000e100
 8009ff0:	e000ed00 	.word	0xe000ed00

08009ff4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ff8:	4b05      	ldr	r3, [pc, #20]	@ (800a010 <SysTick_Handler+0x1c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ffc:	f001 fd46 	bl	800ba8c <xTaskGetSchedulerState>
 800a000:	4603      	mov	r3, r0
 800a002:	2b01      	cmp	r3, #1
 800a004:	d001      	beq.n	800a00a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a006:	f002 fb3f 	bl	800c688 <xPortSysTickHandler>
  }
}
 800a00a:	bf00      	nop
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	e000e010 	.word	0xe000e010

0800a014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a014:	b580      	push	{r7, lr}
 800a016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a018:	2100      	movs	r1, #0
 800a01a:	f06f 0004 	mvn.w	r0, #4
 800a01e:	f7ff ffbf 	bl	8009fa0 <__NVIC_SetPriority>
#endif
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a02e:	f3ef 8305 	mrs	r3, IPSR
 800a032:	603b      	str	r3, [r7, #0]
  return(result);
 800a034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a03a:	f06f 0305 	mvn.w	r3, #5
 800a03e:	607b      	str	r3, [r7, #4]
 800a040:	e00c      	b.n	800a05c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a042:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <osKernelInitialize+0x44>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a04a:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <osKernelInitialize+0x44>)
 800a04c:	2201      	movs	r2, #1
 800a04e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a050:	2300      	movs	r3, #0
 800a052:	607b      	str	r3, [r7, #4]
 800a054:	e002      	b.n	800a05c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a05c:	687b      	ldr	r3, [r7, #4]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	200003bc 	.word	0x200003bc

0800a070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a076:	f3ef 8305 	mrs	r3, IPSR
 800a07a:	603b      	str	r3, [r7, #0]
  return(result);
 800a07c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a082:	f06f 0305 	mvn.w	r3, #5
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	e010      	b.n	800a0ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a08a:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b8 <osKernelStart+0x48>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d109      	bne.n	800a0a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a092:	f7ff ffbf 	bl	800a014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a096:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <osKernelStart+0x48>)
 800a098:	2202      	movs	r2, #2
 800a09a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a09c:	f001 f892 	bl	800b1c4 <vTaskStartScheduler>
      stat = osOK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	e002      	b.n	800a0ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0ac:	687b      	ldr	r3, [r7, #4]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	200003bc 	.word	0x200003bc

0800a0bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08e      	sub	sp, #56	@ 0x38
 800a0c0:	af04      	add	r7, sp, #16
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0cc:	f3ef 8305 	mrs	r3, IPSR
 800a0d0:	617b      	str	r3, [r7, #20]
  return(result);
 800a0d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d17f      	bne.n	800a1d8 <osThreadNew+0x11c>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d07c      	beq.n	800a1d8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a0de:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800a0e2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0e4:	2318      	movs	r3, #24
 800a0e6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d045      	beq.n	800a184 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <osThreadNew+0x4a>
        name = attr->name;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d008      	beq.n	800a12c <osThreadNew+0x70>
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	2b38      	cmp	r3, #56	@ 0x38
 800a11e:	d805      	bhi.n	800a12c <osThreadNew+0x70>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <osThreadNew+0x74>
        return (NULL);
 800a12c:	2300      	movs	r3, #0
 800a12e:	e054      	b.n	800a1da <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d003      	beq.n	800a140 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	089b      	lsrs	r3, r3, #2
 800a13e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00e      	beq.n	800a166 <osThreadNew+0xaa>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	2ba7      	cmp	r3, #167	@ 0xa7
 800a14e:	d90a      	bls.n	800a166 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a154:	2b00      	cmp	r3, #0
 800a156:	d006      	beq.n	800a166 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <osThreadNew+0xaa>
        mem = 1;
 800a160:	2301      	movs	r3, #1
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	e010      	b.n	800a188 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10c      	bne.n	800a188 <osThreadNew+0xcc>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d108      	bne.n	800a188 <osThreadNew+0xcc>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d104      	bne.n	800a188 <osThreadNew+0xcc>
          mem = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	e001      	b.n	800a188 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d110      	bne.n	800a1b0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a196:	9202      	str	r2, [sp, #8]
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6a3a      	ldr	r2, [r7, #32]
 800a1a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 fe19 	bl	800addc <xTaskCreateStatic>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	e013      	b.n	800a1d8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d110      	bne.n	800a1d8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	f107 0310 	add.w	r3, r7, #16
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fe67 	bl	800ae9c <xTaskCreate>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d001      	beq.n	800a1d8 <osThreadNew+0x11c>
            hTask = NULL;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1d8:	693b      	ldr	r3, [r7, #16]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3728      	adds	r7, #40	@ 0x28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ea:	f3ef 8305 	mrs	r3, IPSR
 800a1ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <osDelay+0x1c>
    stat = osErrorISR;
 800a1f6:	f06f 0305 	mvn.w	r3, #5
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	e007      	b.n	800a20e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <osDelay+0x2c>
      vTaskDelay(ticks);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 ffa5 	bl	800b158 <vTaskDelay>
    }
  }

  return (stat);
 800a20e:	68fb      	ldr	r3, [r7, #12]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4a07      	ldr	r2, [pc, #28]	@ (800a244 <vApplicationGetIdleTaskMemory+0x2c>)
 800a228:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	4a06      	ldr	r2, [pc, #24]	@ (800a248 <vApplicationGetIdleTaskMemory+0x30>)
 800a22e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800a236:	601a      	str	r2, [r3, #0]
}
 800a238:	bf00      	nop
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	200003c0 	.word	0x200003c0
 800a248:	20000468 	.word	0x20000468

0800a24c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4a07      	ldr	r2, [pc, #28]	@ (800a278 <vApplicationGetTimerTaskMemory+0x2c>)
 800a25c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	4a06      	ldr	r2, [pc, #24]	@ (800a27c <vApplicationGetTimerTaskMemory+0x30>)
 800a262:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800a26a:	601a      	str	r2, [r3, #0]
}
 800a26c:	bf00      	nop
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	20000f58 	.word	0x20000f58
 800a27c:	20001000 	.word	0x20001000

0800a280 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f103 0208 	add.w	r2, r3, #8
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f04f 32ff 	mov.w	r2, #4294967295
 800a298:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f103 0208 	add.w	r2, r3, #8
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f103 0208 	add.w	r2, r3, #8
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	601a      	str	r2, [r3, #0]
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a322:	b480      	push	{r7}
 800a324:	b085      	sub	sp, #20
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a338:	d103      	bne.n	800a342 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e00c      	b.n	800a35c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3308      	adds	r3, #8
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	e002      	b.n	800a350 <vListInsert+0x2e>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d2f6      	bcs.n	800a34a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	1c5a      	adds	r2, r3, #1
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	601a      	str	r2, [r3, #0]
}
 800a388:	bf00      	nop
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6892      	ldr	r2, [r2, #8]
 800a3aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6852      	ldr	r2, [r2, #4]
 800a3b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d103      	bne.n	800a3c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	1e5a      	subs	r2, r3, #1
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10b      	bne.n	800a414 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	e7fd      	b.n	800a410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a414:	f002 f8a8 	bl	800c568 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a420:	68f9      	ldr	r1, [r7, #12]
 800a422:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a424:	fb01 f303 	mul.w	r3, r1, r3
 800a428:	441a      	add	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a444:	3b01      	subs	r3, #1
 800a446:	68f9      	ldr	r1, [r7, #12]
 800a448:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a44a:	fb01 f303 	mul.w	r3, r1, r3
 800a44e:	441a      	add	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	22ff      	movs	r2, #255	@ 0xff
 800a458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	22ff      	movs	r2, #255	@ 0xff
 800a460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d114      	bne.n	800a494 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01a      	beq.n	800a4a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3310      	adds	r3, #16
 800a476:	4618      	mov	r0, r3
 800a478:	f001 f942 	bl	800b700 <xTaskRemoveFromEventList>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d012      	beq.n	800a4a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a482:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b8 <xQueueGenericReset+0xd0>)
 800a484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	e009      	b.n	800a4a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3310      	adds	r3, #16
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff fef1 	bl	800a280 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3324      	adds	r3, #36	@ 0x24
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7ff feec 	bl	800a280 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4a8:	f002 f890 	bl	800c5cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4ac:	2301      	movs	r3, #1
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08e      	sub	sp, #56	@ 0x38
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	e7fd      	b.n	800a502 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <xQueueGenericCreateStatic+0x56>
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <xQueueGenericCreateStatic+0x5a>
 800a512:	2301      	movs	r3, #1
 800a514:	e000      	b.n	800a518 <xQueueGenericCreateStatic+0x5c>
 800a516:	2300      	movs	r3, #0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10b      	bne.n	800a534 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	623b      	str	r3, [r7, #32]
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	e7fd      	b.n	800a530 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d102      	bne.n	800a540 <xQueueGenericCreateStatic+0x84>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <xQueueGenericCreateStatic+0x88>
 800a540:	2301      	movs	r3, #1
 800a542:	e000      	b.n	800a546 <xQueueGenericCreateStatic+0x8a>
 800a544:	2300      	movs	r3, #0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10b      	bne.n	800a562 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	61fb      	str	r3, [r7, #28]
}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	e7fd      	b.n	800a55e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a562:	2350      	movs	r3, #80	@ 0x50
 800a564:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b50      	cmp	r3, #80	@ 0x50
 800a56a:	d00b      	beq.n	800a584 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	61bb      	str	r3, [r7, #24]
}
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
 800a582:	e7fd      	b.n	800a580 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a584:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00d      	beq.n	800a5ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a598:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 f805 	bl	800a5b6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3730      	adds	r7, #48	@ 0x30
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	60b9      	str	r1, [r7, #8]
 800a5c0:	607a      	str	r2, [r7, #4]
 800a5c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	e002      	b.n	800a5d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	69b8      	ldr	r0, [r7, #24]
 800a5e8:	f7ff fefe 	bl	800a3e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	78fa      	ldrb	r2, [r7, #3]
 800a5f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5f4:	bf00      	nop
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08e      	sub	sp, #56	@ 0x38
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a60a:	2300      	movs	r3, #0
 800a60c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10b      	bne.n	800a630 <xQueueGenericSend+0x34>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	e7fd      	b.n	800a62c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <xQueueGenericSend+0x42>
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <xQueueGenericSend+0x46>
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <xQueueGenericSend+0x48>
 800a642:	2300      	movs	r3, #0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10b      	bne.n	800a660 <xQueueGenericSend+0x64>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d103      	bne.n	800a66e <xQueueGenericSend+0x72>
 800a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d101      	bne.n	800a672 <xQueueGenericSend+0x76>
 800a66e:	2301      	movs	r3, #1
 800a670:	e000      	b.n	800a674 <xQueueGenericSend+0x78>
 800a672:	2300      	movs	r3, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10b      	bne.n	800a690 <xQueueGenericSend+0x94>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	623b      	str	r3, [r7, #32]
}
 800a68a:	bf00      	nop
 800a68c:	bf00      	nop
 800a68e:	e7fd      	b.n	800a68c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a690:	f001 f9fc 	bl	800ba8c <xTaskGetSchedulerState>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <xQueueGenericSend+0xa4>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <xQueueGenericSend+0xa8>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e000      	b.n	800a6a6 <xQueueGenericSend+0xaa>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10b      	bne.n	800a6c2 <xQueueGenericSend+0xc6>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	61fb      	str	r3, [r7, #28]
}
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	e7fd      	b.n	800a6be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6c2:	f001 ff51 	bl	800c568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d302      	bcc.n	800a6d8 <xQueueGenericSend+0xdc>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d129      	bne.n	800a72c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6de:	f000 fa0f 	bl	800ab00 <prvCopyDataToQueue>
 800a6e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d010      	beq.n	800a70e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	3324      	adds	r3, #36	@ 0x24
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f001 f805 	bl	800b700 <xTaskRemoveFromEventList>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d013      	beq.n	800a724 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6fc:	4b3f      	ldr	r3, [pc, #252]	@ (800a7fc <xQueueGenericSend+0x200>)
 800a6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	e00a      	b.n	800a724 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a710:	2b00      	cmp	r3, #0
 800a712:	d007      	beq.n	800a724 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a714:	4b39      	ldr	r3, [pc, #228]	@ (800a7fc <xQueueGenericSend+0x200>)
 800a716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a724:	f001 ff52 	bl	800c5cc <vPortExitCritical>
				return pdPASS;
 800a728:	2301      	movs	r3, #1
 800a72a:	e063      	b.n	800a7f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d103      	bne.n	800a73a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a732:	f001 ff4b 	bl	800c5cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a736:	2300      	movs	r3, #0
 800a738:	e05c      	b.n	800a7f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d106      	bne.n	800a74e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a740:	f107 0314 	add.w	r3, r7, #20
 800a744:	4618      	mov	r0, r3
 800a746:	f001 f83f 	bl	800b7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a74a:	2301      	movs	r3, #1
 800a74c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a74e:	f001 ff3d 	bl	800c5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a752:	f000 fda7 	bl	800b2a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a756:	f001 ff07 	bl	800c568 <vPortEnterCritical>
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a760:	b25b      	sxtb	r3, r3
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a766:	d103      	bne.n	800a770 <xQueueGenericSend+0x174>
 800a768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a776:	b25b      	sxtb	r3, r3
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77c:	d103      	bne.n	800a786 <xQueueGenericSend+0x18a>
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a786:	f001 ff21 	bl	800c5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a78a:	1d3a      	adds	r2, r7, #4
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	4611      	mov	r1, r2
 800a792:	4618      	mov	r0, r3
 800a794:	f001 f82e 	bl	800b7f4 <xTaskCheckForTimeOut>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d124      	bne.n	800a7e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a79e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7a0:	f000 faa6 	bl	800acf0 <prvIsQueueFull>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d018      	beq.n	800a7dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	3310      	adds	r3, #16
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 ff52 	bl	800b65c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7ba:	f000 fa31 	bl	800ac20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7be:	f000 fd7f 	bl	800b2c0 <xTaskResumeAll>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f47f af7c 	bne.w	800a6c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a7ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a7fc <xQueueGenericSend+0x200>)
 800a7cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	e772      	b.n	800a6c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7de:	f000 fa1f 	bl	800ac20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e2:	f000 fd6d 	bl	800b2c0 <xTaskResumeAll>
 800a7e6:	e76c      	b.n	800a6c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7ea:	f000 fa19 	bl	800ac20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ee:	f000 fd67 	bl	800b2c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3738      	adds	r7, #56	@ 0x38
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b090      	sub	sp, #64	@ 0x40
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10b      	bne.n	800a830 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	e7fd      	b.n	800a82c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d103      	bne.n	800a83e <xQueueGenericSendFromISR+0x3e>
 800a836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <xQueueGenericSendFromISR+0x42>
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <xQueueGenericSendFromISR+0x44>
 800a842:	2300      	movs	r3, #0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10b      	bne.n	800a860 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a85a:	bf00      	nop
 800a85c:	bf00      	nop
 800a85e:	e7fd      	b.n	800a85c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2b02      	cmp	r3, #2
 800a864:	d103      	bne.n	800a86e <xQueueGenericSendFromISR+0x6e>
 800a866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d101      	bne.n	800a872 <xQueueGenericSendFromISR+0x72>
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <xQueueGenericSendFromISR+0x74>
 800a872:	2300      	movs	r3, #0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10b      	bne.n	800a890 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	623b      	str	r3, [r7, #32]
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	e7fd      	b.n	800a88c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a890:	f001 ff4a 	bl	800c728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a894:	f3ef 8211 	mrs	r2, BASEPRI
 800a898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	61fa      	str	r2, [r7, #28]
 800a8aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d302      	bcc.n	800a8c2 <xQueueGenericSendFromISR+0xc2>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d12f      	bne.n	800a922 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a8d8:	f000 f912 	bl	800ab00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e4:	d112      	bne.n	800a90c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d016      	beq.n	800a91c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	3324      	adds	r3, #36	@ 0x24
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 ff04 	bl	800b700 <xTaskRemoveFromEventList>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00e      	beq.n	800a91c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e007      	b.n	800a91c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a90c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a910:	3301      	adds	r3, #1
 800a912:	b2db      	uxtb	r3, r3
 800a914:	b25a      	sxtb	r2, r3
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a91c:	2301      	movs	r3, #1
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a920:	e001      	b.n	800a926 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a928:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a930:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a934:	4618      	mov	r0, r3
 800a936:	3740      	adds	r7, #64	@ 0x40
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08c      	sub	sp, #48	@ 0x30
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a948:	2300      	movs	r3, #0
 800a94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10b      	bne.n	800a96e <xQueueReceive+0x32>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	623b      	str	r3, [r7, #32]
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d103      	bne.n	800a97c <xQueueReceive+0x40>
 800a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <xQueueReceive+0x44>
 800a97c:	2301      	movs	r3, #1
 800a97e:	e000      	b.n	800a982 <xQueueReceive+0x46>
 800a980:	2300      	movs	r3, #0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10b      	bne.n	800a99e <xQueueReceive+0x62>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	61fb      	str	r3, [r7, #28]
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	e7fd      	b.n	800a99a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a99e:	f001 f875 	bl	800ba8c <xTaskGetSchedulerState>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d102      	bne.n	800a9ae <xQueueReceive+0x72>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <xQueueReceive+0x76>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e000      	b.n	800a9b4 <xQueueReceive+0x78>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10b      	bne.n	800a9d0 <xQueueReceive+0x94>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	61bb      	str	r3, [r7, #24]
}
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	e7fd      	b.n	800a9cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9d0:	f001 fdca 	bl	800c568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01f      	beq.n	800aa20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9e0:	68b9      	ldr	r1, [r7, #8]
 800a9e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9e4:	f000 f8f6 	bl	800abd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	1e5a      	subs	r2, r3, #1
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00f      	beq.n	800aa18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fa:	3310      	adds	r3, #16
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fe7f 	bl	800b700 <xTaskRemoveFromEventList>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa08:	4b3c      	ldr	r3, [pc, #240]	@ (800aafc <xQueueReceive+0x1c0>)
 800aa0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa18:	f001 fdd8 	bl	800c5cc <vPortExitCritical>
				return pdPASS;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e069      	b.n	800aaf4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d103      	bne.n	800aa2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa26:	f001 fdd1 	bl	800c5cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e062      	b.n	800aaf4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d106      	bne.n	800aa42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa34:	f107 0310 	add.w	r3, r7, #16
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fec5 	bl	800b7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa42:	f001 fdc3 	bl	800c5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa46:	f000 fc2d 	bl	800b2a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa4a:	f001 fd8d 	bl	800c568 <vPortEnterCritical>
 800aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5a:	d103      	bne.n	800aa64 <xQueueReceive+0x128>
 800aa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa6a:	b25b      	sxtb	r3, r3
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d103      	bne.n	800aa7a <xQueueReceive+0x13e>
 800aa72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa7a:	f001 fda7 	bl	800c5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa7e:	1d3a      	adds	r2, r7, #4
 800aa80:	f107 0310 	add.w	r3, r7, #16
 800aa84:	4611      	mov	r1, r2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 feb4 	bl	800b7f4 <xTaskCheckForTimeOut>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d123      	bne.n	800aada <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa94:	f000 f916 	bl	800acc4 <prvIsQueueEmpty>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d017      	beq.n	800aace <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	3324      	adds	r3, #36	@ 0x24
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 fdd8 	bl	800b65c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaae:	f000 f8b7 	bl	800ac20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aab2:	f000 fc05 	bl	800b2c0 <xTaskResumeAll>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d189      	bne.n	800a9d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aabc:	4b0f      	ldr	r3, [pc, #60]	@ (800aafc <xQueueReceive+0x1c0>)
 800aabe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	e780      	b.n	800a9d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aad0:	f000 f8a6 	bl	800ac20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aad4:	f000 fbf4 	bl	800b2c0 <xTaskResumeAll>
 800aad8:	e77a      	b.n	800a9d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aadc:	f000 f8a0 	bl	800ac20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aae0:	f000 fbee 	bl	800b2c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aae6:	f000 f8ed 	bl	800acc4 <prvIsQueueEmpty>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f43f af6f 	beq.w	800a9d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaf2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3730      	adds	r7, #48	@ 0x30
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10d      	bne.n	800ab3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d14d      	bne.n	800abc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 ffcc 	bl	800bac8 <xTaskPriorityDisinherit>
 800ab30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	609a      	str	r2, [r3, #8]
 800ab38:	e043      	b.n	800abc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d119      	bne.n	800ab74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6858      	ldr	r0, [r3, #4]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab48:	461a      	mov	r2, r3
 800ab4a:	68b9      	ldr	r1, [r7, #8]
 800ab4c:	f002 fdfa 	bl	800d744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab58:	441a      	add	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d32b      	bcc.n	800abc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	605a      	str	r2, [r3, #4]
 800ab72:	e026      	b.n	800abc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	68d8      	ldr	r0, [r3, #12]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	f002 fde0 	bl	800d744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	68da      	ldr	r2, [r3, #12]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab8c:	425b      	negs	r3, r3
 800ab8e:	441a      	add	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d207      	bcs.n	800abb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba8:	425b      	negs	r3, r3
 800abaa:	441a      	add	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d105      	bne.n	800abc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800abca:	697b      	ldr	r3, [r7, #20]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d018      	beq.n	800ac18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abee:	441a      	add	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68da      	ldr	r2, [r3, #12]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d303      	bcc.n	800ac08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68d9      	ldr	r1, [r3, #12]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac10:	461a      	mov	r2, r3
 800ac12:	6838      	ldr	r0, [r7, #0]
 800ac14:	f002 fd96 	bl	800d744 <memcpy>
	}
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac28:	f001 fc9e 	bl	800c568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac34:	e011      	b.n	800ac5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d012      	beq.n	800ac64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3324      	adds	r3, #36	@ 0x24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 fd5c 	bl	800b700 <xTaskRemoveFromEventList>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac4e:	f000 fe35 	bl	800b8bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	3b01      	subs	r3, #1
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dce9      	bgt.n	800ac36 <prvUnlockQueue+0x16>
 800ac62:	e000      	b.n	800ac66 <prvUnlockQueue+0x46>
					break;
 800ac64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	22ff      	movs	r2, #255	@ 0xff
 800ac6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac6e:	f001 fcad 	bl	800c5cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac72:	f001 fc79 	bl	800c568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac7e:	e011      	b.n	800aca4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d012      	beq.n	800acae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3310      	adds	r3, #16
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fd37 	bl	800b700 <xTaskRemoveFromEventList>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d001      	beq.n	800ac9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac98:	f000 fe10 	bl	800b8bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	dce9      	bgt.n	800ac80 <prvUnlockQueue+0x60>
 800acac:	e000      	b.n	800acb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	22ff      	movs	r2, #255	@ 0xff
 800acb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800acb8:	f001 fc88 	bl	800c5cc <vPortExitCritical>
}
 800acbc:	bf00      	nop
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800accc:	f001 fc4c 	bl	800c568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d102      	bne.n	800acde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	e001      	b.n	800ace2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acde:	2300      	movs	r3, #0
 800ace0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ace2:	f001 fc73 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800ace6:	68fb      	ldr	r3, [r7, #12]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acf8:	f001 fc36 	bl	800c568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d102      	bne.n	800ad0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	e001      	b.n	800ad12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad12:	f001 fc5b 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800ad16:	68fb      	ldr	r3, [r7, #12]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	e014      	b.n	800ad5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad30:	4a0f      	ldr	r2, [pc, #60]	@ (800ad70 <vQueueAddToRegistry+0x50>)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10b      	bne.n	800ad54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad3c:	490c      	ldr	r1, [pc, #48]	@ (800ad70 <vQueueAddToRegistry+0x50>)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad46:	4a0a      	ldr	r2, [pc, #40]	@ (800ad70 <vQueueAddToRegistry+0x50>)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad52:	e006      	b.n	800ad62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b07      	cmp	r3, #7
 800ad5e:	d9e7      	bls.n	800ad30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	200025e0 	.word	0x200025e0

0800ad74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad84:	f001 fbf0 	bl	800c568 <vPortEnterCritical>
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad8e:	b25b      	sxtb	r3, r3
 800ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad94:	d103      	bne.n	800ad9e <vQueueWaitForMessageRestricted+0x2a>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ada4:	b25b      	sxtb	r3, r3
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d103      	bne.n	800adb4 <vQueueWaitForMessageRestricted+0x40>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adb4:	f001 fc0a 	bl	800c5cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	3324      	adds	r3, #36	@ 0x24
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fc6d 	bl	800b6a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800adce:	6978      	ldr	r0, [r7, #20]
 800add0:	f7ff ff26 	bl	800ac20 <prvUnlockQueue>
	}
 800add4:	bf00      	nop
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08e      	sub	sp, #56	@ 0x38
 800ade0:	af04      	add	r7, sp, #16
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10b      	bne.n	800ae08 <xTaskCreateStatic+0x2c>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	623b      	str	r3, [r7, #32]
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10b      	bne.n	800ae26 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	61fb      	str	r3, [r7, #28]
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae26:	23a8      	movs	r3, #168	@ 0xa8
 800ae28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ae2e:	d00b      	beq.n	800ae48 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	61bb      	str	r3, [r7, #24]
}
 800ae42:	bf00      	nop
 800ae44:	bf00      	nop
 800ae46:	e7fd      	b.n	800ae44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d01e      	beq.n	800ae8e <xTaskCreateStatic+0xb2>
 800ae50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d01b      	beq.n	800ae8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9303      	str	r3, [sp, #12]
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6e:	9302      	str	r3, [sp, #8]
 800ae70:	f107 0314 	add.w	r3, r7, #20
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 f851 	bl	800af28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae88:	f000 f8f6 	bl	800b078 <prvAddNewTaskToReadyList>
 800ae8c:	e001      	b.n	800ae92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae92:	697b      	ldr	r3, [r7, #20]
	}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3728      	adds	r7, #40	@ 0x28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08c      	sub	sp, #48	@ 0x30
 800aea0:	af04      	add	r7, sp, #16
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f001 fc7b 	bl	800c7ac <pvPortMalloc>
 800aeb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00e      	beq.n	800aedc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aebe:	20a8      	movs	r0, #168	@ 0xa8
 800aec0:	f001 fc74 	bl	800c7ac <pvPortMalloc>
 800aec4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	631a      	str	r2, [r3, #48]	@ 0x30
 800aed2:	e005      	b.n	800aee0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aed4:	6978      	ldr	r0, [r7, #20]
 800aed6:	f001 fd37 	bl	800c948 <vPortFree>
 800aeda:	e001      	b.n	800aee0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aedc:	2300      	movs	r3, #0
 800aede:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d017      	beq.n	800af16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aeee:	88fa      	ldrh	r2, [r7, #6]
 800aef0:	2300      	movs	r3, #0
 800aef2:	9303      	str	r3, [sp, #12]
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	9302      	str	r3, [sp, #8]
 800aef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	68b9      	ldr	r1, [r7, #8]
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 f80f 	bl	800af28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af0a:	69f8      	ldr	r0, [r7, #28]
 800af0c:	f000 f8b4 	bl	800b078 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af10:	2301      	movs	r3, #1
 800af12:	61bb      	str	r3, [r7, #24]
 800af14:	e002      	b.n	800af1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af16:	f04f 33ff 	mov.w	r3, #4294967295
 800af1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af1c:	69bb      	ldr	r3, [r7, #24]
	}
 800af1e:	4618      	mov	r0, r3
 800af20:	3720      	adds	r7, #32
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
 800af34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	461a      	mov	r2, r3
 800af40:	21a5      	movs	r1, #165	@ 0xa5
 800af42:	f002 fb6d 	bl	800d620 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af50:	3b01      	subs	r3, #1
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	f023 0307 	bic.w	r3, r3, #7
 800af5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00b      	beq.n	800af82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	617b      	str	r3, [r7, #20]
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	e7fd      	b.n	800af7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d01f      	beq.n	800afc8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af88:	2300      	movs	r3, #0
 800af8a:	61fb      	str	r3, [r7, #28]
 800af8c:	e012      	b.n	800afb4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	4413      	add	r3, r2
 800af94:	7819      	ldrb	r1, [r3, #0]
 800af96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	4413      	add	r3, r2
 800af9c:	3334      	adds	r3, #52	@ 0x34
 800af9e:	460a      	mov	r2, r1
 800afa0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	4413      	add	r3, r2
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d006      	beq.n	800afbc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	3301      	adds	r3, #1
 800afb2:	61fb      	str	r3, [r7, #28]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	2b0f      	cmp	r3, #15
 800afb8:	d9e9      	bls.n	800af8e <prvInitialiseNewTask+0x66>
 800afba:	e000      	b.n	800afbe <prvInitialiseNewTask+0x96>
			{
				break;
 800afbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800afc6:	e003      	b.n	800afd0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd2:	2b37      	cmp	r3, #55	@ 0x37
 800afd4:	d901      	bls.n	800afda <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afd6:	2337      	movs	r3, #55	@ 0x37
 800afd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afe4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800afe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe8:	2200      	movs	r2, #0
 800afea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afee:	3304      	adds	r3, #4
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff f965 	bl	800a2c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	3318      	adds	r3, #24
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff f960 	bl	800a2c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b004:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b014:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b020:	2200      	movs	r2, #0
 800b022:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	3354      	adds	r3, #84	@ 0x54
 800b02a:	224c      	movs	r2, #76	@ 0x4c
 800b02c:	2100      	movs	r1, #0
 800b02e:	4618      	mov	r0, r3
 800b030:	f002 faf6 	bl	800d620 <memset>
 800b034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b036:	4a0d      	ldr	r2, [pc, #52]	@ (800b06c <prvInitialiseNewTask+0x144>)
 800b038:	659a      	str	r2, [r3, #88]	@ 0x58
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	4a0c      	ldr	r2, [pc, #48]	@ (800b070 <prvInitialiseNewTask+0x148>)
 800b03e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b042:	4a0c      	ldr	r2, [pc, #48]	@ (800b074 <prvInitialiseNewTask+0x14c>)
 800b044:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	68f9      	ldr	r1, [r7, #12]
 800b04a:	69b8      	ldr	r0, [r7, #24]
 800b04c:	f001 f95a 	bl	800c304 <pxPortInitialiseStack>
 800b050:	4602      	mov	r2, r0
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b062:	bf00      	nop
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20007520 	.word	0x20007520
 800b070:	20007588 	.word	0x20007588
 800b074:	200075f0 	.word	0x200075f0

0800b078 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b080:	f001 fa72 	bl	800c568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b084:	4b2d      	ldr	r3, [pc, #180]	@ (800b13c <prvAddNewTaskToReadyList+0xc4>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3301      	adds	r3, #1
 800b08a:	4a2c      	ldr	r2, [pc, #176]	@ (800b13c <prvAddNewTaskToReadyList+0xc4>)
 800b08c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b08e:	4b2c      	ldr	r3, [pc, #176]	@ (800b140 <prvAddNewTaskToReadyList+0xc8>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d109      	bne.n	800b0aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b096:	4a2a      	ldr	r2, [pc, #168]	@ (800b140 <prvAddNewTaskToReadyList+0xc8>)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b09c:	4b27      	ldr	r3, [pc, #156]	@ (800b13c <prvAddNewTaskToReadyList+0xc4>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d110      	bne.n	800b0c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0a4:	f000 fc2e 	bl	800b904 <prvInitialiseTaskLists>
 800b0a8:	e00d      	b.n	800b0c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0aa:	4b26      	ldr	r3, [pc, #152]	@ (800b144 <prvAddNewTaskToReadyList+0xcc>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d109      	bne.n	800b0c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0b2:	4b23      	ldr	r3, [pc, #140]	@ (800b140 <prvAddNewTaskToReadyList+0xc8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d802      	bhi.n	800b0c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0c0:	4a1f      	ldr	r2, [pc, #124]	@ (800b140 <prvAddNewTaskToReadyList+0xc8>)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0c6:	4b20      	ldr	r3, [pc, #128]	@ (800b148 <prvAddNewTaskToReadyList+0xd0>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b148 <prvAddNewTaskToReadyList+0xd0>)
 800b0ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b148 <prvAddNewTaskToReadyList+0xd0>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b14c <prvAddNewTaskToReadyList+0xd4>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d903      	bls.n	800b0ec <prvAddNewTaskToReadyList+0x74>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e8:	4a18      	ldr	r2, [pc, #96]	@ (800b14c <prvAddNewTaskToReadyList+0xd4>)
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4a15      	ldr	r2, [pc, #84]	@ (800b150 <prvAddNewTaskToReadyList+0xd8>)
 800b0fa:	441a      	add	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4619      	mov	r1, r3
 800b102:	4610      	mov	r0, r2
 800b104:	f7ff f8e9 	bl	800a2da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b108:	f001 fa60 	bl	800c5cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b10c:	4b0d      	ldr	r3, [pc, #52]	@ (800b144 <prvAddNewTaskToReadyList+0xcc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00e      	beq.n	800b132 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b114:	4b0a      	ldr	r3, [pc, #40]	@ (800b140 <prvAddNewTaskToReadyList+0xc8>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11e:	429a      	cmp	r2, r3
 800b120:	d207      	bcs.n	800b132 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b122:	4b0c      	ldr	r3, [pc, #48]	@ (800b154 <prvAddNewTaskToReadyList+0xdc>)
 800b124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20002af4 	.word	0x20002af4
 800b140:	20002620 	.word	0x20002620
 800b144:	20002b00 	.word	0x20002b00
 800b148:	20002b10 	.word	0x20002b10
 800b14c:	20002afc 	.word	0x20002afc
 800b150:	20002624 	.word	0x20002624
 800b154:	e000ed04 	.word	0xe000ed04

0800b158 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d018      	beq.n	800b19c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b16a:	4b14      	ldr	r3, [pc, #80]	@ (800b1bc <vTaskDelay+0x64>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00b      	beq.n	800b18a <vTaskDelay+0x32>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	60bb      	str	r3, [r7, #8]
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	e7fd      	b.n	800b186 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b18a:	f000 f88b 	bl	800b2a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b18e:	2100      	movs	r1, #0
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fd09 	bl	800bba8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b196:	f000 f893 	bl	800b2c0 <xTaskResumeAll>
 800b19a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d107      	bne.n	800b1b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1a2:	4b07      	ldr	r3, [pc, #28]	@ (800b1c0 <vTaskDelay+0x68>)
 800b1a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1b2:	bf00      	nop
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20002b1c 	.word	0x20002b1c
 800b1c0:	e000ed04 	.word	0xe000ed04

0800b1c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08a      	sub	sp, #40	@ 0x28
 800b1c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1d2:	463a      	mov	r2, r7
 800b1d4:	1d39      	adds	r1, r7, #4
 800b1d6:	f107 0308 	add.w	r3, r7, #8
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff f81c 	bl	800a218 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	9202      	str	r2, [sp, #8]
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	460a      	mov	r2, r1
 800b1f2:	4924      	ldr	r1, [pc, #144]	@ (800b284 <vTaskStartScheduler+0xc0>)
 800b1f4:	4824      	ldr	r0, [pc, #144]	@ (800b288 <vTaskStartScheduler+0xc4>)
 800b1f6:	f7ff fdf1 	bl	800addc <xTaskCreateStatic>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	4a23      	ldr	r2, [pc, #140]	@ (800b28c <vTaskStartScheduler+0xc8>)
 800b1fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b200:	4b22      	ldr	r3, [pc, #136]	@ (800b28c <vTaskStartScheduler+0xc8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b208:	2301      	movs	r3, #1
 800b20a:	617b      	str	r3, [r7, #20]
 800b20c:	e001      	b.n	800b212 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b20e:	2300      	movs	r3, #0
 800b210:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d102      	bne.n	800b21e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b218:	f000 fd1a 	bl	800bc50 <xTimerCreateTimerTask>
 800b21c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d11b      	bne.n	800b25c <vTaskStartScheduler+0x98>
	__asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	613b      	str	r3, [r7, #16]
}
 800b236:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b238:	4b15      	ldr	r3, [pc, #84]	@ (800b290 <vTaskStartScheduler+0xcc>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3354      	adds	r3, #84	@ 0x54
 800b23e:	4a15      	ldr	r2, [pc, #84]	@ (800b294 <vTaskStartScheduler+0xd0>)
 800b240:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b242:	4b15      	ldr	r3, [pc, #84]	@ (800b298 <vTaskStartScheduler+0xd4>)
 800b244:	f04f 32ff 	mov.w	r2, #4294967295
 800b248:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b24a:	4b14      	ldr	r3, [pc, #80]	@ (800b29c <vTaskStartScheduler+0xd8>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b250:	4b13      	ldr	r3, [pc, #76]	@ (800b2a0 <vTaskStartScheduler+0xdc>)
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b256:	f001 f8e3 	bl	800c420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b25a:	e00f      	b.n	800b27c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b262:	d10b      	bne.n	800b27c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60fb      	str	r3, [r7, #12]
}
 800b276:	bf00      	nop
 800b278:	bf00      	nop
 800b27a:	e7fd      	b.n	800b278 <vTaskStartScheduler+0xb4>
}
 800b27c:	bf00      	nop
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	0800e250 	.word	0x0800e250
 800b288:	0800b8d5 	.word	0x0800b8d5
 800b28c:	20002b18 	.word	0x20002b18
 800b290:	20002620 	.word	0x20002620
 800b294:	20000188 	.word	0x20000188
 800b298:	20002b14 	.word	0x20002b14
 800b29c:	20002b00 	.word	0x20002b00
 800b2a0:	20002af8 	.word	0x20002af8

0800b2a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2a8:	4b04      	ldr	r3, [pc, #16]	@ (800b2bc <vTaskSuspendAll+0x18>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	4a03      	ldr	r2, [pc, #12]	@ (800b2bc <vTaskSuspendAll+0x18>)
 800b2b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2b2:	bf00      	nop
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	20002b1c 	.word	0x20002b1c

0800b2c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2ce:	4b42      	ldr	r3, [pc, #264]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10b      	bne.n	800b2ee <xTaskResumeAll+0x2e>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	603b      	str	r3, [r7, #0]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2ee:	f001 f93b 	bl	800c568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2f2:	4b39      	ldr	r3, [pc, #228]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4a37      	ldr	r2, [pc, #220]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2fc:	4b36      	ldr	r3, [pc, #216]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d162      	bne.n	800b3ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b304:	4b35      	ldr	r3, [pc, #212]	@ (800b3dc <xTaskResumeAll+0x11c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d05e      	beq.n	800b3ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b30c:	e02f      	b.n	800b36e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b30e:	4b34      	ldr	r3, [pc, #208]	@ (800b3e0 <xTaskResumeAll+0x120>)
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3318      	adds	r3, #24
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff f83a 	bl	800a394 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3304      	adds	r3, #4
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff f835 	bl	800a394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	4b2d      	ldr	r3, [pc, #180]	@ (800b3e4 <xTaskResumeAll+0x124>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d903      	bls.n	800b33e <xTaskResumeAll+0x7e>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33a:	4a2a      	ldr	r2, [pc, #168]	@ (800b3e4 <xTaskResumeAll+0x124>)
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4a27      	ldr	r2, [pc, #156]	@ (800b3e8 <xTaskResumeAll+0x128>)
 800b34c:	441a      	add	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3304      	adds	r3, #4
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	f7fe ffc0 	bl	800a2da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b35e:	4b23      	ldr	r3, [pc, #140]	@ (800b3ec <xTaskResumeAll+0x12c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b364:	429a      	cmp	r2, r3
 800b366:	d302      	bcc.n	800b36e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b368:	4b21      	ldr	r3, [pc, #132]	@ (800b3f0 <xTaskResumeAll+0x130>)
 800b36a:	2201      	movs	r2, #1
 800b36c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b36e:	4b1c      	ldr	r3, [pc, #112]	@ (800b3e0 <xTaskResumeAll+0x120>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1cb      	bne.n	800b30e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b37c:	f000 fb66 	bl	800ba4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b380:	4b1c      	ldr	r3, [pc, #112]	@ (800b3f4 <xTaskResumeAll+0x134>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d010      	beq.n	800b3ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b38c:	f000 f846 	bl	800b41c <xTaskIncrementTick>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b396:	4b16      	ldr	r3, [pc, #88]	@ (800b3f0 <xTaskResumeAll+0x130>)
 800b398:	2201      	movs	r2, #1
 800b39a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f1      	bne.n	800b38c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b3a8:	4b12      	ldr	r3, [pc, #72]	@ (800b3f4 <xTaskResumeAll+0x134>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3ae:	4b10      	ldr	r3, [pc, #64]	@ (800b3f0 <xTaskResumeAll+0x130>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f8 <xTaskResumeAll+0x138>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3ca:	f001 f8ff 	bl	800c5cc <vPortExitCritical>

	return xAlreadyYielded;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20002b1c 	.word	0x20002b1c
 800b3dc:	20002af4 	.word	0x20002af4
 800b3e0:	20002ab4 	.word	0x20002ab4
 800b3e4:	20002afc 	.word	0x20002afc
 800b3e8:	20002624 	.word	0x20002624
 800b3ec:	20002620 	.word	0x20002620
 800b3f0:	20002b08 	.word	0x20002b08
 800b3f4:	20002b04 	.word	0x20002b04
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b402:	4b05      	ldr	r3, [pc, #20]	@ (800b418 <xTaskGetTickCount+0x1c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b408:	687b      	ldr	r3, [r7, #4]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	20002af8 	.word	0x20002af8

0800b41c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b426:	4b4f      	ldr	r3, [pc, #316]	@ (800b564 <xTaskIncrementTick+0x148>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f040 8090 	bne.w	800b550 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b430:	4b4d      	ldr	r3, [pc, #308]	@ (800b568 <xTaskIncrementTick+0x14c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b438:	4a4b      	ldr	r2, [pc, #300]	@ (800b568 <xTaskIncrementTick+0x14c>)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d121      	bne.n	800b488 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b444:	4b49      	ldr	r3, [pc, #292]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00b      	beq.n	800b466 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	603b      	str	r3, [r7, #0]
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <xTaskIncrementTick+0x46>
 800b466:	4b41      	ldr	r3, [pc, #260]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	4b40      	ldr	r3, [pc, #256]	@ (800b570 <xTaskIncrementTick+0x154>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a3e      	ldr	r2, [pc, #248]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	4a3e      	ldr	r2, [pc, #248]	@ (800b570 <xTaskIncrementTick+0x154>)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	4b3e      	ldr	r3, [pc, #248]	@ (800b574 <xTaskIncrementTick+0x158>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	4a3c      	ldr	r2, [pc, #240]	@ (800b574 <xTaskIncrementTick+0x158>)
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	f000 fae2 	bl	800ba4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b488:	4b3b      	ldr	r3, [pc, #236]	@ (800b578 <xTaskIncrementTick+0x15c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d349      	bcc.n	800b526 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b492:	4b36      	ldr	r3, [pc, #216]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b49c:	4b36      	ldr	r3, [pc, #216]	@ (800b578 <xTaskIncrementTick+0x15c>)
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	601a      	str	r2, [r3, #0]
					break;
 800b4a4:	e03f      	b.n	800b526 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a6:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d203      	bcs.n	800b4c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4be:	4a2e      	ldr	r2, [pc, #184]	@ (800b578 <xTaskIncrementTick+0x15c>)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4c4:	e02f      	b.n	800b526 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe ff62 	bl	800a394 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d004      	beq.n	800b4e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	3318      	adds	r3, #24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe ff59 	bl	800a394 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e6:	4b25      	ldr	r3, [pc, #148]	@ (800b57c <xTaskIncrementTick+0x160>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d903      	bls.n	800b4f6 <xTaskIncrementTick+0xda>
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f2:	4a22      	ldr	r2, [pc, #136]	@ (800b57c <xTaskIncrementTick+0x160>)
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4a1f      	ldr	r2, [pc, #124]	@ (800b580 <xTaskIncrementTick+0x164>)
 800b504:	441a      	add	r2, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	3304      	adds	r3, #4
 800b50a:	4619      	mov	r1, r3
 800b50c:	4610      	mov	r0, r2
 800b50e:	f7fe fee4 	bl	800a2da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b516:	4b1b      	ldr	r3, [pc, #108]	@ (800b584 <xTaskIncrementTick+0x168>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d3b8      	bcc.n	800b492 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b520:	2301      	movs	r3, #1
 800b522:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b524:	e7b5      	b.n	800b492 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b526:	4b17      	ldr	r3, [pc, #92]	@ (800b584 <xTaskIncrementTick+0x168>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b52c:	4914      	ldr	r1, [pc, #80]	@ (800b580 <xTaskIncrementTick+0x164>)
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d901      	bls.n	800b542 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b542:	4b11      	ldr	r3, [pc, #68]	@ (800b588 <xTaskIncrementTick+0x16c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d007      	beq.n	800b55a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b54a:	2301      	movs	r3, #1
 800b54c:	617b      	str	r3, [r7, #20]
 800b54e:	e004      	b.n	800b55a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b550:	4b0e      	ldr	r3, [pc, #56]	@ (800b58c <xTaskIncrementTick+0x170>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	4a0d      	ldr	r2, [pc, #52]	@ (800b58c <xTaskIncrementTick+0x170>)
 800b558:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b55a:	697b      	ldr	r3, [r7, #20]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	20002b1c 	.word	0x20002b1c
 800b568:	20002af8 	.word	0x20002af8
 800b56c:	20002aac 	.word	0x20002aac
 800b570:	20002ab0 	.word	0x20002ab0
 800b574:	20002b0c 	.word	0x20002b0c
 800b578:	20002b14 	.word	0x20002b14
 800b57c:	20002afc 	.word	0x20002afc
 800b580:	20002624 	.word	0x20002624
 800b584:	20002620 	.word	0x20002620
 800b588:	20002b08 	.word	0x20002b08
 800b58c:	20002b04 	.word	0x20002b04

0800b590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b596:	4b2b      	ldr	r3, [pc, #172]	@ (800b644 <vTaskSwitchContext+0xb4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b59e:	4b2a      	ldr	r3, [pc, #168]	@ (800b648 <vTaskSwitchContext+0xb8>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5a4:	e047      	b.n	800b636 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b5a6:	4b28      	ldr	r3, [pc, #160]	@ (800b648 <vTaskSwitchContext+0xb8>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ac:	4b27      	ldr	r3, [pc, #156]	@ (800b64c <vTaskSwitchContext+0xbc>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	e011      	b.n	800b5d8 <vTaskSwitchContext+0x48>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	607b      	str	r3, [r7, #4]
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	e7fd      	b.n	800b5ce <vTaskSwitchContext+0x3e>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	491d      	ldr	r1, [pc, #116]	@ (800b650 <vTaskSwitchContext+0xc0>)
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0e3      	beq.n	800b5b4 <vTaskSwitchContext+0x24>
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4a16      	ldr	r2, [pc, #88]	@ (800b650 <vTaskSwitchContext+0xc0>)
 800b5f8:	4413      	add	r3, r2
 800b5fa:	60bb      	str	r3, [r7, #8]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	685a      	ldr	r2, [r3, #4]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	605a      	str	r2, [r3, #4]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	3308      	adds	r3, #8
 800b60e:	429a      	cmp	r2, r3
 800b610:	d104      	bne.n	800b61c <vTaskSwitchContext+0x8c>
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	605a      	str	r2, [r3, #4]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	4a0c      	ldr	r2, [pc, #48]	@ (800b654 <vTaskSwitchContext+0xc4>)
 800b624:	6013      	str	r3, [r2, #0]
 800b626:	4a09      	ldr	r2, [pc, #36]	@ (800b64c <vTaskSwitchContext+0xbc>)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b62c:	4b09      	ldr	r3, [pc, #36]	@ (800b654 <vTaskSwitchContext+0xc4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3354      	adds	r3, #84	@ 0x54
 800b632:	4a09      	ldr	r2, [pc, #36]	@ (800b658 <vTaskSwitchContext+0xc8>)
 800b634:	6013      	str	r3, [r2, #0]
}
 800b636:	bf00      	nop
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	20002b1c 	.word	0x20002b1c
 800b648:	20002b08 	.word	0x20002b08
 800b64c:	20002afc 	.word	0x20002afc
 800b650:	20002624 	.word	0x20002624
 800b654:	20002620 	.word	0x20002620
 800b658:	20000188 	.word	0x20000188

0800b65c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b684:	4b07      	ldr	r3, [pc, #28]	@ (800b6a4 <vTaskPlaceOnEventList+0x48>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	3318      	adds	r3, #24
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7fe fe48 	bl	800a322 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b692:	2101      	movs	r1, #1
 800b694:	6838      	ldr	r0, [r7, #0]
 800b696:	f000 fa87 	bl	800bba8 <prvAddCurrentTaskToDelayedList>
}
 800b69a:	bf00      	nop
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20002620 	.word	0x20002620

0800b6a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10b      	bne.n	800b6d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	617b      	str	r3, [r7, #20]
}
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
 800b6d0:	e7fd      	b.n	800b6ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6fc <vTaskPlaceOnEventListRestricted+0x54>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3318      	adds	r3, #24
 800b6d8:	4619      	mov	r1, r3
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7fe fdfd 	bl	800a2da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	68b8      	ldr	r0, [r7, #8]
 800b6f0:	f000 fa5a 	bl	800bba8 <prvAddCurrentTaskToDelayedList>
	}
 800b6f4:	bf00      	nop
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20002620 	.word	0x20002620

0800b700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60fb      	str	r3, [r7, #12]
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	e7fd      	b.n	800b72a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3318      	adds	r3, #24
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe fe2e 	bl	800a394 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b738:	4b1d      	ldr	r3, [pc, #116]	@ (800b7b0 <xTaskRemoveFromEventList+0xb0>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d11d      	bne.n	800b77c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	3304      	adds	r3, #4
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fe25 	bl	800a394 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74e:	4b19      	ldr	r3, [pc, #100]	@ (800b7b4 <xTaskRemoveFromEventList+0xb4>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d903      	bls.n	800b75e <xTaskRemoveFromEventList+0x5e>
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75a:	4a16      	ldr	r2, [pc, #88]	@ (800b7b4 <xTaskRemoveFromEventList+0xb4>)
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b762:	4613      	mov	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4a13      	ldr	r2, [pc, #76]	@ (800b7b8 <xTaskRemoveFromEventList+0xb8>)
 800b76c:	441a      	add	r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	3304      	adds	r3, #4
 800b772:	4619      	mov	r1, r3
 800b774:	4610      	mov	r0, r2
 800b776:	f7fe fdb0 	bl	800a2da <vListInsertEnd>
 800b77a:	e005      	b.n	800b788 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	3318      	adds	r3, #24
 800b780:	4619      	mov	r1, r3
 800b782:	480e      	ldr	r0, [pc, #56]	@ (800b7bc <xTaskRemoveFromEventList+0xbc>)
 800b784:	f7fe fda9 	bl	800a2da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b78c:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c0 <xTaskRemoveFromEventList+0xc0>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b792:	429a      	cmp	r2, r3
 800b794:	d905      	bls.n	800b7a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b796:	2301      	movs	r3, #1
 800b798:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b79a:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c4 <xTaskRemoveFromEventList+0xc4>)
 800b79c:	2201      	movs	r2, #1
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	e001      	b.n	800b7a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7a6:	697b      	ldr	r3, [r7, #20]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20002b1c 	.word	0x20002b1c
 800b7b4:	20002afc 	.word	0x20002afc
 800b7b8:	20002624 	.word	0x20002624
 800b7bc:	20002ab4 	.word	0x20002ab4
 800b7c0:	20002620 	.word	0x20002620
 800b7c4:	20002b08 	.word	0x20002b08

0800b7c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <vTaskInternalSetTimeOutState+0x24>)
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7d8:	4b05      	ldr	r3, [pc, #20]	@ (800b7f0 <vTaskInternalSetTimeOutState+0x28>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	605a      	str	r2, [r3, #4]
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	20002b0c 	.word	0x20002b0c
 800b7f0:	20002af8 	.word	0x20002af8

0800b7f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10b      	bne.n	800b81c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	613b      	str	r3, [r7, #16]
}
 800b816:	bf00      	nop
 800b818:	bf00      	nop
 800b81a:	e7fd      	b.n	800b818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10b      	bne.n	800b83a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60fb      	str	r3, [r7, #12]
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	e7fd      	b.n	800b836 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b83a:	f000 fe95 	bl	800c568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b83e:	4b1d      	ldr	r3, [pc, #116]	@ (800b8b4 <xTaskCheckForTimeOut+0xc0>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d102      	bne.n	800b85e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]
 800b85c:	e023      	b.n	800b8a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	4b15      	ldr	r3, [pc, #84]	@ (800b8b8 <xTaskCheckForTimeOut+0xc4>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d007      	beq.n	800b87a <xTaskCheckForTimeOut+0x86>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	69ba      	ldr	r2, [r7, #24]
 800b870:	429a      	cmp	r2, r3
 800b872:	d302      	bcc.n	800b87a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b874:	2301      	movs	r3, #1
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	e015      	b.n	800b8a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	429a      	cmp	r2, r3
 800b882:	d20b      	bcs.n	800b89c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff ff99 	bl	800b7c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b896:	2300      	movs	r3, #0
 800b898:	61fb      	str	r3, [r7, #28]
 800b89a:	e004      	b.n	800b8a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8a6:	f000 fe91 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800b8aa:	69fb      	ldr	r3, [r7, #28]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3720      	adds	r7, #32
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	20002af8 	.word	0x20002af8
 800b8b8:	20002b0c 	.word	0x20002b0c

0800b8bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8c0:	4b03      	ldr	r3, [pc, #12]	@ (800b8d0 <vTaskMissedYield+0x14>)
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]
}
 800b8c6:	bf00      	nop
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	20002b08 	.word	0x20002b08

0800b8d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8dc:	f000 f852 	bl	800b984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8e0:	4b06      	ldr	r3, [pc, #24]	@ (800b8fc <prvIdleTask+0x28>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d9f9      	bls.n	800b8dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8e8:	4b05      	ldr	r3, [pc, #20]	@ (800b900 <prvIdleTask+0x2c>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8f8:	e7f0      	b.n	800b8dc <prvIdleTask+0x8>
 800b8fa:	bf00      	nop
 800b8fc:	20002624 	.word	0x20002624
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b90a:	2300      	movs	r3, #0
 800b90c:	607b      	str	r3, [r7, #4]
 800b90e:	e00c      	b.n	800b92a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4a12      	ldr	r2, [pc, #72]	@ (800b964 <prvInitialiseTaskLists+0x60>)
 800b91c:	4413      	add	r3, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fcae 	bl	800a280 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3301      	adds	r3, #1
 800b928:	607b      	str	r3, [r7, #4]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b37      	cmp	r3, #55	@ 0x37
 800b92e:	d9ef      	bls.n	800b910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b930:	480d      	ldr	r0, [pc, #52]	@ (800b968 <prvInitialiseTaskLists+0x64>)
 800b932:	f7fe fca5 	bl	800a280 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b936:	480d      	ldr	r0, [pc, #52]	@ (800b96c <prvInitialiseTaskLists+0x68>)
 800b938:	f7fe fca2 	bl	800a280 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b93c:	480c      	ldr	r0, [pc, #48]	@ (800b970 <prvInitialiseTaskLists+0x6c>)
 800b93e:	f7fe fc9f 	bl	800a280 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b942:	480c      	ldr	r0, [pc, #48]	@ (800b974 <prvInitialiseTaskLists+0x70>)
 800b944:	f7fe fc9c 	bl	800a280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b948:	480b      	ldr	r0, [pc, #44]	@ (800b978 <prvInitialiseTaskLists+0x74>)
 800b94a:	f7fe fc99 	bl	800a280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b94e:	4b0b      	ldr	r3, [pc, #44]	@ (800b97c <prvInitialiseTaskLists+0x78>)
 800b950:	4a05      	ldr	r2, [pc, #20]	@ (800b968 <prvInitialiseTaskLists+0x64>)
 800b952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b954:	4b0a      	ldr	r3, [pc, #40]	@ (800b980 <prvInitialiseTaskLists+0x7c>)
 800b956:	4a05      	ldr	r2, [pc, #20]	@ (800b96c <prvInitialiseTaskLists+0x68>)
 800b958:	601a      	str	r2, [r3, #0]
}
 800b95a:	bf00      	nop
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20002624 	.word	0x20002624
 800b968:	20002a84 	.word	0x20002a84
 800b96c:	20002a98 	.word	0x20002a98
 800b970:	20002ab4 	.word	0x20002ab4
 800b974:	20002ac8 	.word	0x20002ac8
 800b978:	20002ae0 	.word	0x20002ae0
 800b97c:	20002aac 	.word	0x20002aac
 800b980:	20002ab0 	.word	0x20002ab0

0800b984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b98a:	e019      	b.n	800b9c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b98c:	f000 fdec 	bl	800c568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b990:	4b10      	ldr	r3, [pc, #64]	@ (800b9d4 <prvCheckTasksWaitingTermination+0x50>)
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fcf9 	bl	800a394 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d8 <prvCheckTasksWaitingTermination+0x54>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b9d8 <prvCheckTasksWaitingTermination+0x54>)
 800b9aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b9b6:	f000 fe09 	bl	800c5cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f810 	bl	800b9e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9c0:	4b06      	ldr	r3, [pc, #24]	@ (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e1      	bne.n	800b98c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20002ac8 	.word	0x20002ac8
 800b9d8:	20002af4 	.word	0x20002af4
 800b9dc:	20002adc 	.word	0x20002adc

0800b9e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3354      	adds	r3, #84	@ 0x54
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 fe1f 	bl	800d630 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d108      	bne.n	800ba0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 ffa1 	bl	800c948 <vPortFree>
				vPortFree( pxTCB );
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 ff9e 	bl	800c948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba0c:	e019      	b.n	800ba42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d103      	bne.n	800ba20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 ff95 	bl	800c948 <vPortFree>
	}
 800ba1e:	e010      	b.n	800ba42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d00b      	beq.n	800ba42 <prvDeleteTCB+0x62>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	60fb      	str	r3, [r7, #12]
}
 800ba3c:	bf00      	nop
 800ba3e:	bf00      	nop
 800ba40:	e7fd      	b.n	800ba3e <prvDeleteTCB+0x5e>
	}
 800ba42:	bf00      	nop
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba52:	4b0c      	ldr	r3, [pc, #48]	@ (800ba84 <prvResetNextTaskUnblockTime+0x38>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d104      	bne.n	800ba66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba88 <prvResetNextTaskUnblockTime+0x3c>)
 800ba5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba64:	e008      	b.n	800ba78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba66:	4b07      	ldr	r3, [pc, #28]	@ (800ba84 <prvResetNextTaskUnblockTime+0x38>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	4a04      	ldr	r2, [pc, #16]	@ (800ba88 <prvResetNextTaskUnblockTime+0x3c>)
 800ba76:	6013      	str	r3, [r2, #0]
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	20002aac 	.word	0x20002aac
 800ba88:	20002b14 	.word	0x20002b14

0800ba8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba92:	4b0b      	ldr	r3, [pc, #44]	@ (800bac0 <xTaskGetSchedulerState+0x34>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d102      	bne.n	800baa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	607b      	str	r3, [r7, #4]
 800ba9e:	e008      	b.n	800bab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baa0:	4b08      	ldr	r3, [pc, #32]	@ (800bac4 <xTaskGetSchedulerState+0x38>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d102      	bne.n	800baae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800baa8:	2302      	movs	r3, #2
 800baaa:	607b      	str	r3, [r7, #4]
 800baac:	e001      	b.n	800bab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800baae:	2300      	movs	r3, #0
 800bab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bab2:	687b      	ldr	r3, [r7, #4]
	}
 800bab4:	4618      	mov	r0, r3
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	20002b00 	.word	0x20002b00
 800bac4:	20002b1c 	.word	0x20002b1c

0800bac8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d058      	beq.n	800bb90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bade:	4b2f      	ldr	r3, [pc, #188]	@ (800bb9c <xTaskPriorityDisinherit+0xd4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d00b      	beq.n	800bb00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	60fb      	str	r3, [r7, #12]
}
 800bafa:	bf00      	nop
 800bafc:	bf00      	nop
 800bafe:	e7fd      	b.n	800bafc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10b      	bne.n	800bb20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	60bb      	str	r3, [r7, #8]
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	e7fd      	b.n	800bb1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb24:	1e5a      	subs	r2, r3, #1
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d02c      	beq.n	800bb90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d128      	bne.n	800bb90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe fc26 	bl	800a394 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb60:	4b0f      	ldr	r3, [pc, #60]	@ (800bba0 <xTaskPriorityDisinherit+0xd8>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d903      	bls.n	800bb70 <xTaskPriorityDisinherit+0xa8>
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb6c:	4a0c      	ldr	r2, [pc, #48]	@ (800bba0 <xTaskPriorityDisinherit+0xd8>)
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4a09      	ldr	r2, [pc, #36]	@ (800bba4 <xTaskPriorityDisinherit+0xdc>)
 800bb7e:	441a      	add	r2, r3
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	3304      	adds	r3, #4
 800bb84:	4619      	mov	r1, r3
 800bb86:	4610      	mov	r0, r2
 800bb88:	f7fe fba7 	bl	800a2da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb90:	697b      	ldr	r3, [r7, #20]
	}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20002620 	.word	0x20002620
 800bba0:	20002afc 	.word	0x20002afc
 800bba4:	20002624 	.word	0x20002624

0800bba8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbb2:	4b21      	ldr	r3, [pc, #132]	@ (800bc38 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbb8:	4b20      	ldr	r3, [pc, #128]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fe fbe8 	bl	800a394 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbca:	d10a      	bne.n	800bbe2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d007      	beq.n	800bbe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbd2:	4b1a      	ldr	r3, [pc, #104]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4819      	ldr	r0, [pc, #100]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbdc:	f7fe fb7d 	bl	800a2da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbe0:	e026      	b.n	800bc30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbea:	4b14      	ldr	r3, [pc, #80]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d209      	bcs.n	800bc0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbfa:	4b12      	ldr	r3, [pc, #72]	@ (800bc44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	4b0f      	ldr	r3, [pc, #60]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3304      	adds	r3, #4
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	f7fe fb8b 	bl	800a322 <vListInsert>
}
 800bc0c:	e010      	b.n	800bc30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b0a      	ldr	r3, [pc, #40]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3304      	adds	r3, #4
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	f7fe fb81 	bl	800a322 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc20:	4b0a      	ldr	r3, [pc, #40]	@ (800bc4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d202      	bcs.n	800bc30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc2a:	4a08      	ldr	r2, [pc, #32]	@ (800bc4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	6013      	str	r3, [r2, #0]
}
 800bc30:	bf00      	nop
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	20002af8 	.word	0x20002af8
 800bc3c:	20002620 	.word	0x20002620
 800bc40:	20002ae0 	.word	0x20002ae0
 800bc44:	20002ab0 	.word	0x20002ab0
 800bc48:	20002aac 	.word	0x20002aac
 800bc4c:	20002b14 	.word	0x20002b14

0800bc50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b08a      	sub	sp, #40	@ 0x28
 800bc54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc5a:	f000 fb13 	bl	800c284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc5e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcd4 <xTimerCreateTimerTask+0x84>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d021      	beq.n	800bcaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc66:	2300      	movs	r3, #0
 800bc68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc6e:	1d3a      	adds	r2, r7, #4
 800bc70:	f107 0108 	add.w	r1, r7, #8
 800bc74:	f107 030c 	add.w	r3, r7, #12
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fe fae7 	bl	800a24c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	9202      	str	r2, [sp, #8]
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	2302      	movs	r3, #2
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	460a      	mov	r2, r1
 800bc90:	4911      	ldr	r1, [pc, #68]	@ (800bcd8 <xTimerCreateTimerTask+0x88>)
 800bc92:	4812      	ldr	r0, [pc, #72]	@ (800bcdc <xTimerCreateTimerTask+0x8c>)
 800bc94:	f7ff f8a2 	bl	800addc <xTaskCreateStatic>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	4a11      	ldr	r2, [pc, #68]	@ (800bce0 <xTimerCreateTimerTask+0x90>)
 800bc9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc9e:	4b10      	ldr	r3, [pc, #64]	@ (800bce0 <xTimerCreateTimerTask+0x90>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bca6:	2301      	movs	r3, #1
 800bca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10b      	bne.n	800bcc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	613b      	str	r3, [r7, #16]
}
 800bcc2:	bf00      	nop
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcc8:	697b      	ldr	r3, [r7, #20]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20002b50 	.word	0x20002b50
 800bcd8:	0800e258 	.word	0x0800e258
 800bcdc:	0800be1d 	.word	0x0800be1d
 800bce0:	20002b54 	.word	0x20002b54

0800bce4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	@ 0x28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10b      	bne.n	800bd14 <xTimerGenericCommand+0x30>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	623b      	str	r3, [r7, #32]
}
 800bd0e:	bf00      	nop
 800bd10:	bf00      	nop
 800bd12:	e7fd      	b.n	800bd10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd14:	4b19      	ldr	r3, [pc, #100]	@ (800bd7c <xTimerGenericCommand+0x98>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d02a      	beq.n	800bd72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2b05      	cmp	r3, #5
 800bd2c:	dc18      	bgt.n	800bd60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd2e:	f7ff fead 	bl	800ba8c <xTaskGetSchedulerState>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d109      	bne.n	800bd4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd38:	4b10      	ldr	r3, [pc, #64]	@ (800bd7c <xTimerGenericCommand+0x98>)
 800bd3a:	6818      	ldr	r0, [r3, #0]
 800bd3c:	f107 0110 	add.w	r1, r7, #16
 800bd40:	2300      	movs	r3, #0
 800bd42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd44:	f7fe fc5a 	bl	800a5fc <xQueueGenericSend>
 800bd48:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd4a:	e012      	b.n	800bd72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd7c <xTimerGenericCommand+0x98>)
 800bd4e:	6818      	ldr	r0, [r3, #0]
 800bd50:	f107 0110 	add.w	r1, r7, #16
 800bd54:	2300      	movs	r3, #0
 800bd56:	2200      	movs	r2, #0
 800bd58:	f7fe fc50 	bl	800a5fc <xQueueGenericSend>
 800bd5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd5e:	e008      	b.n	800bd72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd60:	4b06      	ldr	r3, [pc, #24]	@ (800bd7c <xTimerGenericCommand+0x98>)
 800bd62:	6818      	ldr	r0, [r3, #0]
 800bd64:	f107 0110 	add.w	r1, r7, #16
 800bd68:	2300      	movs	r3, #0
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	f7fe fd48 	bl	800a800 <xQueueGenericSendFromISR>
 800bd70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3728      	adds	r7, #40	@ 0x28
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20002b50 	.word	0x20002b50

0800bd80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd8a:	4b23      	ldr	r3, [pc, #140]	@ (800be18 <prvProcessExpiredTimer+0x98>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe fafb 	bl	800a394 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bda4:	f003 0304 	and.w	r3, r3, #4
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d023      	beq.n	800bdf4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	699a      	ldr	r2, [r3, #24]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	18d1      	adds	r1, r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	6978      	ldr	r0, [r7, #20]
 800bdba:	f000 f8d5 	bl	800bf68 <prvInsertTimerInActiveList>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d020      	beq.n	800be06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	6978      	ldr	r0, [r7, #20]
 800bdd0:	f7ff ff88 	bl	800bce4 <xTimerGenericCommand>
 800bdd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d114      	bne.n	800be06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60fb      	str	r3, [r7, #12]
}
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	e7fd      	b.n	800bdf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdfa:	f023 0301 	bic.w	r3, r3, #1
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	6978      	ldr	r0, [r7, #20]
 800be0c:	4798      	blx	r3
}
 800be0e:	bf00      	nop
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20002b48 	.word	0x20002b48

0800be1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be24:	f107 0308 	add.w	r3, r7, #8
 800be28:	4618      	mov	r0, r3
 800be2a:	f000 f859 	bl	800bee0 <prvGetNextExpireTime>
 800be2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4619      	mov	r1, r3
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 f805 	bl	800be44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be3a:	f000 f8d7 	bl	800bfec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be3e:	bf00      	nop
 800be40:	e7f0      	b.n	800be24 <prvTimerTask+0x8>
	...

0800be44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be4e:	f7ff fa29 	bl	800b2a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be52:	f107 0308 	add.w	r3, r7, #8
 800be56:	4618      	mov	r0, r3
 800be58:	f000 f866 	bl	800bf28 <prvSampleTimeNow>
 800be5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d130      	bne.n	800bec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10a      	bne.n	800be80 <prvProcessTimerOrBlockTask+0x3c>
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d806      	bhi.n	800be80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be72:	f7ff fa25 	bl	800b2c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be76:	68f9      	ldr	r1, [r7, #12]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff ff81 	bl	800bd80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be7e:	e024      	b.n	800beca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d008      	beq.n	800be98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be86:	4b13      	ldr	r3, [pc, #76]	@ (800bed4 <prvProcessTimerOrBlockTask+0x90>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <prvProcessTimerOrBlockTask+0x50>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <prvProcessTimerOrBlockTask+0x52>
 800be94:	2300      	movs	r3, #0
 800be96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be98:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <prvProcessTimerOrBlockTask+0x94>)
 800be9a:	6818      	ldr	r0, [r3, #0]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f7fe ff65 	bl	800ad74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800beaa:	f7ff fa09 	bl	800b2c0 <xTaskResumeAll>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10a      	bne.n	800beca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800beb4:	4b09      	ldr	r3, [pc, #36]	@ (800bedc <prvProcessTimerOrBlockTask+0x98>)
 800beb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	f3bf 8f6f 	isb	sy
}
 800bec4:	e001      	b.n	800beca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bec6:	f7ff f9fb 	bl	800b2c0 <xTaskResumeAll>
}
 800beca:	bf00      	nop
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20002b4c 	.word	0x20002b4c
 800bed8:	20002b50 	.word	0x20002b50
 800bedc:	e000ed04 	.word	0xe000ed04

0800bee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bee8:	4b0e      	ldr	r3, [pc, #56]	@ (800bf24 <prvGetNextExpireTime+0x44>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <prvGetNextExpireTime+0x16>
 800bef2:	2201      	movs	r2, #1
 800bef4:	e000      	b.n	800bef8 <prvGetNextExpireTime+0x18>
 800bef6:	2200      	movs	r2, #0
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d105      	bne.n	800bf10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf04:	4b07      	ldr	r3, [pc, #28]	@ (800bf24 <prvGetNextExpireTime+0x44>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	e001      	b.n	800bf14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf14:	68fb      	ldr	r3, [r7, #12]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20002b48 	.word	0x20002b48

0800bf28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf30:	f7ff fa64 	bl	800b3fc <xTaskGetTickCount>
 800bf34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf36:	4b0b      	ldr	r3, [pc, #44]	@ (800bf64 <prvSampleTimeNow+0x3c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d205      	bcs.n	800bf4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf40:	f000 f93a 	bl	800c1b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	601a      	str	r2, [r3, #0]
 800bf4a:	e002      	b.n	800bf52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf52:	4a04      	ldr	r2, [pc, #16]	@ (800bf64 <prvSampleTimeNow+0x3c>)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf58:	68fb      	ldr	r3, [r7, #12]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20002b58 	.word	0x20002b58

0800bf68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf76:	2300      	movs	r3, #0
 800bf78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d812      	bhi.n	800bfb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	1ad2      	subs	r2, r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d302      	bcc.n	800bfa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	617b      	str	r3, [r7, #20]
 800bfa0:	e01b      	b.n	800bfda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfa2:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <prvInsertTimerInActiveList+0x7c>)
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4610      	mov	r0, r2
 800bfae:	f7fe f9b8 	bl	800a322 <vListInsert>
 800bfb2:	e012      	b.n	800bfda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d206      	bcs.n	800bfca <prvInsertTimerInActiveList+0x62>
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d302      	bcc.n	800bfca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	e007      	b.n	800bfda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfca:	4b07      	ldr	r3, [pc, #28]	@ (800bfe8 <prvInsertTimerInActiveList+0x80>)
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f7fe f9a4 	bl	800a322 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfda:	697b      	ldr	r3, [r7, #20]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	20002b4c 	.word	0x20002b4c
 800bfe8:	20002b48 	.word	0x20002b48

0800bfec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08e      	sub	sp, #56	@ 0x38
 800bff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bff2:	e0ce      	b.n	800c192 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	da19      	bge.n	800c02e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bffa:	1d3b      	adds	r3, r7, #4
 800bffc:	3304      	adds	r3, #4
 800bffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	61fb      	str	r3, [r7, #28]
}
 800c018:	bf00      	nop
 800c01a:	bf00      	nop
 800c01c:	e7fd      	b.n	800c01a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c024:	6850      	ldr	r0, [r2, #4]
 800c026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c028:	6892      	ldr	r2, [r2, #8]
 800c02a:	4611      	mov	r1, r2
 800c02c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	f2c0 80ae 	blt.w	800c192 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d004      	beq.n	800c04c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	3304      	adds	r3, #4
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe f9a4 	bl	800a394 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c04c:	463b      	mov	r3, r7
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff ff6a 	bl	800bf28 <prvSampleTimeNow>
 800c054:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b09      	cmp	r3, #9
 800c05a:	f200 8097 	bhi.w	800c18c <prvProcessReceivedCommands+0x1a0>
 800c05e:	a201      	add	r2, pc, #4	@ (adr r2, 800c064 <prvProcessReceivedCommands+0x78>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c08d 	.word	0x0800c08d
 800c068:	0800c08d 	.word	0x0800c08d
 800c06c:	0800c08d 	.word	0x0800c08d
 800c070:	0800c103 	.word	0x0800c103
 800c074:	0800c117 	.word	0x0800c117
 800c078:	0800c163 	.word	0x0800c163
 800c07c:	0800c08d 	.word	0x0800c08d
 800c080:	0800c08d 	.word	0x0800c08d
 800c084:	0800c103 	.word	0x0800c103
 800c088:	0800c117 	.word	0x0800c117
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c092:	f043 0301 	orr.w	r3, r3, #1
 800c096:	b2da      	uxtb	r2, r3
 800c098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	18d1      	adds	r1, r2, r3
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0ac:	f7ff ff5c 	bl	800bf68 <prvInsertTimerInActiveList>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d06c      	beq.n	800c190 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0c4:	f003 0304 	and.w	r3, r3, #4
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d061      	beq.n	800c190 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	2100      	movs	r1, #0
 800c0dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0de:	f7ff fe01 	bl	800bce4 <xTimerGenericCommand>
 800c0e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d152      	bne.n	800c190 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	61bb      	str	r3, [r7, #24]
}
 800c0fc:	bf00      	nop
 800c0fe:	bf00      	nop
 800c100:	e7fd      	b.n	800c0fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c108:	f023 0301 	bic.w	r3, r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c114:	e03d      	b.n	800c192 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c11c:	f043 0301 	orr.w	r3, r3, #1
 800c120:	b2da      	uxtb	r2, r3
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10b      	bne.n	800c14e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	617b      	str	r3, [r7, #20]
}
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
 800c14c:	e7fd      	b.n	800c14a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c150:	699a      	ldr	r2, [r3, #24]
 800c152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c154:	18d1      	adds	r1, r2, r3
 800c156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c15a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c15c:	f7ff ff04 	bl	800bf68 <prvInsertTimerInActiveList>
					break;
 800c160:	e017      	b.n	800c192 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d103      	bne.n	800c178 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c172:	f000 fbe9 	bl	800c948 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c176:	e00c      	b.n	800c192 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c17e:	f023 0301 	bic.w	r3, r3, #1
 800c182:	b2da      	uxtb	r2, r3
 800c184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c18a:	e002      	b.n	800c192 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c18c:	bf00      	nop
 800c18e:	e000      	b.n	800c192 <prvProcessReceivedCommands+0x1a6>
					break;
 800c190:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c192:	4b08      	ldr	r3, [pc, #32]	@ (800c1b4 <prvProcessReceivedCommands+0x1c8>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	1d39      	adds	r1, r7, #4
 800c198:	2200      	movs	r2, #0
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fe fbce 	bl	800a93c <xQueueReceive>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f47f af26 	bne.w	800bff4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1a8:	bf00      	nop
 800c1aa:	bf00      	nop
 800c1ac:	3730      	adds	r7, #48	@ 0x30
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20002b50 	.word	0x20002b50

0800c1b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1be:	e049      	b.n	800c254 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1c0:	4b2e      	ldr	r3, [pc, #184]	@ (800c27c <prvSwitchTimerLists+0xc4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ca:	4b2c      	ldr	r3, [pc, #176]	@ (800c27c <prvSwitchTimerLists+0xc4>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe f8db 	bl	800a394 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d02f      	beq.n	800c254 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	429a      	cmp	r2, r3
 800c204:	d90e      	bls.n	800c224 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c212:	4b1a      	ldr	r3, [pc, #104]	@ (800c27c <prvSwitchTimerLists+0xc4>)
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3304      	adds	r3, #4
 800c21a:	4619      	mov	r1, r3
 800c21c:	4610      	mov	r0, r2
 800c21e:	f7fe f880 	bl	800a322 <vListInsert>
 800c222:	e017      	b.n	800c254 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c224:	2300      	movs	r3, #0
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2300      	movs	r3, #0
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	2100      	movs	r1, #0
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff fd58 	bl	800bce4 <xTimerGenericCommand>
 800c234:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10b      	bne.n	800c254 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	603b      	str	r3, [r7, #0]
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	e7fd      	b.n	800c250 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c254:	4b09      	ldr	r3, [pc, #36]	@ (800c27c <prvSwitchTimerLists+0xc4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1b0      	bne.n	800c1c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c25e:	4b07      	ldr	r3, [pc, #28]	@ (800c27c <prvSwitchTimerLists+0xc4>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c264:	4b06      	ldr	r3, [pc, #24]	@ (800c280 <prvSwitchTimerLists+0xc8>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a04      	ldr	r2, [pc, #16]	@ (800c27c <prvSwitchTimerLists+0xc4>)
 800c26a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c26c:	4a04      	ldr	r2, [pc, #16]	@ (800c280 <prvSwitchTimerLists+0xc8>)
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	6013      	str	r3, [r2, #0]
}
 800c272:	bf00      	nop
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20002b48 	.word	0x20002b48
 800c280:	20002b4c 	.word	0x20002b4c

0800c284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c28a:	f000 f96d 	bl	800c568 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c28e:	4b15      	ldr	r3, [pc, #84]	@ (800c2e4 <prvCheckForValidListAndQueue+0x60>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d120      	bne.n	800c2d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c296:	4814      	ldr	r0, [pc, #80]	@ (800c2e8 <prvCheckForValidListAndQueue+0x64>)
 800c298:	f7fd fff2 	bl	800a280 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c29c:	4813      	ldr	r0, [pc, #76]	@ (800c2ec <prvCheckForValidListAndQueue+0x68>)
 800c29e:	f7fd ffef 	bl	800a280 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2a2:	4b13      	ldr	r3, [pc, #76]	@ (800c2f0 <prvCheckForValidListAndQueue+0x6c>)
 800c2a4:	4a10      	ldr	r2, [pc, #64]	@ (800c2e8 <prvCheckForValidListAndQueue+0x64>)
 800c2a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2a8:	4b12      	ldr	r3, [pc, #72]	@ (800c2f4 <prvCheckForValidListAndQueue+0x70>)
 800c2aa:	4a10      	ldr	r2, [pc, #64]	@ (800c2ec <prvCheckForValidListAndQueue+0x68>)
 800c2ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	4b11      	ldr	r3, [pc, #68]	@ (800c2f8 <prvCheckForValidListAndQueue+0x74>)
 800c2b4:	4a11      	ldr	r2, [pc, #68]	@ (800c2fc <prvCheckForValidListAndQueue+0x78>)
 800c2b6:	2110      	movs	r1, #16
 800c2b8:	200a      	movs	r0, #10
 800c2ba:	f7fe f8ff 	bl	800a4bc <xQueueGenericCreateStatic>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4a08      	ldr	r2, [pc, #32]	@ (800c2e4 <prvCheckForValidListAndQueue+0x60>)
 800c2c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2c4:	4b07      	ldr	r3, [pc, #28]	@ (800c2e4 <prvCheckForValidListAndQueue+0x60>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d005      	beq.n	800c2d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2cc:	4b05      	ldr	r3, [pc, #20]	@ (800c2e4 <prvCheckForValidListAndQueue+0x60>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	490b      	ldr	r1, [pc, #44]	@ (800c300 <prvCheckForValidListAndQueue+0x7c>)
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fd24 	bl	800ad20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2d8:	f000 f978 	bl	800c5cc <vPortExitCritical>
}
 800c2dc:	bf00      	nop
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20002b50 	.word	0x20002b50
 800c2e8:	20002b20 	.word	0x20002b20
 800c2ec:	20002b34 	.word	0x20002b34
 800c2f0:	20002b48 	.word	0x20002b48
 800c2f4:	20002b4c 	.word	0x20002b4c
 800c2f8:	20002bfc 	.word	0x20002bfc
 800c2fc:	20002b5c 	.word	0x20002b5c
 800c300:	0800e260 	.word	0x0800e260

0800c304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3b04      	subs	r3, #4
 800c314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c31c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3b04      	subs	r3, #4
 800c322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	f023 0201 	bic.w	r2, r3, #1
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3b04      	subs	r3, #4
 800c332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c334:	4a0c      	ldr	r2, [pc, #48]	@ (800c368 <pxPortInitialiseStack+0x64>)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b14      	subs	r3, #20
 800c33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3b04      	subs	r3, #4
 800c34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f06f 0202 	mvn.w	r2, #2
 800c352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3b20      	subs	r3, #32
 800c358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c35a:	68fb      	ldr	r3, [r7, #12]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	0800c36d 	.word	0x0800c36d

0800c36c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c376:	4b13      	ldr	r3, [pc, #76]	@ (800c3c4 <prvTaskExitError+0x58>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37e:	d00b      	beq.n	800c398 <prvTaskExitError+0x2c>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	60fb      	str	r3, [r7, #12]
}
 800c392:	bf00      	nop
 800c394:	bf00      	nop
 800c396:	e7fd      	b.n	800c394 <prvTaskExitError+0x28>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	60bb      	str	r3, [r7, #8]
}
 800c3aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3ac:	bf00      	nop
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d0fc      	beq.n	800c3ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3b4:	bf00      	nop
 800c3b6:	bf00      	nop
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	2000011c 	.word	0x2000011c
	...

0800c3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3d0:	4b07      	ldr	r3, [pc, #28]	@ (800c3f0 <pxCurrentTCBConst2>)
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	6808      	ldr	r0, [r1, #0]
 800c3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3da:	f380 8809 	msr	PSP, r0
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f380 8811 	msr	BASEPRI, r0
 800c3ea:	4770      	bx	lr
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst2>:
 800c3f0:	20002620 	.word	0x20002620
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3f8:	4808      	ldr	r0, [pc, #32]	@ (800c41c <prvPortStartFirstTask+0x24>)
 800c3fa:	6800      	ldr	r0, [r0, #0]
 800c3fc:	6800      	ldr	r0, [r0, #0]
 800c3fe:	f380 8808 	msr	MSP, r0
 800c402:	f04f 0000 	mov.w	r0, #0
 800c406:	f380 8814 	msr	CONTROL, r0
 800c40a:	b662      	cpsie	i
 800c40c:	b661      	cpsie	f
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	df00      	svc	0
 800c418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c41a:	bf00      	nop
 800c41c:	e000ed08 	.word	0xe000ed08

0800c420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c426:	4b47      	ldr	r3, [pc, #284]	@ (800c544 <xPortStartScheduler+0x124>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a47      	ldr	r2, [pc, #284]	@ (800c548 <xPortStartScheduler+0x128>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d10b      	bne.n	800c448 <xPortStartScheduler+0x28>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	60fb      	str	r3, [r7, #12]
}
 800c442:	bf00      	nop
 800c444:	bf00      	nop
 800c446:	e7fd      	b.n	800c444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c448:	4b3e      	ldr	r3, [pc, #248]	@ (800c544 <xPortStartScheduler+0x124>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a3f      	ldr	r2, [pc, #252]	@ (800c54c <xPortStartScheduler+0x12c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d10b      	bne.n	800c46a <xPortStartScheduler+0x4a>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	613b      	str	r3, [r7, #16]
}
 800c464:	bf00      	nop
 800c466:	bf00      	nop
 800c468:	e7fd      	b.n	800c466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c46a:	4b39      	ldr	r3, [pc, #228]	@ (800c550 <xPortStartScheduler+0x130>)
 800c46c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	22ff      	movs	r2, #255	@ 0xff
 800c47a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	b2db      	uxtb	r3, r3
 800c482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	4b31      	ldr	r3, [pc, #196]	@ (800c554 <xPortStartScheduler+0x134>)
 800c490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c492:	4b31      	ldr	r3, [pc, #196]	@ (800c558 <xPortStartScheduler+0x138>)
 800c494:	2207      	movs	r2, #7
 800c496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c498:	e009      	b.n	800c4ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c49a:	4b2f      	ldr	r3, [pc, #188]	@ (800c558 <xPortStartScheduler+0x138>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4b6:	2b80      	cmp	r3, #128	@ 0x80
 800c4b8:	d0ef      	beq.n	800c49a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4ba:	4b27      	ldr	r3, [pc, #156]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f1c3 0307 	rsb	r3, r3, #7
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d00b      	beq.n	800c4de <xPortStartScheduler+0xbe>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	60bb      	str	r3, [r7, #8]
}
 800c4d8:	bf00      	nop
 800c4da:	bf00      	nop
 800c4dc:	e7fd      	b.n	800c4da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4de:	4b1e      	ldr	r3, [pc, #120]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4f0:	4a19      	ldr	r2, [pc, #100]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4fc:	4b17      	ldr	r3, [pc, #92]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a16      	ldr	r2, [pc, #88]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c508:	4b14      	ldr	r3, [pc, #80]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a13      	ldr	r2, [pc, #76]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c50e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c514:	f000 f8da 	bl	800c6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c518:	4b11      	ldr	r3, [pc, #68]	@ (800c560 <xPortStartScheduler+0x140>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c51e:	f000 f8f9 	bl	800c714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c522:	4b10      	ldr	r3, [pc, #64]	@ (800c564 <xPortStartScheduler+0x144>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a0f      	ldr	r2, [pc, #60]	@ (800c564 <xPortStartScheduler+0x144>)
 800c528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c52c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c52e:	f7ff ff63 	bl	800c3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c532:	f7ff f82d 	bl	800b590 <vTaskSwitchContext>
	prvTaskExitError();
 800c536:	f7ff ff19 	bl	800c36c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	e000ed00 	.word	0xe000ed00
 800c548:	410fc271 	.word	0x410fc271
 800c54c:	410fc270 	.word	0x410fc270
 800c550:	e000e400 	.word	0xe000e400
 800c554:	20002c4c 	.word	0x20002c4c
 800c558:	20002c50 	.word	0x20002c50
 800c55c:	e000ed20 	.word	0xe000ed20
 800c560:	2000011c 	.word	0x2000011c
 800c564:	e000ef34 	.word	0xe000ef34

0800c568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	607b      	str	r3, [r7, #4]
}
 800c580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c582:	4b10      	ldr	r3, [pc, #64]	@ (800c5c4 <vPortEnterCritical+0x5c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	3301      	adds	r3, #1
 800c588:	4a0e      	ldr	r2, [pc, #56]	@ (800c5c4 <vPortEnterCritical+0x5c>)
 800c58a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c58c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c4 <vPortEnterCritical+0x5c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d110      	bne.n	800c5b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c594:	4b0c      	ldr	r3, [pc, #48]	@ (800c5c8 <vPortEnterCritical+0x60>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00b      	beq.n	800c5b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	603b      	str	r3, [r7, #0]
}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	e7fd      	b.n	800c5b2 <vPortEnterCritical+0x4a>
	}
}
 800c5b6:	bf00      	nop
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	2000011c 	.word	0x2000011c
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5d2:	4b12      	ldr	r3, [pc, #72]	@ (800c61c <vPortExitCritical+0x50>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10b      	bne.n	800c5f2 <vPortExitCritical+0x26>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	607b      	str	r3, [r7, #4]
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	e7fd      	b.n	800c5ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c61c <vPortExitCritical+0x50>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	4a08      	ldr	r2, [pc, #32]	@ (800c61c <vPortExitCritical+0x50>)
 800c5fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5fc:	4b07      	ldr	r3, [pc, #28]	@ (800c61c <vPortExitCritical+0x50>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d105      	bne.n	800c610 <vPortExitCritical+0x44>
 800c604:	2300      	movs	r3, #0
 800c606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f383 8811 	msr	BASEPRI, r3
}
 800c60e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	2000011c 	.word	0x2000011c

0800c620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c620:	f3ef 8009 	mrs	r0, PSP
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	4b15      	ldr	r3, [pc, #84]	@ (800c680 <pxCurrentTCBConst>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	f01e 0f10 	tst.w	lr, #16
 800c630:	bf08      	it	eq
 800c632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63a:	6010      	str	r0, [r2, #0]
 800c63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c644:	f380 8811 	msr	BASEPRI, r0
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f7fe ff9e 	bl	800b590 <vTaskSwitchContext>
 800c654:	f04f 0000 	mov.w	r0, #0
 800c658:	f380 8811 	msr	BASEPRI, r0
 800c65c:	bc09      	pop	{r0, r3}
 800c65e:	6819      	ldr	r1, [r3, #0]
 800c660:	6808      	ldr	r0, [r1, #0]
 800c662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c666:	f01e 0f10 	tst.w	lr, #16
 800c66a:	bf08      	it	eq
 800c66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c670:	f380 8809 	msr	PSP, r0
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w

0800c680 <pxCurrentTCBConst>:
 800c680:	20002620 	.word	0x20002620
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop

0800c688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	607b      	str	r3, [r7, #4]
}
 800c6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6a2:	f7fe febb 	bl	800b41c <xTaskIncrementTick>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6ac:	4b06      	ldr	r3, [pc, #24]	@ (800c6c8 <xPortSysTickHandler+0x40>)
 800c6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f383 8811 	msr	BASEPRI, r3
}
 800c6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800c700 <vPortSetupTimerInterrupt+0x34>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c704 <vPortSetupTimerInterrupt+0x38>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c708 <vPortSetupTimerInterrupt+0x3c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c70c <vPortSetupTimerInterrupt+0x40>)
 800c6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e6:	099b      	lsrs	r3, r3, #6
 800c6e8:	4a09      	ldr	r2, [pc, #36]	@ (800c710 <vPortSetupTimerInterrupt+0x44>)
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ee:	4b04      	ldr	r3, [pc, #16]	@ (800c700 <vPortSetupTimerInterrupt+0x34>)
 800c6f0:	2207      	movs	r2, #7
 800c6f2:	601a      	str	r2, [r3, #0]
}
 800c6f4:	bf00      	nop
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	e000e010 	.word	0xe000e010
 800c704:	e000e018 	.word	0xe000e018
 800c708:	20000000 	.word	0x20000000
 800c70c:	10624dd3 	.word	0x10624dd3
 800c710:	e000e014 	.word	0xe000e014

0800c714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c724 <vPortEnableVFP+0x10>
 800c718:	6801      	ldr	r1, [r0, #0]
 800c71a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c71e:	6001      	str	r1, [r0, #0]
 800c720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c722:	bf00      	nop
 800c724:	e000ed88 	.word	0xe000ed88

0800c728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c72e:	f3ef 8305 	mrs	r3, IPSR
 800c732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b0f      	cmp	r3, #15
 800c738:	d915      	bls.n	800c766 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c73a:	4a18      	ldr	r2, [pc, #96]	@ (800c79c <vPortValidateInterruptPriority+0x74>)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	4413      	add	r3, r2
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c744:	4b16      	ldr	r3, [pc, #88]	@ (800c7a0 <vPortValidateInterruptPriority+0x78>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	7afa      	ldrb	r2, [r7, #11]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d20b      	bcs.n	800c766 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	607b      	str	r3, [r7, #4]
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	e7fd      	b.n	800c762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c766:	4b0f      	ldr	r3, [pc, #60]	@ (800c7a4 <vPortValidateInterruptPriority+0x7c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c76e:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a8 <vPortValidateInterruptPriority+0x80>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	429a      	cmp	r2, r3
 800c774:	d90b      	bls.n	800c78e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	603b      	str	r3, [r7, #0]
}
 800c788:	bf00      	nop
 800c78a:	bf00      	nop
 800c78c:	e7fd      	b.n	800c78a <vPortValidateInterruptPriority+0x62>
	}
 800c78e:	bf00      	nop
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	e000e3f0 	.word	0xe000e3f0
 800c7a0:	20002c4c 	.word	0x20002c4c
 800c7a4:	e000ed0c 	.word	0xe000ed0c
 800c7a8:	20002c50 	.word	0x20002c50

0800c7ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08a      	sub	sp, #40	@ 0x28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7b8:	f7fe fd74 	bl	800b2a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7bc:	4b5c      	ldr	r3, [pc, #368]	@ (800c930 <pvPortMalloc+0x184>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d101      	bne.n	800c7c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7c4:	f000 f924 	bl	800ca10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7c8:	4b5a      	ldr	r3, [pc, #360]	@ (800c934 <pvPortMalloc+0x188>)
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f040 8095 	bne.w	800c900 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d01e      	beq.n	800c81a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7dc:	2208      	movs	r2, #8
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d015      	beq.n	800c81a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f023 0307 	bic.w	r3, r3, #7
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f003 0307 	and.w	r3, r3, #7
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00b      	beq.n	800c81a <pvPortMalloc+0x6e>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	617b      	str	r3, [r7, #20]
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	e7fd      	b.n	800c816 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d06f      	beq.n	800c900 <pvPortMalloc+0x154>
 800c820:	4b45      	ldr	r3, [pc, #276]	@ (800c938 <pvPortMalloc+0x18c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d86a      	bhi.n	800c900 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c82a:	4b44      	ldr	r3, [pc, #272]	@ (800c93c <pvPortMalloc+0x190>)
 800c82c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c82e:	4b43      	ldr	r3, [pc, #268]	@ (800c93c <pvPortMalloc+0x190>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c834:	e004      	b.n	800c840 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	429a      	cmp	r2, r3
 800c848:	d903      	bls.n	800c852 <pvPortMalloc+0xa6>
 800c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f1      	bne.n	800c836 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c852:	4b37      	ldr	r3, [pc, #220]	@ (800c930 <pvPortMalloc+0x184>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c858:	429a      	cmp	r2, r3
 800c85a:	d051      	beq.n	800c900 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c85c:	6a3b      	ldr	r3, [r7, #32]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2208      	movs	r2, #8
 800c862:	4413      	add	r3, r2
 800c864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	1ad2      	subs	r2, r2, r3
 800c876:	2308      	movs	r3, #8
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d920      	bls.n	800c8c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c87e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4413      	add	r3, r2
 800c884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	f003 0307 	and.w	r3, r3, #7
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <pvPortMalloc+0xfc>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	613b      	str	r3, [r7, #16]
}
 800c8a2:	bf00      	nop
 800c8a4:	bf00      	nop
 800c8a6:	e7fd      	b.n	800c8a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8ba:	69b8      	ldr	r0, [r7, #24]
 800c8bc:	f000 f90a 	bl	800cad4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c940 <pvPortMalloc+0x194>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d203      	bcs.n	800c8e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8da:	4b17      	ldr	r3, [pc, #92]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a18      	ldr	r2, [pc, #96]	@ (800c940 <pvPortMalloc+0x194>)
 800c8e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	4b13      	ldr	r3, [pc, #76]	@ (800c934 <pvPortMalloc+0x188>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8f6:	4b13      	ldr	r3, [pc, #76]	@ (800c944 <pvPortMalloc+0x198>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	4a11      	ldr	r2, [pc, #68]	@ (800c944 <pvPortMalloc+0x198>)
 800c8fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c900:	f7fe fcde 	bl	800b2c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00b      	beq.n	800c926 <pvPortMalloc+0x17a>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	60fb      	str	r3, [r7, #12]
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	e7fd      	b.n	800c922 <pvPortMalloc+0x176>
	return pvReturn;
 800c926:	69fb      	ldr	r3, [r7, #28]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3728      	adds	r7, #40	@ 0x28
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20005b3c 	.word	0x20005b3c
 800c934:	20005b50 	.word	0x20005b50
 800c938:	20005b40 	.word	0x20005b40
 800c93c:	20005b34 	.word	0x20005b34
 800c940:	20005b44 	.word	0x20005b44
 800c944:	20005b48 	.word	0x20005b48

0800c948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d04f      	beq.n	800c9fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c95a:	2308      	movs	r3, #8
 800c95c:	425b      	negs	r3, r3
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	4413      	add	r3, r2
 800c962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	4b25      	ldr	r3, [pc, #148]	@ (800ca04 <vPortFree+0xbc>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4013      	ands	r3, r2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10b      	bne.n	800c98e <vPortFree+0x46>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	e7fd      	b.n	800c98a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00b      	beq.n	800c9ae <vPortFree+0x66>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	60bb      	str	r3, [r7, #8]
}
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	e7fd      	b.n	800c9aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ca04 <vPortFree+0xbc>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01e      	beq.n	800c9fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d11a      	bne.n	800c9fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800ca04 <vPortFree+0xbc>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	43db      	mvns	r3, r3
 800c9ce:	401a      	ands	r2, r3
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9d4:	f7fe fc66 	bl	800b2a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ca08 <vPortFree+0xc0>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	4a09      	ldr	r2, [pc, #36]	@ (800ca08 <vPortFree+0xc0>)
 800c9e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9e6:	6938      	ldr	r0, [r7, #16]
 800c9e8:	f000 f874 	bl	800cad4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <vPortFree+0xc4>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	4a06      	ldr	r2, [pc, #24]	@ (800ca0c <vPortFree+0xc4>)
 800c9f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9f6:	f7fe fc63 	bl	800b2c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9fa:	bf00      	nop
 800c9fc:	3718      	adds	r7, #24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	20005b50 	.word	0x20005b50
 800ca08:	20005b40 	.word	0x20005b40
 800ca0c:	20005b4c 	.word	0x20005b4c

0800ca10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca16:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800ca1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca1c:	4b27      	ldr	r3, [pc, #156]	@ (800cabc <prvHeapInit+0xac>)
 800ca1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f003 0307 	and.w	r3, r3, #7
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00c      	beq.n	800ca44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3307      	adds	r3, #7
 800ca2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 0307 	bic.w	r3, r3, #7
 800ca36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cabc <prvHeapInit+0xac>)
 800ca40:	4413      	add	r3, r2
 800ca42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca48:	4a1d      	ldr	r2, [pc, #116]	@ (800cac0 <prvHeapInit+0xb0>)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca4e:	4b1c      	ldr	r3, [pc, #112]	@ (800cac0 <prvHeapInit+0xb0>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	4413      	add	r3, r2
 800ca5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca5c:	2208      	movs	r2, #8
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f023 0307 	bic.w	r3, r3, #7
 800ca6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4a15      	ldr	r2, [pc, #84]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca72:	4b14      	ldr	r3, [pc, #80]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2200      	movs	r2, #0
 800ca78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca7a:	4b12      	ldr	r3, [pc, #72]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca90:	4b0c      	ldr	r3, [pc, #48]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	4a0a      	ldr	r2, [pc, #40]	@ (800cac8 <prvHeapInit+0xb8>)
 800ca9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	4a09      	ldr	r2, [pc, #36]	@ (800cacc <prvHeapInit+0xbc>)
 800caa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caa8:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <prvHeapInit+0xc0>)
 800caaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800caae:	601a      	str	r2, [r3, #0]
}
 800cab0:	bf00      	nop
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	20002c54 	.word	0x20002c54
 800cac0:	20005b34 	.word	0x20005b34
 800cac4:	20005b3c 	.word	0x20005b3c
 800cac8:	20005b44 	.word	0x20005b44
 800cacc:	20005b40 	.word	0x20005b40
 800cad0:	20005b50 	.word	0x20005b50

0800cad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cadc:	4b28      	ldr	r3, [pc, #160]	@ (800cb80 <prvInsertBlockIntoFreeList+0xac>)
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e002      	b.n	800cae8 <prvInsertBlockIntoFreeList+0x14>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d8f7      	bhi.n	800cae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	4413      	add	r3, r2
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d108      	bne.n	800cb16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	441a      	add	r2, r3
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	441a      	add	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d118      	bne.n	800cb5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	4b15      	ldr	r3, [pc, #84]	@ (800cb84 <prvInsertBlockIntoFreeList+0xb0>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d00d      	beq.n	800cb52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	441a      	add	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	e008      	b.n	800cb64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb52:	4b0c      	ldr	r3, [pc, #48]	@ (800cb84 <prvInsertBlockIntoFreeList+0xb0>)
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	e003      	b.n	800cb64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d002      	beq.n	800cb72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb72:	bf00      	nop
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	20005b34 	.word	0x20005b34
 800cb84:	20005b3c 	.word	0x20005b3c

0800cb88 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	4912      	ldr	r1, [pc, #72]	@ (800cbd8 <MX_USB_Device_Init+0x50>)
 800cb90:	4812      	ldr	r0, [pc, #72]	@ (800cbdc <MX_USB_Device_Init+0x54>)
 800cb92:	f7fc f8e3 	bl	8008d5c <USBD_Init>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cb9c:	f7f4 fa7a 	bl	8001094 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cba0:	490f      	ldr	r1, [pc, #60]	@ (800cbe0 <MX_USB_Device_Init+0x58>)
 800cba2:	480e      	ldr	r0, [pc, #56]	@ (800cbdc <MX_USB_Device_Init+0x54>)
 800cba4:	f7fc f90a 	bl	8008dbc <USBD_RegisterClass>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cbae:	f7f4 fa71 	bl	8001094 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cbb2:	490c      	ldr	r1, [pc, #48]	@ (800cbe4 <MX_USB_Device_Init+0x5c>)
 800cbb4:	4809      	ldr	r0, [pc, #36]	@ (800cbdc <MX_USB_Device_Init+0x54>)
 800cbb6:	f7fc f82b 	bl	8008c10 <USBD_CDC_RegisterInterface>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cbc0:	f7f4 fa68 	bl	8001094 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cbc4:	4805      	ldr	r0, [pc, #20]	@ (800cbdc <MX_USB_Device_Init+0x54>)
 800cbc6:	f7fc f920 	bl	8008e0a <USBD_Start>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cbd0:	f7f4 fa60 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cbd4:	bf00      	nop
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20000134 	.word	0x20000134
 800cbdc:	20005b54 	.word	0x20005b54
 800cbe0:	20000018 	.word	0x20000018
 800cbe4:	20000120 	.word	0x20000120

0800cbe8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbec:	2200      	movs	r2, #0
 800cbee:	4905      	ldr	r1, [pc, #20]	@ (800cc04 <CDC_Init_FS+0x1c>)
 800cbf0:	4805      	ldr	r0, [pc, #20]	@ (800cc08 <CDC_Init_FS+0x20>)
 800cbf2:	f7fc f822 	bl	8008c3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbf6:	4905      	ldr	r1, [pc, #20]	@ (800cc0c <CDC_Init_FS+0x24>)
 800cbf8:	4803      	ldr	r0, [pc, #12]	@ (800cc08 <CDC_Init_FS+0x20>)
 800cbfa:	f7fc f83c 	bl	8008c76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	20006624 	.word	0x20006624
 800cc08:	20005b54 	.word	0x20005b54
 800cc0c:	20005e24 	.word	0x20005e24

0800cc10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc10:	b480      	push	{r7}
 800cc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	6039      	str	r1, [r7, #0]
 800cc2a:	71fb      	strb	r3, [r7, #7]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	2b23      	cmp	r3, #35	@ 0x23
 800cc34:	d84a      	bhi.n	800cccc <CDC_Control_FS+0xac>
 800cc36:	a201      	add	r2, pc, #4	@ (adr r2, 800cc3c <CDC_Control_FS+0x1c>)
 800cc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3c:	0800cccd 	.word	0x0800cccd
 800cc40:	0800cccd 	.word	0x0800cccd
 800cc44:	0800cccd 	.word	0x0800cccd
 800cc48:	0800cccd 	.word	0x0800cccd
 800cc4c:	0800cccd 	.word	0x0800cccd
 800cc50:	0800cccd 	.word	0x0800cccd
 800cc54:	0800cccd 	.word	0x0800cccd
 800cc58:	0800cccd 	.word	0x0800cccd
 800cc5c:	0800cccd 	.word	0x0800cccd
 800cc60:	0800cccd 	.word	0x0800cccd
 800cc64:	0800cccd 	.word	0x0800cccd
 800cc68:	0800cccd 	.word	0x0800cccd
 800cc6c:	0800cccd 	.word	0x0800cccd
 800cc70:	0800cccd 	.word	0x0800cccd
 800cc74:	0800cccd 	.word	0x0800cccd
 800cc78:	0800cccd 	.word	0x0800cccd
 800cc7c:	0800cccd 	.word	0x0800cccd
 800cc80:	0800cccd 	.word	0x0800cccd
 800cc84:	0800cccd 	.word	0x0800cccd
 800cc88:	0800cccd 	.word	0x0800cccd
 800cc8c:	0800cccd 	.word	0x0800cccd
 800cc90:	0800cccd 	.word	0x0800cccd
 800cc94:	0800cccd 	.word	0x0800cccd
 800cc98:	0800cccd 	.word	0x0800cccd
 800cc9c:	0800cccd 	.word	0x0800cccd
 800cca0:	0800cccd 	.word	0x0800cccd
 800cca4:	0800cccd 	.word	0x0800cccd
 800cca8:	0800cccd 	.word	0x0800cccd
 800ccac:	0800cccd 	.word	0x0800cccd
 800ccb0:	0800cccd 	.word	0x0800cccd
 800ccb4:	0800cccd 	.word	0x0800cccd
 800ccb8:	0800cccd 	.word	0x0800cccd
 800ccbc:	0800cccd 	.word	0x0800cccd
 800ccc0:	0800cccd 	.word	0x0800cccd
 800ccc4:	0800cccd 	.word	0x0800cccd
 800ccc8:	0800cccd 	.word	0x0800cccd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cccc:	bf00      	nop
  }

  return (USBD_OK);
 800ccce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	4805      	ldr	r0, [pc, #20]	@ (800cd00 <CDC_Receive_FS+0x24>)
 800ccea:	f7fb ffc4 	bl	8008c76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccee:	4804      	ldr	r0, [pc, #16]	@ (800cd00 <CDC_Receive_FS+0x24>)
 800ccf0:	f7fc f80a 	bl	8008d08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	20005b54 	.word	0x20005b54

0800cd04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd14:	4b0d      	ldr	r3, [pc, #52]	@ (800cd4c <CDC_Transmit_FS+0x48>)
 800cd16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e00b      	b.n	800cd42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd2a:	887b      	ldrh	r3, [r7, #2]
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	4806      	ldr	r0, [pc, #24]	@ (800cd4c <CDC_Transmit_FS+0x48>)
 800cd32:	f7fb ff82 	bl	8008c3a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd36:	4805      	ldr	r0, [pc, #20]	@ (800cd4c <CDC_Transmit_FS+0x48>)
 800cd38:	f7fb ffb6 	bl	8008ca8 <USBD_CDC_TransmitPacket>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20005b54 	.word	0x20005b54

0800cd50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b087      	sub	sp, #28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	371c      	adds	r7, #28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
	...

0800cd74 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	6039      	str	r1, [r7, #0]
 800cd7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	2212      	movs	r2, #18
 800cd84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cd86:	4b03      	ldr	r3, [pc, #12]	@ (800cd94 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr
 800cd94:	20000154 	.word	0x20000154

0800cd98 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	6039      	str	r1, [r7, #0]
 800cda2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2204      	movs	r2, #4
 800cda8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdaa:	4b03      	ldr	r3, [pc, #12]	@ (800cdb8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	20000168 	.word	0x20000168

0800cdbc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	6039      	str	r1, [r7, #0]
 800cdc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d105      	bne.n	800cdda <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	4907      	ldr	r1, [pc, #28]	@ (800cdf0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cdd2:	4808      	ldr	r0, [pc, #32]	@ (800cdf4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cdd4:	f7fd f803 	bl	8009dde <USBD_GetString>
 800cdd8:	e004      	b.n	800cde4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	4904      	ldr	r1, [pc, #16]	@ (800cdf0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cdde:	4805      	ldr	r0, [pc, #20]	@ (800cdf4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cde0:	f7fc fffd 	bl	8009dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800cde4:	4b02      	ldr	r3, [pc, #8]	@ (800cdf0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	20006e24 	.word	0x20006e24
 800cdf4:	0800e268 	.word	0x0800e268

0800cdf8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	4904      	ldr	r1, [pc, #16]	@ (800ce18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ce08:	4804      	ldr	r0, [pc, #16]	@ (800ce1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ce0a:	f7fc ffe8 	bl	8009dde <USBD_GetString>
  return USBD_StrDesc;
 800ce0e:	4b02      	ldr	r3, [pc, #8]	@ (800ce18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	20006e24 	.word	0x20006e24
 800ce1c:	0800e280 	.word	0x0800e280

0800ce20 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	6039      	str	r1, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	221a      	movs	r2, #26
 800ce30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce32:	f000 f843 	bl	800cebc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ce36:	4b02      	ldr	r3, [pc, #8]	@ (800ce40 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	2000016c 	.word	0x2000016c

0800ce44 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce50:	79fb      	ldrb	r3, [r7, #7]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	4907      	ldr	r1, [pc, #28]	@ (800ce78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ce5a:	4808      	ldr	r0, [pc, #32]	@ (800ce7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ce5c:	f7fc ffbf 	bl	8009dde <USBD_GetString>
 800ce60:	e004      	b.n	800ce6c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4904      	ldr	r1, [pc, #16]	@ (800ce78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ce66:	4805      	ldr	r0, [pc, #20]	@ (800ce7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ce68:	f7fc ffb9 	bl	8009dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce6c:	4b02      	ldr	r3, [pc, #8]	@ (800ce78 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	20006e24 	.word	0x20006e24
 800ce7c:	0800e294 	.word	0x0800e294

0800ce80 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d105      	bne.n	800ce9e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	4907      	ldr	r1, [pc, #28]	@ (800ceb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ce96:	4808      	ldr	r0, [pc, #32]	@ (800ceb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ce98:	f7fc ffa1 	bl	8009dde <USBD_GetString>
 800ce9c:	e004      	b.n	800cea8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	4904      	ldr	r1, [pc, #16]	@ (800ceb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cea2:	4805      	ldr	r0, [pc, #20]	@ (800ceb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cea4:	f7fc ff9b 	bl	8009dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea8:	4b02      	ldr	r3, [pc, #8]	@ (800ceb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20006e24 	.word	0x20006e24
 800ceb8:	0800e2a0 	.word	0x0800e2a0

0800cebc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cec2:	4b0f      	ldr	r3, [pc, #60]	@ (800cf00 <Get_SerialNum+0x44>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cec8:	4b0e      	ldr	r3, [pc, #56]	@ (800cf04 <Get_SerialNum+0x48>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cece:	4b0e      	ldr	r3, [pc, #56]	@ (800cf08 <Get_SerialNum+0x4c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4413      	add	r3, r2
 800ceda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d009      	beq.n	800cef6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cee2:	2208      	movs	r2, #8
 800cee4:	4909      	ldr	r1, [pc, #36]	@ (800cf0c <Get_SerialNum+0x50>)
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f000 f814 	bl	800cf14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ceec:	2204      	movs	r2, #4
 800ceee:	4908      	ldr	r1, [pc, #32]	@ (800cf10 <Get_SerialNum+0x54>)
 800cef0:	68b8      	ldr	r0, [r7, #8]
 800cef2:	f000 f80f 	bl	800cf14 <IntToUnicode>
  }
}
 800cef6:	bf00      	nop
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	1fff7590 	.word	0x1fff7590
 800cf04:	1fff7594 	.word	0x1fff7594
 800cf08:	1fff7598 	.word	0x1fff7598
 800cf0c:	2000016e 	.word	0x2000016e
 800cf10:	2000017e 	.word	0x2000017e

0800cf14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b087      	sub	sp, #28
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf26:	2300      	movs	r3, #0
 800cf28:	75fb      	strb	r3, [r7, #23]
 800cf2a:	e027      	b.n	800cf7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	0f1b      	lsrs	r3, r3, #28
 800cf30:	2b09      	cmp	r3, #9
 800cf32:	d80b      	bhi.n	800cf4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	0f1b      	lsrs	r3, r3, #28
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	4619      	mov	r1, r3
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	440b      	add	r3, r1
 800cf44:	3230      	adds	r2, #48	@ 0x30
 800cf46:	b2d2      	uxtb	r2, r2
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	e00a      	b.n	800cf62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	0f1b      	lsrs	r3, r3, #28
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	4619      	mov	r1, r3
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3237      	adds	r2, #55	@ 0x37
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	011b      	lsls	r3, r3, #4
 800cf66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	005b      	lsls	r3, r3, #1
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	4413      	add	r3, r2
 800cf72:	2200      	movs	r2, #0
 800cf74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	75fb      	strb	r3, [r7, #23]
 800cf7c:	7dfa      	ldrb	r2, [r7, #23]
 800cf7e:	79fb      	ldrb	r3, [r7, #7]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d3d3      	bcc.n	800cf2c <IntToUnicode+0x18>
  }
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop
 800cf88:	371c      	adds	r7, #28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b098      	sub	sp, #96	@ 0x60
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cf9c:	f107 0310 	add.w	r3, r7, #16
 800cfa0:	2250      	movs	r2, #80	@ 0x50
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 fb3b 	bl	800d620 <memset>
  if(pcdHandle->Instance==USB)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a15      	ldr	r2, [pc, #84]	@ (800d004 <HAL_PCD_MspInit+0x70>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d122      	bne.n	800cffa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cfb8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cfbe:	f107 0310 	add.w	r3, r7, #16
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7f8 f92a 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800cfce:	f7f4 f861 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cfd2:	4b0d      	ldr	r3, [pc, #52]	@ (800d008 <HAL_PCD_MspInit+0x74>)
 800cfd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfd6:	4a0c      	ldr	r2, [pc, #48]	@ (800d008 <HAL_PCD_MspInit+0x74>)
 800cfd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cfdc:	6593      	str	r3, [r2, #88]	@ 0x58
 800cfde:	4b0a      	ldr	r3, [pc, #40]	@ (800d008 <HAL_PCD_MspInit+0x74>)
 800cfe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800cfea:	2200      	movs	r2, #0
 800cfec:	2105      	movs	r1, #5
 800cfee:	2014      	movs	r0, #20
 800cff0:	f7f4 fbaa 	bl	8001748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cff4:	2014      	movs	r0, #20
 800cff6:	f7f4 fbc1 	bl	800177c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cffa:	bf00      	nop
 800cffc:	3760      	adds	r7, #96	@ 0x60
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	40005c00 	.word	0x40005c00
 800d008:	40021000 	.word	0x40021000

0800d00c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d020:	4619      	mov	r1, r3
 800d022:	4610      	mov	r0, r2
 800d024:	f7fb ff3c 	bl	8008ea0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d028:	bf00      	nop
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d042:	78fa      	ldrb	r2, [r7, #3]
 800d044:	6879      	ldr	r1, [r7, #4]
 800d046:	4613      	mov	r3, r2
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	440b      	add	r3, r1
 800d050:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	78fb      	ldrb	r3, [r7, #3]
 800d058:	4619      	mov	r1, r3
 800d05a:	f7fb ff76 	bl	8008f4a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b082      	sub	sp, #8
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	460b      	mov	r3, r1
 800d070:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d078:	78fa      	ldrb	r2, [r7, #3]
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	00db      	lsls	r3, r3, #3
 800d084:	440b      	add	r3, r1
 800d086:	3324      	adds	r3, #36	@ 0x24
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	78fb      	ldrb	r3, [r7, #3]
 800d08c:	4619      	mov	r1, r3
 800d08e:	f7fb ffbf 	bl	8009010 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d092:	bf00      	nop
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b082      	sub	sp, #8
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fc f8d3 	bl	8009254 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d0ae:	bf00      	nop
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	795b      	ldrb	r3, [r3, #5]
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d001      	beq.n	800d0ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d0ca:	f7f3 ffe3 	bl	8001094 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d0d4:	7bfa      	ldrb	r2, [r7, #15]
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fc f87d 	bl	80091d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fc f829 	bl	800913c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d0ea:	bf00      	nop
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
	...

0800d0f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d102:	4618      	mov	r0, r3
 800d104:	f7fc f878 	bl	80091f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	7a5b      	ldrb	r3, [r3, #9]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d005      	beq.n	800d11c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d110:	4b04      	ldr	r3, [pc, #16]	@ (800d124 <HAL_PCD_SuspendCallback+0x30>)
 800d112:	691b      	ldr	r3, [r3, #16]
 800d114:	4a03      	ldr	r2, [pc, #12]	@ (800d124 <HAL_PCD_SuspendCallback+0x30>)
 800d116:	f043 0306 	orr.w	r3, r3, #6
 800d11a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d11c:	bf00      	nop
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	e000ed00 	.word	0xe000ed00

0800d128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7a5b      	ldrb	r3, [r3, #9]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d138:	4b08      	ldr	r3, [pc, #32]	@ (800d15c <HAL_PCD_ResumeCallback+0x34>)
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	4a07      	ldr	r2, [pc, #28]	@ (800d15c <HAL_PCD_ResumeCallback+0x34>)
 800d13e:	f023 0306 	bic.w	r3, r3, #6
 800d142:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d144:	f000 f9f8 	bl	800d538 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fc f868 	bl	8009224 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	e000ed00 	.word	0xe000ed00

0800d160 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d168:	4a2b      	ldr	r2, [pc, #172]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a29      	ldr	r2, [pc, #164]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d174:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d178:	4b27      	ldr	r3, [pc, #156]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d17a:	4a28      	ldr	r2, [pc, #160]	@ (800d21c <USBD_LL_Init+0xbc>)
 800d17c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d17e:	4b26      	ldr	r3, [pc, #152]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d180:	2208      	movs	r2, #8
 800d182:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d184:	4b24      	ldr	r3, [pc, #144]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d186:	2202      	movs	r2, #2
 800d188:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d18a:	4b23      	ldr	r3, [pc, #140]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d18c:	2202      	movs	r2, #2
 800d18e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d190:	4b21      	ldr	r3, [pc, #132]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d192:	2200      	movs	r2, #0
 800d194:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d196:	4b20      	ldr	r3, [pc, #128]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d198:	2200      	movs	r2, #0
 800d19a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d19c:	4b1e      	ldr	r3, [pc, #120]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d19e:	2200      	movs	r2, #0
 800d1a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d1a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d1a8:	481b      	ldr	r0, [pc, #108]	@ (800d218 <USBD_LL_Init+0xb8>)
 800d1aa:	f7f5 fd22 	bl	8002bf2 <HAL_PCD_Init>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d1b4:	f7f3 ff6e 	bl	8001094 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d1be:	2318      	movs	r3, #24
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	f7f7 f9a9 	bl	800451a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d1ce:	2358      	movs	r3, #88	@ 0x58
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2180      	movs	r1, #128	@ 0x80
 800d1d4:	f7f7 f9a1 	bl	800451a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d1de:	23c0      	movs	r3, #192	@ 0xc0
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	2181      	movs	r1, #129	@ 0x81
 800d1e4:	f7f7 f999 	bl	800451a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d1ee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	f7f7 f990 	bl	800451a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d204:	2200      	movs	r2, #0
 800d206:	2182      	movs	r1, #130	@ 0x82
 800d208:	f7f7 f987 	bl	800451a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3708      	adds	r7, #8
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20007024 	.word	0x20007024
 800d21c:	40005c00 	.word	0x40005c00

0800d220 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d236:	4618      	mov	r0, r3
 800d238:	f7f5 fda9 	bl	8002d8e <HAL_PCD_Start>
 800d23c:	4603      	mov	r3, r0
 800d23e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	4618      	mov	r0, r3
 800d244:	f000 f97e 	bl	800d544 <USBD_Get_USB_Status>
 800d248:	4603      	mov	r3, r0
 800d24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	4608      	mov	r0, r1
 800d260:	4611      	mov	r1, r2
 800d262:	461a      	mov	r2, r3
 800d264:	4603      	mov	r3, r0
 800d266:	70fb      	strb	r3, [r7, #3]
 800d268:	460b      	mov	r3, r1
 800d26a:	70bb      	strb	r3, [r7, #2]
 800d26c:	4613      	mov	r3, r2
 800d26e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d27e:	78bb      	ldrb	r3, [r7, #2]
 800d280:	883a      	ldrh	r2, [r7, #0]
 800d282:	78f9      	ldrb	r1, [r7, #3]
 800d284:	f7f5 fef0 	bl	8003068 <HAL_PCD_EP_Open>
 800d288:	4603      	mov	r3, r0
 800d28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 f958 	bl	800d544 <USBD_Get_USB_Status>
 800d294:	4603      	mov	r3, r0
 800d296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d298:	7bbb      	ldrb	r3, [r7, #14]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d2bc:	78fa      	ldrb	r2, [r7, #3]
 800d2be:	4611      	mov	r1, r2
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f5 ff30 	bl	8003126 <HAL_PCD_EP_Close>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 f939 	bl	800d544 <USBD_Get_USB_Status>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d2fa:	78fa      	ldrb	r2, [r7, #3]
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7f5 ffd9 	bl	80032b6 <HAL_PCD_EP_SetStall>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 f91a 	bl	800d544 <USBD_Get_USB_Status>
 800d310:	4603      	mov	r3, r0
 800d312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d314:	7bbb      	ldrb	r3, [r7, #14]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
 800d326:	460b      	mov	r3, r1
 800d328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d338:	78fa      	ldrb	r2, [r7, #3]
 800d33a:	4611      	mov	r1, r2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f6 f80c 	bl	800335a <HAL_PCD_EP_ClrStall>
 800d342:	4603      	mov	r3, r0
 800d344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 f8fb 	bl	800d544 <USBD_Get_USB_Status>
 800d34e:	4603      	mov	r3, r0
 800d350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d352:	7bbb      	ldrb	r3, [r7, #14]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d36e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d374:	2b00      	cmp	r3, #0
 800d376:	da0b      	bge.n	800d390 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d378:	78fb      	ldrb	r3, [r7, #3]
 800d37a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d37e:	68f9      	ldr	r1, [r7, #12]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	440b      	add	r3, r1
 800d38a:	3312      	adds	r3, #18
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	e00b      	b.n	800d3a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d396:	68f9      	ldr	r1, [r7, #12]
 800d398:	4613      	mov	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	4413      	add	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	440b      	add	r3, r1
 800d3a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d3a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d3ce:	78fa      	ldrb	r2, [r7, #3]
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f5 fe24 	bl	8003020 <HAL_PCD_SetAddress>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f8b0 	bl	800d544 <USBD_Get_USB_Status>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b086      	sub	sp, #24
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	60f8      	str	r0, [r7, #12]
 800d3fa:	607a      	str	r2, [r7, #4]
 800d3fc:	603b      	str	r3, [r7, #0]
 800d3fe:	460b      	mov	r3, r1
 800d400:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d410:	7af9      	ldrb	r1, [r7, #11]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	f7f5 ff17 	bl	8003248 <HAL_PCD_EP_Transmit>
 800d41a:	4603      	mov	r3, r0
 800d41c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
 800d420:	4618      	mov	r0, r3
 800d422:	f000 f88f 	bl	800d544 <USBD_Get_USB_Status>
 800d426:	4603      	mov	r3, r0
 800d428:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d42a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	607a      	str	r2, [r7, #4]
 800d43e:	603b      	str	r3, [r7, #0]
 800d440:	460b      	mov	r3, r1
 800d442:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d448:	2300      	movs	r3, #0
 800d44a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d452:	7af9      	ldrb	r1, [r7, #11]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	f7f5 fead 	bl	80031b6 <HAL_PCD_EP_Receive>
 800d45c:	4603      	mov	r3, r0
 800d45e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	4618      	mov	r0, r3
 800d464:	f000 f86e 	bl	800d544 <USBD_Get_USB_Status>
 800d468:	4603      	mov	r3, r0
 800d46a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d46c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b082      	sub	sp, #8
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
 800d47e:	460b      	mov	r3, r1
 800d480:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d488:	78fa      	ldrb	r2, [r7, #3]
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7f5 fec3 	bl	8003218 <HAL_PCD_EP_GetRxCount>
 800d492:	4603      	mov	r3, r0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d4a8:	78fb      	ldrb	r3, [r7, #3]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <HAL_PCDEx_LPM_Callback+0x18>
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d013      	beq.n	800d4da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d4b2:	e023      	b.n	800d4fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	7a5b      	ldrb	r3, [r3, #9]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d007      	beq.n	800d4cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d4bc:	f000 f83c 	bl	800d538 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4c0:	4b10      	ldr	r3, [pc, #64]	@ (800d504 <HAL_PCDEx_LPM_Callback+0x68>)
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	4a0f      	ldr	r2, [pc, #60]	@ (800d504 <HAL_PCDEx_LPM_Callback+0x68>)
 800d4c6:	f023 0306 	bic.w	r3, r3, #6
 800d4ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fb fea6 	bl	8009224 <USBD_LL_Resume>
    break;
 800d4d8:	e010      	b.n	800d4fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fb fe89 	bl	80091f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d005      	beq.n	800d4fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4ee:	4b05      	ldr	r3, [pc, #20]	@ (800d504 <HAL_PCDEx_LPM_Callback+0x68>)
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	4a04      	ldr	r2, [pc, #16]	@ (800d504 <HAL_PCDEx_LPM_Callback+0x68>)
 800d4f4:	f043 0306 	orr.w	r3, r3, #6
 800d4f8:	6113      	str	r3, [r2, #16]
    break;
 800d4fa:	bf00      	nop
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	e000ed00 	.word	0xe000ed00

0800d508 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d510:	4b03      	ldr	r3, [pc, #12]	@ (800d520 <USBD_static_malloc+0x18>)
}
 800d512:	4618      	mov	r0, r3
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	20007300 	.word	0x20007300

0800d524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]

}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d53c:	f7f3 fbae 	bl	8000c9c <SystemClock_Config>
}
 800d540:	bf00      	nop
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	2b03      	cmp	r3, #3
 800d556:	d817      	bhi.n	800d588 <USBD_Get_USB_Status+0x44>
 800d558:	a201      	add	r2, pc, #4	@ (adr r2, 800d560 <USBD_Get_USB_Status+0x1c>)
 800d55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55e:	bf00      	nop
 800d560:	0800d571 	.word	0x0800d571
 800d564:	0800d577 	.word	0x0800d577
 800d568:	0800d57d 	.word	0x0800d57d
 800d56c:	0800d583 	.word	0x0800d583
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	73fb      	strb	r3, [r7, #15]
    break;
 800d574:	e00b      	b.n	800d58e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d576:	2303      	movs	r3, #3
 800d578:	73fb      	strb	r3, [r7, #15]
    break;
 800d57a:	e008      	b.n	800d58e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d57c:	2301      	movs	r3, #1
 800d57e:	73fb      	strb	r3, [r7, #15]
    break;
 800d580:	e005      	b.n	800d58e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d582:	2303      	movs	r3, #3
 800d584:	73fb      	strb	r3, [r7, #15]
    break;
 800d586:	e002      	b.n	800d58e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d588:	2303      	movs	r3, #3
 800d58a:	73fb      	strb	r3, [r7, #15]
    break;
 800d58c:	bf00      	nop
  }
  return usb_status;
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <siprintf>:
 800d59c:	b40e      	push	{r1, r2, r3}
 800d59e:	b510      	push	{r4, lr}
 800d5a0:	b09d      	sub	sp, #116	@ 0x74
 800d5a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d5a4:	9002      	str	r0, [sp, #8]
 800d5a6:	9006      	str	r0, [sp, #24]
 800d5a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d5ac:	480a      	ldr	r0, [pc, #40]	@ (800d5d8 <siprintf+0x3c>)
 800d5ae:	9107      	str	r1, [sp, #28]
 800d5b0:	9104      	str	r1, [sp, #16]
 800d5b2:	490a      	ldr	r1, [pc, #40]	@ (800d5dc <siprintf+0x40>)
 800d5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b8:	9105      	str	r1, [sp, #20]
 800d5ba:	2400      	movs	r4, #0
 800d5bc:	a902      	add	r1, sp, #8
 800d5be:	6800      	ldr	r0, [r0, #0]
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d5c4:	f000 fa20 	bl	800da08 <_svfiprintf_r>
 800d5c8:	9b02      	ldr	r3, [sp, #8]
 800d5ca:	701c      	strb	r4, [r3, #0]
 800d5cc:	b01d      	add	sp, #116	@ 0x74
 800d5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5d2:	b003      	add	sp, #12
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	20000188 	.word	0x20000188
 800d5dc:	ffff0208 	.word	0xffff0208

0800d5e0 <_vsiprintf_r>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	b09a      	sub	sp, #104	@ 0x68
 800d5e4:	2400      	movs	r4, #0
 800d5e6:	9100      	str	r1, [sp, #0]
 800d5e8:	9104      	str	r1, [sp, #16]
 800d5ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d5ee:	9105      	str	r1, [sp, #20]
 800d5f0:	9102      	str	r1, [sp, #8]
 800d5f2:	4905      	ldr	r1, [pc, #20]	@ (800d608 <_vsiprintf_r+0x28>)
 800d5f4:	9103      	str	r1, [sp, #12]
 800d5f6:	4669      	mov	r1, sp
 800d5f8:	9419      	str	r4, [sp, #100]	@ 0x64
 800d5fa:	f000 fa05 	bl	800da08 <_svfiprintf_r>
 800d5fe:	9b00      	ldr	r3, [sp, #0]
 800d600:	701c      	strb	r4, [r3, #0]
 800d602:	b01a      	add	sp, #104	@ 0x68
 800d604:	bd10      	pop	{r4, pc}
 800d606:	bf00      	nop
 800d608:	ffff0208 	.word	0xffff0208

0800d60c <vsiprintf>:
 800d60c:	4613      	mov	r3, r2
 800d60e:	460a      	mov	r2, r1
 800d610:	4601      	mov	r1, r0
 800d612:	4802      	ldr	r0, [pc, #8]	@ (800d61c <vsiprintf+0x10>)
 800d614:	6800      	ldr	r0, [r0, #0]
 800d616:	f7ff bfe3 	b.w	800d5e0 <_vsiprintf_r>
 800d61a:	bf00      	nop
 800d61c:	20000188 	.word	0x20000188

0800d620 <memset>:
 800d620:	4402      	add	r2, r0
 800d622:	4603      	mov	r3, r0
 800d624:	4293      	cmp	r3, r2
 800d626:	d100      	bne.n	800d62a <memset+0xa>
 800d628:	4770      	bx	lr
 800d62a:	f803 1b01 	strb.w	r1, [r3], #1
 800d62e:	e7f9      	b.n	800d624 <memset+0x4>

0800d630 <_reclaim_reent>:
 800d630:	4b2d      	ldr	r3, [pc, #180]	@ (800d6e8 <_reclaim_reent+0xb8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4283      	cmp	r3, r0
 800d636:	b570      	push	{r4, r5, r6, lr}
 800d638:	4604      	mov	r4, r0
 800d63a:	d053      	beq.n	800d6e4 <_reclaim_reent+0xb4>
 800d63c:	69c3      	ldr	r3, [r0, #28]
 800d63e:	b31b      	cbz	r3, 800d688 <_reclaim_reent+0x58>
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	b163      	cbz	r3, 800d65e <_reclaim_reent+0x2e>
 800d644:	2500      	movs	r5, #0
 800d646:	69e3      	ldr	r3, [r4, #28]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	5959      	ldr	r1, [r3, r5]
 800d64c:	b9b1      	cbnz	r1, 800d67c <_reclaim_reent+0x4c>
 800d64e:	3504      	adds	r5, #4
 800d650:	2d80      	cmp	r5, #128	@ 0x80
 800d652:	d1f8      	bne.n	800d646 <_reclaim_reent+0x16>
 800d654:	69e3      	ldr	r3, [r4, #28]
 800d656:	4620      	mov	r0, r4
 800d658:	68d9      	ldr	r1, [r3, #12]
 800d65a:	f000 f881 	bl	800d760 <_free_r>
 800d65e:	69e3      	ldr	r3, [r4, #28]
 800d660:	6819      	ldr	r1, [r3, #0]
 800d662:	b111      	cbz	r1, 800d66a <_reclaim_reent+0x3a>
 800d664:	4620      	mov	r0, r4
 800d666:	f000 f87b 	bl	800d760 <_free_r>
 800d66a:	69e3      	ldr	r3, [r4, #28]
 800d66c:	689d      	ldr	r5, [r3, #8]
 800d66e:	b15d      	cbz	r5, 800d688 <_reclaim_reent+0x58>
 800d670:	4629      	mov	r1, r5
 800d672:	4620      	mov	r0, r4
 800d674:	682d      	ldr	r5, [r5, #0]
 800d676:	f000 f873 	bl	800d760 <_free_r>
 800d67a:	e7f8      	b.n	800d66e <_reclaim_reent+0x3e>
 800d67c:	680e      	ldr	r6, [r1, #0]
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 f86e 	bl	800d760 <_free_r>
 800d684:	4631      	mov	r1, r6
 800d686:	e7e1      	b.n	800d64c <_reclaim_reent+0x1c>
 800d688:	6961      	ldr	r1, [r4, #20]
 800d68a:	b111      	cbz	r1, 800d692 <_reclaim_reent+0x62>
 800d68c:	4620      	mov	r0, r4
 800d68e:	f000 f867 	bl	800d760 <_free_r>
 800d692:	69e1      	ldr	r1, [r4, #28]
 800d694:	b111      	cbz	r1, 800d69c <_reclaim_reent+0x6c>
 800d696:	4620      	mov	r0, r4
 800d698:	f000 f862 	bl	800d760 <_free_r>
 800d69c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d69e:	b111      	cbz	r1, 800d6a6 <_reclaim_reent+0x76>
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 f85d 	bl	800d760 <_free_r>
 800d6a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6a8:	b111      	cbz	r1, 800d6b0 <_reclaim_reent+0x80>
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 f858 	bl	800d760 <_free_r>
 800d6b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d6b2:	b111      	cbz	r1, 800d6ba <_reclaim_reent+0x8a>
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 f853 	bl	800d760 <_free_r>
 800d6ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d6bc:	b111      	cbz	r1, 800d6c4 <_reclaim_reent+0x94>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f000 f84e 	bl	800d760 <_free_r>
 800d6c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d6c6:	b111      	cbz	r1, 800d6ce <_reclaim_reent+0x9e>
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 f849 	bl	800d760 <_free_r>
 800d6ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d6d0:	b111      	cbz	r1, 800d6d8 <_reclaim_reent+0xa8>
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f000 f844 	bl	800d760 <_free_r>
 800d6d8:	6a23      	ldr	r3, [r4, #32]
 800d6da:	b11b      	cbz	r3, 800d6e4 <_reclaim_reent+0xb4>
 800d6dc:	4620      	mov	r0, r4
 800d6de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6e2:	4718      	bx	r3
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20000188 	.word	0x20000188

0800d6ec <__errno>:
 800d6ec:	4b01      	ldr	r3, [pc, #4]	@ (800d6f4 <__errno+0x8>)
 800d6ee:	6818      	ldr	r0, [r3, #0]
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	20000188 	.word	0x20000188

0800d6f8 <__libc_init_array>:
 800d6f8:	b570      	push	{r4, r5, r6, lr}
 800d6fa:	4d0d      	ldr	r5, [pc, #52]	@ (800d730 <__libc_init_array+0x38>)
 800d6fc:	4c0d      	ldr	r4, [pc, #52]	@ (800d734 <__libc_init_array+0x3c>)
 800d6fe:	1b64      	subs	r4, r4, r5
 800d700:	10a4      	asrs	r4, r4, #2
 800d702:	2600      	movs	r6, #0
 800d704:	42a6      	cmp	r6, r4
 800d706:	d109      	bne.n	800d71c <__libc_init_array+0x24>
 800d708:	4d0b      	ldr	r5, [pc, #44]	@ (800d738 <__libc_init_array+0x40>)
 800d70a:	4c0c      	ldr	r4, [pc, #48]	@ (800d73c <__libc_init_array+0x44>)
 800d70c:	f000 fc64 	bl	800dfd8 <_init>
 800d710:	1b64      	subs	r4, r4, r5
 800d712:	10a4      	asrs	r4, r4, #2
 800d714:	2600      	movs	r6, #0
 800d716:	42a6      	cmp	r6, r4
 800d718:	d105      	bne.n	800d726 <__libc_init_array+0x2e>
 800d71a:	bd70      	pop	{r4, r5, r6, pc}
 800d71c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d720:	4798      	blx	r3
 800d722:	3601      	adds	r6, #1
 800d724:	e7ee      	b.n	800d704 <__libc_init_array+0xc>
 800d726:	f855 3b04 	ldr.w	r3, [r5], #4
 800d72a:	4798      	blx	r3
 800d72c:	3601      	adds	r6, #1
 800d72e:	e7f2      	b.n	800d716 <__libc_init_array+0x1e>
 800d730:	0800e398 	.word	0x0800e398
 800d734:	0800e398 	.word	0x0800e398
 800d738:	0800e398 	.word	0x0800e398
 800d73c:	0800e39c 	.word	0x0800e39c

0800d740 <__retarget_lock_acquire_recursive>:
 800d740:	4770      	bx	lr

0800d742 <__retarget_lock_release_recursive>:
 800d742:	4770      	bx	lr

0800d744 <memcpy>:
 800d744:	440a      	add	r2, r1
 800d746:	4291      	cmp	r1, r2
 800d748:	f100 33ff 	add.w	r3, r0, #4294967295
 800d74c:	d100      	bne.n	800d750 <memcpy+0xc>
 800d74e:	4770      	bx	lr
 800d750:	b510      	push	{r4, lr}
 800d752:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d75a:	4291      	cmp	r1, r2
 800d75c:	d1f9      	bne.n	800d752 <memcpy+0xe>
 800d75e:	bd10      	pop	{r4, pc}

0800d760 <_free_r>:
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	4605      	mov	r5, r0
 800d764:	2900      	cmp	r1, #0
 800d766:	d041      	beq.n	800d7ec <_free_r+0x8c>
 800d768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d76c:	1f0c      	subs	r4, r1, #4
 800d76e:	2b00      	cmp	r3, #0
 800d770:	bfb8      	it	lt
 800d772:	18e4      	addlt	r4, r4, r3
 800d774:	f000 f8e0 	bl	800d938 <__malloc_lock>
 800d778:	4a1d      	ldr	r2, [pc, #116]	@ (800d7f0 <_free_r+0x90>)
 800d77a:	6813      	ldr	r3, [r2, #0]
 800d77c:	b933      	cbnz	r3, 800d78c <_free_r+0x2c>
 800d77e:	6063      	str	r3, [r4, #4]
 800d780:	6014      	str	r4, [r2, #0]
 800d782:	4628      	mov	r0, r5
 800d784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d788:	f000 b8dc 	b.w	800d944 <__malloc_unlock>
 800d78c:	42a3      	cmp	r3, r4
 800d78e:	d908      	bls.n	800d7a2 <_free_r+0x42>
 800d790:	6820      	ldr	r0, [r4, #0]
 800d792:	1821      	adds	r1, r4, r0
 800d794:	428b      	cmp	r3, r1
 800d796:	bf01      	itttt	eq
 800d798:	6819      	ldreq	r1, [r3, #0]
 800d79a:	685b      	ldreq	r3, [r3, #4]
 800d79c:	1809      	addeq	r1, r1, r0
 800d79e:	6021      	streq	r1, [r4, #0]
 800d7a0:	e7ed      	b.n	800d77e <_free_r+0x1e>
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	b10b      	cbz	r3, 800d7ac <_free_r+0x4c>
 800d7a8:	42a3      	cmp	r3, r4
 800d7aa:	d9fa      	bls.n	800d7a2 <_free_r+0x42>
 800d7ac:	6811      	ldr	r1, [r2, #0]
 800d7ae:	1850      	adds	r0, r2, r1
 800d7b0:	42a0      	cmp	r0, r4
 800d7b2:	d10b      	bne.n	800d7cc <_free_r+0x6c>
 800d7b4:	6820      	ldr	r0, [r4, #0]
 800d7b6:	4401      	add	r1, r0
 800d7b8:	1850      	adds	r0, r2, r1
 800d7ba:	4283      	cmp	r3, r0
 800d7bc:	6011      	str	r1, [r2, #0]
 800d7be:	d1e0      	bne.n	800d782 <_free_r+0x22>
 800d7c0:	6818      	ldr	r0, [r3, #0]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	6053      	str	r3, [r2, #4]
 800d7c6:	4408      	add	r0, r1
 800d7c8:	6010      	str	r0, [r2, #0]
 800d7ca:	e7da      	b.n	800d782 <_free_r+0x22>
 800d7cc:	d902      	bls.n	800d7d4 <_free_r+0x74>
 800d7ce:	230c      	movs	r3, #12
 800d7d0:	602b      	str	r3, [r5, #0]
 800d7d2:	e7d6      	b.n	800d782 <_free_r+0x22>
 800d7d4:	6820      	ldr	r0, [r4, #0]
 800d7d6:	1821      	adds	r1, r4, r0
 800d7d8:	428b      	cmp	r3, r1
 800d7da:	bf04      	itt	eq
 800d7dc:	6819      	ldreq	r1, [r3, #0]
 800d7de:	685b      	ldreq	r3, [r3, #4]
 800d7e0:	6063      	str	r3, [r4, #4]
 800d7e2:	bf04      	itt	eq
 800d7e4:	1809      	addeq	r1, r1, r0
 800d7e6:	6021      	streq	r1, [r4, #0]
 800d7e8:	6054      	str	r4, [r2, #4]
 800d7ea:	e7ca      	b.n	800d782 <_free_r+0x22>
 800d7ec:	bd38      	pop	{r3, r4, r5, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20007664 	.word	0x20007664

0800d7f4 <sbrk_aligned>:
 800d7f4:	b570      	push	{r4, r5, r6, lr}
 800d7f6:	4e0f      	ldr	r6, [pc, #60]	@ (800d834 <sbrk_aligned+0x40>)
 800d7f8:	460c      	mov	r4, r1
 800d7fa:	6831      	ldr	r1, [r6, #0]
 800d7fc:	4605      	mov	r5, r0
 800d7fe:	b911      	cbnz	r1, 800d806 <sbrk_aligned+0x12>
 800d800:	f000 fba4 	bl	800df4c <_sbrk_r>
 800d804:	6030      	str	r0, [r6, #0]
 800d806:	4621      	mov	r1, r4
 800d808:	4628      	mov	r0, r5
 800d80a:	f000 fb9f 	bl	800df4c <_sbrk_r>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	d103      	bne.n	800d81a <sbrk_aligned+0x26>
 800d812:	f04f 34ff 	mov.w	r4, #4294967295
 800d816:	4620      	mov	r0, r4
 800d818:	bd70      	pop	{r4, r5, r6, pc}
 800d81a:	1cc4      	adds	r4, r0, #3
 800d81c:	f024 0403 	bic.w	r4, r4, #3
 800d820:	42a0      	cmp	r0, r4
 800d822:	d0f8      	beq.n	800d816 <sbrk_aligned+0x22>
 800d824:	1a21      	subs	r1, r4, r0
 800d826:	4628      	mov	r0, r5
 800d828:	f000 fb90 	bl	800df4c <_sbrk_r>
 800d82c:	3001      	adds	r0, #1
 800d82e:	d1f2      	bne.n	800d816 <sbrk_aligned+0x22>
 800d830:	e7ef      	b.n	800d812 <sbrk_aligned+0x1e>
 800d832:	bf00      	nop
 800d834:	20007660 	.word	0x20007660

0800d838 <_malloc_r>:
 800d838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d83c:	1ccd      	adds	r5, r1, #3
 800d83e:	f025 0503 	bic.w	r5, r5, #3
 800d842:	3508      	adds	r5, #8
 800d844:	2d0c      	cmp	r5, #12
 800d846:	bf38      	it	cc
 800d848:	250c      	movcc	r5, #12
 800d84a:	2d00      	cmp	r5, #0
 800d84c:	4606      	mov	r6, r0
 800d84e:	db01      	blt.n	800d854 <_malloc_r+0x1c>
 800d850:	42a9      	cmp	r1, r5
 800d852:	d904      	bls.n	800d85e <_malloc_r+0x26>
 800d854:	230c      	movs	r3, #12
 800d856:	6033      	str	r3, [r6, #0]
 800d858:	2000      	movs	r0, #0
 800d85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d85e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d934 <_malloc_r+0xfc>
 800d862:	f000 f869 	bl	800d938 <__malloc_lock>
 800d866:	f8d8 3000 	ldr.w	r3, [r8]
 800d86a:	461c      	mov	r4, r3
 800d86c:	bb44      	cbnz	r4, 800d8c0 <_malloc_r+0x88>
 800d86e:	4629      	mov	r1, r5
 800d870:	4630      	mov	r0, r6
 800d872:	f7ff ffbf 	bl	800d7f4 <sbrk_aligned>
 800d876:	1c43      	adds	r3, r0, #1
 800d878:	4604      	mov	r4, r0
 800d87a:	d158      	bne.n	800d92e <_malloc_r+0xf6>
 800d87c:	f8d8 4000 	ldr.w	r4, [r8]
 800d880:	4627      	mov	r7, r4
 800d882:	2f00      	cmp	r7, #0
 800d884:	d143      	bne.n	800d90e <_malloc_r+0xd6>
 800d886:	2c00      	cmp	r4, #0
 800d888:	d04b      	beq.n	800d922 <_malloc_r+0xea>
 800d88a:	6823      	ldr	r3, [r4, #0]
 800d88c:	4639      	mov	r1, r7
 800d88e:	4630      	mov	r0, r6
 800d890:	eb04 0903 	add.w	r9, r4, r3
 800d894:	f000 fb5a 	bl	800df4c <_sbrk_r>
 800d898:	4581      	cmp	r9, r0
 800d89a:	d142      	bne.n	800d922 <_malloc_r+0xea>
 800d89c:	6821      	ldr	r1, [r4, #0]
 800d89e:	1a6d      	subs	r5, r5, r1
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7ff ffa6 	bl	800d7f4 <sbrk_aligned>
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d03a      	beq.n	800d922 <_malloc_r+0xea>
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	442b      	add	r3, r5
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	bb62      	cbnz	r2, 800d914 <_malloc_r+0xdc>
 800d8ba:	f8c8 7000 	str.w	r7, [r8]
 800d8be:	e00f      	b.n	800d8e0 <_malloc_r+0xa8>
 800d8c0:	6822      	ldr	r2, [r4, #0]
 800d8c2:	1b52      	subs	r2, r2, r5
 800d8c4:	d420      	bmi.n	800d908 <_malloc_r+0xd0>
 800d8c6:	2a0b      	cmp	r2, #11
 800d8c8:	d917      	bls.n	800d8fa <_malloc_r+0xc2>
 800d8ca:	1961      	adds	r1, r4, r5
 800d8cc:	42a3      	cmp	r3, r4
 800d8ce:	6025      	str	r5, [r4, #0]
 800d8d0:	bf18      	it	ne
 800d8d2:	6059      	strne	r1, [r3, #4]
 800d8d4:	6863      	ldr	r3, [r4, #4]
 800d8d6:	bf08      	it	eq
 800d8d8:	f8c8 1000 	streq.w	r1, [r8]
 800d8dc:	5162      	str	r2, [r4, r5]
 800d8de:	604b      	str	r3, [r1, #4]
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f000 f82f 	bl	800d944 <__malloc_unlock>
 800d8e6:	f104 000b 	add.w	r0, r4, #11
 800d8ea:	1d23      	adds	r3, r4, #4
 800d8ec:	f020 0007 	bic.w	r0, r0, #7
 800d8f0:	1ac2      	subs	r2, r0, r3
 800d8f2:	bf1c      	itt	ne
 800d8f4:	1a1b      	subne	r3, r3, r0
 800d8f6:	50a3      	strne	r3, [r4, r2]
 800d8f8:	e7af      	b.n	800d85a <_malloc_r+0x22>
 800d8fa:	6862      	ldr	r2, [r4, #4]
 800d8fc:	42a3      	cmp	r3, r4
 800d8fe:	bf0c      	ite	eq
 800d900:	f8c8 2000 	streq.w	r2, [r8]
 800d904:	605a      	strne	r2, [r3, #4]
 800d906:	e7eb      	b.n	800d8e0 <_malloc_r+0xa8>
 800d908:	4623      	mov	r3, r4
 800d90a:	6864      	ldr	r4, [r4, #4]
 800d90c:	e7ae      	b.n	800d86c <_malloc_r+0x34>
 800d90e:	463c      	mov	r4, r7
 800d910:	687f      	ldr	r7, [r7, #4]
 800d912:	e7b6      	b.n	800d882 <_malloc_r+0x4a>
 800d914:	461a      	mov	r2, r3
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	42a3      	cmp	r3, r4
 800d91a:	d1fb      	bne.n	800d914 <_malloc_r+0xdc>
 800d91c:	2300      	movs	r3, #0
 800d91e:	6053      	str	r3, [r2, #4]
 800d920:	e7de      	b.n	800d8e0 <_malloc_r+0xa8>
 800d922:	230c      	movs	r3, #12
 800d924:	6033      	str	r3, [r6, #0]
 800d926:	4630      	mov	r0, r6
 800d928:	f000 f80c 	bl	800d944 <__malloc_unlock>
 800d92c:	e794      	b.n	800d858 <_malloc_r+0x20>
 800d92e:	6005      	str	r5, [r0, #0]
 800d930:	e7d6      	b.n	800d8e0 <_malloc_r+0xa8>
 800d932:	bf00      	nop
 800d934:	20007664 	.word	0x20007664

0800d938 <__malloc_lock>:
 800d938:	4801      	ldr	r0, [pc, #4]	@ (800d940 <__malloc_lock+0x8>)
 800d93a:	f7ff bf01 	b.w	800d740 <__retarget_lock_acquire_recursive>
 800d93e:	bf00      	nop
 800d940:	2000765c 	.word	0x2000765c

0800d944 <__malloc_unlock>:
 800d944:	4801      	ldr	r0, [pc, #4]	@ (800d94c <__malloc_unlock+0x8>)
 800d946:	f7ff befc 	b.w	800d742 <__retarget_lock_release_recursive>
 800d94a:	bf00      	nop
 800d94c:	2000765c 	.word	0x2000765c

0800d950 <__ssputs_r>:
 800d950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d954:	688e      	ldr	r6, [r1, #8]
 800d956:	461f      	mov	r7, r3
 800d958:	42be      	cmp	r6, r7
 800d95a:	680b      	ldr	r3, [r1, #0]
 800d95c:	4682      	mov	sl, r0
 800d95e:	460c      	mov	r4, r1
 800d960:	4690      	mov	r8, r2
 800d962:	d82d      	bhi.n	800d9c0 <__ssputs_r+0x70>
 800d964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d968:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d96c:	d026      	beq.n	800d9bc <__ssputs_r+0x6c>
 800d96e:	6965      	ldr	r5, [r4, #20]
 800d970:	6909      	ldr	r1, [r1, #16]
 800d972:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d976:	eba3 0901 	sub.w	r9, r3, r1
 800d97a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d97e:	1c7b      	adds	r3, r7, #1
 800d980:	444b      	add	r3, r9
 800d982:	106d      	asrs	r5, r5, #1
 800d984:	429d      	cmp	r5, r3
 800d986:	bf38      	it	cc
 800d988:	461d      	movcc	r5, r3
 800d98a:	0553      	lsls	r3, r2, #21
 800d98c:	d527      	bpl.n	800d9de <__ssputs_r+0x8e>
 800d98e:	4629      	mov	r1, r5
 800d990:	f7ff ff52 	bl	800d838 <_malloc_r>
 800d994:	4606      	mov	r6, r0
 800d996:	b360      	cbz	r0, 800d9f2 <__ssputs_r+0xa2>
 800d998:	6921      	ldr	r1, [r4, #16]
 800d99a:	464a      	mov	r2, r9
 800d99c:	f7ff fed2 	bl	800d744 <memcpy>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9aa:	81a3      	strh	r3, [r4, #12]
 800d9ac:	6126      	str	r6, [r4, #16]
 800d9ae:	6165      	str	r5, [r4, #20]
 800d9b0:	444e      	add	r6, r9
 800d9b2:	eba5 0509 	sub.w	r5, r5, r9
 800d9b6:	6026      	str	r6, [r4, #0]
 800d9b8:	60a5      	str	r5, [r4, #8]
 800d9ba:	463e      	mov	r6, r7
 800d9bc:	42be      	cmp	r6, r7
 800d9be:	d900      	bls.n	800d9c2 <__ssputs_r+0x72>
 800d9c0:	463e      	mov	r6, r7
 800d9c2:	6820      	ldr	r0, [r4, #0]
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	4641      	mov	r1, r8
 800d9c8:	f000 faa6 	bl	800df18 <memmove>
 800d9cc:	68a3      	ldr	r3, [r4, #8]
 800d9ce:	1b9b      	subs	r3, r3, r6
 800d9d0:	60a3      	str	r3, [r4, #8]
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	4433      	add	r3, r6
 800d9d6:	6023      	str	r3, [r4, #0]
 800d9d8:	2000      	movs	r0, #0
 800d9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9de:	462a      	mov	r2, r5
 800d9e0:	f000 fac4 	bl	800df6c <_realloc_r>
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d1e0      	bne.n	800d9ac <__ssputs_r+0x5c>
 800d9ea:	6921      	ldr	r1, [r4, #16]
 800d9ec:	4650      	mov	r0, sl
 800d9ee:	f7ff feb7 	bl	800d760 <_free_r>
 800d9f2:	230c      	movs	r3, #12
 800d9f4:	f8ca 3000 	str.w	r3, [sl]
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9fe:	81a3      	strh	r3, [r4, #12]
 800da00:	f04f 30ff 	mov.w	r0, #4294967295
 800da04:	e7e9      	b.n	800d9da <__ssputs_r+0x8a>
	...

0800da08 <_svfiprintf_r>:
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	4698      	mov	r8, r3
 800da0e:	898b      	ldrh	r3, [r1, #12]
 800da10:	061b      	lsls	r3, r3, #24
 800da12:	b09d      	sub	sp, #116	@ 0x74
 800da14:	4607      	mov	r7, r0
 800da16:	460d      	mov	r5, r1
 800da18:	4614      	mov	r4, r2
 800da1a:	d510      	bpl.n	800da3e <_svfiprintf_r+0x36>
 800da1c:	690b      	ldr	r3, [r1, #16]
 800da1e:	b973      	cbnz	r3, 800da3e <_svfiprintf_r+0x36>
 800da20:	2140      	movs	r1, #64	@ 0x40
 800da22:	f7ff ff09 	bl	800d838 <_malloc_r>
 800da26:	6028      	str	r0, [r5, #0]
 800da28:	6128      	str	r0, [r5, #16]
 800da2a:	b930      	cbnz	r0, 800da3a <_svfiprintf_r+0x32>
 800da2c:	230c      	movs	r3, #12
 800da2e:	603b      	str	r3, [r7, #0]
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	b01d      	add	sp, #116	@ 0x74
 800da36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3a:	2340      	movs	r3, #64	@ 0x40
 800da3c:	616b      	str	r3, [r5, #20]
 800da3e:	2300      	movs	r3, #0
 800da40:	9309      	str	r3, [sp, #36]	@ 0x24
 800da42:	2320      	movs	r3, #32
 800da44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da48:	f8cd 800c 	str.w	r8, [sp, #12]
 800da4c:	2330      	movs	r3, #48	@ 0x30
 800da4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dbec <_svfiprintf_r+0x1e4>
 800da52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da56:	f04f 0901 	mov.w	r9, #1
 800da5a:	4623      	mov	r3, r4
 800da5c:	469a      	mov	sl, r3
 800da5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da62:	b10a      	cbz	r2, 800da68 <_svfiprintf_r+0x60>
 800da64:	2a25      	cmp	r2, #37	@ 0x25
 800da66:	d1f9      	bne.n	800da5c <_svfiprintf_r+0x54>
 800da68:	ebba 0b04 	subs.w	fp, sl, r4
 800da6c:	d00b      	beq.n	800da86 <_svfiprintf_r+0x7e>
 800da6e:	465b      	mov	r3, fp
 800da70:	4622      	mov	r2, r4
 800da72:	4629      	mov	r1, r5
 800da74:	4638      	mov	r0, r7
 800da76:	f7ff ff6b 	bl	800d950 <__ssputs_r>
 800da7a:	3001      	adds	r0, #1
 800da7c:	f000 80a7 	beq.w	800dbce <_svfiprintf_r+0x1c6>
 800da80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da82:	445a      	add	r2, fp
 800da84:	9209      	str	r2, [sp, #36]	@ 0x24
 800da86:	f89a 3000 	ldrb.w	r3, [sl]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 809f 	beq.w	800dbce <_svfiprintf_r+0x1c6>
 800da90:	2300      	movs	r3, #0
 800da92:	f04f 32ff 	mov.w	r2, #4294967295
 800da96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da9a:	f10a 0a01 	add.w	sl, sl, #1
 800da9e:	9304      	str	r3, [sp, #16]
 800daa0:	9307      	str	r3, [sp, #28]
 800daa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800daa6:	931a      	str	r3, [sp, #104]	@ 0x68
 800daa8:	4654      	mov	r4, sl
 800daaa:	2205      	movs	r2, #5
 800daac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab0:	484e      	ldr	r0, [pc, #312]	@ (800dbec <_svfiprintf_r+0x1e4>)
 800dab2:	f7f2 fbb5 	bl	8000220 <memchr>
 800dab6:	9a04      	ldr	r2, [sp, #16]
 800dab8:	b9d8      	cbnz	r0, 800daf2 <_svfiprintf_r+0xea>
 800daba:	06d0      	lsls	r0, r2, #27
 800dabc:	bf44      	itt	mi
 800dabe:	2320      	movmi	r3, #32
 800dac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dac4:	0711      	lsls	r1, r2, #28
 800dac6:	bf44      	itt	mi
 800dac8:	232b      	movmi	r3, #43	@ 0x2b
 800daca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dace:	f89a 3000 	ldrb.w	r3, [sl]
 800dad2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dad4:	d015      	beq.n	800db02 <_svfiprintf_r+0xfa>
 800dad6:	9a07      	ldr	r2, [sp, #28]
 800dad8:	4654      	mov	r4, sl
 800dada:	2000      	movs	r0, #0
 800dadc:	f04f 0c0a 	mov.w	ip, #10
 800dae0:	4621      	mov	r1, r4
 800dae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dae6:	3b30      	subs	r3, #48	@ 0x30
 800dae8:	2b09      	cmp	r3, #9
 800daea:	d94b      	bls.n	800db84 <_svfiprintf_r+0x17c>
 800daec:	b1b0      	cbz	r0, 800db1c <_svfiprintf_r+0x114>
 800daee:	9207      	str	r2, [sp, #28]
 800daf0:	e014      	b.n	800db1c <_svfiprintf_r+0x114>
 800daf2:	eba0 0308 	sub.w	r3, r0, r8
 800daf6:	fa09 f303 	lsl.w	r3, r9, r3
 800dafa:	4313      	orrs	r3, r2
 800dafc:	9304      	str	r3, [sp, #16]
 800dafe:	46a2      	mov	sl, r4
 800db00:	e7d2      	b.n	800daa8 <_svfiprintf_r+0xa0>
 800db02:	9b03      	ldr	r3, [sp, #12]
 800db04:	1d19      	adds	r1, r3, #4
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	9103      	str	r1, [sp, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	bfbb      	ittet	lt
 800db0e:	425b      	neglt	r3, r3
 800db10:	f042 0202 	orrlt.w	r2, r2, #2
 800db14:	9307      	strge	r3, [sp, #28]
 800db16:	9307      	strlt	r3, [sp, #28]
 800db18:	bfb8      	it	lt
 800db1a:	9204      	strlt	r2, [sp, #16]
 800db1c:	7823      	ldrb	r3, [r4, #0]
 800db1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800db20:	d10a      	bne.n	800db38 <_svfiprintf_r+0x130>
 800db22:	7863      	ldrb	r3, [r4, #1]
 800db24:	2b2a      	cmp	r3, #42	@ 0x2a
 800db26:	d132      	bne.n	800db8e <_svfiprintf_r+0x186>
 800db28:	9b03      	ldr	r3, [sp, #12]
 800db2a:	1d1a      	adds	r2, r3, #4
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	9203      	str	r2, [sp, #12]
 800db30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db34:	3402      	adds	r4, #2
 800db36:	9305      	str	r3, [sp, #20]
 800db38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dbfc <_svfiprintf_r+0x1f4>
 800db3c:	7821      	ldrb	r1, [r4, #0]
 800db3e:	2203      	movs	r2, #3
 800db40:	4650      	mov	r0, sl
 800db42:	f7f2 fb6d 	bl	8000220 <memchr>
 800db46:	b138      	cbz	r0, 800db58 <_svfiprintf_r+0x150>
 800db48:	9b04      	ldr	r3, [sp, #16]
 800db4a:	eba0 000a 	sub.w	r0, r0, sl
 800db4e:	2240      	movs	r2, #64	@ 0x40
 800db50:	4082      	lsls	r2, r0
 800db52:	4313      	orrs	r3, r2
 800db54:	3401      	adds	r4, #1
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5c:	4824      	ldr	r0, [pc, #144]	@ (800dbf0 <_svfiprintf_r+0x1e8>)
 800db5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db62:	2206      	movs	r2, #6
 800db64:	f7f2 fb5c 	bl	8000220 <memchr>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d036      	beq.n	800dbda <_svfiprintf_r+0x1d2>
 800db6c:	4b21      	ldr	r3, [pc, #132]	@ (800dbf4 <_svfiprintf_r+0x1ec>)
 800db6e:	bb1b      	cbnz	r3, 800dbb8 <_svfiprintf_r+0x1b0>
 800db70:	9b03      	ldr	r3, [sp, #12]
 800db72:	3307      	adds	r3, #7
 800db74:	f023 0307 	bic.w	r3, r3, #7
 800db78:	3308      	adds	r3, #8
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db7e:	4433      	add	r3, r6
 800db80:	9309      	str	r3, [sp, #36]	@ 0x24
 800db82:	e76a      	b.n	800da5a <_svfiprintf_r+0x52>
 800db84:	fb0c 3202 	mla	r2, ip, r2, r3
 800db88:	460c      	mov	r4, r1
 800db8a:	2001      	movs	r0, #1
 800db8c:	e7a8      	b.n	800dae0 <_svfiprintf_r+0xd8>
 800db8e:	2300      	movs	r3, #0
 800db90:	3401      	adds	r4, #1
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	4619      	mov	r1, r3
 800db96:	f04f 0c0a 	mov.w	ip, #10
 800db9a:	4620      	mov	r0, r4
 800db9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba0:	3a30      	subs	r2, #48	@ 0x30
 800dba2:	2a09      	cmp	r2, #9
 800dba4:	d903      	bls.n	800dbae <_svfiprintf_r+0x1a6>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0c6      	beq.n	800db38 <_svfiprintf_r+0x130>
 800dbaa:	9105      	str	r1, [sp, #20]
 800dbac:	e7c4      	b.n	800db38 <_svfiprintf_r+0x130>
 800dbae:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e7f0      	b.n	800db9a <_svfiprintf_r+0x192>
 800dbb8:	ab03      	add	r3, sp, #12
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	462a      	mov	r2, r5
 800dbbe:	4b0e      	ldr	r3, [pc, #56]	@ (800dbf8 <_svfiprintf_r+0x1f0>)
 800dbc0:	a904      	add	r1, sp, #16
 800dbc2:	4638      	mov	r0, r7
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	1c42      	adds	r2, r0, #1
 800dbca:	4606      	mov	r6, r0
 800dbcc:	d1d6      	bne.n	800db7c <_svfiprintf_r+0x174>
 800dbce:	89ab      	ldrh	r3, [r5, #12]
 800dbd0:	065b      	lsls	r3, r3, #25
 800dbd2:	f53f af2d 	bmi.w	800da30 <_svfiprintf_r+0x28>
 800dbd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbd8:	e72c      	b.n	800da34 <_svfiprintf_r+0x2c>
 800dbda:	ab03      	add	r3, sp, #12
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	462a      	mov	r2, r5
 800dbe0:	4b05      	ldr	r3, [pc, #20]	@ (800dbf8 <_svfiprintf_r+0x1f0>)
 800dbe2:	a904      	add	r1, sp, #16
 800dbe4:	4638      	mov	r0, r7
 800dbe6:	f000 f879 	bl	800dcdc <_printf_i>
 800dbea:	e7ed      	b.n	800dbc8 <_svfiprintf_r+0x1c0>
 800dbec:	0800e35c 	.word	0x0800e35c
 800dbf0:	0800e366 	.word	0x0800e366
 800dbf4:	00000000 	.word	0x00000000
 800dbf8:	0800d951 	.word	0x0800d951
 800dbfc:	0800e362 	.word	0x0800e362

0800dc00 <_printf_common>:
 800dc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	4616      	mov	r6, r2
 800dc06:	4698      	mov	r8, r3
 800dc08:	688a      	ldr	r2, [r1, #8]
 800dc0a:	690b      	ldr	r3, [r1, #16]
 800dc0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc10:	4293      	cmp	r3, r2
 800dc12:	bfb8      	it	lt
 800dc14:	4613      	movlt	r3, r2
 800dc16:	6033      	str	r3, [r6, #0]
 800dc18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	460c      	mov	r4, r1
 800dc20:	b10a      	cbz	r2, 800dc26 <_printf_common+0x26>
 800dc22:	3301      	adds	r3, #1
 800dc24:	6033      	str	r3, [r6, #0]
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	0699      	lsls	r1, r3, #26
 800dc2a:	bf42      	ittt	mi
 800dc2c:	6833      	ldrmi	r3, [r6, #0]
 800dc2e:	3302      	addmi	r3, #2
 800dc30:	6033      	strmi	r3, [r6, #0]
 800dc32:	6825      	ldr	r5, [r4, #0]
 800dc34:	f015 0506 	ands.w	r5, r5, #6
 800dc38:	d106      	bne.n	800dc48 <_printf_common+0x48>
 800dc3a:	f104 0a19 	add.w	sl, r4, #25
 800dc3e:	68e3      	ldr	r3, [r4, #12]
 800dc40:	6832      	ldr	r2, [r6, #0]
 800dc42:	1a9b      	subs	r3, r3, r2
 800dc44:	42ab      	cmp	r3, r5
 800dc46:	dc26      	bgt.n	800dc96 <_printf_common+0x96>
 800dc48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc4c:	6822      	ldr	r2, [r4, #0]
 800dc4e:	3b00      	subs	r3, #0
 800dc50:	bf18      	it	ne
 800dc52:	2301      	movne	r3, #1
 800dc54:	0692      	lsls	r2, r2, #26
 800dc56:	d42b      	bmi.n	800dcb0 <_printf_common+0xb0>
 800dc58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc5c:	4641      	mov	r1, r8
 800dc5e:	4638      	mov	r0, r7
 800dc60:	47c8      	blx	r9
 800dc62:	3001      	adds	r0, #1
 800dc64:	d01e      	beq.n	800dca4 <_printf_common+0xa4>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	f003 0306 	and.w	r3, r3, #6
 800dc6e:	2b04      	cmp	r3, #4
 800dc70:	bf02      	ittt	eq
 800dc72:	68e5      	ldreq	r5, [r4, #12]
 800dc74:	6833      	ldreq	r3, [r6, #0]
 800dc76:	1aed      	subeq	r5, r5, r3
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	bf0c      	ite	eq
 800dc7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc80:	2500      	movne	r5, #0
 800dc82:	4293      	cmp	r3, r2
 800dc84:	bfc4      	itt	gt
 800dc86:	1a9b      	subgt	r3, r3, r2
 800dc88:	18ed      	addgt	r5, r5, r3
 800dc8a:	2600      	movs	r6, #0
 800dc8c:	341a      	adds	r4, #26
 800dc8e:	42b5      	cmp	r5, r6
 800dc90:	d11a      	bne.n	800dcc8 <_printf_common+0xc8>
 800dc92:	2000      	movs	r0, #0
 800dc94:	e008      	b.n	800dca8 <_printf_common+0xa8>
 800dc96:	2301      	movs	r3, #1
 800dc98:	4652      	mov	r2, sl
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	47c8      	blx	r9
 800dca0:	3001      	adds	r0, #1
 800dca2:	d103      	bne.n	800dcac <_printf_common+0xac>
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295
 800dca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcac:	3501      	adds	r5, #1
 800dcae:	e7c6      	b.n	800dc3e <_printf_common+0x3e>
 800dcb0:	18e1      	adds	r1, r4, r3
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	2030      	movs	r0, #48	@ 0x30
 800dcb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dcba:	4422      	add	r2, r4
 800dcbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dcc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dcc4:	3302      	adds	r3, #2
 800dcc6:	e7c7      	b.n	800dc58 <_printf_common+0x58>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	4622      	mov	r2, r4
 800dccc:	4641      	mov	r1, r8
 800dcce:	4638      	mov	r0, r7
 800dcd0:	47c8      	blx	r9
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	d0e6      	beq.n	800dca4 <_printf_common+0xa4>
 800dcd6:	3601      	adds	r6, #1
 800dcd8:	e7d9      	b.n	800dc8e <_printf_common+0x8e>
	...

0800dcdc <_printf_i>:
 800dcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dce0:	7e0f      	ldrb	r7, [r1, #24]
 800dce2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dce4:	2f78      	cmp	r7, #120	@ 0x78
 800dce6:	4691      	mov	r9, r2
 800dce8:	4680      	mov	r8, r0
 800dcea:	460c      	mov	r4, r1
 800dcec:	469a      	mov	sl, r3
 800dcee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcf2:	d807      	bhi.n	800dd04 <_printf_i+0x28>
 800dcf4:	2f62      	cmp	r7, #98	@ 0x62
 800dcf6:	d80a      	bhi.n	800dd0e <_printf_i+0x32>
 800dcf8:	2f00      	cmp	r7, #0
 800dcfa:	f000 80d1 	beq.w	800dea0 <_printf_i+0x1c4>
 800dcfe:	2f58      	cmp	r7, #88	@ 0x58
 800dd00:	f000 80b8 	beq.w	800de74 <_printf_i+0x198>
 800dd04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd0c:	e03a      	b.n	800dd84 <_printf_i+0xa8>
 800dd0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd12:	2b15      	cmp	r3, #21
 800dd14:	d8f6      	bhi.n	800dd04 <_printf_i+0x28>
 800dd16:	a101      	add	r1, pc, #4	@ (adr r1, 800dd1c <_printf_i+0x40>)
 800dd18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd1c:	0800dd75 	.word	0x0800dd75
 800dd20:	0800dd89 	.word	0x0800dd89
 800dd24:	0800dd05 	.word	0x0800dd05
 800dd28:	0800dd05 	.word	0x0800dd05
 800dd2c:	0800dd05 	.word	0x0800dd05
 800dd30:	0800dd05 	.word	0x0800dd05
 800dd34:	0800dd89 	.word	0x0800dd89
 800dd38:	0800dd05 	.word	0x0800dd05
 800dd3c:	0800dd05 	.word	0x0800dd05
 800dd40:	0800dd05 	.word	0x0800dd05
 800dd44:	0800dd05 	.word	0x0800dd05
 800dd48:	0800de87 	.word	0x0800de87
 800dd4c:	0800ddb3 	.word	0x0800ddb3
 800dd50:	0800de41 	.word	0x0800de41
 800dd54:	0800dd05 	.word	0x0800dd05
 800dd58:	0800dd05 	.word	0x0800dd05
 800dd5c:	0800dea9 	.word	0x0800dea9
 800dd60:	0800dd05 	.word	0x0800dd05
 800dd64:	0800ddb3 	.word	0x0800ddb3
 800dd68:	0800dd05 	.word	0x0800dd05
 800dd6c:	0800dd05 	.word	0x0800dd05
 800dd70:	0800de49 	.word	0x0800de49
 800dd74:	6833      	ldr	r3, [r6, #0]
 800dd76:	1d1a      	adds	r2, r3, #4
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6032      	str	r2, [r6, #0]
 800dd7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd84:	2301      	movs	r3, #1
 800dd86:	e09c      	b.n	800dec2 <_printf_i+0x1e6>
 800dd88:	6833      	ldr	r3, [r6, #0]
 800dd8a:	6820      	ldr	r0, [r4, #0]
 800dd8c:	1d19      	adds	r1, r3, #4
 800dd8e:	6031      	str	r1, [r6, #0]
 800dd90:	0606      	lsls	r6, r0, #24
 800dd92:	d501      	bpl.n	800dd98 <_printf_i+0xbc>
 800dd94:	681d      	ldr	r5, [r3, #0]
 800dd96:	e003      	b.n	800dda0 <_printf_i+0xc4>
 800dd98:	0645      	lsls	r5, r0, #25
 800dd9a:	d5fb      	bpl.n	800dd94 <_printf_i+0xb8>
 800dd9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dda0:	2d00      	cmp	r5, #0
 800dda2:	da03      	bge.n	800ddac <_printf_i+0xd0>
 800dda4:	232d      	movs	r3, #45	@ 0x2d
 800dda6:	426d      	negs	r5, r5
 800dda8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddac:	4858      	ldr	r0, [pc, #352]	@ (800df10 <_printf_i+0x234>)
 800ddae:	230a      	movs	r3, #10
 800ddb0:	e011      	b.n	800ddd6 <_printf_i+0xfa>
 800ddb2:	6821      	ldr	r1, [r4, #0]
 800ddb4:	6833      	ldr	r3, [r6, #0]
 800ddb6:	0608      	lsls	r0, r1, #24
 800ddb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ddbc:	d402      	bmi.n	800ddc4 <_printf_i+0xe8>
 800ddbe:	0649      	lsls	r1, r1, #25
 800ddc0:	bf48      	it	mi
 800ddc2:	b2ad      	uxthmi	r5, r5
 800ddc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddc6:	4852      	ldr	r0, [pc, #328]	@ (800df10 <_printf_i+0x234>)
 800ddc8:	6033      	str	r3, [r6, #0]
 800ddca:	bf14      	ite	ne
 800ddcc:	230a      	movne	r3, #10
 800ddce:	2308      	moveq	r3, #8
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddd6:	6866      	ldr	r6, [r4, #4]
 800ddd8:	60a6      	str	r6, [r4, #8]
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	db05      	blt.n	800ddea <_printf_i+0x10e>
 800ddde:	6821      	ldr	r1, [r4, #0]
 800dde0:	432e      	orrs	r6, r5
 800dde2:	f021 0104 	bic.w	r1, r1, #4
 800dde6:	6021      	str	r1, [r4, #0]
 800dde8:	d04b      	beq.n	800de82 <_printf_i+0x1a6>
 800ddea:	4616      	mov	r6, r2
 800ddec:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddf0:	fb03 5711 	mls	r7, r3, r1, r5
 800ddf4:	5dc7      	ldrb	r7, [r0, r7]
 800ddf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddfa:	462f      	mov	r7, r5
 800ddfc:	42bb      	cmp	r3, r7
 800ddfe:	460d      	mov	r5, r1
 800de00:	d9f4      	bls.n	800ddec <_printf_i+0x110>
 800de02:	2b08      	cmp	r3, #8
 800de04:	d10b      	bne.n	800de1e <_printf_i+0x142>
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	07df      	lsls	r7, r3, #31
 800de0a:	d508      	bpl.n	800de1e <_printf_i+0x142>
 800de0c:	6923      	ldr	r3, [r4, #16]
 800de0e:	6861      	ldr	r1, [r4, #4]
 800de10:	4299      	cmp	r1, r3
 800de12:	bfde      	ittt	le
 800de14:	2330      	movle	r3, #48	@ 0x30
 800de16:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de1e:	1b92      	subs	r2, r2, r6
 800de20:	6122      	str	r2, [r4, #16]
 800de22:	f8cd a000 	str.w	sl, [sp]
 800de26:	464b      	mov	r3, r9
 800de28:	aa03      	add	r2, sp, #12
 800de2a:	4621      	mov	r1, r4
 800de2c:	4640      	mov	r0, r8
 800de2e:	f7ff fee7 	bl	800dc00 <_printf_common>
 800de32:	3001      	adds	r0, #1
 800de34:	d14a      	bne.n	800decc <_printf_i+0x1f0>
 800de36:	f04f 30ff 	mov.w	r0, #4294967295
 800de3a:	b004      	add	sp, #16
 800de3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	f043 0320 	orr.w	r3, r3, #32
 800de46:	6023      	str	r3, [r4, #0]
 800de48:	4832      	ldr	r0, [pc, #200]	@ (800df14 <_printf_i+0x238>)
 800de4a:	2778      	movs	r7, #120	@ 0x78
 800de4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	6831      	ldr	r1, [r6, #0]
 800de54:	061f      	lsls	r7, r3, #24
 800de56:	f851 5b04 	ldr.w	r5, [r1], #4
 800de5a:	d402      	bmi.n	800de62 <_printf_i+0x186>
 800de5c:	065f      	lsls	r7, r3, #25
 800de5e:	bf48      	it	mi
 800de60:	b2ad      	uxthmi	r5, r5
 800de62:	6031      	str	r1, [r6, #0]
 800de64:	07d9      	lsls	r1, r3, #31
 800de66:	bf44      	itt	mi
 800de68:	f043 0320 	orrmi.w	r3, r3, #32
 800de6c:	6023      	strmi	r3, [r4, #0]
 800de6e:	b11d      	cbz	r5, 800de78 <_printf_i+0x19c>
 800de70:	2310      	movs	r3, #16
 800de72:	e7ad      	b.n	800ddd0 <_printf_i+0xf4>
 800de74:	4826      	ldr	r0, [pc, #152]	@ (800df10 <_printf_i+0x234>)
 800de76:	e7e9      	b.n	800de4c <_printf_i+0x170>
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	f023 0320 	bic.w	r3, r3, #32
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	e7f6      	b.n	800de70 <_printf_i+0x194>
 800de82:	4616      	mov	r6, r2
 800de84:	e7bd      	b.n	800de02 <_printf_i+0x126>
 800de86:	6833      	ldr	r3, [r6, #0]
 800de88:	6825      	ldr	r5, [r4, #0]
 800de8a:	6961      	ldr	r1, [r4, #20]
 800de8c:	1d18      	adds	r0, r3, #4
 800de8e:	6030      	str	r0, [r6, #0]
 800de90:	062e      	lsls	r6, r5, #24
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	d501      	bpl.n	800de9a <_printf_i+0x1be>
 800de96:	6019      	str	r1, [r3, #0]
 800de98:	e002      	b.n	800dea0 <_printf_i+0x1c4>
 800de9a:	0668      	lsls	r0, r5, #25
 800de9c:	d5fb      	bpl.n	800de96 <_printf_i+0x1ba>
 800de9e:	8019      	strh	r1, [r3, #0]
 800dea0:	2300      	movs	r3, #0
 800dea2:	6123      	str	r3, [r4, #16]
 800dea4:	4616      	mov	r6, r2
 800dea6:	e7bc      	b.n	800de22 <_printf_i+0x146>
 800dea8:	6833      	ldr	r3, [r6, #0]
 800deaa:	1d1a      	adds	r2, r3, #4
 800deac:	6032      	str	r2, [r6, #0]
 800deae:	681e      	ldr	r6, [r3, #0]
 800deb0:	6862      	ldr	r2, [r4, #4]
 800deb2:	2100      	movs	r1, #0
 800deb4:	4630      	mov	r0, r6
 800deb6:	f7f2 f9b3 	bl	8000220 <memchr>
 800deba:	b108      	cbz	r0, 800dec0 <_printf_i+0x1e4>
 800debc:	1b80      	subs	r0, r0, r6
 800debe:	6060      	str	r0, [r4, #4]
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	6123      	str	r3, [r4, #16]
 800dec4:	2300      	movs	r3, #0
 800dec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800deca:	e7aa      	b.n	800de22 <_printf_i+0x146>
 800decc:	6923      	ldr	r3, [r4, #16]
 800dece:	4632      	mov	r2, r6
 800ded0:	4649      	mov	r1, r9
 800ded2:	4640      	mov	r0, r8
 800ded4:	47d0      	blx	sl
 800ded6:	3001      	adds	r0, #1
 800ded8:	d0ad      	beq.n	800de36 <_printf_i+0x15a>
 800deda:	6823      	ldr	r3, [r4, #0]
 800dedc:	079b      	lsls	r3, r3, #30
 800dede:	d413      	bmi.n	800df08 <_printf_i+0x22c>
 800dee0:	68e0      	ldr	r0, [r4, #12]
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	4298      	cmp	r0, r3
 800dee6:	bfb8      	it	lt
 800dee8:	4618      	movlt	r0, r3
 800deea:	e7a6      	b.n	800de3a <_printf_i+0x15e>
 800deec:	2301      	movs	r3, #1
 800deee:	4632      	mov	r2, r6
 800def0:	4649      	mov	r1, r9
 800def2:	4640      	mov	r0, r8
 800def4:	47d0      	blx	sl
 800def6:	3001      	adds	r0, #1
 800def8:	d09d      	beq.n	800de36 <_printf_i+0x15a>
 800defa:	3501      	adds	r5, #1
 800defc:	68e3      	ldr	r3, [r4, #12]
 800defe:	9903      	ldr	r1, [sp, #12]
 800df00:	1a5b      	subs	r3, r3, r1
 800df02:	42ab      	cmp	r3, r5
 800df04:	dcf2      	bgt.n	800deec <_printf_i+0x210>
 800df06:	e7eb      	b.n	800dee0 <_printf_i+0x204>
 800df08:	2500      	movs	r5, #0
 800df0a:	f104 0619 	add.w	r6, r4, #25
 800df0e:	e7f5      	b.n	800defc <_printf_i+0x220>
 800df10:	0800e36d 	.word	0x0800e36d
 800df14:	0800e37e 	.word	0x0800e37e

0800df18 <memmove>:
 800df18:	4288      	cmp	r0, r1
 800df1a:	b510      	push	{r4, lr}
 800df1c:	eb01 0402 	add.w	r4, r1, r2
 800df20:	d902      	bls.n	800df28 <memmove+0x10>
 800df22:	4284      	cmp	r4, r0
 800df24:	4623      	mov	r3, r4
 800df26:	d807      	bhi.n	800df38 <memmove+0x20>
 800df28:	1e43      	subs	r3, r0, #1
 800df2a:	42a1      	cmp	r1, r4
 800df2c:	d008      	beq.n	800df40 <memmove+0x28>
 800df2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df36:	e7f8      	b.n	800df2a <memmove+0x12>
 800df38:	4402      	add	r2, r0
 800df3a:	4601      	mov	r1, r0
 800df3c:	428a      	cmp	r2, r1
 800df3e:	d100      	bne.n	800df42 <memmove+0x2a>
 800df40:	bd10      	pop	{r4, pc}
 800df42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df4a:	e7f7      	b.n	800df3c <memmove+0x24>

0800df4c <_sbrk_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	4d06      	ldr	r5, [pc, #24]	@ (800df68 <_sbrk_r+0x1c>)
 800df50:	2300      	movs	r3, #0
 800df52:	4604      	mov	r4, r0
 800df54:	4608      	mov	r0, r1
 800df56:	602b      	str	r3, [r5, #0]
 800df58:	f7f3 fa74 	bl	8001444 <_sbrk>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d102      	bne.n	800df66 <_sbrk_r+0x1a>
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	b103      	cbz	r3, 800df66 <_sbrk_r+0x1a>
 800df64:	6023      	str	r3, [r4, #0]
 800df66:	bd38      	pop	{r3, r4, r5, pc}
 800df68:	20007658 	.word	0x20007658

0800df6c <_realloc_r>:
 800df6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df70:	4607      	mov	r7, r0
 800df72:	4614      	mov	r4, r2
 800df74:	460d      	mov	r5, r1
 800df76:	b921      	cbnz	r1, 800df82 <_realloc_r+0x16>
 800df78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df7c:	4611      	mov	r1, r2
 800df7e:	f7ff bc5b 	b.w	800d838 <_malloc_r>
 800df82:	b92a      	cbnz	r2, 800df90 <_realloc_r+0x24>
 800df84:	f7ff fbec 	bl	800d760 <_free_r>
 800df88:	4625      	mov	r5, r4
 800df8a:	4628      	mov	r0, r5
 800df8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df90:	f000 f81a 	bl	800dfc8 <_malloc_usable_size_r>
 800df94:	4284      	cmp	r4, r0
 800df96:	4606      	mov	r6, r0
 800df98:	d802      	bhi.n	800dfa0 <_realloc_r+0x34>
 800df9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df9e:	d8f4      	bhi.n	800df8a <_realloc_r+0x1e>
 800dfa0:	4621      	mov	r1, r4
 800dfa2:	4638      	mov	r0, r7
 800dfa4:	f7ff fc48 	bl	800d838 <_malloc_r>
 800dfa8:	4680      	mov	r8, r0
 800dfaa:	b908      	cbnz	r0, 800dfb0 <_realloc_r+0x44>
 800dfac:	4645      	mov	r5, r8
 800dfae:	e7ec      	b.n	800df8a <_realloc_r+0x1e>
 800dfb0:	42b4      	cmp	r4, r6
 800dfb2:	4622      	mov	r2, r4
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	bf28      	it	cs
 800dfb8:	4632      	movcs	r2, r6
 800dfba:	f7ff fbc3 	bl	800d744 <memcpy>
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	4638      	mov	r0, r7
 800dfc2:	f7ff fbcd 	bl	800d760 <_free_r>
 800dfc6:	e7f1      	b.n	800dfac <_realloc_r+0x40>

0800dfc8 <_malloc_usable_size_r>:
 800dfc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfcc:	1f18      	subs	r0, r3, #4
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	bfbc      	itt	lt
 800dfd2:	580b      	ldrlt	r3, [r1, r0]
 800dfd4:	18c0      	addlt	r0, r0, r3
 800dfd6:	4770      	bx	lr

0800dfd8 <_init>:
 800dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfda:	bf00      	nop
 800dfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfde:	bc08      	pop	{r3}
 800dfe0:	469e      	mov	lr, r3
 800dfe2:	4770      	bx	lr

0800dfe4 <_fini>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	bf00      	nop
 800dfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfea:	bc08      	pop	{r3}
 800dfec:	469e      	mov	lr, r3
 800dfee:	4770      	bx	lr
