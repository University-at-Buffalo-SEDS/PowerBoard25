
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         0000dd90  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800df70  0800df70  0000ef70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e310  0800e310  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e310  0800e310  0000f310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e318  0800e318  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e318  0800e318  0000f318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e31c  0800e31c  0000f31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e320  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007490  200001d8  0800e4f8  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007668  0800e4f8  00010668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d191  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dd7  00000000  00000000  0003d399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  00043170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc9  00000000  00000000  00045568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255ce  00000000  00000000  00047131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b272  00000000  00000000  0006c6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5fa3  00000000  00000000  00097971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e74  00000000  00000000  0017d958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001877cc  2**0
=======
  1 .text         0000e6b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800e890  0800e890  0000f890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed10  0800ed10  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ed10  0800ed10  0000fd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed18  0800ed18  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed18  0800ed18  0000fd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ed1c  0800ed1c  0000fd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ed20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a384  200001d8  0800eef8  000101d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a55c  0800eef8  0001055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d373  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dd7  00000000  00000000  0003d57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002410  00000000  00000000  00043358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bdc  00000000  00000000  00045768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255ce  00000000  00000000  00047344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b2eb  00000000  00000000  0006c912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6119  00000000  00000000  00097bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dd16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ed4  00000000  00000000  0017dd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00187c30  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000200:	0800df58 	.word	0x0800df58
=======
 8000200:	0800e878 	.word	0x0800e878
>>>>>>> Stashed changes

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
<<<<<<< Updated upstream
 800021c:	0800df58 	.word	0x0800df58
=======
 800021c:	0800e878 	.word	0x0800e878
>>>>>>> Stashed changes

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c, uint8_t address) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	int8_t ack;

	handle->hi2c = hi2c;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	601a      	str	r2, [r3, #0]

	//Initialize voltages to NAN
	//Can this be changed so that it is in the struct
	//i.e. last_voltages = {NAN, NAN, NAN, NAN}
	for (int i = 0; i < 4; i++) {
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e009      	b.n	800061a <LTC2990_Init+0x2e>
		handle->last_voltages[i] = NAN;
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3302      	adds	r3, #2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	4a1c      	ldr	r2, [pc, #112]	@ (8000684 <LTC2990_Init+0x98>)
 8000612:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b03      	cmp	r3, #3
 800061e:	ddf2      	ble.n	8000606 <LTC2990_Init+0x1a>
	}

	handle->i2c_address = address;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, VOLTAGE_MODE_MASK);
 8000626:	2207      	movs	r2, #7
 8000628:	2107      	movs	r1, #7
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f000 f8cc 	bl	80007c8 <LTC2990_Set_Mode>
 8000630:	4603      	mov	r3, r0
 8000632:	74fb      	strb	r3, [r7, #19]

	if(ack != 0) {
 8000634:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <LTC2990_Init+0x5a>
		CDC_Transmit_Print("Failed to set in Single Voltage Mode \n");
 800063c:	4812      	ldr	r0, [pc, #72]	@ (8000688 <LTC2990_Init+0x9c>)
 800063e:	f000 fa2f 	bl	8000aa0 <CDC_Transmit_Print>
		while(1);
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <LTC2990_Init+0x56>
	}


	// Enable all voltage channels
	ack = LTC2990_Enable_All_Voltages(handle);
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f000 f8b0 	bl	80007ac <LTC2990_Enable_All_Voltages>
 800064c:	4603      	mov	r3, r0
 800064e:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 8000650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <LTC2990_Init+0x7c>
		HAL_Delay(50);
<<<<<<< Updated upstream
 8000654:	2032      	movs	r0, #50	@ 0x32
 8000656:	f000 ff5f 	bl	8001518 <HAL_Delay>
=======
 8000658:	2032      	movs	r0, #50	@ 0x32
 800065a:	f000 ffb1 	bl	80015c0 <HAL_Delay>
>>>>>>> Stashed changes
		CDC_Transmit_Print("Failed to enable voltage channels. \n");
 800065e:	480b      	ldr	r0, [pc, #44]	@ (800068c <LTC2990_Init+0xa0>)
 8000660:	f000 fa1e 	bl	8000aa0 <CDC_Transmit_Print>
		while(1);
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <LTC2990_Init+0x78>
	}

	HAL_Delay(100);
<<<<<<< Updated upstream
 8000664:	2064      	movs	r0, #100	@ 0x64
 8000666:	f000 ff57 	bl	8001518 <HAL_Delay>
=======
 8000668:	2064      	movs	r0, #100	@ 0x64
 800066a:	f000 ffa9 	bl	80015c0 <HAL_Delay>
>>>>>>> Stashed changes
	CDC_Transmit_Print("LTC2990 configured for Single-Ended Voltage Monitoring. \n");
 800066e:	4808      	ldr	r0, [pc, #32]	@ (8000690 <LTC2990_Init+0xa4>)
 8000670:	f000 fa16 	bl	8000aa0 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f000 f80d 	bl	8000694 <LTC2990_Step>

	return 0;
 800067a:	2300      	movs	r3, #0
}
<<<<<<< Updated upstream
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	7fc00000 	.word	0x7fc00000
 8000684:	0800df70 	.word	0x0800df70
 8000688:	0800df98 	.word	0x0800df98
 800068c:	0800dfc0 	.word	0x0800dfc0
=======
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	7fc00000 	.word	0x7fc00000
 8000688:	0800e890 	.word	0x0800e890
 800068c:	0800e8b8 	.word	0x0800e8b8
 8000690:	0800e8e0 	.word	0x0800e8e0
>>>>>>> Stashed changes

08000694 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	int8_t ack;
	int16_t adc_code;
	int8_t data_valid;
	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f8d7 	bl	8000850 <LTC2990_Trigger_Conversion>
 80006a2:	4603      	mov	r3, r0
 80006a4:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 80006a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <LTC2990_Step+0x22>
		CDC_Transmit_Print("Failed to trigger conversion.");
 80006ae:	4829      	ldr	r0, [pc, #164]	@ (8000754 <LTC2990_Step+0xc0>)
 80006b0:	f000 f9f6 	bl	8000aa0 <CDC_Transmit_Print>
 80006b4:	e04b      	b.n	800074e <LTC2990_Step+0xba>
		return;
	}

	// Allow time for conversion
	HAL_Delay(10);
<<<<<<< Updated upstream
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 ff30 	bl	8001518 <HAL_Delay>
=======
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 ff82 	bl	80015c0 <HAL_Delay>
>>>>>>> Stashed changes

	// Read voltages V1 to V4
	uint8_t msb_registers[4] = {V1_MSB_REG, V2_MSB_REG, V3_MSB_REG, V4_MSB_REG};
 80006bc:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <LTC2990_Step+0xc4>)
 80006be:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 4; i++) {
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e040      	b.n	8000748 <LTC2990_Step+0xb4>
		ack = LTC2990_ADC_Read_New_Data(handle, msb_registers[i], &adc_code, &data_valid);
 80006c6:	f107 0208 	add.w	r2, r7, #8
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	4413      	add	r3, r2
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	f107 030f 	add.w	r3, r7, #15
 80006d4:	f107 0210 	add.w	r2, r7, #16
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f8c7 	bl	800086c <LTC2990_ADC_Read_New_Data>
 80006de:	4603      	mov	r3, r0
 80006e0:	74fb      	strb	r3, [r7, #19]
		if(ack != 0 || data_valid != 1) {
 80006e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d103      	bne.n	80006f2 <LTC2990_Step+0x5e>
 80006ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d017      	beq.n	8000722 <LTC2990_Step+0x8e>
			CDC_Transmit_Print("Error reading Voltage %d \n", i);
 80006f2:	6979      	ldr	r1, [r7, #20]
 80006f4:	4819      	ldr	r0, [pc, #100]	@ (800075c <LTC2990_Step+0xc8>)
 80006f6:	f000 f9d3 	bl	8000aa0 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the ack: %d \n", ack);
 80006fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006fe:	4619      	mov	r1, r3
 8000700:	4817      	ldr	r0, [pc, #92]	@ (8000760 <LTC2990_Step+0xcc>)
 8000702:	f000 f9cd 	bl	8000aa0 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8000706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070a:	4619      	mov	r1, r3
 800070c:	4815      	ldr	r0, [pc, #84]	@ (8000764 <LTC2990_Step+0xd0>)
 800070e:	f000 f9c7 	bl	8000aa0 <CDC_Transmit_Print>
			handle->last_voltages[i] = NAN;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3302      	adds	r3, #2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <LTC2990_Step+0xd4>)
 800071e:	601a      	str	r2, [r3, #0]
			continue;
 8000720:	e00f      	b.n	8000742 <LTC2990_Step+0xae>
		}
		handle->last_voltages[i] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code);
 8000722:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000726:	b29b      	uxth	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f922 	bl	8000974 <LTC2990_Code_To_Single_Ended_Voltage>
 8000730:	eef0 7a40 	vmov.f32	s15, s0
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3302      	adds	r3, #2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 4; i++) {
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	2b03      	cmp	r3, #3
 800074c:	ddbb      	ble.n	80006c6 <LTC2990_Step+0x32>
		//CDC_Transmit_Print("Just Read Voltages, got: %x \n", handle->last_voltages[i]);
	}

}
<<<<<<< Updated upstream
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	0800dffc 	.word	0x0800dffc
 8000754:	0c0a0806 	.word	0x0c0a0806
 8000758:	0800e01c 	.word	0x0800e01c
 800075c:	0800e038 	.word	0x0800e038
 8000760:	0800e050 	.word	0x0800e050
 8000764:	7fc00000 	.word	0x7fc00000
=======
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800e91c 	.word	0x0800e91c
 8000758:	0c0a0806 	.word	0x0c0a0806
 800075c:	0800e93c 	.word	0x0800e93c
 8000760:	0800e958 	.word	0x0800e958
 8000764:	0800e970 	.word	0x0800e970
 8000768:	7fc00000 	.word	0x7fc00000
>>>>>>> Stashed changes

0800076c <LTC2990_Get_Voltage>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
void LTC2990_Get_Voltage(LTC2990_Handle_t* handle, float* voltages) {
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e00d      	b.n	8000798 <LTC2990_Get_Voltage+0x2c>
		voltages[i] = handle->last_voltages[i];
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	3202      	adds	r2, #2
 800078a:	0092      	lsls	r2, r2, #2
 800078c:	440a      	add	r2, r1
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b03      	cmp	r3, #3
 800079c:	ddee      	ble.n	800077c <LTC2990_Get_Voltage+0x10>
	}
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LTC2990_Enable_All_Voltages>:


inline int8_t LTC2990_Enable_All_Voltages(LTC2990_Handle_t *handle) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	return LTC2990_Set_Mode(handle, ENABLE_ALL, TEMP_MEAS_MODE_MASK);
 80007b4:	2218      	movs	r2, #24
 80007b6:	2118      	movs	r1, #24
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f805 	bl	80007c8 <LTC2990_Set_Mode>
 80007be:	4603      	mov	r3, r0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <LTC2990_Set_Mode>:


int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
 80007d4:	4613      	mov	r3, r2
 80007d6:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80007d8:	f107 030e 	add.w	r3, r7, #14
 80007dc:	461a      	mov	r2, r3
 80007de:	2101      	movs	r1, #1
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f903 	bl	80009ec <LTC2990_Read_Register>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d005      	beq.n	80007fe <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 80007f2:	4815      	ldr	r0, [pc, #84]	@ (8000848 <LTC2990_Set_Mode+0x80>)
 80007f4:	f000 f954 	bl	8000aa0 <CDC_Transmit_Print>
		return ack;
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	e01f      	b.n	800083e <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 80007fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000802:	43db      	mvns	r3, r3
 8000804:	b25a      	sxtb	r2, r3
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	b25b      	sxtb	r3, r3
 800080a:	4013      	ands	r3, r2
 800080c:	b25b      	sxtb	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 8000812:	7bba      	ldrb	r2, [r7, #14]
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	4313      	orrs	r3, r2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	461a      	mov	r2, r3
 8000820:	2101      	movs	r1, #1
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 f90e 	bl	8000a44 <LTC2990_Write_Register>
 8000828:	4603      	mov	r3, r0
 800082a:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 800082c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <LTC2990_Set_Mode+0x84>)
 8000836:	f000 f933 	bl	8000aa0 <CDC_Transmit_Print>
	}
	return ack;
 800083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
<<<<<<< Updated upstream
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	0800e070 	.word	0x0800e070
 8000848:	0800e098 	.word	0x0800e098
=======
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	0800e990 	.word	0x0800e990
 800084c:	0800e9b8 	.word	0x0800e9b8
>>>>>>> Stashed changes

08000850 <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x00);
 8000858:	2200      	movs	r2, #0
 800085a:	2102      	movs	r1, #2
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f8f1 	bl	8000a44 <LTC2990_Write_Register>
 8000862:	4603      	mov	r3, r0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, int16_t* adc_code, int8_t* data_valid) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	460b      	mov	r3, r1
 800087a:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 800087c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000880:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	b2db      	uxtb	r3, r3
 8000888:	3b01      	subs	r3, #1
 800088a:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 800088c:	e01a      	b.n	80008c4 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 800088e:	f107 0319 	add.w	r3, r7, #25
 8000892:	461a      	mov	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f000 f8a8 	bl	80009ec <LTC2990_Read_Register>
 800089c:	4603      	mov	r3, r0
 800089e:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 80008a0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80008a8:	7f3b      	ldrb	r3, [r7, #28]
 80008aa:	e05c      	b.n	8000966 <LTC2990_ADC_Read_New_Data+0xfa>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80008ac:	7e7b      	ldrb	r3, [r7, #25]
 80008ae:	461a      	mov	r2, r3
 80008b0:	7f7b      	ldrb	r3, [r7, #29]
 80008b2:	fa42 f303 	asr.w	r3, r2, r3
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d109      	bne.n	80008d2 <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
<<<<<<< Updated upstream
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fe2c 	bl	8001518 <HAL_Delay>
=======
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 fe7e 	bl	80015c0 <HAL_Delay>
>>>>>>> Stashed changes
	while (--timeout) {
 80008c4:	8bfb      	ldrh	r3, [r7, #30]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	83fb      	strh	r3, [r7, #30]
 80008ca:	8bfb      	ldrh	r3, [r7, #30]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1de      	bne.n	800088e <LTC2990_ADC_Read_New_Data+0x22>
 80008d0:	e000      	b.n	80008d4 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 80008d2:	bf00      	nop
	}


	if (timeout == 0) {
 80008d4:	8bfb      	ldrh	r3, [r7, #30]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d104      	bne.n	80008e4 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80008da:	4825      	ldr	r0, [pc, #148]	@ (8000970 <LTC2990_ADC_Read_New_Data+0x104>)
 80008dc:	f000 f8e0 	bl	8000aa0 <CDC_Transmit_Print>
		return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e040      	b.n	8000966 <LTC2990_ADC_Read_New_Data+0xfa>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 80008e4:	f107 0218 	add.w	r2, r7, #24
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	4619      	mov	r1, r3
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 f87d 	bl	80009ec <LTC2990_Read_Register>
 80008f2:	4603      	mov	r3, r0
 80008f4:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80008f6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 80008fe:	7f3b      	ldrb	r3, [r7, #28]
 8000900:	e031      	b.n	8000966 <LTC2990_ADC_Read_New_Data+0xfa>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	3301      	adds	r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f107 0217 	add.w	r2, r7, #23
 800090c:	4619      	mov	r1, r3
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 f86c 	bl	80009ec <LTC2990_Read_Register>
 8000914:	4603      	mov	r3, r0
 8000916:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 8000918:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 8000920:	7f3b      	ldrb	r3, [r7, #28]
 8000922:	e020      	b.n	8000966 <LTC2990_ADC_Read_New_Data+0xfa>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8000924:	7e3b      	ldrb	r3, [r7, #24]
 8000926:	b21b      	sxth	r3, r3
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21b      	sxth	r3, r3
 8000934:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 8000936:	8b7b      	ldrh	r3, [r7, #26]
 8000938:	0bdb      	lsrs	r3, r3, #15
 800093a:	b29b      	uxth	r3, r3
 800093c:	b25b      	sxtb	r3, r3
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	b25a      	sxtb	r2, r3
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x3FFF;
 8000948:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800094c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000950:	b21a      	sxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	801a      	strh	r2, [r3, #0]

	return (*data_valid == 1) ? 0 : 1;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	f993 3000 	ldrsb.w	r3, [r3]
 800095c:	2b01      	cmp	r3, #1
 800095e:	bf14      	ite	ne
 8000960:	2301      	movne	r3, #1
 8000962:	2300      	moveq	r3, #0
 8000964:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
<<<<<<< Updated upstream
 8000962:	4618      	mov	r0, r3
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	0800e0c0 	.word	0x0800e0c0
=======
 8000966:	4618      	mov	r0, r3
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	0800e9e0 	.word	0x0800e9e0
>>>>>>> Stashed changes

08000974 <LTC2990_Code_To_Single_Ended_Voltage>:

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	81fb      	strh	r3, [r7, #14]

	if(adc_code & 0x4000) { //If the code is negative
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00a      	beq.n	80009a4 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x7FFF) + 1;// Two's compliment
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	f483 43ff 	eor.w	r3, r3, #32640	@ 0x7f80
 8000994:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000998:	b29b      	uxth	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	807b      	strh	r3, [r7, #2]
		sign = -1;
 800099e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009a2:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 80009a4:	887b      	ldrh	r3, [r7, #2]
 80009a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80009aa:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * SINGLE_ENDED_LSB * sign;
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80009e8 <LTC2990_Code_To_Single_Ended_Voltage+0x74>
 80009ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ce:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	ee07 3a90 	vmov	s15, r3
}
 80009d8:	eeb0 0a67 	vmov.f32	s0, s15
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	39a00000 	.word	0x39a00000

080009ec <LTC2990_Read_Register>:

int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af04      	add	r7, sp, #16
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	460b      	mov	r3, r1
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 80009fa:	68fb      	ldr	r3, [r7, #12]
<<<<<<< Updated upstream
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	b299      	uxth	r1, r3
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	9302      	str	r3, [sp, #8]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	f001 fc3b 	bl	8002290 <HAL_I2C_Mem_Read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	75fb      	strb	r3, [r7, #23]
=======
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	b299      	uxth	r1, r3
 8000a06:	7afb      	ldrb	r3, [r7, #11]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0e:	9302      	str	r3, [sp, #8]
 8000a10:	2301      	movs	r3, #1
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f001 fc8d 	bl	8002338 <HAL_I2C_Mem_Read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
	if(status == HAL_OK) {
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <LTC2990_Read_Register+0x40>
		return 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e005      	b.n	8000a38 <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <LTC2990_Read_Register+0x54>)
 8000a32:	f000 f835 	bl	8000aa0 <CDC_Transmit_Print>
	return 1;
 8000a36:	2301      	movs	r3, #1
}
<<<<<<< Updated upstream
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800e0d4 	.word	0x0800e0d4
=======
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	0800e9f4 	.word	0x0800e9f4
>>>>>>> Stashed changes

08000a44 <LTC2990_Write_Register>:
//	}
//	return 0;
//}


int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af04      	add	r7, sp, #16
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
 8000a50:	4613      	mov	r3, r2
 8000a52:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 8000a54:	687b      	ldr	r3, [r7, #4]
<<<<<<< Updated upstream
 8000a56:	791b      	ldrb	r3, [r3, #4]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	1cbb      	adds	r3, r7, #2
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f001 fafa 	bl	8002068 <HAL_I2C_Mem_Write>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
=======
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	1cbb      	adds	r3, r7, #2
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	f001 fb4c 	bl	8002110 <HAL_I2C_Mem_Write>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
	if(status == HAL_OK) {
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <LTC2990_Write_Register+0x42>
		return 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e005      	b.n	8000a92 <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <LTC2990_Write_Register+0x58>)
 8000a8c:	f000 f808 	bl	8000aa0 <CDC_Transmit_Print>

	return 1;
 8000a90:	2301      	movs	r3, #1
}
<<<<<<< Updated upstream
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800e0fc 	.word	0x0800e0fc
=======
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	0800ea1c 	.word	0x0800ea1c
>>>>>>> Stashed changes

08000aa0 <CDC_Transmit_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char * format, ...) {
 8000aa0:	b40f      	push	{r0, r1, r2, r3}
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b09c      	sub	sp, #112	@ 0x70
 8000aa6:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 8000aa8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000aac:	607b      	str	r3, [r7, #4]
	int n = vsprintf(buf, format, args);
<<<<<<< Updated upstream
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00c fd6a 	bl	800d58c <vsiprintf>
 8000ab8:	66f8      	str	r0, [r7, #108]	@ 0x6c
	va_end(args);
	CDC_Transmit_FS(buf, n);
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f00c f8df 	bl	800cc84 <CDC_Transmit_FS>
=======
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00d f9f8 	bl	800deac <vsiprintf>
 8000abc:	66f8      	str	r0, [r7, #108]	@ 0x6c
	va_end(args);
	CDC_Transmit_FS(buf, n);
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00c fd6d 	bl	800d5a4 <CDC_Transmit_FS>
>>>>>>> Stashed changes
}
 8000aca:	bf00      	nop
 8000acc:	3770      	adds	r7, #112	@ 0x70
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09a      	sub	sp, #104	@ 0x68
 8000adc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000ada:	f000 fce6 	bl	80014aa <HAL_Init>
=======
 8000ade:	f000 fd38 	bl	8001552 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8000ade:	f000 f8e3 	bl	8000ca8 <SystemClock_Config>
=======
 8000ae2:	f000 f8c9 	bl	8000c78 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8000ae2:	f000 f9f5 	bl	8000ed0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000ae6:	f000 f921 	bl	8000d2c <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000aea:	f000 f967 	bl	8000dbc <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8000aee:	f000 f9a5 	bl	8000e3c <MX_LPUART1_UART_Init>
=======
 8000ae6:	f000 f9db 	bl	8000ea0 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000aea:	f000 f907 	bl	8000cfc <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000aee:	f000 f94d 	bl	8000d8c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8000af2:	f000 f98b 	bl	8000e0c <MX_LPUART1_UART_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN 2 */

  	  FDCAN_FilterTypeDef sFilterConfig;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000af6:	2300      	movs	r3, #0
 8000af8:	643b      	str	r3, [r7, #64]	@ 0x40
	sFilterConfig.FilterIndex = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	647b      	str	r3, [r7, #68]	@ 0x44
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	64bb      	str	r3, [r7, #72]	@ 0x48
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000b02:	2301      	movs	r3, #1
 8000b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sFilterConfig.FilterID1 = 0x321;
 8000b06:	f240 3321 	movw	r3, #801	@ 0x321
 8000b0a:	653b      	str	r3, [r7, #80]	@ 0x50
	sFilterConfig.FilterID2 = 0x7FF;
 8000b0c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b10:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
<<<<<<< Updated upstream
 8000b0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b12:	4619      	mov	r1, r3
 8000b14:	4852      	ldr	r0, [pc, #328]	@ (8000c60 <main+0x18c>)
 8000b16:	f000 ff5b 	bl	80019d0 <HAL_FDCAN_ConfigFilter>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <main+0x52>
	{
	  CDC_Transmit_Print("Error while configuring filter for FDCAN2");
 8000b20:	4850      	ldr	r0, [pc, #320]	@ (8000c64 <main+0x190>)
 8000b22:	f7ff ffbb 	bl	8000a9c <CDC_Transmit_Print>
=======
 8000b12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b16:	4619      	mov	r1, r3
 8000b18:	483c      	ldr	r0, [pc, #240]	@ (8000c0c <main+0x134>)
 8000b1a:	f000 ffad 	bl	8001a78 <HAL_FDCAN_ConfigFilter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <main+0x52>
	{
	  CDC_Transmit_Print("Error while configuring filter for FDCAN2");
 8000b24:	483a      	ldr	r0, [pc, #232]	@ (8000c10 <main+0x138>)
 8000b26:	f7ff ffbb 	bl	8000aa0 <CDC_Transmit_Print>
>>>>>>> Stashed changes
	}

	/* Configure global filter:
	   Filter all remote frames with STD and EXT ID
	   Reject non matching frames with STD ID and EXT ID */
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000b2a:	2300      	movs	r3, #0
<<<<<<< Updated upstream
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	2102      	movs	r1, #2
 8000b30:	484b      	ldr	r0, [pc, #300]	@ (8000c60 <main+0x18c>)
 8000b32:	f000 ffa7 	bl	8001a84 <HAL_FDCAN_ConfigGlobalFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <main+0x6e>
	{
		CDC_Transmit_Print("Error while configuring global filter\n");
 8000b3c:	484a      	ldr	r0, [pc, #296]	@ (8000c68 <main+0x194>)
 8000b3e:	f7ff ffad 	bl	8000a9c <CDC_Transmit_Print>
	}

  HAL_StatusTypeDef err = HAL_FDCAN_Start(&hfdcan2);
 8000b42:	4847      	ldr	r0, [pc, #284]	@ (8000c60 <main+0x18c>)
 8000b44:	f000 ffcf 	bl	8001ae6 <HAL_FDCAN_Start>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
=======
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2202      	movs	r2, #2
 8000b32:	2102      	movs	r1, #2
 8000b34:	4835      	ldr	r0, [pc, #212]	@ (8000c0c <main+0x134>)
 8000b36:	f000 fff9 	bl	8001b2c <HAL_FDCAN_ConfigGlobalFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <main+0x6e>
	{
		CDC_Transmit_Print("Error while configuring global filter\n");
 8000b40:	4834      	ldr	r0, [pc, #208]	@ (8000c14 <main+0x13c>)
 8000b42:	f7ff ffad 	bl	8000aa0 <CDC_Transmit_Print>
	}

  HAL_StatusTypeDef err = HAL_FDCAN_Start(&hfdcan2);
 8000b46:	4831      	ldr	r0, [pc, #196]	@ (8000c0c <main+0x134>)
 8000b48:	f001 f821 	bl	8001b8e <HAL_FDCAN_Start>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
>>>>>>> Stashed changes
    if (err != HAL_OK) {
 8000b52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00c      	beq.n	8000b74 <main+0x9c>
  	  char buf[60];// to send
  	  int n = sprintf(buf, "init err: = 0x%02x\n", err);
<<<<<<< Updated upstream
 8000b56:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4943      	ldr	r1, [pc, #268]	@ (8000c6c <main+0x198>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00c fcdc 	bl	800d51c <siprintf>
 8000b64:	6678      	str	r0, [r7, #100]	@ 0x64
  	  CDC_Transmit_FS(buf, n);
 8000b66:	463b      	mov	r3, r7
 8000b68:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c f88a 	bl	800cc84 <CDC_Transmit_FS>
=======
 8000b5a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	492d      	ldr	r1, [pc, #180]	@ (8000c18 <main+0x140>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00d f96a 	bl	800de3c <siprintf>
 8000b68:	65b8      	str	r0, [r7, #88]	@ 0x58
  	  CDC_Transmit_FS(buf, n);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f00c fd18 	bl	800d5a4 <CDC_Transmit_FS>
>>>>>>> Stashed changes
    }

    /* TEMPORARY TILL I FIGURE OUR LED DRIVER */
    HAL_Delay(1000);
<<<<<<< Updated upstream
 8000b70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b74:	f000 fcd0 	bl	8001518 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b7e:	483c      	ldr	r0, [pc, #240]	@ (8000c70 <main+0x19c>)
 8000b80:	f001 f9be 	bl	8001f00 <HAL_GPIO_WritePin>
=======
 8000b74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b78:	f000 fd22 	bl	80015c0 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b82:	4826      	ldr	r0, [pc, #152]	@ (8000c1c <main+0x144>)
 8000b84:	f001 fa10 	bl	8001fa8 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< Updated upstream
 8000b84:	f009 fa12 	bl	8009fac <osKernelInitialize>
=======
 8000b88:	f009 fa64 	bl	800a054 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of VoltageLTC2990Mutex */
  VoltageLTC2990MutexHandle = osMutexNew(&VoltageLTC2990Mutex_attributes);
 8000b8c:	4824      	ldr	r0, [pc, #144]	@ (8000c20 <main+0x148>)
 8000b8e:	f009 fb59 	bl	800a244 <osMutexNew>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a23      	ldr	r2, [pc, #140]	@ (8000c24 <main+0x14c>)
 8000b96:	6013      	str	r3, [r2, #0]

  /* creation of CurrentLTC2990Mutex */
  CurrentLTC2990MutexHandle = osMutexNew(&CurrentLTC2990Mutex_attributes);
 8000b98:	4823      	ldr	r0, [pc, #140]	@ (8000c28 <main+0x150>)
 8000b9a:	f009 fb53 	bl	800a244 <osMutexNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a22      	ldr	r2, [pc, #136]	@ (8000c2c <main+0x154>)
 8000ba2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
<<<<<<< Updated upstream
 8000b88:	4a3a      	ldr	r2, [pc, #232]	@ (8000c74 <main+0x1a0>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	483a      	ldr	r0, [pc, #232]	@ (8000c78 <main+0x1a4>)
 8000b8e:	f009 fa57 	bl	800a040 <osThreadNew>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a39      	ldr	r2, [pc, #228]	@ (8000c7c <main+0x1a8>)
 8000b96:	6013      	str	r3, [r2, #0]

  /* creation of readVoltageTask */
  readVoltageTaskHandle = osThreadNew(startReadVoltageTask, NULL, &readVoltageTask_attributes);
 8000b98:	4a39      	ldr	r2, [pc, #228]	@ (8000c80 <main+0x1ac>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4839      	ldr	r0, [pc, #228]	@ (8000c84 <main+0x1b0>)
 8000b9e:	f009 fa4f 	bl	800a040 <osThreadNew>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a38      	ldr	r2, [pc, #224]	@ (8000c88 <main+0x1b4>)
 8000ba6:	6013      	str	r3, [r2, #0]

  /* creation of blinkLEDTask */
  blinkLEDTaskHandle = osThreadNew(startBlinkLEDTask, NULL, &blinkLEDTask_attributes);
 8000ba8:	4a38      	ldr	r2, [pc, #224]	@ (8000c8c <main+0x1b8>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4838      	ldr	r0, [pc, #224]	@ (8000c90 <main+0x1bc>)
 8000bae:	f009 fa47 	bl	800a040 <osThreadNew>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a37      	ldr	r2, [pc, #220]	@ (8000c94 <main+0x1c0>)
 8000bb6:	6013      	str	r3, [r2, #0]
=======
 8000ba4:	4a22      	ldr	r2, [pc, #136]	@ (8000c30 <main+0x158>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4822      	ldr	r0, [pc, #136]	@ (8000c34 <main+0x15c>)
 8000baa:	f009 fa9d 	bl	800a0e8 <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <main+0x160>)
 8000bb2:	6013      	str	r3, [r2, #0]

  /* creation of readVoltageTask */
  readVoltageTaskHandle = osThreadNew(startReadVoltageTask, NULL, &readVoltageTask_attributes);
 8000bb4:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <main+0x164>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4821      	ldr	r0, [pc, #132]	@ (8000c40 <main+0x168>)
 8000bba:	f009 fa95 	bl	800a0e8 <osThreadNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a20      	ldr	r2, [pc, #128]	@ (8000c44 <main+0x16c>)
 8000bc2:	6013      	str	r3, [r2, #0]

  /* creation of blinkLEDTask */
  blinkLEDTaskHandle = osThreadNew(startBlinkLEDTask, NULL, &blinkLEDTask_attributes);
 8000bc4:	4a20      	ldr	r2, [pc, #128]	@ (8000c48 <main+0x170>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4820      	ldr	r0, [pc, #128]	@ (8000c4c <main+0x174>)
 8000bca:	f009 fa8d 	bl	800a0e8 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c50 <main+0x178>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of printVoltage */
  printVoltageHandle = osThreadNew(startPrintVoltage, NULL, &printVoltage_attributes);
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c54 <main+0x17c>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	481f      	ldr	r0, [pc, #124]	@ (8000c58 <main+0x180>)
 8000bda:	f009 fa85 	bl	800a0e8 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c5c <main+0x184>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* creation of readCurrent */
  readCurrentHandle = osThreadNew(startReadCurrent, NULL, &readCurrent_attributes);
 8000be4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c60 <main+0x188>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	481e      	ldr	r0, [pc, #120]	@ (8000c64 <main+0x18c>)
 8000bea:	f009 fa7d 	bl	800a0e8 <osThreadNew>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <main+0x190>)
 8000bf2:	6013      	str	r3, [r2, #0]

  /* creation of printCurrent */
  printCurrentHandle = osThreadNew(startPrintCurrent, NULL, &printCurrent_attributes);
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <main+0x194>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	481d      	ldr	r0, [pc, #116]	@ (8000c70 <main+0x198>)
 8000bfa:	f009 fa75 	bl	800a0e8 <osThreadNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a1c      	ldr	r2, [pc, #112]	@ (8000c74 <main+0x19c>)
 8000c02:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< Updated upstream
 8000bb8:	f009 fa1c 	bl	8009ff4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//QUICK TEST FOR LEDS

    LTC2990_Init(&LTC2990_Handle, &hi2c2);
 8000bbc:	4936      	ldr	r1, [pc, #216]	@ (8000c98 <main+0x1c4>)
 8000bbe:	4837      	ldr	r0, [pc, #220]	@ (8000c9c <main+0x1c8>)
 8000bc0:	f7ff fd14 	bl	80005ec <LTC2990_Init>
//	  		  CDC_Transmit_Print("NO MESSAGES IN FIFO0\n"); //Data to send
//	  		  CDC_Transmit_Print("Current FDCAN state: 0x%02x\n", hfdcan2.State);
//	  	  }
=======
 8000c04:	f009 fa4a 	bl	800a09c <osKernelStart>
>>>>>>> Stashed changes

  /* We should never get here as control is now taken by the scheduler */

<<<<<<< Updated upstream
	LTC2990_Step(&LTC2990_Handle);
 8000bc4:	4835      	ldr	r0, [pc, #212]	@ (8000c9c <main+0x1c8>)
 8000bc6:	f7ff fd63 	bl	8000690 <LTC2990_Step>

	float voltages[4];
	LTC2990_Get_Voltage(&LTC2990_Handle, voltages);
 8000bca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4832      	ldr	r0, [pc, #200]	@ (8000c9c <main+0x1c8>)
 8000bd2:	f7ff fdc9 	bl	8000768 <LTC2990_Get_Voltage>

	for (int i = 0; i < 4; i++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000bda:	e02e      	b.n	8000c3a <main+0x166>
		CDC_Transmit_Print("Voltage %d: %d.%03d V\n", i + 1,  (int)voltages[i], (int)((voltages[i] - (int)voltages[i]) * 1000));;
 8000bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bde:	1c59      	adds	r1, r3, #1
 8000be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	3370      	adds	r3, #112	@ 0x70
 8000be6:	443b      	add	r3, r7
 8000be8:	3b34      	subs	r3, #52	@ 0x34
 8000bea:	edd3 7a00 	vldr	s15, [r3]
 8000bee:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	3370      	adds	r3, #112	@ 0x70
 8000bf8:	443b      	add	r3, r7
 8000bfa:	3b34      	subs	r3, #52	@ 0x34
 8000bfc:	ed93 7a00 	vldr	s14, [r3]
 8000c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	3370      	adds	r3, #112	@ 0x70
 8000c06:	443b      	add	r3, r7
 8000c08:	3b34      	subs	r3, #52	@ 0x34
 8000c0a:	edd3 7a00 	vldr	s15, [r3]
 8000c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c1a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000ca0 <main+0x1cc>
 8000c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c26:	ee17 3a90 	vmov	r3, s15
 8000c2a:	ee16 2a90 	vmov	r2, s13
 8000c2e:	481d      	ldr	r0, [pc, #116]	@ (8000ca4 <main+0x1d0>)
 8000c30:	f7ff ff34 	bl	8000a9c <CDC_Transmit_Print>
	for (int i = 0; i < 4; i++) {
 8000c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c36:	3301      	adds	r3, #1
 8000c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	ddcd      	ble.n	8000bdc <main+0x108>
	}

	 //HAL_Delay(500);
	 HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2120      	movs	r1, #32
 8000c44:	480a      	ldr	r0, [pc, #40]	@ (8000c70 <main+0x19c>)
 8000c46:	f001 f95b 	bl	8001f00 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4e:	f000 fc63 	bl	8001518 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2120      	movs	r1, #32
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <main+0x19c>)
 8000c58:	f001 f952 	bl	8001f00 <HAL_GPIO_WritePin>
  {
 8000c5c:	e7b2      	b.n	8000bc4 <main+0xf0>
 8000c5e:	bf00      	nop
 8000c60:	200001f4 	.word	0x200001f4
 8000c64:	0800e150 	.word	0x0800e150
 8000c68:	0800e17c 	.word	0x0800e17c
 8000c6c:	0800e1a4 	.word	0x0800e1a4
 8000c70:	48000400 	.word	0x48000400
 8000c74:	0800e230 	.word	0x0800e230
 8000c78:	08000f91 	.word	0x08000f91
 8000c7c:	20000340 	.word	0x20000340
 8000c80:	0800e254 	.word	0x0800e254
 8000c84:	08000fa5 	.word	0x08000fa5
 8000c88:	20000344 	.word	0x20000344
 8000c8c:	0800e278 	.word	0x0800e278
 8000c90:	08000fc1 	.word	0x08000fc1
 8000c94:	20000348 	.word	0x20000348
 8000c98:	20000258 	.word	0x20000258
 8000c9c:	2000034c 	.word	0x2000034c
 8000ca0:	447a0000 	.word	0x447a0000
 8000ca4:	0800e1b8 	.word	0x0800e1b8

08000ca8 <SystemClock_Config>:
=======
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <main+0x130>
 8000c0c:	200001f4 	.word	0x200001f4
 8000c10:	0800eac4 	.word	0x0800eac4
 8000c14:	0800eaf0 	.word	0x0800eaf0
 8000c18:	0800eb18 	.word	0x0800eb18
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	0800ec7c 	.word	0x0800ec7c
 8000c24:	20000358 	.word	0x20000358
 8000c28:	0800ec8c 	.word	0x0800ec8c
 8000c2c:	2000035c 	.word	0x2000035c
 8000c30:	0800eba4 	.word	0x0800eba4
 8000c34:	08000f61 	.word	0x08000f61
 8000c38:	20000340 	.word	0x20000340
 8000c3c:	0800ebc8 	.word	0x0800ebc8
 8000c40:	08000f75 	.word	0x08000f75
 8000c44:	20000344 	.word	0x20000344
 8000c48:	0800ebec 	.word	0x0800ebec
 8000c4c:	08000fb9 	.word	0x08000fb9
 8000c50:	20000348 	.word	0x20000348
 8000c54:	0800ec10 	.word	0x0800ec10
 8000c58:	08000fed 	.word	0x08000fed
 8000c5c:	2000034c 	.word	0x2000034c
 8000c60:	0800ec34 	.word	0x0800ec34
 8000c64:	0800107d 	.word	0x0800107d
 8000c68:	20000350 	.word	0x20000350
 8000c6c:	0800ec58 	.word	0x0800ec58
 8000c70:	0800108d 	.word	0x0800108d
 8000c74:	20000354 	.word	0x20000354

08000c78 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2238      	movs	r2, #56	@ 0x38
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00c fc72 	bl	800d5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
=======
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	@ 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2238      	movs	r2, #56	@ 0x38
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00d f91a 	bl	800dec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
<<<<<<< Updated upstream
 8000cca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cce:	f003 fc53 	bl	8004578 <HAL_PWREx_ControlVoltageScaling>
=======
 8000c9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c9e:	f003 fcbf 	bl	8004620 <HAL_PWREx_ControlVoltageScaling>
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
<<<<<<< Updated upstream
 8000cd2:	2322      	movs	r3, #34	@ 0x22
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 0318 	add.w	r3, r7, #24
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fcf7 	bl	80046e0 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000cf8:	f000 f98e 	bl	8001018 <Error_Handler>
=======
 8000ca2:	2322      	movs	r3, #34	@ 0x22
 8000ca4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2340      	movs	r3, #64	@ 0x40
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fd63 	bl	8004788 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000cc8:	f000 f9fa 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 fff5 	bl	8004d04 <HAL_RCC_ClockConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000d20:	f000 f97a 	bl	8001018 <Error_Handler>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3750      	adds	r7, #80	@ 0x50
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <MX_FDCAN2_Init>:
=======
 8000ccc:	230f      	movs	r3, #15
 8000cce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 f861 	bl	8004dac <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cf0:	f000 f9e6 	bl	80010c0 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	@ 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <MX_FDCAN2_Init>:
>>>>>>> Stashed changes
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
<<<<<<< Updated upstream
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
=======
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
<<<<<<< Updated upstream
 8000d30:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d32:	4a21      	ldr	r2, [pc, #132]	@ (8000db8 <MX_FDCAN2_Init+0x8c>)
 8000d34:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d3e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d42:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d64:	2210      	movs	r2, #16
 8000d66:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d6a:	223f      	movs	r2, #63	@ 0x3f
 8000d6c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d70:	2210      	movs	r2, #16
 8000d72:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d82:	220d      	movs	r2, #13
 8000d84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_FDCAN2_Init+0x88>)
 8000da0:	f000 fcbc 	bl	800171c <HAL_FDCAN_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8000daa:	f000 f935 	bl	8001018 <Error_Handler>
=======
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d02:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <MX_FDCAN2_Init+0x8c>)
 8000d04:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d12:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d3a:	223f      	movs	r2, #63	@ 0x3f
 8000d3c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d40:	2210      	movs	r2, #16
 8000d42:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d52:	220d      	movs	r2, #13
 8000d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_FDCAN2_Init+0x88>)
 8000d70:	f000 fd28 	bl	80017c4 <HAL_FDCAN_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8000d7a:	f000 f9a1 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
<<<<<<< Updated upstream
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001f4 	.word	0x200001f4
 8000db8:	40006800 	.word	0x40006800

08000dbc <MX_I2C2_Init>:
=======
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001f4 	.word	0x200001f4
 8000d88:	40006800 	.word	0x40006800

08000d8c <MX_I2C2_Init>:
>>>>>>> Stashed changes
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
<<<<<<< Updated upstream
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
=======
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
<<<<<<< Updated upstream
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e34 <MX_I2C2_Init+0x78>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e38 <MX_I2C2_Init+0x7c>)
 8000dca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000df6:	480e      	ldr	r0, [pc, #56]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000df8:	f001 f89a 	bl	8001f30 <HAL_I2C_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e02:	f000 f909 	bl	8001018 <Error_Handler>
=======
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <MX_I2C2_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <MX_I2C2_Init+0x7c>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dc6:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dc8:	f001 f906 	bl	8001fd8 <HAL_I2C_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dd2:	f000 f975 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< Updated upstream
 8000e06:	2100      	movs	r1, #0
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000e0a:	f001 fe1d 	bl	8002a48 <HAL_I2CEx_ConfigAnalogFilter>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e14:	f000 f900 	bl	8001018 <Error_Handler>
=======
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dda:	f001 fe89 	bl	8002af0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000de4:	f000 f96c 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
<<<<<<< Updated upstream
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_I2C2_Init+0x74>)
 8000e1c:	f001 fe5f 	bl	8002ade <HAL_I2CEx_ConfigDigitalFilter>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f000 f8f7 	bl	8001018 <Error_Handler>
=======
 8000de8:	2100      	movs	r1, #0
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dec:	f001 fecb 	bl	8002b86 <HAL_I2CEx_ConfigDigitalFilter>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 f963 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
<<<<<<< Updated upstream
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000258 	.word	0x20000258
 8000e34:	40005800 	.word	0x40005800
 8000e38:	00503d58 	.word	0x00503d58

08000e3c <MX_LPUART1_UART_Init>:
=======
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000258 	.word	0x20000258
 8000e04:	40005800 	.word	0x40005800
 8000e08:	00503d58 	.word	0x00503d58

08000e0c <MX_LPUART1_UART_Init>:
>>>>>>> Stashed changes
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
<<<<<<< Updated upstream
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
=======
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
<<<<<<< Updated upstream
 8000e40:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e42:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <MX_LPUART1_UART_Init+0x8c>)
 8000e44:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e48:	4a20      	ldr	r2, [pc, #128]	@ (8000ecc <MX_LPUART1_UART_Init+0x90>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e60:	220c      	movs	r2, #12
 8000e62:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e7c:	4811      	ldr	r0, [pc, #68]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e7e:	f004 ff05 	bl	8005c8c <HAL_UART_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000e88:	f000 f8c6 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000e90:	f005 fca0 	bl	80067d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000e9a:	f000 f8bd 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000ea2:	f005 fcd5 	bl	8006850 <HAL_UARTEx_SetRxFifoThreshold>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000eac:	f000 f8b4 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_LPUART1_UART_Init+0x88>)
 8000eb2:	f005 fc56 	bl	8006762 <HAL_UARTEx_DisableFifoMode>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000ebc:	f000 f8ac 	bl	8001018 <Error_Handler>
=======
 8000e10:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e12:	4a21      	ldr	r2, [pc, #132]	@ (8000e98 <MX_LPUART1_UART_Init+0x8c>)
 8000e14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e18:	4a20      	ldr	r2, [pc, #128]	@ (8000e9c <MX_LPUART1_UART_Init+0x90>)
 8000e1a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e30:	220c      	movs	r2, #12
 8000e32:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e4c:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e4e:	f004 ff71 	bl	8005d34 <HAL_UART_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000e58:	f000 f932 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e60:	f005 fd0c 	bl	800687c <HAL_UARTEx_SetTxFifoThreshold>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000e6a:	f000 f929 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e72:	f005 fd41 	bl	80068f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000e7c:	f000 f920 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_LPUART1_UART_Init+0x88>)
 8000e82:	f005 fcc2 	bl	800680a <HAL_UARTEx_DisableFifoMode>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000e8c:	f000 f918 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
<<<<<<< Updated upstream
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200002ac 	.word	0x200002ac
 8000ec8:	40008000 	.word	0x40008000
 8000ecc:	00033324 	.word	0x00033324

08000ed0 <MX_GPIO_Init>:
=======
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200002ac 	.word	0x200002ac
 8000e98:	40008000 	.word	0x40008000
 8000e9c:	00033324 	.word	0x00033324

08000ea0 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
=======
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 8000ee6:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a26      	ldr	r2, [pc, #152]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a20      	ldr	r2, [pc, #128]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <MX_GPIO_Init+0xb4>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin|BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000f4c:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_GPIO_Init+0xb8>)
 8000f4e:	f000 ffd7 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin|BACKLIGHT_LEDS_Pin;
 8000f52:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <MX_GPIO_Init+0xb8>)
 8000f6c:	f000 fe46 	bl	8001bfc <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_GPIO_Init+0xbc>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <MX_GPIO_Init+0xbc>)
 8000f76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f7a:	6053      	str	r3, [r2, #4]
=======
 8000eb6:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a26      	ldr	r2, [pc, #152]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0320 	and.w	r3, r3, #32
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a1a      	ldr	r2, [pc, #104]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_GPIO_Init+0xb4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin|BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000f1c:	480e      	ldr	r0, [pc, #56]	@ (8000f58 <MX_GPIO_Init+0xb8>)
 8000f1e:	f001 f843 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin|BACKLIGHT_LEDS_Pin;
 8000f22:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <MX_GPIO_Init+0xb8>)
 8000f3c:	f000 feb2 	bl	8001ca4 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_GPIO_Init+0xbc>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <MX_GPIO_Init+0xbc>)
 8000f46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f4a:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	40010000 	.word	0x40010000

08000f90 <StartDefaultTask>:
=======
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	@ 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	40010000 	.word	0x40010000

08000f60 <StartDefaultTask>:
>>>>>>> Stashed changes
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
<<<<<<< Updated upstream
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8000f98:	f00b fdb6 	bl	800cb08 <MX_USB_Device_Init>
=======
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8000f68:	f00c fa5e 	bl	800d428 <MX_USB_Device_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< Updated upstream
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f009 f8e2 	bl	800a166 <osDelay>
 8000fa2:	e7fb      	b.n	8000f9c <StartDefaultTask+0xc>

08000fa4 <startReadVoltageTask>:
=======
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f009 f94e 	bl	800a20e <osDelay>
 8000f72:	e7fb      	b.n	8000f6c <StartDefaultTask+0xc>

08000f74 <startReadVoltageTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadVoltageTask */
void startReadVoltageTask(void *argument)
{
<<<<<<< Updated upstream
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadVoltageTask */
  /* Infinite loop */
  for(;;)
  {
	  LTC2990_Step(&LTC2990_Handle);
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <startReadVoltageTask+0x18>)
 8000fae:	f7ff fb6f 	bl	8000690 <LTC2990_Step>
	  osDelay(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f009 f8d7 	bl	800a166 <osDelay>
	  LTC2990_Step(&LTC2990_Handle);
 8000fb8:	bf00      	nop
 8000fba:	e7f7      	b.n	8000fac <startReadVoltageTask+0x8>
 8000fbc:	2000034c 	.word	0x2000034c

08000fc0 <startBlinkLEDTask>:
=======
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadVoltageTask */
	LTC2990_Init(&LTC2990_Voltage_Handle, &hi2c2, LTC2990_Voltage_I2C_Address);
 8000f7c:	224c      	movs	r2, #76	@ 0x4c
 8000f7e:	490b      	ldr	r1, [pc, #44]	@ (8000fac <startReadVoltageTask+0x38>)
 8000f80:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <startReadVoltageTask+0x3c>)
 8000f82:	f7ff fb33 	bl	80005ec <LTC2990_Init>
  /* Infinite loop */
  for(;;)
  {
	  if(osMutexAcquire(VoltageLTC2990MutexHandle, osWaitForever) == osOK) {
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <startReadVoltageTask+0x40>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f009 f9de 	bl	800a350 <osMutexAcquire>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f5      	bne.n	8000f86 <startReadVoltageTask+0x12>
		  LTC2990_Step(&LTC2990_Voltage_Handle);
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <startReadVoltageTask+0x3c>)
 8000f9c:	f7ff fb7a 	bl	8000694 <LTC2990_Step>
		  osMutexRelease(VoltageLTC2990MutexHandle);
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <startReadVoltageTask+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f009 fa1e 	bl	800a3e6 <osMutexRelease>
	  if(osMutexAcquire(VoltageLTC2990MutexHandle, osWaitForever) == osOK) {
 8000faa:	e7ec      	b.n	8000f86 <startReadVoltageTask+0x12>
 8000fac:	20000258 	.word	0x20000258
 8000fb0:	20000360 	.word	0x20000360
 8000fb4:	20000358 	.word	0x20000358

08000fb8 <startBlinkLEDTask>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBlinkLEDTask */
void startBlinkLEDTask(void *argument)
{
<<<<<<< Updated upstream
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
=======
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN startBlinkLEDTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_SET);
<<<<<<< Updated upstream
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <startBlinkLEDTask+0x30>)
 8000fce:	f000 ff97 	bl	8001f00 <HAL_GPIO_WritePin>
	osDelay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fd6:	f009 f8c6 	bl	800a166 <osDelay>
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <startBlinkLEDTask+0x30>)
 8000fe0:	f000 ff8e 	bl	8001f00 <HAL_GPIO_WritePin>
    osDelay(500);
 8000fe4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fe8:	f009 f8bd 	bl	800a166 <osDelay>
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_SET);
 8000fec:	bf00      	nop
 8000fee:	e7eb      	b.n	8000fc8 <startBlinkLEDTask+0x8>
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4808      	ldr	r0, [pc, #32]	@ (8000fe8 <startBlinkLEDTask+0x30>)
 8000fc6:	f000 ffef 	bl	8001fa8 <HAL_GPIO_WritePin>
	osDelay(500);
 8000fca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fce:	f009 f91e 	bl	800a20e <osDelay>
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <startBlinkLEDTask+0x30>)
 8000fd8:	f000 ffe6 	bl	8001fa8 <HAL_GPIO_WritePin>
    osDelay(500);
 8000fdc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fe0:	f009 f915 	bl	800a20e <osDelay>
	HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin, GPIO_PIN_SET);
 8000fe4:	bf00      	nop
 8000fe6:	e7eb      	b.n	8000fc0 <startBlinkLEDTask+0x8>
 8000fe8:	48000400 	.word	0x48000400

08000fec <startPrintVoltage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintVoltage */
void startPrintVoltage(void *argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPrintVoltage */
  /* Infinite loop */
  for(;;)
  {
	  float voltages[4];
	  LTC2990_Get_Voltage(&LTC2990_Voltage_Handle, voltages);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481d      	ldr	r0, [pc, #116]	@ (8001070 <startPrintVoltage+0x84>)
 8000ffc:	f7ff fbb6 	bl	800076c <LTC2990_Get_Voltage>

	  for (int i = 0; i < 4; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	e02d      	b.n	8001062 <startPrintVoltage+0x76>
		  CDC_Transmit_Print("Voltage %d: %d.%03d V\n", i ,  (int)voltages[i], (int)((voltages[i] - (int)voltages[i]) * 1000));;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	3320      	adds	r3, #32
 800100c:	443b      	add	r3, r7
 800100e:	3b14      	subs	r3, #20
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	3320      	adds	r3, #32
 800101e:	443b      	add	r3, r7
 8001020:	3b14      	subs	r3, #20
 8001022:	ed93 7a00 	vldr	s14, [r3]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	3320      	adds	r3, #32
 800102c:	443b      	add	r3, r7
 800102e:	3b14      	subs	r3, #20
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001040:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001074 <startPrintVoltage+0x88>
 8001044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104c:	ee17 3a90 	vmov	r3, s15
 8001050:	ee16 2a90 	vmov	r2, s13
 8001054:	69f9      	ldr	r1, [r7, #28]
 8001056:	4808      	ldr	r0, [pc, #32]	@ (8001078 <startPrintVoltage+0x8c>)
 8001058:	f7ff fd22 	bl	8000aa0 <CDC_Transmit_Print>
	  for (int i = 0; i < 4; i++) {
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	3301      	adds	r3, #1
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b03      	cmp	r3, #3
 8001066:	ddce      	ble.n	8001006 <startPrintVoltage+0x1a>
	  }
	  osDelay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f009 f8d0 	bl	800a20e <osDelay>
  {
 800106e:	e7c1      	b.n	8000ff4 <startPrintVoltage+0x8>
 8001070:	20000360 	.word	0x20000360
 8001074:	447a0000 	.word	0x447a0000
 8001078:	0800eb2c 	.word	0x0800eb2c

0800107c <startReadCurrent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadCurrent */
void startReadCurrent(void *argument)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadCurrent */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f009 f8c2 	bl	800a20e <osDelay>
 800108a:	e7fb      	b.n	8001084 <startReadCurrent+0x8>

0800108c <startPrintCurrent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintCurrent */
void startPrintCurrent(void *argument)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPrintCurrent */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f009 f8ba 	bl	800a20e <osDelay>
 800109a:	e7fb      	b.n	8001094 <startPrintCurrent+0x8>

0800109c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
=======
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
<<<<<<< Updated upstream
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001006:	f000 fa69 	bl	80014dc <HAL_IncTick>
=======
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ae:	f000 fa69 	bl	8001584 <HAL_IncTick>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< Updated upstream
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40012c00 	.word	0x40012c00

08001018 <Error_Handler>:
=======
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00

080010c0 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
=======
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
=======
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <Error_Handler+0x8>

08001024 <HAL_MspInit>:
=======
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
=======
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_MspInit+0x50>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	4a11      	ldr	r2, [pc, #68]	@ (8001074 <HAL_MspInit+0x50>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6613      	str	r3, [r2, #96]	@ 0x60
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_MspInit+0x50>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_MspInit+0x50>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_MspInit+0x50>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104c:	6593      	str	r3, [r2, #88]	@ 0x58
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_MspInit+0x50>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
=======
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_MspInit+0x50>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	4a11      	ldr	r2, [pc, #68]	@ (800111c <HAL_MspInit+0x50>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_MspInit+0x50>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_MspInit+0x50>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_MspInit+0x50>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_MspInit+0x50>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< Updated upstream
 800105a:	2200      	movs	r2, #0
 800105c:	210f      	movs	r1, #15
 800105e:	f06f 0001 	mvn.w	r0, #1
 8001062:	f000 fb33 	bl	80016cc <HAL_NVIC_SetPriority>
=======
 8001102:	2200      	movs	r2, #0
 8001104:	210f      	movs	r1, #15
 8001106:	f06f 0001 	mvn.w	r0, #1
 800110a:	f000 fb33 	bl	8001774 <HAL_NVIC_SetPriority>
>>>>>>> Stashed changes

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
<<<<<<< Updated upstream
 8001066:	f003 fb2b 	bl	80046c0 <HAL_PWREx_DisableUCPDDeadBattery>
=======
 800110e:	f003 fb2b 	bl	8004768 <HAL_PWREx_DisableUCPDDeadBattery>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_FDCAN_MspInit>:
=======
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_FDCAN_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
<<<<<<< Updated upstream
 8001078:	b580      	push	{r7, lr}
 800107a:	b09e      	sub	sp, #120	@ 0x78
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2250      	movs	r2, #80	@ 0x50
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00c fa81 	bl	800d5a0 <memset>
  if(hfdcan->Instance==FDCAN2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a20      	ldr	r2, [pc, #128]	@ (8001124 <HAL_FDCAN_MspInit+0xac>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d138      	bne.n	800111a <HAL_FDCAN_MspInit+0xa2>
=======
 8001120:	b580      	push	{r7, lr}
 8001122:	b09e      	sub	sp, #120	@ 0x78
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2250      	movs	r2, #80	@ 0x50
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f00c febd 	bl	800dec0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <HAL_FDCAN_MspInit+0xac>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d138      	bne.n	80011c2 <HAL_FDCAN_MspInit+0xa2>
>>>>>>> Stashed changes

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
<<<<<<< Updated upstream
 80010a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80010ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 f871 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80010c4:	f7ff ffa8 	bl	8001018 <Error_Handler>
=======
 8001150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001154:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001156:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800115a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f004 f871 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800116c:	f7ff ffa8 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
<<<<<<< Updated upstream
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_FDCAN_MspInit+0xb0>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <HAL_FDCAN_MspInit+0xb0>)
 80010ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_FDCAN_MspInit+0xb0>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_FDCAN_MspInit+0xb0>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <HAL_FDCAN_MspInit+0xb0>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_FDCAN_MspInit+0xb0>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
=======
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <HAL_FDCAN_MspInit+0xb0>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001174:	4a16      	ldr	r2, [pc, #88]	@ (80011d0 <HAL_FDCAN_MspInit+0xb0>)
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117a:	6593      	str	r3, [r2, #88]	@ 0x58
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_FDCAN_MspInit+0xb0>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_FDCAN_MspInit+0xb0>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118c:	4a10      	ldr	r2, [pc, #64]	@ (80011d0 <HAL_FDCAN_MspInit+0xb0>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_FDCAN_MspInit+0xb0>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
<<<<<<< Updated upstream
 80010f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80010fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800110a:	2309      	movs	r3, #9
 800110c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <HAL_FDCAN_MspInit+0xb4>)
 8001116:	f000 fd71 	bl	8001bfc <HAL_GPIO_Init>
=======
 80011a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80011b2:	2309      	movs	r3, #9
 80011b4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <HAL_FDCAN_MspInit+0xb4>)
 80011be:	f000 fd71 	bl	8001ca4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 800111a:	bf00      	nop
 800111c:	3778      	adds	r7, #120	@ 0x78
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40006800 	.word	0x40006800
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400

08001130 <HAL_I2C_MspInit>:
=======
 80011c2:	bf00      	nop
 80011c4:	3778      	adds	r7, #120	@ 0x78
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40006800 	.word	0x40006800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400

080011d8 <HAL_I2C_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< Updated upstream
 8001130:	b580      	push	{r7, lr}
 8001132:	b09e      	sub	sp, #120	@ 0x78
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2250      	movs	r2, #80	@ 0x50
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f00c fa25 	bl	800d5a0 <memset>
  if(hi2c->Instance==I2C2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1f      	ldr	r2, [pc, #124]	@ (80011d8 <HAL_I2C_MspInit+0xa8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d137      	bne.n	80011d0 <HAL_I2C_MspInit+0xa0>
=======
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09e      	sub	sp, #120	@ 0x78
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2250      	movs	r2, #80	@ 0x50
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00c fe61 	bl	800dec0 <memset>
  if(hi2c->Instance==I2C2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1f      	ldr	r2, [pc, #124]	@ (8001280 <HAL_I2C_MspInit+0xa8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d137      	bne.n	8001278 <HAL_I2C_MspInit+0xa0>
>>>>>>> Stashed changes

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
<<<<<<< Updated upstream
 8001160:	2380      	movs	r3, #128	@ 0x80
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f004 f817 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001178:	f7ff ff4e 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_I2C_MspInit+0xac>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <HAL_I2C_MspInit+0xac>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_I2C_MspInit+0xac>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
=======
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4618      	mov	r0, r3
 8001216:	f004 f817 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001220:	f7ff ff4e 	bl	80010c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_I2C_MspInit+0xac>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001228:	4a16      	ldr	r2, [pc, #88]	@ (8001284 <HAL_I2C_MspInit+0xac>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <HAL_I2C_MspInit+0xac>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< Updated upstream
 8001194:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001198:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011a6:	2304      	movs	r3, #4
 80011a8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f000 fd22 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_I2C_MspInit+0xac>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011bc:	4a07      	ldr	r2, [pc, #28]	@ (80011dc <HAL_I2C_MspInit+0xac>)
 80011be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_I2C_MspInit+0xac>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
=======
 800123c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001240:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001242:	2312      	movs	r3, #18
 8001244:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800124e:	2304      	movs	r3, #4
 8001250:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125c:	f000 fd22 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <HAL_I2C_MspInit+0xac>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_I2C_MspInit+0xac>)
 8001266:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800126a:	6593      	str	r3, [r2, #88]	@ 0x58
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <HAL_I2C_MspInit+0xac>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes

  /* USER CODE END I2C2_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 80011d0:	bf00      	nop
 80011d2:	3778      	adds	r7, #120	@ 0x78
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40005800 	.word	0x40005800
 80011dc:	40021000 	.word	0x40021000

080011e0 <HAL_UART_MspInit>:
=======
 8001278:	bf00      	nop
 800127a:	3778      	adds	r7, #120	@ 0x78
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40005800 	.word	0x40005800
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b09e      	sub	sp, #120	@ 0x78
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2250      	movs	r2, #80	@ 0x50
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00c f9cd 	bl	800d5a0 <memset>
  if(huart->Instance==LPUART1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1f      	ldr	r2, [pc, #124]	@ (8001288 <HAL_UART_MspInit+0xa8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d136      	bne.n	800127e <HAL_UART_MspInit+0x9e>
=======
 8001288:	b580      	push	{r7, lr}
 800128a:	b09e      	sub	sp, #120	@ 0x78
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2250      	movs	r2, #80	@ 0x50
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00c fe09 	bl	800dec0 <memset>
  if(huart->Instance==LPUART1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001330 <HAL_UART_MspInit+0xa8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d136      	bne.n	8001326 <HAL_UART_MspInit+0x9e>
>>>>>>> Stashed changes

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
<<<<<<< Updated upstream
 8001210:	2320      	movs	r3, #32
 8001212:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4618      	mov	r0, r3
 800121e:	f003 ffbf 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001228:	f7ff fef6 	bl	8001018 <Error_Handler>
=======
 80012b8:	2320      	movs	r3, #32
 80012ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 ffbf 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f7ff fef6 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
<<<<<<< Updated upstream
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_UART_MspInit+0xac>)
 800122e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001230:	4a16      	ldr	r2, [pc, #88]	@ (800128c <HAL_UART_MspInit+0xac>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_UART_MspInit+0xac>)
 800123a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_UART_MspInit+0xac>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	4a10      	ldr	r2, [pc, #64]	@ (800128c <HAL_UART_MspInit+0xac>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_UART_MspInit+0xac>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
=======
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_UART_MspInit+0xac>)
 80012d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d8:	4a16      	ldr	r2, [pc, #88]	@ (8001334 <HAL_UART_MspInit+0xac>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_UART_MspInit+0xac>)
 80012e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_UART_MspInit+0xac>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <HAL_UART_MspInit+0xac>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <HAL_UART_MspInit+0xac>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< Updated upstream
 800125c:	230c      	movs	r3, #12
 800125e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800126c:	230c      	movs	r3, #12
 800126e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f000 fcbf 	bl	8001bfc <HAL_GPIO_Init>
=======
 8001304:	230c      	movs	r3, #12
 8001306:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001314:	230c      	movs	r3, #12
 8001316:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001322:	f000 fcbf 	bl	8001ca4 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 800127e:	bf00      	nop
 8001280:	3778      	adds	r7, #120	@ 0x78
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40008000 	.word	0x40008000
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_InitTick>:
=======
 8001326:	bf00      	nop
 8001328:	3778      	adds	r7, #120	@ 0x78
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40008000 	.word	0x40008000
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_InitTick>:
>>>>>>> Stashed changes
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	@ 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 80012a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <HAL_InitTick+0xc4>)
 80012a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001354 <HAL_InitTick+0xc4>)
 80012a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ac:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <HAL_InitTick+0xc4>)
 80012ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b8:	f107 020c 	add.w	r2, r7, #12
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fef4 	bl	80050b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012c8:	f003 fedc 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 80012cc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <HAL_InitTick+0xc8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	3b01      	subs	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <HAL_InitTick+0xcc>)
 80012de:	4a20      	ldr	r2, [pc, #128]	@ (8001360 <HAL_InitTick+0xd0>)
 80012e0:	601a      	str	r2, [r3, #0]
=======
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <HAL_InitTick+0xc4>)
 800134a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134c:	4a2b      	ldr	r2, [pc, #172]	@ (80013fc <HAL_InitTick+0xc4>)
 800134e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001352:	6613      	str	r3, [r2, #96]	@ 0x60
 8001354:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <HAL_InitTick+0xc4>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001360:	f107 020c 	add.w	r2, r7, #12
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fef4 	bl	8005158 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001370:	f003 fedc 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8001374:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <HAL_InitTick+0xc8>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3b01      	subs	r3, #1
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001384:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <HAL_InitTick+0xcc>)
 8001386:	4a20      	ldr	r2, [pc, #128]	@ (8001408 <HAL_InitTick+0xd0>)
 8001388:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< Updated upstream
 80012e2:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <HAL_InitTick+0xcc>)
 80012e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <HAL_InitTick+0xcc>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_InitTick+0xcc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_InitTick+0xcc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80012fc:	4817      	ldr	r0, [pc, #92]	@ (800135c <HAL_InitTick+0xcc>)
 80012fe:	f004 f98b 	bl	8005618 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130c:	2b00      	cmp	r3, #0
 800130e:	d11b      	bne.n	8001348 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001310:	4812      	ldr	r0, [pc, #72]	@ (800135c <HAL_InitTick+0xcc>)
 8001312:	f004 f9e3 	bl	80056dc <HAL_TIM_Base_Start_IT>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800131c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001320:	2b00      	cmp	r3, #0
 8001322:	d111      	bne.n	8001348 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001324:	2019      	movs	r0, #25
 8001326:	f000 f9eb 	bl	8001700 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d808      	bhi.n	8001342 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	2019      	movs	r0, #25
 8001336:	f000 f9c9 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_InitTick+0xd4>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e002      	b.n	8001348 <HAL_InitTick+0xb8>
=======
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <HAL_InitTick+0xcc>)
 800138c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001390:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001392:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <HAL_InitTick+0xcc>)
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_InitTick+0xcc>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_InitTick+0xcc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80013a4:	4817      	ldr	r0, [pc, #92]	@ (8001404 <HAL_InitTick+0xcc>)
 80013a6:	f004 f98b 	bl	80056c0 <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80013b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d11b      	bne.n	80013f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013b8:	4812      	ldr	r0, [pc, #72]	@ (8001404 <HAL_InitTick+0xcc>)
 80013ba:	f004 f9e3 	bl	8005784 <HAL_TIM_Base_Start_IT>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d111      	bne.n	80013f0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013cc:	2019      	movs	r0, #25
 80013ce:	f000 f9eb 	bl	80017a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d808      	bhi.n	80013ea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	2019      	movs	r0, #25
 80013de:	f000 f9c9 	bl	8001774 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e2:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <HAL_InitTick+0xd4>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e002      	b.n	80013f0 <HAL_InitTick+0xb8>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 8001342:	2301      	movs	r3, #1
 8001344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
=======
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
>>>>>>> Stashed changes
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< Updated upstream
 8001348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800134c:	4618      	mov	r0, r3
 800134e:	3730      	adds	r7, #48	@ 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	431bde83 	.word	0x431bde83
 800135c:	20000364 	.word	0x20000364
 8001360:	40012c00 	.word	0x40012c00
 8001364:	20000004 	.word	0x20000004

08001368 <NMI_Handler>:
=======
 80013f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3730      	adds	r7, #48	@ 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	431bde83 	.word	0x431bde83
 8001404:	20000378 	.word	0x20000378
 8001408:	40012c00 	.word	0x40012c00
 800140c:	20000004 	.word	0x20000004

08001410 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
=======
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:
=======
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <NMI_Handler+0x4>

08001418 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
=======
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:
=======
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
=======
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:
=======
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <MemManage_Handler+0x4>

08001428 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
=======
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:
=======
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
=======
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <DebugMon_Handler>:
=======
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <UsageFault_Handler+0x4>

08001438 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
=======
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <USB_LP_IRQHandler>:
=======
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <USB_LP_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
<<<<<<< Updated upstream
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
=======
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
<<<<<<< Updated upstream
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <USB_LP_IRQHandler+0x10>)
 80013a6:	f001 fcd6 	bl	8002d56 <HAL_PCD_IRQHandler>
=======
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <USB_LP_IRQHandler+0x10>)
 800144e:	f001 fcd6 	bl	8002dfe <HAL_PCD_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
<<<<<<< Updated upstream
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20007024 	.word	0x20007024

080013b4 <TIM1_UP_TIM16_IRQHandler>:
=======
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20009f18 	.word	0x20009f18

0800145c <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< Updated upstream
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
=======
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< Updated upstream
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013ba:	f004 f9ff 	bl	80057bc <HAL_TIM_IRQHandler>
=======
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001462:	f004 f9ff 	bl	8005864 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< Updated upstream
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000364 	.word	0x20000364

080013c8 <_sbrk>:
=======
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000378 	.word	0x20000378

08001470 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
=======
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 80013d0:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
=======
 8001478:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
=======
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f00c f938 	bl	800d66c <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2001c000 	.word	0x2001c000
 8001428:	00000400 	.word	0x00000400
 800142c:	200003b0 	.word	0x200003b0
 8001430:	20007668 	.word	0x20007668

08001434 <SystemInit>:
=======
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f00c fd74 	bl	800df8c <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2001c000 	.word	0x2001c000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	200003c4 	.word	0x200003c4
 80014d8:	2000a560 	.word	0x2000a560

080014dc <SystemInit>:
>>>>>>> Stashed changes
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:
=======
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:
>>>>>>> Stashed changes

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
 8001458:	480d      	ldr	r0, [pc, #52]	@ (8001490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800145c:	f7ff ffea 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <LoopForever+0x6>)
  ldr r1, =_edata
 8001462:	490d      	ldr	r1, [pc, #52]	@ (8001498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001464:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <LoopForever+0xe>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001478:	4c0a      	ldr	r4, [pc, #40]	@ (80014a4 <LoopForever+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001486:	f00c f8f7 	bl	800d678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148a:	f7ff fb23 	bl	8000ad4 <main>

0800148e <LoopForever>:

LoopForever:
    b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   r0, =_estack
 8001490:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800149c:	0800e320 	.word	0x0800e320
  ldr r2, =_sbss
 80014a0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80014a4:	20007668 	.word	0x20007668

080014a8 <ADC1_2_IRQHandler>:
=======
 8001500:	480d      	ldr	r0, [pc, #52]	@ (8001538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001502:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopForever+0x6>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopForever+0xe>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopForever+0x16>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f00c fd33 	bl	800df98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001532:	f7ff fad1 	bl	8000ad8 <main>

08001536 <LoopForever>:

LoopForever:
    b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   r0, =_estack
 8001538:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001544:	0800ed20 	.word	0x0800ed20
  ldr r2, =_sbss
 8001548:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800154c:	2000a55c 	.word	0x2000a55c

08001550 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< Updated upstream
 80014a8:	e7fe      	b.n	80014a8 <ADC1_2_IRQHandler>

080014aa <HAL_Init>:
=======
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>

08001552 <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	71fb      	strb	r3, [r7, #7]
=======
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f8fe 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fee8 	bl	8001290 <HAL_InitTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	e001      	b.n	80014d0 <HAL_Init+0x26>
=======
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f8fe 	bl	800175e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001562:	200f      	movs	r0, #15
 8001564:	f7ff fee8 	bl	8001338 <HAL_InitTick>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e001      	b.n	8001578 <HAL_Init+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 80014cc:	f7ff fdaa 	bl	8001024 <HAL_MspInit>
=======
 8001574:	f7ff fdaa 	bl	80010cc <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 80014d0:	79fb      	ldrb	r3, [r7, #7]

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_IncTick>:
=======
 8001578:	79fb      	ldrb	r3, [r7, #7]

}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_IncTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_IncTick+0x1c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_IncTick+0x20>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <HAL_IncTick+0x1c>)
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	200003b4 	.word	0x200003b4
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_GetTick>:
=======
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_IncTick+0x1c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_IncTick+0x20>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4413      	add	r3, r2
 8001592:	4a03      	ldr	r2, [pc, #12]	@ (80015a0 <HAL_IncTick+0x1c>)
 8001594:	6013      	str	r3, [r2, #0]
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	200003c8 	.word	0x200003c8
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200003b4 	.word	0x200003b4

08001518 <HAL_Delay>:
=======
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200003c8 	.word	0x200003c8

080015c0 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d004      	beq.n	800153c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_Delay+0x40>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153c:	bf00      	nop
 800153e:	f7ff ffdf 	bl	8001500 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	429a      	cmp	r2, r3
 800154c:	d8f7      	bhi.n	800153e <HAL_Delay+0x26>
  {
  }
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000008 	.word	0x20000008

0800155c <__NVIC_SetPriorityGrouping>:
=======
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d004      	beq.n	80015e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_Delay+0x40>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e4:	bf00      	nop
 80015e6:	f7ff ffdf 	bl	80015a8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d8f7      	bhi.n	80015e6 <HAL_Delay+0x26>
  {
  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000008 	.word	0x20000008

08001604 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
=======
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
=======
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	@ (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
=======
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	@ (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	@ (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	@ (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
=======
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	@ (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
=======
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_NVIC_SetPriorityGrouping>:
=======
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	@ 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
=======
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff4c 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_SetPriority>:
=======
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff4c 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
=======
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80016da:	f7ff ff63 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f7ff ffb3 	bl	8001650 <NVIC_EncodePriority>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff82 	bl	80015fc <__NVIC_SetPriority>
}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_NVIC_EnableIRQ>:
=======
 8001782:	f7ff ff63 	bl	800164c <__NVIC_GetPriorityGrouping>
 8001786:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f7ff ffb3 	bl	80016f8 <NVIC_EncodePriority>
 8001792:	4602      	mov	r2, r0
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff82 	bl	80016a4 <__NVIC_SetPriority>
}
 80017a0:	bf00      	nop
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
=======
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff56 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_FDCAN_Init>:
=======
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff56 	bl	8001668 <__NVIC_EnableIRQ>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_FDCAN_Init>:
>>>>>>> Stashed changes
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< Updated upstream
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
=======
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
<<<<<<< Updated upstream
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e147      	b.n	80019be <HAL_FDCAN_Init+0x2a2>
=======
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e147      	b.n	8001a66 <HAL_FDCAN_Init+0x2a2>
>>>>>>> Stashed changes

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
<<<<<<< Updated upstream
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fc98 	bl	8001078 <HAL_FDCAN_MspInit>
=======
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fc98 	bl	8001120 <HAL_FDCAN_MspInit>
>>>>>>> Stashed changes
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
<<<<<<< Updated upstream
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0210 	bic.w	r2, r2, #16
 8001756:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001758:	f7ff fed2 	bl	8001500 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800175e:	e012      	b.n	8001786 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001760:	f7ff fece 	bl	8001500 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b0a      	cmp	r3, #10
 800176c:	d90b      	bls.n	8001786 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2203      	movs	r2, #3
 800177e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e11b      	b.n	80019be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b08      	cmp	r3, #8
 8001792:	d0e5      	beq.n	8001760 <HAL_FDCAN_Init+0x44>
=======
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0210 	bic.w	r2, r2, #16
 80017fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001800:	f7ff fed2 	bl	80015a8 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001806:	e012      	b.n	800182e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001808:	f7ff fece 	bl	80015a8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d90b      	bls.n	800182e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e11b      	b.n	8001a66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b08      	cmp	r3, #8
 800183a:	d0e5      	beq.n	8001808 <HAL_FDCAN_Init+0x44>
>>>>>>> Stashed changes
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
<<<<<<< Updated upstream
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a4:	f7ff feac 	bl	8001500 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017aa:	e012      	b.n	80017d2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017ac:	f7ff fea8 	bl	8001500 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d90b      	bls.n	80017d2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0f5      	b.n	80019be <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0e5      	beq.n	80017ac <HAL_FDCAN_Init+0x90>
=======
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699a      	ldr	r2, [r3, #24]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800184c:	f7ff feac 	bl	80015a8 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001852:	e012      	b.n	800187a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001854:	f7ff fea8 	bl	80015a8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b0a      	cmp	r3, #10
 8001860:	d90b      	bls.n	800187a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0f5      	b.n	8001a66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0e5      	beq.n	8001854 <HAL_FDCAN_Init+0x90>
>>>>>>> Stashed changes
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
<<<<<<< Updated upstream
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0202 	orr.w	r2, r2, #2
 80017ee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a74      	ldr	r2, [pc, #464]	@ (80019c8 <HAL_FDCAN_Init+0x2ac>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d103      	bne.n	8001802 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80017fa:	4a74      	ldr	r2, [pc, #464]	@ (80019cc <HAL_FDCAN_Init+0x2b0>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	6013      	str	r3, [r2, #0]
=======
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0202 	orr.w	r2, r2, #2
 8001896:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a74      	ldr	r2, [pc, #464]	@ (8001a70 <HAL_FDCAN_Init+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d103      	bne.n	80018aa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80018a2:	4a74      	ldr	r2, [pc, #464]	@ (8001a74 <HAL_FDCAN_Init+0x2b0>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
<<<<<<< Updated upstream
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7c1b      	ldrb	r3, [r3, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001818:	619a      	str	r2, [r3, #24]
 800181a:	e007      	b.n	800182c <HAL_FDCAN_Init+0x110>
=======
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7c1b      	ldrb	r3, [r3, #16]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	e007      	b.n	80018d4 <HAL_FDCAN_Init+0x110>
>>>>>>> Stashed changes
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
<<<<<<< Updated upstream
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800182a:	619a      	str	r2, [r3, #24]
=======
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018d2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
<<<<<<< Updated upstream
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7c5b      	ldrb	r3, [r3, #17]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d108      	bne.n	8001846 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e007      	b.n	8001856 <HAL_FDCAN_Init+0x13a>
=======
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7c5b      	ldrb	r3, [r3, #17]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018ea:	619a      	str	r2, [r3, #24]
 80018ec:	e007      	b.n	80018fe <HAL_FDCAN_Init+0x13a>
>>>>>>> Stashed changes
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
<<<<<<< Updated upstream
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001854:	619a      	str	r2, [r3, #24]
=======
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018fc:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
<<<<<<< Updated upstream
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7c9b      	ldrb	r3, [r3, #18]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800186c:	619a      	str	r2, [r3, #24]
 800186e:	e007      	b.n	8001880 <HAL_FDCAN_Init+0x164>
=======
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7c9b      	ldrb	r3, [r3, #18]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001914:	619a      	str	r2, [r3, #24]
 8001916:	e007      	b.n	8001928 <HAL_FDCAN_Init+0x164>
>>>>>>> Stashed changes
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
<<<<<<< Updated upstream
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800187e:	619a      	str	r2, [r3, #24]
=======
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001926:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
<<<<<<< Updated upstream
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699a      	ldr	r2, [r3, #24]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80018a4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0210 	bic.w	r2, r2, #16
 80018b4:	611a      	str	r2, [r3, #16]
=======
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800194c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0210 	bic.w	r2, r2, #16
 800195c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
<<<<<<< Updated upstream
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0204 	orr.w	r2, r2, #4
 80018cc:	619a      	str	r2, [r3, #24]
 80018ce:	e02c      	b.n	800192a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d028      	beq.n	800192a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d01c      	beq.n	800191a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018ee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0210 	orr.w	r2, r2, #16
 80018fe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d110      	bne.n	800192a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	619a      	str	r2, [r3, #24]
 8001918:	e007      	b.n	800192a <HAL_FDCAN_Init+0x20e>
=======
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d108      	bne.n	8001978 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0204 	orr.w	r2, r2, #4
 8001974:	619a      	str	r2, [r3, #24]
 8001976:	e02c      	b.n	80019d2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d028      	beq.n	80019d2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d01c      	beq.n	80019c2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001996:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0210 	orr.w	r2, r2, #16
 80019a6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d110      	bne.n	80019d2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	619a      	str	r2, [r3, #24]
 80019c0:	e007      	b.n	80019d2 <HAL_FDCAN_Init+0x20e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
<<<<<<< Updated upstream
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0220 	orr.w	r2, r2, #32
 8001928:	619a      	str	r2, [r3, #24]
=======
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
<<<<<<< Updated upstream
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	3b01      	subs	r3, #1
 8001930:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	3b01      	subs	r3, #1
 8001938:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800193a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001942:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	3b01      	subs	r3, #1
 800194c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001952:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001954:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800195e:	d115      	bne.n	800198c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	3b01      	subs	r3, #1
 800196c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800196e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	3b01      	subs	r3, #1
 8001976:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001978:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	3b01      	subs	r3, #1
 8001982:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001988:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800198a:	60da      	str	r2, [r3, #12]
=======
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	3b01      	subs	r3, #1
 80019e0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019e2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80019ea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80019fa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80019fc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a06:	d115      	bne.n	8001a34 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a12:	3b01      	subs	r3, #1
 8001a14:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a16:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001a20:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001a30:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001a32:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
<<<<<<< Updated upstream
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8c8 	bl	8001b38 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40006400 	.word	0x40006400
 80019cc:	40006500 	.word	0x40006500

080019d0 <HAL_FDCAN_ConfigFilter>:
=======
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8c8 	bl	8001be0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40006400 	.word	0x40006400
 8001a74:	40006500 	.word	0x40006500

08001a78 <HAL_FDCAN_ConfigFilter>:
>>>>>>> Stashed changes
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< Updated upstream
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
=======
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
<<<<<<< Updated upstream
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019e0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d002      	beq.n	80019ee <HAL_FDCAN_ConfigFilter+0x1e>
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d13d      	bne.n	8001a6a <HAL_FDCAN_ConfigFilter+0x9a>
=======
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a88:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d002      	beq.n	8001a96 <HAL_FDCAN_ConfigFilter+0x1e>
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d13d      	bne.n	8001b12 <HAL_FDCAN_ConfigFilter+0x9a>
>>>>>>> Stashed changes
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
<<<<<<< Updated upstream
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_FDCAN_ConfigFilter+0x5a>
=======
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d119      	bne.n	8001ad2 <HAL_FDCAN_ConfigFilter+0x5a>
>>>>>>> Stashed changes
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
<<<<<<< Updated upstream
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a02:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001a0a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e01d      	b.n	8001a66 <HAL_FDCAN_ConfigFilter+0x96>
=======
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001aaa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001ab2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e01d      	b.n	8001b0e <HAL_FDCAN_ConfigFilter+0x96>
>>>>>>> Stashed changes
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
<<<<<<< Updated upstream
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	075a      	lsls	r2, r3, #29
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	079a      	lsls	r2, r3, #30
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	601a      	str	r2, [r3, #0]
=======
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	075a      	lsls	r2, r3, #29
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	079a      	lsls	r2, r3, #30
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3304      	adds	r3, #4
 8001b06:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< Updated upstream
 8001a66:	2300      	movs	r3, #0
 8001a68:	e006      	b.n	8001a78 <HAL_FDCAN_ConfigFilter+0xa8>
=======
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e006      	b.n	8001b20 <HAL_FDCAN_ConfigFilter+0xa8>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
<<<<<<< Updated upstream
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6e:	f043 0202 	orr.w	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_FDCAN_ConfigGlobalFilter>:
=======
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b16:	f043 0202 	orr.w	r2, r3, #2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
  }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_FDCAN_ConfigGlobalFilter>:
>>>>>>> Stashed changes
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
<<<<<<< Updated upstream
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
=======
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
<<<<<<< Updated upstream
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d116      	bne.n	8001acc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aa6:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	011a      	lsls	r2, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
=======
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d116      	bne.n	8001b74 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b4e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	011a      	lsls	r2, r3, #4
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	431a      	orrs	r2, r3
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
>>>>>>> Stashed changes
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
<<<<<<< Updated upstream
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e006      	b.n	8001ada <HAL_FDCAN_ConfigGlobalFilter+0x56>
=======
 8001b70:	2300      	movs	r3, #0
 8001b72:	e006      	b.n	8001b82 <HAL_FDCAN_ConfigGlobalFilter+0x56>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
<<<<<<< Updated upstream
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	f043 0204 	orr.w	r2, r3, #4
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
  }
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_FDCAN_Start>:
=======
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
  }
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_FDCAN_Start>:
>>>>>>> Stashed changes
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< Updated upstream
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d110      	bne.n	8001b1c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699a      	ldr	r2, [r3, #24]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e006      	b.n	8001b2a <HAL_FDCAN_Start+0x44>
=======
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d110      	bne.n	8001bc4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699a      	ldr	r2, [r3, #24]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e006      	b.n	8001bd2 <HAL_FDCAN_Start+0x44>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
<<<<<<< Updated upstream
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
  }
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <FDCAN_CalcultateRamBlockAddresses>:
=======
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <FDCAN_CalcultateRamBlockAddresses>:
>>>>>>> Stashed changes
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
<<<<<<< Updated upstream
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001b42:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d103      	bne.n	8001b56 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001b54:	60bb      	str	r3, [r7, #8]
=======
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001be8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c9c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001bea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d103      	bne.n	8001bfe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bfc:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
<<<<<<< Updated upstream
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b64:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6c:	041a      	lsls	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b8a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b92:	061a      	lsls	r2, r3, #24
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e005      	b.n	8001bd8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3f3      	bcc.n	8001bcc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	4000a400 	.word	0x4000a400
 8001bf8:	40006800 	.word	0x40006800

08001bfc <HAL_GPIO_Init>:
=======
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c0c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c32:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3a:	061a      	lsls	r2, r3, #24
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e005      	b.n	8001c80 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3f3      	bcc.n	8001c74 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	4000a400 	.word	0x4000a400
 8001ca0:	40006800 	.word	0x40006800

08001ca4 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
=======
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
<<<<<<< Updated upstream
 8001c0a:	e15a      	b.n	8001ec2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 814c 	beq.w	8001ebc <HAL_GPIO_Init+0x2c0>
=======
 8001cb2:	e15a      	b.n	8001f6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 814c 	beq.w	8001f64 <HAL_GPIO_Init+0x2c0>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< Updated upstream
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa2>
=======
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d005      	beq.n	8001ce4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0xde>
=======
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 0201 	and.w	r2, r3, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d017      	beq.n	8001d82 <HAL_GPIO_Init+0xde>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]
=======
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d123      	bne.n	8001d2e <HAL_GPIO_Init+0x132>
=======
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	6939      	ldr	r1, [r7, #16]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	601a      	str	r2, [r3, #0]
=======
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80a6 	beq.w	8001ebc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee0 <HAL_GPIO_Init+0x2e4>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d74:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee0 <HAL_GPIO_Init+0x2e4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d7c:	4b58      	ldr	r3, [pc, #352]	@ (8001ee0 <HAL_GPIO_Init+0x2e4>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d88:	4a56      	ldr	r2, [pc, #344]	@ (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001db2:	d01f      	beq.n	8001df4 <HAL_GPIO_Init+0x1f8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <HAL_GPIO_Init+0x2ec>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d019      	beq.n	8001df0 <HAL_GPIO_Init+0x1f4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4b      	ldr	r2, [pc, #300]	@ (8001eec <HAL_GPIO_Init+0x2f0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x1f0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef0 <HAL_GPIO_Init+0x2f4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1ec>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a49      	ldr	r2, [pc, #292]	@ (8001ef4 <HAL_GPIO_Init+0x2f8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1e8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a48      	ldr	r2, [pc, #288]	@ (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1e4>
 8001ddc:	2305      	movs	r3, #5
 8001dde:	e00a      	b.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001de0:	2306      	movs	r3, #6
 8001de2:	e008      	b.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001de4:	2304      	movs	r3, #4
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001df4:	2300      	movs	r3, #0
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e06:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e14:	4b39      	ldr	r3, [pc, #228]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e38:	4a30      	ldr	r2, [pc, #192]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e62:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e68:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb6:	4a11      	ldr	r2, [pc, #68]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6013      	str	r3, [r2, #0]
=======
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a6 	beq.w	8001f64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	4b5b      	ldr	r3, [pc, #364]	@ (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e24:	4b58      	ldr	r3, [pc, #352]	@ (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e30:	4a56      	ldr	r2, [pc, #344]	@ (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e5a:	d01f      	beq.n	8001e9c <HAL_GPIO_Init+0x1f8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d019      	beq.n	8001e98 <HAL_GPIO_Init+0x1f4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4b      	ldr	r2, [pc, #300]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_GPIO_Init+0x1f0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f98 <HAL_GPIO_Init+0x2f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_GPIO_Init+0x2f8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_GPIO_Init+0x2fc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_GPIO_Init+0x1e4>
 8001e84:	2305      	movs	r3, #5
 8001e86:	e00a      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e88:	2306      	movs	r3, #6
 8001e8a:	e008      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e90:	2303      	movs	r3, #3
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1fa>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eae:	4937      	ldr	r1, [pc, #220]	@ (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ebc:	4b39      	ldr	r3, [pc, #228]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ee0:	4a30      	ldr	r2, [pc, #192]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f0a:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f34:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5e:	4a11      	ldr	r2, [pc, #68]	@ (8001fa4 <HAL_GPIO_Init+0x300>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f ae9d 	bne.w	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	48000400 	.word	0x48000400
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	48000c00 	.word	0x48000c00
 8001ef4:	48001000 	.word	0x48001000
 8001ef8:	48001400 	.word	0x48001400
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_GPIO_WritePin>:
=======
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f ae9d 	bne.w	8001cb4 <HAL_GPIO_Init+0x10>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000800 	.word	0x48000800
 8001f98:	48000c00 	.word	0x48000c00
 8001f9c:	48001000 	.word	0x48001000
 8001fa0:	48001400 	.word	0x48001400
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
=======
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
=======
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_I2C_Init>:
=======
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_I2C_Init>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e08d      	b.n	800205e <HAL_I2C_Init+0x12e>
=======
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e08d      	b.n	8002106 <HAL_I2C_Init+0x12e>
>>>>>>> Stashed changes
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< Updated upstream
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< Updated upstream
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff f8ea 	bl	8001130 <HAL_I2C_MspInit>
=======
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff f8ea 	bl	80011d8 <HAL_I2C_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
=======
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	@ 0x24
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< Updated upstream
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f80:	611a      	str	r2, [r3, #16]
=======
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002028:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< Updated upstream
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e006      	b.n	8001fb8 <HAL_I2C_Init+0x88>
=======
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002038:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e006      	b.n	8002060 <HAL_I2C_Init+0x88>
>>>>>>> Stashed changes
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< Updated upstream
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fb6:	609a      	str	r2, [r3, #8]
=======
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800205e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< Updated upstream
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d108      	bne.n	8001fd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	e007      	b.n	8001fe2 <HAL_I2C_Init+0xb2>
=======
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d108      	bne.n	800207a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	e007      	b.n	800208a <HAL_I2C_Init+0xb2>
>>>>>>> Stashed changes
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
<<<<<<< Updated upstream
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff4:	6053      	str	r3, [r2, #4]
=======
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002088:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800209c:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< Updated upstream
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	60da      	str	r2, [r3, #12]
=======
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< Updated upstream
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69d9      	ldr	r1, [r3, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_I2C_Mem_Write>:
=======
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69d9      	ldr	r1, [r3, #28]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_I2C_Mem_Write>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	817b      	strh	r3, [r7, #10]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
=======
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4603      	mov	r3, r0
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	460b      	mov	r3, r1
 8002124:	813b      	strh	r3, [r7, #8]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b20      	cmp	r3, #32
 800208c:	f040 80f9 	bne.w	8002282 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_I2C_Mem_Write+0x34>
 8002096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0ed      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
=======
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b20      	cmp	r3, #32
 8002134:	f040 80f9 	bne.w	800232a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_I2C_Mem_Write+0x34>
 800213e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0ed      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Mem_Write+0x4e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0e6      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020be:	f7ff fa1f 	bl	8001500 <HAL_GetTick>
 80020c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2319      	movs	r3, #25
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fac3 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0d1      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2221      	movs	r2, #33	@ 0x21
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	@ 0x40
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002108:	88f8      	ldrh	r0, [r7, #6]
 800210a:	893a      	ldrh	r2, [r7, #8]
 800210c:	8979      	ldrh	r1, [r7, #10]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	4603      	mov	r3, r0
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f9d3 	bl	80024c4 <I2C_RequestMemoryWrite>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0a9      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
=======
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_I2C_Mem_Write+0x4e>
 800215a:	2302      	movs	r3, #2
 800215c:	e0e6      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002166:	f7ff fa1f 	bl	80015a8 <HAL_GetTick>
 800216a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2319      	movs	r3, #25
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fac3 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d1      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2221      	movs	r2, #33	@ 0x21
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2240      	movs	r2, #64	@ 0x40
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021b0:	88f8      	ldrh	r0, [r7, #6]
 80021b2:	893a      	ldrh	r2, [r7, #8]
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4603      	mov	r3, r0
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f9d3 	bl	800256c <I2C_RequestMemoryWrite>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0a9      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2bff      	cmp	r3, #255	@ 0xff
 8002138:	d90e      	bls.n	8002158 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	22ff      	movs	r2, #255	@ 0xff
 800213e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fc47 	bl	80029e4 <I2C_TransferConfig>
 8002156:	e00f      	b.n	8002178 <HAL_I2C_Mem_Write+0x110>
=======
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2bff      	cmp	r3, #255	@ 0xff
 80021e0:	d90e      	bls.n	8002200 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22ff      	movs	r2, #255	@ 0xff
 80021e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	8979      	ldrh	r1, [r7, #10]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fc47 	bl	8002a8c <I2C_TransferConfig>
 80021fe:	e00f      	b.n	8002220 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	b2da      	uxtb	r2, r3
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fc36 	bl	80029e4 <I2C_TransferConfig>
=======
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220e:	b2da      	uxtb	r2, r3
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	2300      	movs	r3, #0
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fc36 	bl	8002a8c <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fac6 	bl	800270e <I2C_WaitOnTXISFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e07b      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
=======
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fac6 	bl	80027b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e07b      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
<<<<<<< Updated upstream
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d034      	beq.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d130      	bne.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fa3f 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04d      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2bff      	cmp	r3, #255	@ 0xff
 80021f0:	d90e      	bls.n	8002210 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	22ff      	movs	r2, #255	@ 0xff
 80021f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fbeb 	bl	80029e4 <I2C_TransferConfig>
 800220e:	e00f      	b.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
=======
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d034      	beq.n	80022d8 <HAL_I2C_Mem_Write+0x1c8>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	d130      	bne.n	80022d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	2200      	movs	r2, #0
 800227e:	2180      	movs	r1, #128	@ 0x80
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fa3f 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e04d      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	2bff      	cmp	r3, #255	@ 0xff
 8002298:	d90e      	bls.n	80022b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	22ff      	movs	r2, #255	@ 0xff
 800229e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	8979      	ldrh	r1, [r7, #10]
 80022a8:	2300      	movs	r3, #0
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fbeb 	bl	8002a8c <I2C_TransferConfig>
 80022b6:	e00f      	b.n	80022d8 <HAL_I2C_Mem_Write+0x1c8>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fbda 	bl	80029e4 <I2C_TransferConfig>
=======
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	8979      	ldrh	r1, [r7, #10]
 80022ca:	2300      	movs	r3, #0
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fbda 	bl	8002a8c <I2C_TransferConfig>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d19e      	bne.n	8002178 <HAL_I2C_Mem_Write+0x110>
=======
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d19e      	bne.n	8002220 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 faac 	bl	800279c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e01a      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
=======
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 faac 	bl	8002844 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e01a      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <HAL_I2C_Mem_Write+0x224>)
 8002262:	400b      	ands	r3, r1
 8002264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
=======
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2220      	movs	r2, #32
 80022fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_I2C_Mem_Write+0x224>)
 800230a:	400b      	ands	r3, r1
 800230c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002282:	2302      	movs	r3, #2
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	fe00e800 	.word	0xfe00e800

08002290 <HAL_I2C_Mem_Read>:
=======
 800232a:	2302      	movs	r3, #2
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	fe00e800 	.word	0xfe00e800

08002338 <HAL_I2C_Mem_Read>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	817b      	strh	r3, [r7, #10]
 80022a2:	460b      	mov	r3, r1
 80022a4:	813b      	strh	r3, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
=======
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	817b      	strh	r3, [r7, #10]
 800234a:	460b      	mov	r3, r1
 800234c:	813b      	strh	r3, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	f040 80fd 	bne.w	80024b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_I2C_Mem_Read+0x34>
 80022be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0f1      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
=======
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b20      	cmp	r3, #32
 800235c:	f040 80fd 	bne.w	800255a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_I2C_Mem_Read+0x34>
 8002366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002372:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0f1      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Mem_Read+0x4e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0ea      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e6:	f7ff f90b 	bl	8001500 <HAL_GetTick>
 80022ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2319      	movs	r3, #25
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f9af 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d5      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2222      	movs	r2, #34	@ 0x22
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2240      	movs	r2, #64	@ 0x40
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002330:	88f8      	ldrh	r0, [r7, #6]
 8002332:	893a      	ldrh	r2, [r7, #8]
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f913 	bl	800256c <I2C_RequestMemoryRead>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0ad      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
=======
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Mem_Read+0x4e>
 8002382:	2302      	movs	r3, #2
 8002384:	e0ea      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800238e:	f7ff f90b 	bl	80015a8 <HAL_GetTick>
 8002392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2319      	movs	r3, #25
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f9af 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d5      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2222      	movs	r2, #34	@ 0x22
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2240      	movs	r2, #64	@ 0x40
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d8:	88f8      	ldrh	r0, [r7, #6]
 80023da:	893a      	ldrh	r2, [r7, #8]
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4603      	mov	r3, r0
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f913 	bl	8002614 <I2C_RequestMemoryRead>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0ad      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	2bff      	cmp	r3, #255	@ 0xff
 8002360:	d90e      	bls.n	8002380 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	22ff      	movs	r2, #255	@ 0xff
 8002366:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236c:	b2da      	uxtb	r2, r3
 800236e:	8979      	ldrh	r1, [r7, #10]
 8002370:	4b52      	ldr	r3, [pc, #328]	@ (80024bc <HAL_I2C_Mem_Read+0x22c>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fb33 	bl	80029e4 <I2C_TransferConfig>
 800237e:	e00f      	b.n	80023a0 <HAL_I2C_Mem_Read+0x110>
=======
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	2bff      	cmp	r3, #255	@ 0xff
 8002408:	d90e      	bls.n	8002428 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	22ff      	movs	r2, #255	@ 0xff
 800240e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	b2da      	uxtb	r2, r3
 8002416:	8979      	ldrh	r1, [r7, #10]
 8002418:	4b52      	ldr	r3, [pc, #328]	@ (8002564 <HAL_I2C_Mem_Read+0x22c>)
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb33 	bl	8002a8c <I2C_TransferConfig>
 8002426:	e00f      	b.n	8002448 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238e:	b2da      	uxtb	r2, r3
 8002390:	8979      	ldrh	r1, [r7, #10]
 8002392:	4b4a      	ldr	r3, [pc, #296]	@ (80024bc <HAL_I2C_Mem_Read+0x22c>)
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fb22 	bl	80029e4 <I2C_TransferConfig>
=======
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002436:	b2da      	uxtb	r2, r3
 8002438:	8979      	ldrh	r1, [r7, #10]
 800243a:	4b4a      	ldr	r3, [pc, #296]	@ (8002564 <HAL_I2C_Mem_Read+0x22c>)
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb22 	bl	8002a8c <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a6:	2200      	movs	r2, #0
 80023a8:	2104      	movs	r1, #4
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f956 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07c      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
=======
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	2200      	movs	r2, #0
 8002450:	2104      	movs	r1, #4
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f956 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e07c      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
<<<<<<< Updated upstream
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d034      	beq.n	8002460 <HAL_I2C_Mem_Read+0x1d0>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d130      	bne.n	8002460 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002404:	2200      	movs	r2, #0
 8002406:	2180      	movs	r1, #128	@ 0x80
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f927 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e04d      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2bff      	cmp	r3, #255	@ 0xff
 8002420:	d90e      	bls.n	8002440 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	22ff      	movs	r2, #255	@ 0xff
 8002426:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fad3 	bl	80029e4 <I2C_TransferConfig>
 800243e:	e00f      	b.n	8002460 <HAL_I2C_Mem_Read+0x1d0>
=======
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d034      	beq.n	8002508 <HAL_I2C_Mem_Read+0x1d0>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d130      	bne.n	8002508 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ac:	2200      	movs	r2, #0
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f927 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e04d      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2bff      	cmp	r3, #255	@ 0xff
 80024c8:	d90e      	bls.n	80024e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	22ff      	movs	r2, #255	@ 0xff
 80024ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	2300      	movs	r3, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fad3 	bl	8002a8c <I2C_TransferConfig>
 80024e6:	e00f      	b.n	8002508 <HAL_I2C_Mem_Read+0x1d0>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	b2da      	uxtb	r2, r3
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fac2 	bl	80029e4 <I2C_TransferConfig>
=======
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	8979      	ldrh	r1, [r7, #10]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fac2 	bl	8002a8c <I2C_TransferConfig>
>>>>>>> Stashed changes
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d19a      	bne.n	80023a0 <HAL_I2C_Mem_Read+0x110>
=======
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d19a      	bne.n	8002448 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f994 	bl	800279c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e01a      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
=======
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f994 	bl	8002844 <I2C_WaitOnSTOPFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e01a      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2220      	movs	r2, #32
 8002484:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_I2C_Mem_Read+0x230>)
 8002492:	400b      	ands	r3, r1
 8002494:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_I2C_Mem_Read+0x224>
=======
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2220      	movs	r2, #32
 800252c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_I2C_Mem_Read+0x230>)
 800253a:	400b      	ands	r3, r1
 800253c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	80002400 	.word	0x80002400
 80024c0:	fe00e800 	.word	0xfe00e800

080024c4 <I2C_RequestMemoryWrite>:
=======
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	80002400 	.word	0x80002400
 8002568:	fe00e800 	.word	0xfe00e800

0800256c <I2C_RequestMemoryWrite>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	817b      	strh	r3, [r7, #10]
 80024d6:	460b      	mov	r3, r1
 80024d8:	813b      	strh	r3, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	8979      	ldrh	r1, [r7, #10]
 80024e4:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <I2C_RequestMemoryWrite+0xa4>)
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa79 	bl	80029e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	69b9      	ldr	r1, [r7, #24]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f909 	bl	800270e <I2C_WaitOnTXISFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e02c      	b.n	8002560 <I2C_RequestMemoryWrite+0x9c>
=======
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	460b      	mov	r3, r1
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <I2C_RequestMemoryWrite+0xa4>)
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fa79 	bl	8002a8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	69b9      	ldr	r1, [r7, #24]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f909 	bl	80027b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e02c      	b.n	8002608 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800250c:	893b      	ldrh	r3, [r7, #8]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28
 8002516:	e015      	b.n	8002544 <I2C_RequestMemoryWrite+0x80>
=======
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b4:	893b      	ldrh	r3, [r7, #8]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80025be:	e015      	b.n	80025ec <I2C_RequestMemoryWrite+0x80>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 8002518:	893b      	ldrh	r3, [r7, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b29b      	uxth	r3, r3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	69b9      	ldr	r1, [r7, #24]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f8ef 	bl	800270e <I2C_WaitOnTXISFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e012      	b.n	8002560 <I2C_RequestMemoryWrite+0x9c>
=======
 80025c0:	893b      	ldrh	r3, [r7, #8]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	69b9      	ldr	r1, [r7, #24]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f8ef 	bl	80027b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e012      	b.n	8002608 <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 800253a:	893b      	ldrh	r3, [r7, #8]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80025e2:	893b      	ldrh	r3, [r7, #8]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2200      	movs	r2, #0
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f884 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	80002000 	.word	0x80002000

0800256c <I2C_RequestMemoryRead>:
=======
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2200      	movs	r2, #0
 80025f4:	2180      	movs	r1, #128	@ 0x80
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f884 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	80002000 	.word	0x80002000

08002614 <I2C_RequestMemoryRead>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
<<<<<<< Updated upstream
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	460b      	mov	r3, r1
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <I2C_RequestMemoryRead+0xa4>)
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2300      	movs	r3, #0
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fa26 	bl	80029e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f8b6 	bl	800270e <I2C_WaitOnTXISFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e02c      	b.n	8002606 <I2C_RequestMemoryRead+0x9a>
=======
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	817b      	strh	r3, [r7, #10]
 8002626:	460b      	mov	r3, r1
 8002628:	813b      	strh	r3, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <I2C_RequestMemoryRead+0xa4>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2300      	movs	r3, #0
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fa26 	bl	8002a8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	69b9      	ldr	r1, [r7, #24]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f8b6 	bl	80027b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e02c      	b.n	80026ae <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b2:	893b      	ldrh	r3, [r7, #8]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80025bc:	e015      	b.n	80025ea <I2C_RequestMemoryRead+0x7e>
=======
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800265a:	893b      	ldrh	r3, [r7, #8]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
 8002664:	e015      	b.n	8002692 <I2C_RequestMemoryRead+0x7e>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 80025be:	893b      	ldrh	r3, [r7, #8]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f89c 	bl	800270e <I2C_WaitOnTXISFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e012      	b.n	8002606 <I2C_RequestMemoryRead+0x9a>
=======
 8002666:	893b      	ldrh	r3, [r7, #8]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	b29b      	uxth	r3, r3
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f89c 	bl	80027b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e012      	b.n	80026ae <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 80025e0:	893b      	ldrh	r3, [r7, #8]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 8002688:	893b      	ldrh	r3, [r7, #8]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	@ 0x40
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f831 	bl	800265c <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	80002000 	.word	0x80002000

08002614 <I2C_Flush_TXDR>:
=======
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2200      	movs	r2, #0
 800269a:	2140      	movs	r1, #64	@ 0x40
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f831 	bl	8002704 <I2C_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	80002000 	.word	0x80002000

080026bc <I2C_Flush_TXDR>:
>>>>>>> Stashed changes
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b02      	cmp	r3, #2
 8002628:	d103      	bne.n	8002632 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d103      	bne.n	80026da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< Updated upstream
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d007      	beq.n	8002650 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	619a      	str	r2, [r3, #24]
  }
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <I2C_WaitOnFlagUntilTimeout>:
=======
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d007      	beq.n	80026f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	619a      	str	r2, [r3, #24]
  }
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800266c:	e03b      	b.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f8d6 	bl	8002824 <I2C_IsErrorOccurred>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e041      	b.n	8002706 <I2C_WaitOnFlagUntilTimeout+0xaa>
=======
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002714:	e03b      	b.n	800278e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f8d6 	bl	80028cc <I2C_IsErrorOccurred>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e041      	b.n	80027ae <I2C_WaitOnFlagUntilTimeout+0xaa>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d02d      	beq.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268a:	f7fe ff39 	bl	8001500 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d122      	bne.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4013      	ands	r3, r2
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d113      	bne.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	f043 0220 	orr.w	r2, r3, #32
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	429a      	cmp	r2, r3
 8002702:	d0b4      	beq.n	800266e <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d02d      	beq.n	800278e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7fe ff39 	bl	80015a8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d122      	bne.n	800278e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	429a      	cmp	r2, r3
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	429a      	cmp	r2, r3
 8002764:	d113      	bne.n	800278e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d0b4      	beq.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_WaitOnTXISFlagUntilTimeout>:
=======
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <I2C_WaitOnTXISFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800271a:	e033      	b.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f87f 	bl	8002824 <I2C_IsErrorOccurred>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e031      	b.n	8002794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
=======
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027c2:	e033      	b.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f87f 	bl	80028cc <I2C_IsErrorOccurred>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e031      	b.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d025      	beq.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002738:	f7fe fee2 	bl	8001500 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d302      	bcc.n	800274e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11a      	bne.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b02      	cmp	r3, #2
 800275a:	d013      	beq.n	8002784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e007      	b.n	8002794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d1c4      	bne.n	800271c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
=======
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d025      	beq.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e0:	f7fe fee2 	bl	80015a8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11a      	bne.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b02      	cmp	r3, #2
 8002802:	d013      	beq.n	800282c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e007      	b.n	800283c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d1c4      	bne.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnSTOPFlagUntilTimeout>:
=======
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnSTOPFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
<<<<<<< Updated upstream
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a8:	e02f      	b.n	800280a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f838 	bl	8002824 <I2C_IsErrorOccurred>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e02d      	b.n	800281a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
=======
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002850:	e02f      	b.n	80028b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f838 	bl	80028cc <I2C_IsErrorOccurred>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e02d      	b.n	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< Updated upstream
 80027be:	f7fe fe9f 	bl	8001500 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d11a      	bne.n	800280a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d013      	beq.n	800280a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f043 0220 	orr.w	r2, r3, #32
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e007      	b.n	800281a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d1c8      	bne.n	80027aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
=======
 8002866:	f7fe fe9f 	bl	80015a8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d11a      	bne.n	80028b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b20      	cmp	r3, #32
 8002888:	d013      	beq.n	80028b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e007      	b.n	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d1c8      	bne.n	8002852 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <I2C_IsErrorOccurred>:
=======
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <I2C_IsErrorOccurred>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	61fb      	str	r3, [r7, #28]
=======
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
<<<<<<< Updated upstream
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d068      	beq.n	8002922 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2210      	movs	r2, #16
 8002856:	61da      	str	r2, [r3, #28]
=======
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d068      	beq.n	80029ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2210      	movs	r2, #16
 80028fe:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
<<<<<<< Updated upstream
 8002858:	e049      	b.n	80028ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d045      	beq.n	80028ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe fe4d 	bl	8001500 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_IsErrorOccurred+0x54>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d13a      	bne.n	80028ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800288a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800289a:	d121      	bne.n	80028e0 <I2C_IsErrorOccurred+0xbc>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028a2:	d01d      	beq.n	80028e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d01a      	beq.n	80028e0 <I2C_IsErrorOccurred+0xbc>
=======
 8002900:	e049      	b.n	8002996 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d045      	beq.n	8002996 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7fe fe4d 	bl	80015a8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_IsErrorOccurred+0x54>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d13a      	bne.n	8002996 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002932:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800293e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002942:	d121      	bne.n	8002988 <I2C_IsErrorOccurred+0xbc>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800294a:	d01d      	beq.n	8002988 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	2b20      	cmp	r3, #32
 8002950:	d01a      	beq.n	8002988 <I2C_IsErrorOccurred+0xbc>
>>>>>>> Stashed changes
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
<<<<<<< Updated upstream
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028ba:	f7fe fe21 	bl	8001500 <HAL_GetTick>
 80028be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c0:	e00e      	b.n	80028e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028c2:	f7fe fe1d 	bl	8001500 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b19      	cmp	r3, #25
 80028ce:	d907      	bls.n	80028e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	f043 0320 	orr.w	r3, r3, #32
 80028d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80028de:	e006      	b.n	80028ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d1e9      	bne.n	80028c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d003      	beq.n	8002904 <I2C_IsErrorOccurred+0xe0>
 80028fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0aa      	beq.n	800285a <I2C_IsErrorOccurred+0x36>
=======
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002960:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002962:	f7fe fe21 	bl	80015a8 <HAL_GetTick>
 8002966:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002968:	e00e      	b.n	8002988 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800296a:	f7fe fe1d 	bl	80015a8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b19      	cmp	r3, #25
 8002976:	d907      	bls.n	8002988 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f043 0320 	orr.w	r3, r3, #32
 800297e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002986:	e006      	b.n	8002996 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b20      	cmp	r3, #32
 8002994:	d1e9      	bne.n	800296a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d003      	beq.n	80029ac <I2C_IsErrorOccurred+0xe0>
 80029a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0aa      	beq.n	8002902 <I2C_IsErrorOccurred+0x36>
>>>>>>> Stashed changes
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
<<<<<<< Updated upstream
 8002904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2220      	movs	r2, #32
 8002912:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 80029ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2220      	movs	r2, #32
 80029ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
<<<<<<< Updated upstream
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61bb      	str	r3, [r7, #24]
=======
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
<<<<<<< Updated upstream
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
<<<<<<< Updated upstream
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f043 0308 	orr.w	r3, r3, #8
 8002a04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
<<<<<<< Updated upstream
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01c      	beq.n	80029d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff fe3b 	bl	8002614 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <I2C_IsErrorOccurred+0x1bc>)
 80029aa:	400b      	ands	r3, r1
 80029ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80029d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3728      	adds	r7, #40	@ 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	fe00e800 	.word	0xfe00e800

080029e4 <I2C_TransferConfig>:
=======
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff fe3b 	bl	80026bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <I2C_IsErrorOccurred+0x1bc>)
 8002a52:	400b      	ands	r3, r1
 8002a54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3728      	adds	r7, #40	@ 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	fe00e800 	.word	0xfe00e800

08002a8c <I2C_TransferConfig>:
>>>>>>> Stashed changes
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
<<<<<<< Updated upstream
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	4613      	mov	r3, r2
 80029f4:	727b      	strb	r3, [r7, #9]
=======
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	817b      	strh	r3, [r7, #10]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	727b      	strb	r3, [r7, #9]
>>>>>>> Stashed changes
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
<<<<<<< Updated upstream
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029fc:	7a7b      	ldrb	r3, [r7, #9]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a12:	617b      	str	r3, [r7, #20]
=======
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aa4:	7a7b      	ldrb	r3, [r7, #9]
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002aba:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
<<<<<<< Updated upstream
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	0d5b      	lsrs	r3, r3, #21
 8002a1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <I2C_TransferConfig+0x60>)
 8002a24:	430b      	orrs	r3, r1
 8002a26:	43db      	mvns	r3, r3
 8002a28:	ea02 0103 	and.w	r1, r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
=======
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	0d5b      	lsrs	r3, r3, #21
 8002ac6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <I2C_TransferConfig+0x60>)
 8002acc:	430b      	orrs	r3, r1
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	ea02 0103 	and.w	r1, r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
<<<<<<< Updated upstream
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	03ff63ff 	.word	0x03ff63ff

08002a48 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	03ff63ff 	.word	0x03ff63ff

08002af0 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< Updated upstream
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
=======
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d138      	bne.n	8002ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e032      	b.n	8002ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	@ 0x24
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6819      	ldr	r1, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d138      	bne.n	8002b78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e032      	b.n	8002b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	@ 0x24
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< Updated upstream
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
=======
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d139      	bne.n	8002b68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e033      	b.n	8002b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2224      	movs	r2, #36	@ 0x24
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d139      	bne.n	8002c10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e033      	b.n	8002c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2224      	movs	r2, #36	@ 0x24
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_PCD_Init>:
=======
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_PCD_Init>:
>>>>>>> Stashed changes
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
=======
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< Updated upstream
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0c0      	b.n	8002d0a <HAL_PCD_Init+0x194>
=======
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0c0      	b.n	8002db2 <HAL_PCD_Init+0x194>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< Updated upstream
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
=======
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< Updated upstream
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f00a f9b9 	bl	800cf14 <HAL_PCD_MspInit>
=======
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f00a fdf5 	bl	800d834 <HAL_PCD_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< Updated upstream
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fef1 	bl	8006996 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e03e      	b.n	8002c38 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3311      	adds	r3, #17
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	3310      	adds	r3, #16
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3313      	adds	r3, #19
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	3320      	adds	r3, #32
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	3324      	adds	r3, #36	@ 0x24
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	3301      	adds	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	791b      	ldrb	r3, [r3, #4]
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d3bb      	bcc.n	8002bba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e044      	b.n	8002cd2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
=======
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fef1 	bl	8006a3e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e03e      	b.n	8002ce0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	3311      	adds	r3, #17
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	3310      	adds	r3, #16
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
>>>>>>> Stashed changes
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
<<<<<<< Updated upstream
 8002c98:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	791b      	ldrb	r3, [r3, #4]
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3b5      	bcc.n	8002c48 <HAL_PCD_Init+0xd2>
=======
 8002c98:	3313      	adds	r3, #19
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3320      	adds	r3, #32
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3324      	adds	r3, #36	@ 0x24
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3bb      	bcc.n	8002c62 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e044      	b.n	8002d7a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	3301      	adds	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	791b      	ldrb	r3, [r3, #4]
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d3b5      	bcc.n	8002cf0 <HAL_PCD_Init+0xd2>
>>>>>>> Stashed changes
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
<<<<<<< Updated upstream
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ce8:	f003 fe70 	bl	80069cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7a9b      	ldrb	r3, [r3, #10]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 fc0e 	bl	8004524 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_Start>:
=======
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d90:	f003 fe70 	bl	8006a74 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7a9b      	ldrb	r3, [r3, #10]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 fc0e 	bl	80045cc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_PCD_Start>:
>>>>>>> Stashed changes
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_PCD_Start+0x16>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e012      	b.n	8002d4e <HAL_PCD_Start+0x3c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fe17 	bl	8006968 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f005 fbf4 	bl	800852c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_PCD_IRQHandler>:
=======
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_Start+0x16>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e012      	b.n	8002df6 <HAL_PCD_Start+0x3c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fe17 	bl	8006a10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 fbf4 	bl	80085d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f005 fbf9 	bl	800855a <USB_ReadInterrupts>
 8002d68:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x26>
=======
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f005 fbf9 	bl	8008602 <USB_ReadInterrupts>
 8002e10:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_PCD_IRQHandler+0x26>
>>>>>>> Stashed changes
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
<<<<<<< Updated upstream
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fb06 	bl	8003386 <PCD_EP_ISR_Handler>

    return;
 8002d7a:	e110      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d013      	beq.n	8002dae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
=======
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fb06 	bl	800342e <PCD_EP_ISR_Handler>

    return;
 8002e22:	e110      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d013      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e40:	b292      	uxth	r2, r2
 8002e42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
<<<<<<< Updated upstream
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f00a f949 	bl	800d036 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002da4:	2100      	movs	r1, #0
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8fc 	bl	8002fa4 <HAL_PCD_SetAddress>

    return;
 8002dac:	e0f7      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dd0:	e0e5      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dee:	b292      	uxth	r2, r2
 8002df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002df4:	e0d3      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d034      	beq.n	8002e6a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	b292      	uxth	r2, r2
 8002e14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0208 	bic.w	r2, r2, #8
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
=======
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f00a fd85 	bl	800d956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8fc 	bl	800304c <HAL_PCD_SetAddress>

    return;
 8002e54:	e0f7      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e78:	e0e5      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e96:	b292      	uxth	r2, r2
 8002e98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e9c:	e0d3      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d034      	beq.n	8002f12 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0204 	bic.w	r2, r2, #4
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0208 	bic.w	r2, r2, #8
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
<<<<<<< Updated upstream
 8002e42:	2100      	movs	r1, #0
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f00a fae9 	bl	800d41c <HAL_PCDEx_LPM_Callback>
=======
 8002eea:	2100      	movs	r1, #0
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f00a ff25 	bl	800dd3c <HAL_PCDEx_LPM_Callback>
>>>>>>> Stashed changes
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
<<<<<<< Updated upstream
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f00a f92c 	bl	800d0a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e62:	b292      	uxth	r2, r2
 8002e64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e68:	e099      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d027      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0208 	orr.w	r2, r2, #8
 8002e86:	b292      	uxth	r2, r2
 8002e88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0204 	orr.w	r2, r2, #4
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
=======
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f00a fd68 	bl	800d9c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f10:	e099      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d027      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0208 	orr.w	r2, r2, #8
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0204 	orr.w	r2, r2, #4
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
<<<<<<< Updated upstream
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f00a f8d9 	bl	800d074 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ec2:	e06c      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
=======
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f00a fd15 	bl	800d994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f6a:	e06c      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
>>>>>>> Stashed changes
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
<<<<<<< Updated upstream
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d12b      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0204 	orr.w	r2, r2, #4
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0208 	orr.w	r2, r2, #8
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
=======
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d040      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d12b      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	b292      	uxth	r2, r2
 8002fac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
<<<<<<< Updated upstream
 8002f3e:	2101      	movs	r1, #1
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f00a fa6b 	bl	800d41c <HAL_PCDEx_LPM_Callback>
=======
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f00a fea7 	bl	800dd3c <HAL_PCDEx_LPM_Callback>
>>>>>>> Stashed changes
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
<<<<<<< Updated upstream
 8002f46:	e02a      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f00a f893 	bl	800d074 <HAL_PCD_SuspendCallback>
    return;
 8002f4e:	e026      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00f      	beq.n	8002f7a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
=======
 8002fee:	e02a      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f00a fccf 	bl	800d994 <HAL_PCD_SuspendCallback>
    return;
 8002ff6:	e026      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00f      	beq.n	8003022 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003014:	b292      	uxth	r2, r2
 8003016:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
<<<<<<< Updated upstream
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f00a f851 	bl	800d01a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f78:	e011      	b.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00c      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f96:	b292      	uxth	r2, r2
 8002f98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f9c:	bf00      	nop
  }
}
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_PCD_SetAddress>:
=======
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f00a fc8d 	bl	800d93a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003020:	e011      	b.n	8003046 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800303e:	b292      	uxth	r2, r2
 8003040:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003044:	bf00      	nop
  }
}
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_PCD_SetAddress>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< Updated upstream
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_PCD_SetAddress+0x1a>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e012      	b.n	8002fe4 <HAL_PCD_SetAddress+0x40>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f005 fa95 	bl	8008504 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_PCD_EP_Open>:
=======
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_PCD_SetAddress+0x1a>
 8003062:	2302      	movs	r3, #2
 8003064:	e012      	b.n	800308c <HAL_PCD_SetAddress+0x40>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f005 fa95 	bl	80085ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_Open>:
>>>>>>> Stashed changes
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< Updated upstream
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	70fb      	strb	r3, [r7, #3]
 8002ffe:	460b      	mov	r3, r1
 8003000:	803b      	strh	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800300a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da0e      	bge.n	8003030 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 0207 	and.w	r2, r3, #7
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	3310      	adds	r3, #16
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	705a      	strb	r2, [r3, #1]
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_Open+0x62>
=======
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	70fb      	strb	r3, [r7, #3]
 80030a6:	460b      	mov	r3, r1
 80030a8:	803b      	strh	r3, [r7, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0e      	bge.n	80030d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 0207 	and.w	r2, r3, #7
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3310      	adds	r3, #16
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	705a      	strb	r2, [r3, #1]
 80030d6:	e00e      	b.n	80030f6 <HAL_PCD_EP_Open+0x62>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< Updated upstream
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800305a:	883b      	ldrh	r3, [r7, #0]
 800305c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	78ba      	ldrb	r2, [r7, #2]
 8003068:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800306a:	78bb      	ldrb	r3, [r7, #2]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d102      	bne.n	8003076 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_PCD_EP_Open+0x98>
 8003080:	2302      	movs	r3, #2
 8003082:	e00e      	b.n	80030a2 <HAL_PCD_EP_Open+0xb6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68f9      	ldr	r1, [r7, #12]
 8003092:	4618      	mov	r0, r3
 8003094:	f003 fcb8 	bl	8006a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80030a0:	7afb      	ldrb	r3, [r7, #11]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_PCD_EP_Close>:
=======
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 0207 	and.w	r2, r3, #7
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003102:	883b      	ldrh	r3, [r7, #0]
 8003104:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	78ba      	ldrb	r2, [r7, #2]
 8003110:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003112:	78bb      	ldrb	r3, [r7, #2]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d102      	bne.n	800311e <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_PCD_EP_Open+0x98>
 8003128:	2302      	movs	r3, #2
 800312a:	e00e      	b.n	800314a <HAL_PCD_EP_Open+0xb6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68f9      	ldr	r1, [r7, #12]
 800313a:	4618      	mov	r0, r3
 800313c:	f003 fcb8 	bl	8006ab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003148:	7afb      	ldrb	r3, [r7, #11]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_PCD_EP_Close>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da0e      	bge.n	80030dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 0207 	and.w	r2, r3, #7
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	3310      	adds	r3, #16
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	705a      	strb	r2, [r3, #1]
 80030da:	e00e      	b.n	80030fa <HAL_PCD_EP_Close+0x50>
=======
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800315e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003162:	2b00      	cmp	r3, #0
 8003164:	da0e      	bge.n	8003184 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 0207 	and.w	r2, r3, #7
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	3310      	adds	r3, #16
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	705a      	strb	r2, [r3, #1]
 8003182:	e00e      	b.n	80031a2 <HAL_PCD_EP_Close+0x50>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< Updated upstream
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_PCD_EP_Close+0x6a>
 8003110:	2302      	movs	r3, #2
 8003112:	e00e      	b.n	8003132 <HAL_PCD_EP_Close+0x88>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	4618      	mov	r0, r3
 8003124:	f004 f958 	bl	80073d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_Receive>:
=======
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 0207 	and.w	r2, r3, #7
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_PCD_EP_Close+0x6a>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e00e      	b.n	80031da <HAL_PCD_EP_Close+0x88>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f004 f958 	bl	8007480 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_Receive>:
>>>>>>> Stashed changes
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< Updated upstream
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	460b      	mov	r3, r1
 8003148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314a:	7afb      	ldrb	r3, [r7, #11]
 800314c:	f003 0207 	and.w	r2, r3, #7
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2200      	movs	r2, #0
 8003172:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	b2da      	uxtb	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fb10 	bl	80077b2 <USB_EPStartXfer>

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_PCD_EP_GetRxCount>:
=======
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	460b      	mov	r3, r1
 80031f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f003 0207 	and.w	r2, r3, #7
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	b2da      	uxtb	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fb10 	bl	800785a <USB_EPStartXfer>

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PCD_EP_GetRxCount>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 0207 	and.w	r2, r3, #7
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_PCD_EP_Transmit>:
=======
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 0207 	and.w	r2, r3, #7
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_PCD_EP_Transmit>:
>>>>>>> Stashed changes
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< Updated upstream
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	460b      	mov	r3, r1
 80031da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031dc:	7afb      	ldrb	r3, [r7, #11]
 80031de:	f003 0207 	and.w	r2, r3, #7
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	3310      	adds	r3, #16
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2201      	movs	r2, #1
 8003216:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	b2da      	uxtb	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6979      	ldr	r1, [r7, #20]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fac1 	bl	80077b2 <USB_EPStartXfer>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_PCD_EP_SetStall>:
=======
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	f003 0207 	and.w	r2, r3, #7
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	3310      	adds	r3, #16
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2201      	movs	r2, #1
 80032be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c0:	7afb      	ldrb	r3, [r7, #11]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 fac1 	bl	800785a <USB_EPStartXfer>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_PCD_EP_SetStall>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	7912      	ldrb	r2, [r2, #4]
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e03e      	b.n	80032d6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325c:	2b00      	cmp	r3, #0
 800325e:	da0e      	bge.n	800327e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	3310      	adds	r3, #16
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	705a      	strb	r2, [r3, #1]
 800327c:	e00c      	b.n	8003298 <HAL_PCD_EP_SetStall+0x5e>
=======
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	7912      	ldrb	r2, [r2, #4]
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e03e      	b.n	800337e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da0e      	bge.n	8003326 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 0207 	and.w	r2, r3, #7
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	3310      	adds	r3, #16
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	705a      	strb	r2, [r3, #1]
 8003324:	e00c      	b.n	8003340 <HAL_PCD_EP_SetStall+0x5e>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< Updated upstream
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_PCD_EP_SetStall+0x7e>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e00e      	b.n	80032d6 <HAL_PCD_EP_SetStall+0x9c>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68f9      	ldr	r1, [r7, #12]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f005 f822 	bl	8008310 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_PCD_EP_ClrStall>:
=======
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_PCD_EP_SetStall+0x7e>
 800335c:	2302      	movs	r3, #2
 800335e:	e00e      	b.n	800337e <HAL_PCD_EP_SetStall+0x9c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	4618      	mov	r0, r3
 8003370:	f005 f822 	bl	80083b8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCD_EP_ClrStall>:
>>>>>>> Stashed changes
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	7912      	ldrb	r2, [r2, #4]
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e040      	b.n	800337e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003300:	2b00      	cmp	r3, #0
 8003302:	da0e      	bge.n	8003322 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 0207 	and.w	r2, r3, #7
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	3310      	adds	r3, #16
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	705a      	strb	r2, [r3, #1]
 8003320:	e00e      	b.n	8003340 <HAL_PCD_EP_ClrStall+0x62>
=======
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	7912      	ldrb	r2, [r2, #4]
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e040      	b.n	8003426 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da0e      	bge.n	80033ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 0207 	and.w	r2, r3, #7
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	3310      	adds	r3, #16
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	705a      	strb	r2, [r3, #1]
 80033c8:	e00e      	b.n	80033e8 <HAL_PCD_EP_ClrStall+0x62>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< Updated upstream
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 0207 	and.w	r2, r3, #7
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	b2da      	uxtb	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_PCD_EP_ClrStall+0x82>
 800335c:	2302      	movs	r3, #2
 800335e:	e00e      	b.n	800337e <HAL_PCD_EP_ClrStall+0xa0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	4618      	mov	r0, r3
 8003370:	f005 f81f 	bl	80083b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <PCD_EP_ISR_Handler>:
=======
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 0207 	and.w	r2, r3, #7
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_PCD_EP_ClrStall+0x82>
 8003404:	2302      	movs	r3, #2
 8003406:	e00e      	b.n	8003426 <HAL_PCD_EP_ClrStall+0xa0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f005 f81f 	bl	800845a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <PCD_EP_ISR_Handler>:
>>>>>>> Stashed changes
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8003386:	b580      	push	{r7, lr}
 8003388:	b092      	sub	sp, #72	@ 0x48
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
=======
 800342e:	b580      	push	{r7, lr}
 8003430:	b092      	sub	sp, #72	@ 0x48
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
<<<<<<< Updated upstream
 800338e:	e333      	b.n	80039f8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003398:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800339a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80033a6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 8108 	bne.w	80035c0 <PCD_EP_ISR_Handler+0x23a>
=======
 8003436:	e333      	b.n	8003aa0 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003440:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003442:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800344e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8108 	bne.w	8003668 <PCD_EP_ISR_Handler+0x23a>
>>>>>>> Stashed changes
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
<<<<<<< Updated upstream
 80033b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d14c      	bne.n	8003454 <PCD_EP_ISR_Handler+0xce>
=======
 8003458:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d14c      	bne.n	80034fc <PCD_EP_ISR_Handler+0xce>
>>>>>>> Stashed changes
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
<<<<<<< Updated upstream
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80033c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ca:	813b      	strh	r3, [r7, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033da:	b29b      	uxth	r3, r3
 80033dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3310      	adds	r3, #16
 80033e2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800340c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	441a      	add	r2, r3
 8003416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003418:	615a      	str	r2, [r3, #20]
=======
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800346e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003472:	813b      	strh	r3, [r7, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003482:	b29b      	uxth	r3, r3
 8003484:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3310      	adds	r3, #16
 800348a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	441a      	add	r2, r3
 80034be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c0:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
<<<<<<< Updated upstream
 800341a:	2100      	movs	r1, #0
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f009 fde2 	bl	800cfe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	7b1b      	ldrb	r3, [r3, #12]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 82e5 	beq.w	80039f8 <PCD_EP_ISR_Handler+0x672>
 800342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 82e0 	bne.w	80039f8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7b1b      	ldrb	r3, [r3, #12]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003442:	b2da      	uxtb	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	731a      	strb	r2, [r3, #12]
 8003452:	e2d1      	b.n	80039f8 <PCD_EP_ISR_Handler+0x672>
=======
 80034c2:	2100      	movs	r1, #0
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f00a fa1e 	bl	800d906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	7b1b      	ldrb	r3, [r3, #12]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 82e5 	beq.w	8003aa0 <PCD_EP_ISR_Handler+0x672>
 80034d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 82e0 	bne.w	8003aa0 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7b1b      	ldrb	r3, [r3, #12]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	731a      	strb	r2, [r3, #12]
 80034fa:	e2d1      	b.n	8003aa0 <PCD_EP_ISR_Handler+0x672>
>>>>>>> Stashed changes
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
<<<<<<< Updated upstream
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800345a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003464:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800346a:	2b00      	cmp	r3, #0
 800346c:	d032      	beq.n	80034d4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	4413      	add	r3, r2
 8003488:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003494:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80034a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f005 f8a9 	bl	8008600 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034ba:	4013      	ands	r3, r2
 80034bc:	817b      	strh	r3, [r7, #10]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	897a      	ldrh	r2, [r7, #10]
 80034c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034c8:	b292      	uxth	r2, r2
 80034ca:	801a      	strh	r2, [r3, #0]
=======
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800350c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800350e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003512:	2b00      	cmp	r3, #0
 8003514:	d032      	beq.n	800357c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	4413      	add	r3, r2
 8003530:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800353a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800354a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800354c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800354e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003550:	b29b      	uxth	r3, r3
 8003552:	f005 f8a9 	bl	80086a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29a      	uxth	r2, r3
 800355e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003562:	4013      	ands	r3, r2
 8003564:	817b      	strh	r3, [r7, #10]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	897a      	ldrh	r2, [r7, #10]
 800356c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003570:	b292      	uxth	r2, r2
 8003572:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< Updated upstream
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f009 fd5d 	bl	800cf8c <HAL_PCD_SetupStageCallback>
 80034d2:	e291      	b.n	80039f8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034d4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f280 828d 	bge.w	80039f8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034ea:	4013      	ands	r3, r2
 80034ec:	81fb      	strh	r3, [r7, #14]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	89fa      	ldrh	r2, [r7, #14]
 80034f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034f8:	b292      	uxth	r2, r2
 80034fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003504:	b29b      	uxth	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	4413      	add	r3, r2
 8003516:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003522:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d019      	beq.n	8003560 <PCD_EP_ISR_Handler+0x1da>
 800352c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353a:	6959      	ldr	r1, [r3, #20]
 800353c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003544:	b29b      	uxth	r3, r3
 8003546:	f005 f85b 	bl	8008600 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800354a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	441a      	add	r2, r3
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	615a      	str	r2, [r3, #20]
=======
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f00a f999 	bl	800d8ac <HAL_PCD_SetupStageCallback>
 800357a:	e291      	b.n	8003aa0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800357c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003580:	2b00      	cmp	r3, #0
 8003582:	f280 828d 	bge.w	8003aa0 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29a      	uxth	r2, r3
 800358e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003592:	4013      	ands	r3, r2
 8003594:	81fb      	strh	r3, [r7, #14]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	89fa      	ldrh	r2, [r7, #14]
 800359c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035a0:	b292      	uxth	r2, r2
 80035a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <PCD_EP_ISR_Handler+0x1da>
 80035d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d015      	beq.n	8003608 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e2:	6959      	ldr	r1, [r3, #20]
 80035e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f005 f85b 	bl	80086a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	441a      	add	r2, r3
 80035fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fe:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
<<<<<<< Updated upstream
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f009 fd28 	bl	800cfb0 <HAL_PCD_DataOutStageCallback>
=======
 8003600:	2100      	movs	r1, #0
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f00a f964 	bl	800d8d0 <HAL_PCD_DataOutStageCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
<<<<<<< Updated upstream
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003568:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800356a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 8242 	bne.w	80039f8 <PCD_EP_ISR_Handler+0x672>
 8003574:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003576:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800357a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800357e:	f000 823b 	beq.w	80039f8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	81bb      	strh	r3, [r7, #12]
 8003594:	89bb      	ldrh	r3, [r7, #12]
 8003596:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800359a:	81bb      	strh	r3, [r7, #12]
 800359c:	89bb      	ldrh	r3, [r7, #12]
 800359e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035a2:	81bb      	strh	r3, [r7, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	89bb      	ldrh	r3, [r7, #12]
 80035aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	8013      	strh	r3, [r2, #0]
 80035be:	e21b      	b.n	80039f8 <PCD_EP_ISR_Handler+0x672>
=======
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003610:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8242 	bne.w	8003aa0 <PCD_EP_ISR_Handler+0x672>
 800361c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800361e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003622:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003626:	f000 823b 	beq.w	8003aa0 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363a:	81bb      	strh	r3, [r7, #12]
 800363c:	89bb      	ldrh	r3, [r7, #12]
 800363e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003642:	81bb      	strh	r3, [r7, #12]
 8003644:	89bb      	ldrh	r3, [r7, #12]
 8003646:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800364a:	81bb      	strh	r3, [r7, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800365a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800365e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003662:	b29b      	uxth	r3, r3
 8003664:	8013      	strh	r3, [r2, #0]
 8003666:	e21b      	b.n	8003aa0 <PCD_EP_ISR_Handler+0x672>
>>>>>>> Stashed changes
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
<<<<<<< Updated upstream
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035d2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f280 80f1 	bge.w	80037be <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035f2:	4013      	ands	r3, r2
 80035f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800360a:	b292      	uxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800360e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003626:	7b1b      	ldrb	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d123      	bne.n	8003674 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	4413      	add	r3, r2
 8003646:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003650:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003654:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 808b 	beq.w	8003774 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003664:	6959      	ldr	r1, [r3, #20]
 8003666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003668:	88da      	ldrh	r2, [r3, #6]
 800366a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800366e:	f004 ffc7 	bl	8008600 <USB_ReadPMA>
 8003672:	e07f      	b.n	8003774 <PCD_EP_ISR_Handler+0x3ee>
=======
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800367a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800367e:	2b00      	cmp	r3, #0
 8003680:	f280 80f1 	bge.w	8003866 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29a      	uxth	r2, r3
 8003696:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800369a:	4013      	ands	r3, r2
 800369c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036b2:	b292      	uxth	r2, r2
 80036b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036b6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ce:	7b1b      	ldrb	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d123      	bne.n	800371c <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80036fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 808b 	beq.w	800381c <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370c:	6959      	ldr	r1, [r3, #20]
 800370e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003710:	88da      	ldrh	r2, [r3, #6]
 8003712:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003716:	f004 ffc7 	bl	80086a8 <USB_ReadPMA>
 800371a:	e07f      	b.n	800381c <PCD_EP_ISR_Handler+0x3ee>
>>>>>>> Stashed changes
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 8003674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003676:	78db      	ldrb	r3, [r3, #3]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d109      	bne.n	8003690 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800367c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800367e:	461a      	mov	r2, r3
 8003680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9c6 	bl	8003a14 <HAL_PCD_EP_DB_Receive>
 8003688:	4603      	mov	r3, r0
 800368a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800368e:	e071      	b.n	8003774 <PCD_EP_ISR_Handler+0x3ee>
=======
 800371c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371e:	78db      	ldrb	r3, [r3, #3]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d109      	bne.n	8003738 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003724:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003726:	461a      	mov	r2, r3
 8003728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f9c6 	bl	8003abc <HAL_PCD_EP_DB_Receive>
 8003730:	4603      	mov	r3, r0
 8003732:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003736:	e071      	b.n	800381c <PCD_EP_ISR_Handler+0x3ee>
>>>>>>> Stashed changes
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
<<<<<<< Updated upstream
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036aa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80036bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d022      	beq.n	8003730 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4413      	add	r3, r2
 8003704:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003712:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02c      	beq.n	8003774 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003720:	6959      	ldr	r1, [r3, #20]
 8003722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003724:	891a      	ldrh	r2, [r3, #8]
 8003726:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800372a:	f004 ff69 	bl	8008600 <USB_ReadPMA>
 800372e:	e021      	b.n	8003774 <PCD_EP_ISR_Handler+0x3ee>
=======
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800374e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003752:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800376c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003774:	b29b      	uxth	r3, r3
 8003776:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d022      	beq.n	80037d8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80037ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d02c      	beq.n	800381c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c8:	6959      	ldr	r1, [r3, #20]
 80037ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037cc:	891a      	ldrh	r2, [r3, #8]
 80037ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80037d2:	f004 ff69 	bl	80086a8 <USB_ReadPMA>
 80037d6:	e021      	b.n	800381c <PCD_EP_ISR_Handler+0x3ee>
>>>>>>> Stashed changes
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< Updated upstream
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003738:	b29b      	uxth	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	4413      	add	r3, r2
 800374a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003754:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003758:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003766:	6959      	ldr	r1, [r3, #20]
 8003768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376a:	895a      	ldrh	r2, [r3, #10]
 800376c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003770:	f004 ff46 	bl	8008600 <USB_ReadPMA>
=======
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003800:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380e:	6959      	ldr	r1, [r3, #20]
 8003810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003812:	895a      	ldrh	r2, [r3, #10]
 8003814:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003818:	f004 ff46 	bl	80086a8 <USB_ReadPMA>
>>>>>>> Stashed changes
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
<<<<<<< Updated upstream
 8003774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800377c:	441a      	add	r2, r3
 800377e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003780:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800378a:	441a      	add	r2, r3
 800378c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800378e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <PCD_EP_ISR_Handler+0x41e>
 8003798:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800379c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d206      	bcs.n	80037b2 <PCD_EP_ISR_Handler+0x42c>
=======
 800381c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003824:	441a      	add	r2, r3
 8003826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003828:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800382a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003832:	441a      	add	r2, r3
 8003834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003836:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <PCD_EP_ISR_Handler+0x41e>
 8003840:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d206      	bcs.n	800385a <PCD_EP_ISR_Handler+0x42c>
>>>>>>> Stashed changes
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 80037a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f009 fc00 	bl	800cfb0 <HAL_PCD_DataOutStageCallback>
 80037b0:	e005      	b.n	80037be <PCD_EP_ISR_Handler+0x438>
=======
 800384c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f00a f83c 	bl	800d8d0 <HAL_PCD_DataOutStageCallback>
 8003858:	e005      	b.n	8003866 <PCD_EP_ISR_Handler+0x438>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< Updated upstream
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fffa 	bl	80077b2 <USB_EPStartXfer>
=======
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fffa 	bl	800785a <USB_EPStartXfer>
>>>>>>> Stashed changes
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
<<<<<<< Updated upstream
 80037be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8117 	beq.w	80039f8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80037ca:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	3310      	adds	r3, #16
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800380a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800380e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003812:	b29b      	uxth	r3, r3
 8003814:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003818:	78db      	ldrb	r3, [r3, #3]
 800381a:	2b01      	cmp	r3, #1
 800381c:	f040 80a1 	bne.w	8003962 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003822:	2200      	movs	r2, #0
 8003824:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003828:	7b1b      	ldrb	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8092 	beq.w	8003954 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003830:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d046      	beq.n	80038c8 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800383a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d126      	bne.n	8003890 <PCD_EP_ISR_Handler+0x50a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003850:	b29b      	uxth	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4413      	add	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	00da      	lsls	r2, r3, #3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003874:	b29a      	uxth	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	801a      	strh	r2, [r3, #0]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003888:	b29a      	uxth	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	e061      	b.n	8003954 <PCD_EP_ISR_Handler+0x5ce>
 8003890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d15d      	bne.n	8003954 <PCD_EP_ISR_Handler+0x5ce>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	00da      	lsls	r2, r3, #3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2200      	movs	r2, #0
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	e045      	b.n	8003954 <PCD_EP_ISR_Handler+0x5ce>
=======
 8003866:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8117 	beq.w	8003aa0 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003872:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	3310      	adds	r3, #16
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800389c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80038b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80038be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c0:	78db      	ldrb	r3, [r3, #3]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	f040 80a1 	bne.w	8003a0a <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80038c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ca:	2200      	movs	r2, #0
 80038cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80038ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d0:	7b1b      	ldrb	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8092 	beq.w	80039fc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d046      	beq.n	8003970 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d126      	bne.n	8003938 <PCD_EP_ISR_Handler+0x50a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4413      	add	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00da      	lsls	r2, r3, #3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4413      	add	r3, r2
 800390c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391c:	b29a      	uxth	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800392c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003930:	b29a      	uxth	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	e061      	b.n	80039fc <PCD_EP_ISR_Handler+0x5ce>
 8003938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d15d      	bne.n	80039fc <PCD_EP_ISR_Handler+0x5ce>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	00da      	lsls	r2, r3, #3
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2200      	movs	r2, #0
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	e045      	b.n	80039fc <PCD_EP_ISR_Handler+0x5ce>
>>>>>>> Stashed changes
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
<<<<<<< Updated upstream
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d0:	785b      	ldrb	r3, [r3, #1]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d126      	bne.n	8003924 <PCD_EP_ISR_Handler+0x59e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	4413      	add	r3, r2
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	00da      	lsls	r2, r3, #3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	4413      	add	r3, r2
 80038f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038fc:	623b      	str	r3, [r7, #32]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003908:	b29a      	uxth	r2, r3
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	801a      	strh	r2, [r3, #0]
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800391c:	b29a      	uxth	r2, r3
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	e017      	b.n	8003954 <PCD_EP_ISR_Handler+0x5ce>
 8003924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d113      	bne.n	8003954 <PCD_EP_ISR_Handler+0x5ce>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003934:	b29b      	uxth	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	4413      	add	r3, r2
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800393e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	00da      	lsls	r2, r3, #3
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	4413      	add	r3, r2
 8003948:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	2200      	movs	r2, #0
 8003952:	801a      	strh	r2, [r3, #0]
=======
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d126      	bne.n	80039cc <PCD_EP_ISR_Handler+0x59e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800398c:	b29b      	uxth	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	4413      	add	r3, r2
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
 8003996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	00da      	lsls	r2, r3, #3
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	4413      	add	r3, r2
 80039a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	e017      	b.n	80039fc <PCD_EP_ISR_Handler+0x5ce>
 80039cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d113      	bne.n	80039fc <PCD_EP_ISR_Handler+0x5ce>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e2:	4413      	add	r3, r2
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	00da      	lsls	r2, r3, #3
 80039ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ee:	4413      	add	r3, r2
 80039f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	2200      	movs	r2, #0
 80039fa:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 8003954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f009 fb43 	bl	800cfe6 <HAL_PCD_DataInStageCallback>
 8003960:	e04a      	b.n	80039f8 <PCD_EP_ISR_Handler+0x672>
=======
 80039fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f009 ff7f 	bl	800d906 <HAL_PCD_DataInStageCallback>
 8003a08:	e04a      	b.n	8003aa0 <PCD_EP_ISR_Handler+0x672>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
<<<<<<< Updated upstream
 8003962:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d13f      	bne.n	80039ec <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003974:	b29b      	uxth	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4413      	add	r3, r2
 8003986:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003990:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003998:	429a      	cmp	r2, r3
 800399a:	d906      	bls.n	80039aa <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800399c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a6:	619a      	str	r2, [r3, #24]
 80039a8:	e002      	b.n	80039b0 <PCD_EP_ISR_Handler+0x62a>
=======
 8003a0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d13f      	bne.n	8003a94 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a38:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d906      	bls.n	8003a52 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4e:	619a      	str	r2, [r3, #24]
 8003a50:	e002      	b.n	8003a58 <PCD_EP_ISR_Handler+0x62a>
>>>>>>> Stashed changes
            }
            else
            {
              ep->xfer_len = 0U;
<<<<<<< Updated upstream
 80039aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
=======
 8003a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
<<<<<<< Updated upstream
 80039b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <PCD_EP_ISR_Handler+0x640>
=======
 8003a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <PCD_EP_ISR_Handler+0x640>
>>>>>>> Stashed changes
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 80039b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f009 fb11 	bl	800cfe6 <HAL_PCD_DataInStageCallback>
 80039c4:	e018      	b.n	80039f8 <PCD_EP_ISR_Handler+0x672>
=======
 8003a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f009 ff4d 	bl	800d906 <HAL_PCD_DataInStageCallback>
 8003a6c:	e018      	b.n	8003aa0 <PCD_EP_ISR_Handler+0x672>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
<<<<<<< Updated upstream
 80039c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039cc:	441a      	add	r2, r3
 80039ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039d8:	441a      	add	r2, r3
 80039da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039dc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 fee4 	bl	80077b2 <USB_EPStartXfer>
 80039ea:	e005      	b.n	80039f8 <PCD_EP_ISR_Handler+0x672>
=======
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a74:	441a      	add	r2, r3
 8003a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a78:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a80:	441a      	add	r2, r3
 8003a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a84:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 fee4 	bl	800785a <USB_EPStartXfer>
 8003a92:	e005      	b.n	8003aa0 <PCD_EP_ISR_Handler+0x672>
>>>>>>> Stashed changes
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
<<<<<<< Updated upstream
 80039ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039ee:	461a      	mov	r2, r3
 80039f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f917 	bl	8003c26 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f6ff acc3 	blt.w	8003390 <PCD_EP_ISR_Handler+0xa>
=======
 8003a94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a96:	461a      	mov	r2, r3
 8003a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f917 	bl	8003cce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	b21b      	sxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f6ff acc3 	blt.w	8003438 <PCD_EP_ISR_Handler+0xa>
>>>>>>> Stashed changes
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3748      	adds	r7, #72	@ 0x48
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_PCD_EP_DB_Receive>:
=======
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3748      	adds	r7, #72	@ 0x48
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_PCD_EP_DB_Receive>:
>>>>>>> Stashed changes
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< Updated upstream
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
=======
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< Updated upstream
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d07c      	beq.n	8003b26 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	8b7b      	ldrh	r3, [r7, #26]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d306      	bcc.n	8003a6a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	8b7b      	ldrh	r3, [r7, #26]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	619a      	str	r2, [r3, #24]
 8003a68:	e002      	b.n	8003a70 <HAL_PCD_EP_DB_Receive+0x5c>
=======
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d07c      	beq.n	8003bce <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	8b7b      	ldrh	r3, [r7, #26]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d306      	bcc.n	8003b12 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	8b7b      	ldrh	r3, [r7, #26]
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	619a      	str	r2, [r3, #24]
 8003b10:	e002      	b.n	8003b18 <HAL_PCD_EP_DB_Receive+0x5c>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d123      	bne.n	8003ac0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	833b      	strh	r3, [r7, #24]
 8003a94:	8b3b      	ldrh	r3, [r7, #24]
 8003a96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a9a:	833b      	strh	r3, [r7, #24]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	8b3b      	ldrh	r3, [r7, #24]
 8003aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8013      	strh	r3, [r2, #0]
=======
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d123      	bne.n	8003b68 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3a:	833b      	strh	r3, [r7, #24]
 8003b3c:	8b3b      	ldrh	r3, [r7, #24]
 8003b3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b42:	833b      	strh	r3, [r7, #24]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	8b3b      	ldrh	r3, [r7, #24]
 8003b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< Updated upstream
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01f      	beq.n	8003b0a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae4:	82fb      	strh	r3, [r7, #22]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	441a      	add	r2, r3
 8003af4:	8afb      	ldrh	r3, [r7, #22]
 8003af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b0a:	8b7b      	ldrh	r3, [r7, #26]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8085 	beq.w	8003c1c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6959      	ldr	r1, [r3, #20]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	891a      	ldrh	r2, [r3, #8]
 8003b1e:	8b7b      	ldrh	r3, [r7, #26]
 8003b20:	f004 fd6e 	bl	8008600 <USB_ReadPMA>
 8003b24:	e07a      	b.n	8003c1c <HAL_PCD_EP_DB_Receive+0x208>
=======
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01f      	beq.n	8003bb2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8c:	82fb      	strh	r3, [r7, #22]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	441a      	add	r2, r3
 8003b9c:	8afb      	ldrh	r3, [r7, #22]
 8003b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003baa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bb2:	8b7b      	ldrh	r3, [r7, #26]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8085 	beq.w	8003cc4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6959      	ldr	r1, [r3, #20]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	891a      	ldrh	r2, [r3, #8]
 8003bc6:	8b7b      	ldrh	r3, [r7, #26]
 8003bc8:	f004 fd6e 	bl	80086a8 <USB_ReadPMA>
 8003bcc:	e07a      	b.n	8003cc4 <HAL_PCD_EP_DB_Receive+0x208>
>>>>>>> Stashed changes
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< Updated upstream
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	8b7b      	ldrh	r3, [r7, #26]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d306      	bcc.n	8003b64 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	8b7b      	ldrh	r3, [r7, #26]
 8003b5c:	1ad2      	subs	r2, r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	619a      	str	r2, [r3, #24]
 8003b62:	e002      	b.n	8003b6a <HAL_PCD_EP_DB_Receive+0x156>
=======
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	8b7b      	ldrh	r3, [r7, #26]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d306      	bcc.n	8003c0c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	8b7b      	ldrh	r3, [r7, #26]
 8003c04:	1ad2      	subs	r2, r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	619a      	str	r2, [r3, #24]
 8003c0a:	e002      	b.n	8003c12 <HAL_PCD_EP_DB_Receive+0x156>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d123      	bne.n	8003bba <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8c:	83fb      	strh	r3, [r7, #30]
 8003b8e:	8bfb      	ldrh	r3, [r7, #30]
 8003b90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b94:	83fb      	strh	r3, [r7, #30]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	8bfb      	ldrh	r3, [r7, #30]
 8003ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	8013      	strh	r3, [r2, #0]
=======
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d123      	bne.n	8003c62 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c34:	83fb      	strh	r3, [r7, #30]
 8003c36:	8bfb      	ldrh	r3, [r7, #30]
 8003c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c3c:	83fb      	strh	r3, [r7, #30]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	8bfb      	ldrh	r3, [r7, #30]
 8003c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
<<<<<<< Updated upstream
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11f      	bne.n	8003c04 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	83bb      	strh	r3, [r7, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	8bbb      	ldrh	r3, [r7, #28]
 8003bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c04:	8b7b      	ldrh	r3, [r7, #26]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6959      	ldr	r1, [r3, #20]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	895a      	ldrh	r2, [r3, #10]
 8003c16:	8b7b      	ldrh	r3, [r7, #26]
 8003c18:	f004 fcf2 	bl	8008600 <USB_ReadPMA>
=======
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11f      	bne.n	8003cac <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c86:	83bb      	strh	r3, [r7, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	8bbb      	ldrh	r3, [r7, #28]
 8003c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cac:	8b7b      	ldrh	r3, [r7, #26]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6959      	ldr	r1, [r3, #20]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	895a      	ldrh	r2, [r3, #10]
 8003cbe:	8b7b      	ldrh	r3, [r7, #26]
 8003cc0:	f004 fcf2 	bl	80086a8 <USB_ReadPMA>
>>>>>>> Stashed changes
    }
  }

  return count;
<<<<<<< Updated upstream
 8003c1c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_PCD_EP_DB_Transmit>:
=======
 8003cc4:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_PCD_EP_DB_Transmit>:
>>>>>>> Stashed changes
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< Updated upstream
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b0a6      	sub	sp, #152	@ 0x98
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
=======
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b0a6      	sub	sp, #152	@ 0x98
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< Updated upstream
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 81f7 	beq.w	800402e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c64:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d907      	bls.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	699a      	ldr	r2, [r3, #24]
 8003c78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c7c:	1ad2      	subs	r2, r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	619a      	str	r2, [r3, #24]
 8003c82:	e002      	b.n	8003c8a <HAL_PCD_EP_DB_Transmit+0x64>
=======
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 81f7 	beq.w	80040d6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d0c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d907      	bls.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d24:	1ad2      	subs	r2, r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	619a      	str	r2, [r3, #24]
 8003d2a:	e002      	b.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x64>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	619a      	str	r2, [r3, #24]
=======
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< Updated upstream
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 80e1 	bne.w	8003e56 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d126      	bne.n	8003cea <HAL_PCD_EP_DB_Transmit+0xc4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	4413      	add	r3, r2
 8003cb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	00da      	lsls	r2, r3, #3
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd2:	801a      	strh	r2, [r3, #0]
 8003cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	801a      	strh	r2, [r3, #0]
 8003ce8:	e01a      	b.n	8003d20 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d116      	bne.n	8003d20 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	4413      	add	r3, r2
 8003d08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	00da      	lsls	r2, r3, #3
 8003d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d12:	4413      	add	r3, r2
 8003d14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d126      	bne.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x156>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	4413      	add	r3, r2
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	00da      	lsls	r2, r3, #3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	801a      	strh	r2, [r3, #0]
 8003d7a:	e017      	b.n	8003dac <HAL_PCD_EP_DB_Transmit+0x186>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d113      	bne.n	8003dac <HAL_PCD_EP_DB_Transmit+0x186>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	4413      	add	r3, r2
 8003d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	00da      	lsls	r2, r3, #3
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	4413      	add	r3, r2
 8003da0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	2200      	movs	r2, #0
 8003daa:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	78db      	ldrb	r3, [r3, #3]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d123      	bne.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dce:	837b      	strh	r3, [r7, #26]
 8003dd0:	8b7b      	ldrh	r3, [r7, #26]
 8003dd2:	f083 0320 	eor.w	r3, r3, #32
 8003dd6:	837b      	strh	r3, [r7, #26]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	441a      	add	r2, r3
 8003de6:	8b7b      	ldrh	r3, [r7, #26]
 8003de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8013      	strh	r3, [r2, #0]
=======
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 80e1 	bne.w	8003efe <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d126      	bne.n	8003d92 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	4413      	add	r3, r2
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	00da      	lsls	r2, r3, #3
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	4413      	add	r3, r2
 8003d66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	e01a      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d116      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dae:	4413      	add	r3, r2
 8003db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	00da      	lsls	r2, r3, #3
 8003db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dba:	4413      	add	r3, r2
 8003dbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d126      	bne.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x156>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	4413      	add	r3, r2
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	00da      	lsls	r2, r3, #3
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	e017      	b.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x186>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d113      	bne.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x186>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	4413      	add	r3, r2
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00da      	lsls	r2, r3, #3
 8003e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e46:	4413      	add	r3, r2
 8003e48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	2200      	movs	r2, #0
 8003e52:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	78db      	ldrb	r3, [r3, #3]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d123      	bne.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e76:	837b      	strh	r3, [r7, #26]
 8003e78:	8b7b      	ldrh	r3, [r7, #26]
 8003e7a:	f083 0320 	eor.w	r3, r3, #32
 8003e7e:	837b      	strh	r3, [r7, #26]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	8b7b      	ldrh	r3, [r7, #26]
 8003e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f009 f8ef 	bl	800cfe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e08:	88fb      	ldrh	r3, [r7, #6]
 8003e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01f      	beq.n	8003e52 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2c:	833b      	strh	r3, [r7, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	8b3b      	ldrh	r3, [r7, #24]
 8003e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e31f      	b.n	8004496 <HAL_PCD_EP_DB_Transmit+0x870>
=======
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f009 fd2b 	bl	800d906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01f      	beq.n	8003efa <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ed4:	833b      	strh	r3, [r7, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	8b3b      	ldrh	r3, [r7, #24]
 8003ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e31f      	b.n	800453e <HAL_PCD_EP_DB_Transmit+0x870>
>>>>>>> Stashed changes
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< Updated upstream
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d021      	beq.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	441a      	add	r2, r3
 8003e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	8013      	strh	r3, [r2, #0]
=======
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d021      	beq.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< Updated upstream
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	f040 82ca 	bne.w	8004444 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003eb8:	441a      	add	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ec6:	441a      	add	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d309      	bcc.n	8003eec <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee4:	1ad2      	subs	r2, r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	621a      	str	r2, [r3, #32]
 8003eea:	e015      	b.n	8003f18 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003ef4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f02:	e009      	b.n	8003f18 <HAL_PCD_EP_DB_Transmit+0x2f2>
=======
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	f040 82ca 	bne.w	80044ec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f60:	441a      	add	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f6e:	441a      	add	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d309      	bcc.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f8c:	1ad2      	subs	r2, r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	621a      	str	r2, [r3, #32]
 8003f92:	e015      	b.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003f9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003faa:	e009      	b.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x2f2>
>>>>>>> Stashed changes
        }
        else
        {
          ep->xfer_fill_db = 0U;
<<<<<<< Updated upstream
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2200      	movs	r2, #0
 8003f16:	621a      	str	r2, [r3, #32]
=======
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d15f      	bne.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f34:	4413      	add	r3, r2
 8003f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	00da      	lsls	r2, r3, #3
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f40:	4413      	add	r3, r2
 8003f42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e051      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f76:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f78:	d816      	bhi.n	8003fa8 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	029b      	lsls	r3, r3, #10
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	e037      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003fa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x398>
 8003fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	029b      	lsls	r3, r3, #10
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	e01b      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d117      	bne.n	8004018 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ffc:	4413      	add	r3, r2
 8003ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	00da      	lsls	r2, r3, #3
 8004006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004008:	4413      	add	r3, r2
 800400a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800400e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004012:	b29a      	uxth	r2, r3
 8004014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004016:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6959      	ldr	r1, [r3, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	891a      	ldrh	r2, [r3, #8]
 8004024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004026:	b29b      	uxth	r3, r3
 8004028:	f004 faa7 	bl	800857a <USB_WritePMA>
 800402c:	e20a      	b.n	8004444 <HAL_PCD_EP_DB_Transmit+0x81e>
=======
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d15f      	bne.n	8004088 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fdc:	4413      	add	r3, r2
 8003fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	00da      	lsls	r2, r3, #3
 8003fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe8:	4413      	add	r3, r2
 8003fea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffe:	801a      	strh	r2, [r3, #0]
 8004000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <HAL_PCD_EP_DB_Transmit+0x34e>
 8004006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004014:	b29a      	uxth	r2, r3
 8004016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	e051      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800401c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800401e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004020:	d816      	bhi.n	8004050 <HAL_PCD_EP_DB_Transmit+0x382>
 8004022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	653b      	str	r3, [r7, #80]	@ 0x50
 8004028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004034:	3301      	adds	r3, #1
 8004036:	653b      	str	r3, [r7, #80]	@ 0x50
 8004038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29a      	uxth	r2, r3
 800403e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004040:	b29b      	uxth	r3, r3
 8004042:	029b      	lsls	r3, r3, #10
 8004044:	b29b      	uxth	r3, r3
 8004046:	4313      	orrs	r3, r2
 8004048:	b29a      	uxth	r2, r3
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	e037      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	653b      	str	r3, [r7, #80]	@ 0x50
 8004056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_PCD_EP_DB_Transmit+0x398>
 8004060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004062:	3b01      	subs	r3, #1
 8004064:	653b      	str	r3, [r7, #80]	@ 0x50
 8004066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29a      	uxth	r2, r3
 800406c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	b29b      	uxth	r3, r3
 8004074:	4313      	orrs	r3, r2
 8004076:	b29b      	uxth	r3, r3
 8004078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004080:	b29a      	uxth	r2, r3
 8004082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	e01b      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d117      	bne.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040a4:	4413      	add	r3, r2
 80040a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	00da      	lsls	r2, r3, #3
 80040ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b0:	4413      	add	r3, r2
 80040b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6959      	ldr	r1, [r3, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	891a      	ldrh	r2, [r3, #8]
 80040cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f004 faa7 	bl	8008622 <USB_WritePMA>
 80040d4:	e20a      	b.n	80044ec <HAL_PCD_EP_DB_Transmit+0x81e>
>>>>>>> Stashed changes
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< Updated upstream
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	4413      	add	r3, r2
 8004048:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004052:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800405e:	429a      	cmp	r2, r3
 8004060:	d307      	bcc.n	8004072 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	619a      	str	r2, [r3, #24]
 8004070:	e002      	b.n	8004078 <HAL_PCD_EP_DB_Transmit+0x452>
=======
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	4413      	add	r3, r2
 80040f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004106:	429a      	cmp	r2, r3
 8004108:	d307      	bcc.n	800411a <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	619a      	str	r2, [r3, #24]
 8004118:	e002      	b.n	8004120 <HAL_PCD_EP_DB_Transmit+0x452>
>>>>>>> Stashed changes
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< Updated upstream
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
=======
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2200      	movs	r2, #0
 800411e:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< Updated upstream
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 80f6 	bne.w	800426e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d126      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800409e:	4413      	add	r3, r2
 80040a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	00da      	lsls	r2, r3, #3
 80040a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040aa:	4413      	add	r3, r2
 80040ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80040b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040bc:	b29a      	uxth	r2, r3
 80040be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e01a      	b.n	800410e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d116      	bne.n	800410e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040f4:	4413      	add	r3, r2
 80040f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	00da      	lsls	r2, r3, #3
 80040fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004100:	4413      	add	r3, r2
 8004102:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004106:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800410a:	2200      	movs	r2, #0
 800410c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d12f      	bne.n	800417e <HAL_PCD_EP_DB_Transmit+0x558>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004136:	4413      	add	r3, r2
 8004138:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	00da      	lsls	r2, r3, #3
 8004142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004146:	4413      	add	r3, r2
 8004148:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800414c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004150:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800415c:	b29a      	uxth	r2, r3
 800415e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004174:	b29a      	uxth	r2, r3
 8004176:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	e01c      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x592>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d118      	bne.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x592>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004196:	4413      	add	r3, r2
 8004198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	00da      	lsls	r2, r3, #3
 80041a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041a6:	4413      	add	r3, r2
 80041a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041b4:	2200      	movs	r2, #0
 80041b6:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	78db      	ldrb	r3, [r3, #3]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d127      	bne.n	8004210 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041da:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80041de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041e2:	f083 0320 	eor.w	r3, r3, #32
 80041e6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800420c:	b29b      	uxth	r3, r3
 800420e:	8013      	strh	r3, [r2, #0]
=======
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 80f6 	bne.w	8004316 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d126      	bne.n	8004180 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	677b      	str	r3, [r7, #116]	@ 0x74
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004146:	4413      	add	r3, r2
 8004148:	677b      	str	r3, [r7, #116]	@ 0x74
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	00da      	lsls	r2, r3, #3
 8004150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004152:	4413      	add	r3, r2
 8004154:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004158:	673b      	str	r3, [r7, #112]	@ 0x70
 800415a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004164:	b29a      	uxth	r2, r3
 8004166:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004178:	b29a      	uxth	r2, r3
 800417a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	e01a      	b.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d116      	bne.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800419c:	4413      	add	r3, r2
 800419e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	00da      	lsls	r2, r3, #3
 80041a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041a8:	4413      	add	r3, r2
 80041aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b2:	2200      	movs	r2, #0
 80041b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12f      	bne.n	8004226 <HAL_PCD_EP_DB_Transmit+0x558>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041de:	4413      	add	r3, r2
 80041e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	00da      	lsls	r2, r3, #3
 80041ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ee:	4413      	add	r3, r2
 80041f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004204:	b29a      	uxth	r2, r3
 8004206:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800421c:	b29a      	uxth	r2, r3
 800421e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	e01c      	b.n	8004260 <HAL_PCD_EP_DB_Transmit+0x592>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d118      	bne.n	8004260 <HAL_PCD_EP_DB_Transmit+0x592>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800423e:	4413      	add	r3, r2
 8004240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	00da      	lsls	r2, r3, #3
 800424a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800424e:	4413      	add	r3, r2
 8004250:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004258:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800425c:	2200      	movs	r2, #0
 800425e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	78db      	ldrb	r3, [r3, #3]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d127      	bne.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800427e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004282:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004286:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800428a:	f083 0320 	eor.w	r3, r3, #32
 800428e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80042a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< Updated upstream
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4619      	mov	r1, r3
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f008 fee5 	bl	800cfe6 <HAL_PCD_DataInStageCallback>
=======
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f009 fb21 	bl	800d906 <HAL_PCD_DataInStageCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< Updated upstream
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d121      	bne.n	800426a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800423c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004240:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800425e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e113      	b.n	8004496 <HAL_PCD_EP_DB_Transmit+0x870>
=======
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d121      	bne.n	8004312 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004306:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800430a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e113      	b.n	800453e <HAL_PCD_EP_DB_Transmit+0x870>
>>>>>>> Stashed changes
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< Updated upstream
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d121      	bne.n	80042bc <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004292:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]
=======
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d121      	bne.n	8004364 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004358:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800435c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< Updated upstream
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	f040 80be 	bne.w	8004444 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042d0:	441a      	add	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042de:	441a      	add	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d309      	bcc.n	8004304 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6a1a      	ldr	r2, [r3, #32]
 80042fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042fc:	1ad2      	subs	r2, r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	621a      	str	r2, [r3, #32]
 8004302:	e015      	b.n	8004330 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800430c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004310:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800431a:	e009      	b.n	8004330 <HAL_PCD_EP_DB_Transmit+0x70a>
=======
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800436a:	2b01      	cmp	r3, #1
 800436c:	f040 80be 	bne.w	80044ec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004378:	441a      	add	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004386:	441a      	add	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	429a      	cmp	r2, r3
 8004396:	d309      	bcc.n	80043ac <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	e015      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80043b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043b8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043c2:	e009      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x70a>
>>>>>>> Stashed changes
        }
        else
        {
          len = ep->xfer_len_db;
<<<<<<< Updated upstream
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2200      	movs	r2, #0
 8004326:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
=======
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2200      	movs	r2, #0
 80043ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
>>>>>>> Stashed changes
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d15f      	bne.n	80043fe <HAL_PCD_EP_DB_Transmit+0x7d8>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004352:	4413      	add	r3, r2
 8004354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800435e:	4413      	add	r3, r2
 8004360:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004364:	667b      	str	r3, [r7, #100]	@ 0x64
 8004366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004370:	b29a      	uxth	r2, r3
 8004372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_PCD_EP_DB_Transmit+0x76c>
 800437c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438a:	b29a      	uxth	r2, r3
 800438c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	e04e      	b.n	8004430 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004394:	2b3e      	cmp	r3, #62	@ 0x3e
 8004396:	d816      	bhi.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004398:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	663b      	str	r3, [r7, #96]	@ 0x60
 800439e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_PCD_EP_DB_Transmit+0x788>
 80043a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043aa:	3301      	adds	r3, #1
 80043ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	029b      	lsls	r3, r3, #10
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e034      	b.n	8004430 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80043cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <HAL_PCD_EP_DB_Transmit+0x7b6>
 80043d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d8:	3b01      	subs	r3, #1
 80043da:	663b      	str	r3, [r7, #96]	@ 0x60
 80043dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	029b      	lsls	r3, r3, #10
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	e018      	b.n	8004430 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d114      	bne.n	8004430 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800440e:	b29b      	uxth	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004414:	4413      	add	r3, r2
 8004416:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	00da      	lsls	r2, r3, #3
 800441e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004420:	4413      	add	r3, r2
 8004422:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004426:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800442a:	b29a      	uxth	r2, r3
 800442c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6959      	ldr	r1, [r3, #20]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	895a      	ldrh	r2, [r3, #10]
 800443c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800443e:	b29b      	uxth	r3, r3
 8004440:	f004 f89b 	bl	800857a <USB_WritePMA>
=======
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d15f      	bne.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043fa:	4413      	add	r3, r2
 80043fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	00da      	lsls	r2, r3, #3
 8004404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004406:	4413      	add	r3, r2
 8004408:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800440c:	667b      	str	r3, [r7, #100]	@ 0x64
 800440e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004418:	b29a      	uxth	r2, r3
 800441a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <HAL_PCD_EP_DB_Transmit+0x76c>
 8004424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004432:	b29a      	uxth	r2, r3
 8004434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	e04e      	b.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800443a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800443c:	2b3e      	cmp	r3, #62	@ 0x3e
 800443e:	d816      	bhi.n	800446e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	663b      	str	r3, [r7, #96]	@ 0x60
 8004446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_PCD_EP_DB_Transmit+0x788>
 8004450:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004452:	3301      	adds	r3, #1
 8004454:	663b      	str	r3, [r7, #96]	@ 0x60
 8004456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29a      	uxth	r2, r3
 800445c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800445e:	b29b      	uxth	r3, r3
 8004460:	029b      	lsls	r3, r3, #10
 8004462:	b29b      	uxth	r3, r3
 8004464:	4313      	orrs	r3, r2
 8004466:	b29a      	uxth	r2, r3
 8004468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	e034      	b.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800446e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	663b      	str	r3, [r7, #96]	@ 0x60
 8004474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800447e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004480:	3b01      	subs	r3, #1
 8004482:	663b      	str	r3, [r7, #96]	@ 0x60
 8004484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29a      	uxth	r2, r3
 800448a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800448c:	b29b      	uxth	r3, r3
 800448e:	029b      	lsls	r3, r3, #10
 8004490:	b29b      	uxth	r3, r3
 8004492:	4313      	orrs	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e018      	b.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d114      	bne.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044bc:	4413      	add	r3, r2
 80044be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	00da      	lsls	r2, r3, #3
 80044c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c8:	4413      	add	r3, r2
 80044ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6959      	ldr	r1, [r3, #20]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	895a      	ldrh	r2, [r3, #10]
 80044e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f004 f89b 	bl	8008622 <USB_WritePMA>
>>>>>>> Stashed changes
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
<<<<<<< Updated upstream
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800445a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445e:	82fb      	strh	r3, [r7, #22]
 8004460:	8afb      	ldrh	r3, [r7, #22]
 8004462:	f083 0310 	eor.w	r3, r3, #16
 8004466:	82fb      	strh	r3, [r7, #22]
 8004468:	8afb      	ldrh	r3, [r7, #22]
 800446a:	f083 0320 	eor.w	r3, r3, #32
 800446e:	82fb      	strh	r3, [r7, #22]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	8afb      	ldrh	r3, [r7, #22]
 8004480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800448c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004490:	b29b      	uxth	r3, r3
 8004492:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3798      	adds	r7, #152	@ 0x98
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_PCDEx_PMAConfig>:
=======
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004506:	82fb      	strh	r3, [r7, #22]
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	f083 0310 	eor.w	r3, r3, #16
 800450e:	82fb      	strh	r3, [r7, #22]
 8004510:	8afb      	ldrh	r3, [r7, #22]
 8004512:	f083 0320 	eor.w	r3, r3, #32
 8004516:	82fb      	strh	r3, [r7, #22]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	8afb      	ldrh	r3, [r7, #22]
 8004528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800452c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004538:	b29b      	uxth	r3, r3
 800453a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3798      	adds	r7, #152	@ 0x98
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_PCDEx_PMAConfig>:
>>>>>>> Stashed changes
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
<<<<<<< Updated upstream
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	817b      	strh	r3, [r7, #10]
 80044ac:	4613      	mov	r3, r2
 80044ae:	813b      	strh	r3, [r7, #8]
=======
 8004546:	b480      	push	{r7}
 8004548:	b087      	sub	sp, #28
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	817b      	strh	r3, [r7, #10]
 8004554:	4613      	mov	r3, r2
 8004556:	813b      	strh	r3, [r7, #8]
>>>>>>> Stashed changes
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< Updated upstream
 80044b0:	897b      	ldrh	r3, [r7, #10]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044bc:	897b      	ldrh	r3, [r7, #10]
 80044be:	f003 0207 	and.w	r2, r3, #7
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	3310      	adds	r3, #16
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e009      	b.n	80044e8 <HAL_PCDEx_PMAConfig+0x4a>
=======
 8004558:	897b      	ldrh	r3, [r7, #10]
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004564:	897b      	ldrh	r3, [r7, #10]
 8004566:	f003 0207 	and.w	r2, r3, #7
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	3310      	adds	r3, #16
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e009      	b.n	8004590 <HAL_PCDEx_PMAConfig+0x4a>
>>>>>>> Stashed changes
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< Updated upstream
 80044d4:	897a      	ldrh	r2, [r7, #10]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
=======
 800457c:	897a      	ldrh	r2, [r7, #10]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
<<<<<<< Updated upstream
 80044e8:	893b      	ldrh	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	80da      	strh	r2, [r3, #6]
 80044fc:	e00b      	b.n	8004516 <HAL_PCDEx_PMAConfig+0x78>
=======
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d107      	bne.n	80045a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	80da      	strh	r2, [r3, #6]
 80045a4:	e00b      	b.n	80045be <HAL_PCDEx_PMAConfig+0x78>
>>>>>>> Stashed changes
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
<<<<<<< Updated upstream
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2201      	movs	r2, #1
 8004502:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	b29a      	uxth	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	b29a      	uxth	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	815a      	strh	r2, [r3, #10]
=======
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2201      	movs	r2, #1
 80045aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	815a      	strh	r2, [r3, #10]
>>>>>>> Stashed changes
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< Updated upstream
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_PCDEx_ActivateLPM>:
=======
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_PCDEx_ActivateLPM>:
>>>>>>> Stashed changes
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004548:	b29b      	uxth	r3, r3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800455c:	b29b      	uxth	r3, r3
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_PWREx_ControlVoltageScaling>:
=======
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004604:	b29b      	uxth	r3, r3
 8004606:	f043 0302 	orr.w	r3, r3, #2
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
=======
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< Updated upstream
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d141      	bne.n	800460a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004586:	4b4b      	ldr	r3, [pc, #300]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004592:	d131      	bne.n	80045f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004594:	4b47      	ldr	r3, [pc, #284]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459a:	4a46      	ldr	r2, [pc, #280]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045a4:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045ac:	4a41      	ldr	r2, [pc, #260]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045b4:	4b40      	ldr	r3, [pc, #256]	@ (80046b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2232      	movs	r2, #50	@ 0x32
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	4a3f      	ldr	r2, [pc, #252]	@ (80046bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	0c9b      	lsrs	r3, r3, #18
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ca:	e002      	b.n	80045d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045d2:	4b38      	ldr	r3, [pc, #224]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045de:	d102      	bne.n	80045e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f2      	bne.n	80045cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045e6:	4b33      	ldr	r3, [pc, #204]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f2:	d158      	bne.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e057      	b.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d141      	bne.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800462e:	4b4b      	ldr	r3, [pc, #300]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463a:	d131      	bne.n	80046a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800463c:	4b47      	ldr	r3, [pc, #284]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004642:	4a46      	ldr	r2, [pc, #280]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800464c:	4b43      	ldr	r3, [pc, #268]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004654:	4a41      	ldr	r2, [pc, #260]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800465a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800465c:	4b40      	ldr	r3, [pc, #256]	@ (8004760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2232      	movs	r2, #50	@ 0x32
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	4a3f      	ldr	r2, [pc, #252]	@ (8004764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	0c9b      	lsrs	r3, r3, #18
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004672:	e002      	b.n	800467a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800467a:	4b38      	ldr	r3, [pc, #224]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004686:	d102      	bne.n	800468e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f2      	bne.n	8004674 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800468e:	4b33      	ldr	r3, [pc, #204]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469a:	d158      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e057      	b.n	8004750 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 80045f8:	4b2e      	ldr	r3, [pc, #184]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fe:	4a2d      	ldr	r2, [pc, #180]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004604:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004608:	e04d      	b.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004610:	d141      	bne.n	8004696 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004612:	4b28      	ldr	r3, [pc, #160]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461e:	d131      	bne.n	8004684 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004620:	4b24      	ldr	r3, [pc, #144]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004626:	4a23      	ldr	r2, [pc, #140]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004630:	4b20      	ldr	r3, [pc, #128]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004638:	4a1e      	ldr	r2, [pc, #120]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800463e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004640:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2232      	movs	r2, #50	@ 0x32
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	4a1c      	ldr	r2, [pc, #112]	@ (80046bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800464c:	fba2 2303 	umull	r2, r3, r2, r3
 8004650:	0c9b      	lsrs	r3, r3, #18
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004656:	e002      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b01      	subs	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466a:	d102      	bne.n	8004672 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f2      	bne.n	8004658 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004672:	4b10      	ldr	r3, [pc, #64]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467e:	d112      	bne.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e011      	b.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 80046a0:	4b2e      	ldr	r3, [pc, #184]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046a6:	4a2d      	ldr	r2, [pc, #180]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046b0:	e04d      	b.n	800474e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b8:	d141      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ba:	4b28      	ldr	r3, [pc, #160]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c6:	d131      	bne.n	800472c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ce:	4a23      	ldr	r2, [pc, #140]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046d8:	4b20      	ldr	r3, [pc, #128]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046e0:	4a1e      	ldr	r2, [pc, #120]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2232      	movs	r2, #50	@ 0x32
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046f4:	fba2 2303 	umull	r2, r3, r2, r3
 80046f8:	0c9b      	lsrs	r3, r3, #18
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046fe:	e002      	b.n	8004706 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004712:	d102      	bne.n	800471a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f2      	bne.n	8004700 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800471a:	4b10      	ldr	r3, [pc, #64]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004726:	d112      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e011      	b.n	8004750 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 8004684:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800468a:	4a0a      	ldr	r2, [pc, #40]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004690:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004694:	e007      	b.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004732:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800473c:	e007      	b.n	800474e <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< Updated upstream
 8004696:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800469e:	4a05      	ldr	r2, [pc, #20]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046a4:	6013      	str	r3, [r2, #0]
=======
 800473e:	4b07      	ldr	r3, [pc, #28]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004746:	4a05      	ldr	r2, [pc, #20]	@ (800475c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800474c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
<<<<<<< Updated upstream
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40007000 	.word	0x40007000
 80046b8:	20000000 	.word	0x20000000
 80046bc:	431bde83 	.word	0x431bde83

080046c0 <HAL_PWREx_DisableUCPDDeadBattery>:
=======
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40007000 	.word	0x40007000
 8004760:	20000000 	.word	0x20000000
 8004764:	431bde83 	.word	0x431bde83

08004768 <HAL_PWREx_DisableUCPDDeadBattery>:
>>>>>>> Stashed changes
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
<<<<<<< Updated upstream
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80046ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ce:	6093      	str	r3, [r2, #8]
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40007000 	.word	0x40007000

080046e0 <HAL_RCC_OscConfig>:
=======
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004776:	6093      	str	r3, [r2, #8]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40007000 	.word	0x40007000

08004788 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
=======
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e2fe      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
=======
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e2fe      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d075      	beq.n	80047ea <HAL_RCC_OscConfig+0x10a>
=======
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d075      	beq.n	8004892 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80046fe:	4b97      	ldr	r3, [pc, #604]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004708:	4b94      	ldr	r3, [pc, #592]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d102      	bne.n	800471e <HAL_RCC_OscConfig+0x3e>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d002      	beq.n	8004724 <HAL_RCC_OscConfig+0x44>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d10b      	bne.n	800473c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	4b8d      	ldr	r3, [pc, #564]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d05b      	beq.n	80047e8 <HAL_RCC_OscConfig+0x108>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d157      	bne.n	80047e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e2d9      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
=======
 80047a6:	4b97      	ldr	r3, [pc, #604]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b0:	4b94      	ldr	r3, [pc, #592]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_OscConfig+0x3e>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_OscConfig+0x44>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	4b8d      	ldr	r3, [pc, #564]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05b      	beq.n	8004890 <HAL_RCC_OscConfig+0x108>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d157      	bne.n	8004890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e2d9      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004744:	d106      	bne.n	8004754 <HAL_RCC_OscConfig+0x74>
 8004746:	4b85      	ldr	r3, [pc, #532]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a84      	ldr	r2, [pc, #528]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e01d      	b.n	8004790 <HAL_RCC_OscConfig+0xb0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x98>
 800475e:	4b7f      	ldr	r3, [pc, #508]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a7e      	ldr	r2, [pc, #504]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	4b7c      	ldr	r3, [pc, #496]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7b      	ldr	r2, [pc, #492]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0xb0>
 8004778:	4b78      	ldr	r3, [pc, #480]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a77      	ldr	r2, [pc, #476]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800477e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	4b75      	ldr	r3, [pc, #468]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a74      	ldr	r2, [pc, #464]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800478a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d013      	beq.n	80047c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fc feb2 	bl	8001500 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fc feae 	bl	8001500 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	@ 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e29e      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b2:	4b6a      	ldr	r3, [pc, #424]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0xc0>
 80047be:	e014      	b.n	80047ea <HAL_RCC_OscConfig+0x10a>
=======
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ec:	d106      	bne.n	80047fc <HAL_RCC_OscConfig+0x74>
 80047ee:	4b85      	ldr	r3, [pc, #532]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a84      	ldr	r2, [pc, #528]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x98>
 8004806:	4b7f      	ldr	r3, [pc, #508]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b7c      	ldr	r3, [pc, #496]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a7b      	ldr	r2, [pc, #492]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 8004820:	4b78      	ldr	r3, [pc, #480]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a77      	ldr	r2, [pc, #476]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b75      	ldr	r3, [pc, #468]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a74      	ldr	r2, [pc, #464]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fc feb2 	bl	80015a8 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004848:	f7fc feae 	bl	80015a8 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	@ 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e29e      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0xc0>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80047c0:	f7fc fe9e 	bl	8001500 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fc fe9a 	bl	8001500 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	@ 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e28a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047da:	4b60      	ldr	r3, [pc, #384]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0xe8>
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	bf00      	nop
=======
 8004868:	f7fc fe9e 	bl	80015a8 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004870:	f7fc fe9a 	bl	80015a8 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	@ 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e28a      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	4b60      	ldr	r3, [pc, #384]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0xe8>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d075      	beq.n	80048e2 <HAL_RCC_OscConfig+0x202>
=======
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d075      	beq.n	800498a <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 80047f6:	4b59      	ldr	r3, [pc, #356]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004800:	4b56      	ldr	r3, [pc, #344]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d102      	bne.n	8004816 <HAL_RCC_OscConfig+0x136>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d002      	beq.n	800481c <HAL_RCC_OscConfig+0x13c>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d11f      	bne.n	800485c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481c:	4b4f      	ldr	r3, [pc, #316]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_OscConfig+0x154>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e25d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
=======
 800489e:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a8:	4b56      	ldr	r3, [pc, #344]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	d102      	bne.n	80048be <HAL_RCC_OscConfig+0x136>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d002      	beq.n	80048c4 <HAL_RCC_OscConfig+0x13c>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d11f      	bne.n	8004904 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_OscConfig+0x154>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e25d      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8004834:	4b49      	ldr	r3, [pc, #292]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	4946      	ldr	r1, [pc, #280]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004848:	4b45      	ldr	r3, [pc, #276]	@ (8004960 <HAL_RCC_OscConfig+0x280>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7fc fd1f 	bl	8001290 <HAL_InitTick>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d043      	beq.n	80048e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e249      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
=======
 80048dc:	4b49      	ldr	r3, [pc, #292]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	4946      	ldr	r1, [pc, #280]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048f0:	4b45      	ldr	r3, [pc, #276]	@ (8004a08 <HAL_RCC_OscConfig+0x280>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc fd1f 	bl	8001338 <HAL_InitTick>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d043      	beq.n	8004988 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e249      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d023      	beq.n	80048ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b3d      	ldr	r3, [pc, #244]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3c      	ldr	r2, [pc, #240]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800486a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800486e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fc fe46 	bl	8001500 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004878:	f7fc fe42 	bl	8001500 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e232      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800488a:	4b34      	ldr	r3, [pc, #208]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x198>
=======
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d023      	beq.n	8004954 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800490c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a3c      	ldr	r2, [pc, #240]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fc fe46 	bl	80015a8 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004920:	f7fc fe42 	bl	80015a8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e232      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004932:	4b34      	ldr	r3, [pc, #208]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x198>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8004896:	4b31      	ldr	r3, [pc, #196]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	492d      	ldr	r1, [pc, #180]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
 80048aa:	e01a      	b.n	80048e2 <HAL_RCC_OscConfig+0x202>
=======
 800493e:	4b31      	ldr	r3, [pc, #196]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	492d      	ldr	r1, [pc, #180]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 800494e:	4313      	orrs	r3, r2
 8004950:	604b      	str	r3, [r1, #4]
 8004952:	e01a      	b.n	800498a <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80048ac:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80048b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fc fe22 	bl	8001500 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c0:	f7fc fe1e 	bl	8001500 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e20e      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d2:	4b22      	ldr	r3, [pc, #136]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x1e0>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e0:	bf00      	nop
=======
 8004954:	4b2b      	ldr	r3, [pc, #172]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2a      	ldr	r2, [pc, #168]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 800495a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800495e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fc fe22 	bl	80015a8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004968:	f7fc fe1e 	bl	80015a8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e20e      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800497a:	4b22      	ldr	r3, [pc, #136]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x1e0>
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004988:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d041      	beq.n	8004972 <HAL_RCC_OscConfig+0x292>
=======
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d041      	beq.n	8004a1a <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01c      	beq.n	8004930 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f6:	4b19      	ldr	r3, [pc, #100]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80048f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048fc:	4a17      	ldr	r2, [pc, #92]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fc fdfb 	bl	8001500 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490e:	f7fc fdf7 	bl	8001500 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1e7      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004920:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0ef      	beq.n	800490e <HAL_RCC_OscConfig+0x22e>
 800492e:	e020      	b.n	8004972 <HAL_RCC_OscConfig+0x292>
=======
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499e:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80049a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a4:	4a17      	ldr	r2, [pc, #92]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fc fdfb 	bl	80015a8 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fc fdf7 	bl	80015a8 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e1e7      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ef      	beq.n	80049b6 <HAL_RCC_OscConfig+0x22e>
 80049d6:	e020      	b.n	8004a1a <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <HAL_RCC_OscConfig+0x27c>)
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fc fdde 	bl	8001500 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004946:	e00d      	b.n	8004964 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004948:	f7fc fdda 	bl	8001500 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d906      	bls.n	8004964 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1ca      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000
 8004960:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004964:	4b8c      	ldr	r3, [pc, #560]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ea      	bne.n	8004948 <HAL_RCC_OscConfig+0x268>
=======
 80049d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80049da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fc fdde 	bl	80015a8 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ee:	e00d      	b.n	8004a0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f0:	f7fc fdda 	bl	80015a8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d906      	bls.n	8004a0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1ca      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ea      	bne.n	80049f0 <HAL_RCC_OscConfig+0x268>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80a6 	beq.w	8004acc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004980:	2300      	movs	r3, #0
 8004982:	77fb      	strb	r3, [r7, #31]
=======
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80a6 	beq.w	8004b74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< Updated upstream
 8004984:	4b84      	ldr	r3, [pc, #528]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_OscConfig+0x2b4>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x2b6>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 80049a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a6:	4b7c      	ldr	r3, [pc, #496]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049b2:	2301      	movs	r3, #1
 80049b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b6:	4b79      	ldr	r3, [pc, #484]	@ (8004b9c <HAL_RCC_OscConfig+0x4bc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d118      	bne.n	80049f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049c2:	4b76      	ldr	r3, [pc, #472]	@ (8004b9c <HAL_RCC_OscConfig+0x4bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a75      	ldr	r2, [pc, #468]	@ (8004b9c <HAL_RCC_OscConfig+0x4bc>)
 80049c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ce:	f7fc fd97 	bl	8001500 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d4:	e008      	b.n	80049e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d6:	f7fc fd93 	bl	8001500 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e183      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e8:	4b6c      	ldr	r3, [pc, #432]	@ (8004b9c <HAL_RCC_OscConfig+0x4bc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <HAL_RCC_OscConfig+0x2f6>
=======
 8004a2c:	4b84      	ldr	r3, [pc, #528]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_OscConfig+0x2b4>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_RCC_OscConfig+0x2b6>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a42:	4b7f      	ldr	r3, [pc, #508]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a46:	4a7e      	ldr	r2, [pc, #504]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5e:	4b79      	ldr	r3, [pc, #484]	@ (8004c44 <HAL_RCC_OscConfig+0x4bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d118      	bne.n	8004a9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a6a:	4b76      	ldr	r3, [pc, #472]	@ (8004c44 <HAL_RCC_OscConfig+0x4bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a75      	ldr	r2, [pc, #468]	@ (8004c44 <HAL_RCC_OscConfig+0x4bc>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a76:	f7fc fd97 	bl	80015a8 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7e:	f7fc fd93 	bl	80015a8 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e183      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a90:	4b6c      	ldr	r3, [pc, #432]	@ (8004c44 <HAL_RCC_OscConfig+0x4bc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x2f6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d108      	bne.n	8004a0e <HAL_RCC_OscConfig+0x32e>
 80049fc:	4b66      	ldr	r3, [pc, #408]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	4a65      	ldr	r2, [pc, #404]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a0c:	e024      	b.n	8004a58 <HAL_RCC_OscConfig+0x378>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d110      	bne.n	8004a38 <HAL_RCC_OscConfig+0x358>
 8004a16:	4b60      	ldr	r3, [pc, #384]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a1e:	f043 0304 	orr.w	r3, r3, #4
 8004a22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a26:	4b5c      	ldr	r3, [pc, #368]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2c:	4a5a      	ldr	r2, [pc, #360]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a36:	e00f      	b.n	8004a58 <HAL_RCC_OscConfig+0x378>
 8004a38:	4b57      	ldr	r3, [pc, #348]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	4a56      	ldr	r2, [pc, #344]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a48:	4b53      	ldr	r3, [pc, #332]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4e:	4a52      	ldr	r2, [pc, #328]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d016      	beq.n	8004a8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fc fd4e 	bl	8001500 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fc fd4a 	bl	8001500 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e138      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a7e:	4b46      	ldr	r3, [pc, #280]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ed      	beq.n	8004a68 <HAL_RCC_OscConfig+0x388>
 8004a8c:	e015      	b.n	8004aba <HAL_RCC_OscConfig+0x3da>
=======
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d108      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x32e>
 8004aa4:	4b66      	ldr	r3, [pc, #408]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aaa:	4a65      	ldr	r2, [pc, #404]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ab4:	e024      	b.n	8004b00 <HAL_RCC_OscConfig+0x378>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	d110      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x358>
 8004abe:	4b60      	ldr	r3, [pc, #384]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004ac6:	f043 0304 	orr.w	r3, r3, #4
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ace:	4b5c      	ldr	r3, [pc, #368]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ade:	e00f      	b.n	8004b00 <HAL_RCC_OscConfig+0x378>
 8004ae0:	4b57      	ldr	r3, [pc, #348]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae6:	4a56      	ldr	r2, [pc, #344]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004af0:	4b53      	ldr	r3, [pc, #332]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af6:	4a52      	ldr	r2, [pc, #328]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004af8:	f023 0304 	bic.w	r3, r3, #4
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d016      	beq.n	8004b36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fc fd4e 	bl	80015a8 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fc fd4a 	bl	80015a8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e138      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b26:	4b46      	ldr	r3, [pc, #280]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ed      	beq.n	8004b10 <HAL_RCC_OscConfig+0x388>
 8004b34:	e015      	b.n	8004b62 <HAL_RCC_OscConfig+0x3da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004a8e:	f7fc fd37 	bl	8001500 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fc fd33 	bl	8001500 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e121      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aac:	4b3a      	ldr	r3, [pc, #232]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1ed      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3b6>
=======
 8004b36:	f7fc fd37 	bl	80015a8 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fc fd33 	bl	80015a8 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e121      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b54:	4b3a      	ldr	r3, [pc, #232]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1ed      	bne.n	8004b3e <HAL_RCC_OscConfig+0x3b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac0:	4b35      	ldr	r3, [pc, #212]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac4:	4a34      	ldr	r2, [pc, #208]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8004b62:	7ffb      	ldrb	r3, [r7, #31]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d105      	bne.n	8004b74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b68:	4b35      	ldr	r3, [pc, #212]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	4a34      	ldr	r2, [pc, #208]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03c      	beq.n	8004b52 <HAL_RCC_OscConfig+0x472>
=======
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d03c      	beq.n	8004bfa <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af0:	f7fc fd06 	bl	8001500 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af8:	f7fc fd02 	bl	8001500 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0f2      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b0a:	4b23      	ldr	r3, [pc, #140]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ef      	beq.n	8004af8 <HAL_RCC_OscConfig+0x418>
 8004b18:	e01b      	b.n	8004b52 <HAL_RCC_OscConfig+0x472>
=======
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b88:	4b2d      	ldr	r3, [pc, #180]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fc fd06 	bl	80015a8 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba0:	f7fc fd02 	bl	80015a8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0f2      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb2:	4b23      	ldr	r3, [pc, #140]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ef      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x418>
 8004bc0:	e01b      	b.n	8004bfa <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b20:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2a:	f7fc fce9 	bl	8001500 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b32:	f7fc fce5 	bl	8001500 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0d5      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b44:	4b14      	ldr	r3, [pc, #80]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ef      	bne.n	8004b32 <HAL_RCC_OscConfig+0x452>
=======
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd2:	f7fc fce9 	bl	80015a8 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bda:	f7fc fce5 	bl	80015a8 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0d5      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bec:	4b14      	ldr	r3, [pc, #80]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1ef      	bne.n	8004bda <HAL_RCC_OscConfig+0x452>
>>>>>>> Stashed changes

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80c9 	beq.w	8004cee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	f000 8083 	beq.w	8004c70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d15e      	bne.n	8004c30 <HAL_RCC_OscConfig+0x550>
=======
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80c9 	beq.w	8004d96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c04:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	f000 8083 	beq.w	8004d18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d15e      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x550>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8004b72:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a08      	ldr	r2, [pc, #32]	@ (8004b98 <HAL_RCC_OscConfig+0x4b8>)
 8004b78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7e:	f7fc fcbf 	bl	8001500 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b84:	e00c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b86:	f7fc fcbb 	bl	8001500 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d905      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0ab      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba0:	4b55      	ldr	r3, [pc, #340]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ec      	bne.n	8004b86 <HAL_RCC_OscConfig+0x4a6>
=======
 8004c1a:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <HAL_RCC_OscConfig+0x4b8>)
 8004c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fc fcbf 	bl	80015a8 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c2c:	e00c      	b.n	8004c48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2e:	f7fc fcbb 	bl	80015a8 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d905      	bls.n	8004c48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0ab      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c48:	4b55      	ldr	r3, [pc, #340]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ec      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4a6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8004bac:	4b52      	ldr	r3, [pc, #328]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	4b52      	ldr	r3, [pc, #328]	@ (8004cfc <HAL_RCC_OscConfig+0x61c>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6a11      	ldr	r1, [r2, #32]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	0112      	lsls	r2, r2, #4
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004bc6:	0212      	lsls	r2, r2, #8
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004bce:	0852      	lsrs	r2, r2, #1
 8004bd0:	3a01      	subs	r2, #1
 8004bd2:	0552      	lsls	r2, r2, #21
 8004bd4:	4311      	orrs	r1, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bda:	0852      	lsrs	r2, r2, #1
 8004bdc:	3a01      	subs	r2, #1
 8004bde:	0652      	lsls	r2, r2, #25
 8004be0:	4311      	orrs	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004be6:	06d2      	lsls	r2, r2, #27
 8004be8:	430a      	orrs	r2, r1
 8004bea:	4943      	ldr	r1, [pc, #268]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
=======
 8004c54:	4b52      	ldr	r3, [pc, #328]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	4b52      	ldr	r3, [pc, #328]	@ (8004da4 <HAL_RCC_OscConfig+0x61c>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6a11      	ldr	r1, [r2, #32]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c64:	3a01      	subs	r2, #1
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	4311      	orrs	r1, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c6e:	0212      	lsls	r2, r2, #8
 8004c70:	4311      	orrs	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c76:	0852      	lsrs	r2, r2, #1
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0552      	lsls	r2, r2, #21
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c82:	0852      	lsrs	r2, r2, #1
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0652      	lsls	r2, r2, #25
 8004c88:	4311      	orrs	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c8e:	06d2      	lsls	r2, r2, #27
 8004c90:	430a      	orrs	r2, r1
 8004c92:	4943      	ldr	r1, [pc, #268]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8004bf0:	4b41      	ldr	r3, [pc, #260]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a40      	ldr	r2, [pc, #256]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a3d      	ldr	r2, [pc, #244]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fc fc7a 	bl	8001500 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fc fc76 	bl	8001500 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e066      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c22:	4b35      	ldr	r3, [pc, #212]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x530>
 8004c2e:	e05e      	b.n	8004cee <HAL_RCC_OscConfig+0x60e>
=======
 8004c98:	4b41      	ldr	r3, [pc, #260]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a40      	ldr	r2, [pc, #256]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fc fc7a 	bl	80015a8 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fc fc76 	bl	80015a8 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e066      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	4b35      	ldr	r3, [pc, #212]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x530>
 8004cd6:	e05e      	b.n	8004d96 <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8004c30:	4b31      	ldr	r3, [pc, #196]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a30      	ldr	r2, [pc, #192]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fc fc60 	bl	8001500 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fc fc5c 	bl	8001500 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e04c      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c56:	4b28      	ldr	r3, [pc, #160]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x564>
=======
 8004cd8:	4b31      	ldr	r3, [pc, #196]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a30      	ldr	r2, [pc, #192]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fc fc60 	bl	80015a8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fc fc5c 	bl	80015a8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e04c      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfe:	4b28      	ldr	r3, [pc, #160]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x564>
>>>>>>> Stashed changes
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
<<<<<<< Updated upstream
 8004c62:	4b25      	ldr	r3, [pc, #148]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	4924      	ldr	r1, [pc, #144]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c68:	4b25      	ldr	r3, [pc, #148]	@ (8004d00 <HAL_RCC_OscConfig+0x620>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60cb      	str	r3, [r1, #12]
 8004c6e:	e03e      	b.n	8004cee <HAL_RCC_OscConfig+0x60e>
=======
 8004d0a:	4b25      	ldr	r3, [pc, #148]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	4924      	ldr	r1, [pc, #144]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004d10:	4b25      	ldr	r3, [pc, #148]	@ (8004da8 <HAL_RCC_OscConfig+0x620>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	60cb      	str	r3, [r1, #12]
 8004d16:	e03e      	b.n	8004d96 <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e039      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
=======
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e039      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf8 <HAL_RCC_OscConfig+0x618>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 0203 	and.w	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d12c      	bne.n	8004cea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d123      	bne.n	8004cea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d11b      	bne.n	8004cea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d113      	bne.n	8004cea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_RCC_OscConfig+0x610>
=======
 8004d24:	4b1e      	ldr	r3, [pc, #120]	@ (8004da0 <HAL_RCC_OscConfig+0x618>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0203 	and.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d12c      	bne.n	8004d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	3b01      	subs	r3, #1
 8004d44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d123      	bne.n	8004d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11b      	bne.n	8004d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d113      	bne.n	8004d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	3b01      	subs	r3, #1
 8004d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
  }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	019f800c 	.word	0x019f800c
 8004d00:	feeefffc 	.word	0xfeeefffc

08004d04 <HAL_RCC_ClockConfig>:
=======
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	019f800c 	.word	0x019f800c
 8004da8:	feeefffc 	.word	0xfeeefffc

08004dac <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e11e      	b.n	8004f5a <HAL_RCC_ClockConfig+0x256>
=======
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e11e      	b.n	8005002 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8004d1c:	4b91      	ldr	r3, [pc, #580]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d910      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b8e      	ldr	r3, [pc, #568]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 020f 	bic.w	r2, r3, #15
 8004d32:	498c      	ldr	r1, [pc, #560]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]
=======
 8004dc4:	4b91      	ldr	r3, [pc, #580]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d910      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 020f 	bic.w	r2, r3, #15
 8004dda:	498c      	ldr	r1, [pc, #560]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8004d3a:	4b8a      	ldr	r3, [pc, #552]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e106      	b.n	8004f5a <HAL_RCC_ClockConfig+0x256>
=======
 8004de2:	4b8a      	ldr	r3, [pc, #552]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e106      	b.n	8005002 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d073      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x13c>
=======
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d073      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x13c>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d129      	bne.n	8004db4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d60:	4b81      	ldr	r3, [pc, #516]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0f4      	b.n	8004f5a <HAL_RCC_ClockConfig+0x256>
=======
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d129      	bne.n	8004e5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e08:	4b81      	ldr	r3, [pc, #516]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0f4      	b.n	8005002 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
<<<<<<< Updated upstream
 8004d70:	f000 f9d0 	bl	8005114 <RCC_GetSysClockFreqFromPLLSource>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4a7c      	ldr	r2, [pc, #496]	@ (8004f6c <HAL_RCC_ClockConfig+0x268>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d93f      	bls.n	8004dfe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d033      	beq.n	8004dfe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d12f      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d9e:	4b72      	ldr	r3, [pc, #456]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004da6:	4a70      	ldr	r2, [pc, #448]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e024      	b.n	8004dfe <HAL_RCC_ClockConfig+0xfa>
=======
 8004e18:	f000 f9d0 	bl	80051bc <RCC_GetSysClockFreqFromPLLSource>
 8004e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4a7c      	ldr	r2, [pc, #496]	@ (8005014 <HAL_RCC_ClockConfig+0x268>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d93f      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e26:	4b7a      	ldr	r3, [pc, #488]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d033      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d12f      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e46:	4b72      	ldr	r3, [pc, #456]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e4e:	4a70      	ldr	r2, [pc, #448]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e56:	2380      	movs	r3, #128	@ 0x80
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e024      	b.n	8004ea6 <HAL_RCC_ClockConfig+0xfa>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0c6      	b.n	8004f5a <HAL_RCC_ClockConfig+0x256>
=======
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d107      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e64:	4b6a      	ldr	r3, [pc, #424]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0c6      	b.n	8005002 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
 8004dcc:	4b66      	ldr	r3, [pc, #408]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0be      	b.n	8004f5a <HAL_RCC_ClockConfig+0x256>
=======
 8004e74:	4b66      	ldr	r3, [pc, #408]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0be      	b.n	8005002 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
<<<<<<< Updated upstream
 8004ddc:	f000 f8ce 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4a61      	ldr	r2, [pc, #388]	@ (8004f6c <HAL_RCC_ClockConfig+0x268>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d909      	bls.n	8004dfe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dea:	4b5f      	ldr	r3, [pc, #380]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004df2:	4a5d      	ldr	r2, [pc, #372]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dfa:	2380      	movs	r3, #128	@ 0x80
 8004dfc:	617b      	str	r3, [r7, #20]
=======
 8004e84:	f000 f8ce 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4a61      	ldr	r2, [pc, #388]	@ (8005014 <HAL_RCC_ClockConfig+0x268>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d909      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e92:	4b5f      	ldr	r3, [pc, #380]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ea2:	2380      	movs	r3, #128	@ 0x80
 8004ea4:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8004dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f023 0203 	bic.w	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4957      	ldr	r1, [pc, #348]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e10:	f7fc fb76 	bl	8001500 <HAL_GetTick>
 8004e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7fc fb72 	bl	8001500 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e095      	b.n	8004f5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 020c 	and.w	r2, r3, #12
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d1eb      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x114>
=======
 8004ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 0203 	bic.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4957      	ldr	r1, [pc, #348]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb8:	f7fc fb76 	bl	80015a8 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec0:	f7fc fb72 	bl	80015a8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e095      	b.n	8005002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 020c 	and.w	r2, r3, #12
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d1eb      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0x114>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d023      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x190>
=======
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d023      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x190>
>>>>>>> Stashed changes
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e58:	4b43      	ldr	r3, [pc, #268]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a42      	ldr	r2, [pc, #264]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e70:	4b3d      	ldr	r3, [pc, #244]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e78:	4a3b      	ldr	r2, [pc, #236]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e7e:	6093      	str	r3, [r2, #8]
=======
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f00:	4b43      	ldr	r3, [pc, #268]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4a42      	ldr	r2, [pc, #264]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f18:	4b3d      	ldr	r3, [pc, #244]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f20:	4a3b      	ldr	r2, [pc, #236]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f26:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8004e80:	4b39      	ldr	r3, [pc, #228]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4936      	ldr	r1, [pc, #216]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1a2>
=======
 8004f28:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4936      	ldr	r1, [pc, #216]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1a2>
>>>>>>> Stashed changes
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< Updated upstream
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b80      	cmp	r3, #128	@ 0x80
 8004e98:	d105      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e9a:	4b33      	ldr	r3, [pc, #204]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4a32      	ldr	r2, [pc, #200]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004ea0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ea4:	6093      	str	r3, [r2, #8]
=======
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b80      	cmp	r3, #128	@ 0x80
 8004f40:	d105      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f42:	4b33      	ldr	r3, [pc, #204]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	4a32      	ldr	r2, [pc, #200]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004f48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f4c:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d21d      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 020f 	bic.w	r2, r3, #15
 8004ebc:	4929      	ldr	r1, [pc, #164]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]
=======
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d21d      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 020f 	bic.w	r2, r3, #15
 8004f64:	4929      	ldr	r1, [pc, #164]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004ec4:	f7fc fb1c 	bl	8001500 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ecc:	f7fc fb18 	bl	8001500 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e03b      	b.n	8004f5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b20      	ldr	r3, [pc, #128]	@ (8004f64 <HAL_RCC_ClockConfig+0x260>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1ed      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x1c8>
=======
 8004f6c:	f7fc fb1c 	bl	80015a8 <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f74:	f7fc fb18 	bl	80015a8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e03b      	b.n	8005002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	4b20      	ldr	r3, [pc, #128]	@ (800500c <HAL_RCC_ClockConfig+0x260>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d1ed      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1c8>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004efc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4917      	ldr	r1, [pc, #92]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
=======
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4917      	ldr	r1, [pc, #92]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f1a:	4b13      	ldr	r3, [pc, #76]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	490f      	ldr	r1, [pc, #60]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
=======
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fc2:	4b13      	ldr	r3, [pc, #76]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	490f      	ldr	r1, [pc, #60]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 8004f2e:	f000 f825 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 8004f32:	4602      	mov	r2, r0
 8004f34:	4b0c      	ldr	r3, [pc, #48]	@ (8004f68 <HAL_RCC_ClockConfig+0x264>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	490c      	ldr	r1, [pc, #48]	@ (8004f70 <HAL_RCC_ClockConfig+0x26c>)
 8004f40:	5ccb      	ldrb	r3, [r1, r3]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f74 <HAL_RCC_ClockConfig+0x270>)
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <HAL_RCC_ClockConfig+0x274>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fc f99c 	bl	8001290 <HAL_InitTick>
 8004f58:	4603      	mov	r3, r0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40022000 	.word	0x40022000
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	04c4b400 	.word	0x04c4b400
 8004f70:	0800e29c 	.word	0x0800e29c
 8004f74:	20000000 	.word	0x20000000
 8004f78:	20000004 	.word	0x20000004

08004f7c <HAL_RCC_GetSysClockFreq>:
=======
 8004fd6:	f000 f825 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005010 <HAL_RCC_ClockConfig+0x264>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	490c      	ldr	r1, [pc, #48]	@ (8005018 <HAL_RCC_ClockConfig+0x26c>)
 8004fe8:	5ccb      	ldrb	r3, [r1, r3]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800501c <HAL_RCC_ClockConfig+0x270>)
 8004ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8005020 <HAL_RCC_ClockConfig+0x274>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fc f99c 	bl	8001338 <HAL_InitTick>
 8005000:	4603      	mov	r3, r0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40022000 	.word	0x40022000
 8005010:	40021000 	.word	0x40021000
 8005014:	04c4b400 	.word	0x04c4b400
 8005018:	0800ec9c 	.word	0x0800ec9c
 800501c:	20000000 	.word	0x20000000
 8005020:	20000004 	.word	0x20000004

08005024 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
=======
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
<<<<<<< Updated upstream
 8004f82:	4b2c      	ldr	r3, [pc, #176]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d102      	bne.n	8004f94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8005038 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e047      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f94:	4b27      	ldr	r3, [pc, #156]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 030c 	and.w	r3, r3, #12
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d102      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fa0:	4b26      	ldr	r3, [pc, #152]	@ (800503c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e03e      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004fa6:	4b23      	ldr	r3, [pc, #140]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d136      	bne.n	8005020 <HAL_RCC_GetSysClockFreq+0xa4>
=======
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b04      	cmp	r3, #4
 8005034:	d102      	bne.n	800503c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005036:	4b2a      	ldr	r3, [pc, #168]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	e047      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800503c:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 030c 	and.w	r3, r3, #12
 8005044:	2b08      	cmp	r3, #8
 8005046:	d102      	bne.n	800504e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005048:	4b26      	ldr	r3, [pc, #152]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	e03e      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800504e:	4b23      	ldr	r3, [pc, #140]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d136      	bne.n	80050c8 <HAL_RCC_GetSysClockFreq+0xa4>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8004fb2:	4b20      	ldr	r3, [pc, #128]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d10c      	bne.n	8004fea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800503c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	4a16      	ldr	r2, [pc, #88]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fda:	68d2      	ldr	r2, [r2, #12]
 8004fdc:	0a12      	lsrs	r2, r2, #8
 8004fde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	617b      	str	r3, [r7, #20]
      break;
 8004fe8:	e00c      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x88>
=======
 800505a:	4b20      	ldr	r3, [pc, #128]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005064:	4b1d      	ldr	r3, [pc, #116]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	3301      	adds	r3, #1
 8005070:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d10c      	bne.n	8005092 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005078:	4a1a      	ldr	r2, [pc, #104]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	4a16      	ldr	r2, [pc, #88]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005082:	68d2      	ldr	r2, [r2, #12]
 8005084:	0a12      	lsrs	r2, r2, #8
 8005086:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	617b      	str	r3, [r7, #20]
      break;
 8005090:	e00c      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 8004fea:	4a13      	ldr	r2, [pc, #76]	@ (8005038 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	4a10      	ldr	r2, [pc, #64]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ff4:	68d2      	ldr	r2, [r2, #12]
 8004ff6:	0a12      	lsrs	r2, r2, #8
 8004ff8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ffc:	fb02 f303 	mul.w	r3, r2, r3
 8005000:	617b      	str	r3, [r7, #20]
      break;
 8005002:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	0e5b      	lsrs	r3, r3, #25
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	3301      	adds	r3, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	e001      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0xa8>
=======
 8005092:	4a13      	ldr	r2, [pc, #76]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	4a10      	ldr	r2, [pc, #64]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800509c:	68d2      	ldr	r2, [r2, #12]
 800509e:	0a12      	lsrs	r2, r2, #8
 80050a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]
      break;
 80050aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	0e5b      	lsrs	r3, r3, #25
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	3301      	adds	r3, #1
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e001      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xa8>
>>>>>>> Stashed changes
  }
  else
  {
    sysclockfreq = 0U;
<<<<<<< Updated upstream
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005024:	693b      	ldr	r3, [r7, #16]
}
 8005026:	4618      	mov	r0, r3
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	00f42400 	.word	0x00f42400
 800503c:	007a1200 	.word	0x007a1200

08005040 <HAL_RCC_GetHCLKFreq>:
=======
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050cc:	693b      	ldr	r3, [r7, #16]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	00f42400 	.word	0x00f42400
 80050e4:	007a1200 	.word	0x007a1200

080050e8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005044:	4b03      	ldr	r3, [pc, #12]	@ (8005054 <HAL_RCC_GetHCLKFreq+0x14>)
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000000 	.word	0x20000000

08005058 <HAL_RCC_GetPCLK1Freq>:
=======
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000000 	.word	0x20000000

08005100 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800505c:	f7ff fff0 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4904      	ldr	r1, [pc, #16]	@ (8005080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	0800e2ac 	.word	0x0800e2ac

08005084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005088:	f7ff ffda 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	0adb      	lsrs	r3, r3, #11
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4904      	ldr	r1, [pc, #16]	@ (80050ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40021000 	.word	0x40021000
 80050ac:	0800e2ac 	.word	0x0800e2ac

080050b0 <HAL_RCC_GetClockConfig>:
=======
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005104:	f7ff fff0 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	@ (8005128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800ecac 	.word	0x0800ecac

0800512c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005130:	f7ff ffda 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0adb      	lsrs	r3, r3, #11
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4904      	ldr	r1, [pc, #16]	@ (8005154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000
 8005154:	0800ecac 	.word	0x0800ecac

08005158 <HAL_RCC_GetClockConfig>:
>>>>>>> Stashed changes
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< Updated upstream
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
=======
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< Updated upstream
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	220f      	movs	r2, #15
 80050be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80050c0:	4b12      	ldr	r3, [pc, #72]	@ (800510c <HAL_RCC_GetClockConfig+0x5c>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0203 	and.w	r2, r3, #3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80050cc:	4b0f      	ldr	r3, [pc, #60]	@ (800510c <HAL_RCC_GetClockConfig+0x5c>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80050d8:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <HAL_RCC_GetClockConfig+0x5c>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050e4:	4b09      	ldr	r3, [pc, #36]	@ (800510c <HAL_RCC_GetClockConfig+0x5c>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050f2:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <HAL_RCC_GetClockConfig+0x60>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 020f 	and.w	r2, r3, #15
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	601a      	str	r2, [r3, #0]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
 8005110:	40022000 	.word	0x40022000

08005114 <RCC_GetSysClockFreqFromPLLSource>:
=======
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	220f      	movs	r2, #15
 8005166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005168:	4b12      	ldr	r3, [pc, #72]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0203 	and.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005174:	4b0f      	ldr	r3, [pc, #60]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005180:	4b0c      	ldr	r3, [pc, #48]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800518c:	4b09      	ldr	r3, [pc, #36]	@ (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <HAL_RCC_GetClockConfig+0x60>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40022000 	.word	0x40022000

080051bc <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> Stashed changes
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< Updated upstream
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
=======
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 800511a:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005124:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d10c      	bne.n	8005152 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005138:	4a17      	ldr	r2, [pc, #92]	@ (8005198 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	4a14      	ldr	r2, [pc, #80]	@ (8005194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005142:	68d2      	ldr	r2, [r2, #12]
 8005144:	0a12      	lsrs	r2, r2, #8
 8005146:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	617b      	str	r3, [r7, #20]
    break;
 8005150:	e00c      	b.n	800516c <RCC_GetSysClockFreqFromPLLSource+0x58>
=======
 80051c2:	4b1e      	ldr	r3, [pc, #120]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051cc:	4b1b      	ldr	r3, [pc, #108]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d10c      	bne.n	80051fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051e0:	4a17      	ldr	r2, [pc, #92]	@ (8005240 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	4a14      	ldr	r2, [pc, #80]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ea:	68d2      	ldr	r2, [r2, #12]
 80051ec:	0a12      	lsrs	r2, r2, #8
 80051ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	617b      	str	r3, [r7, #20]
    break;
 80051f8:	e00c      	b.n	8005214 <RCC_GetSysClockFreqFromPLLSource+0x58>
>>>>>>> Stashed changes

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 8005152:	4a12      	ldr	r2, [pc, #72]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	4a0e      	ldr	r2, [pc, #56]	@ (8005194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	0a12      	lsrs	r2, r2, #8
 8005160:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]
    break;
 800516a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800516c:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	0e5b      	lsrs	r3, r3, #25
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	3301      	adds	r3, #1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005186:	687b      	ldr	r3, [r7, #4]
}
 8005188:	4618      	mov	r0, r3
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40021000 	.word	0x40021000
 8005198:	007a1200 	.word	0x007a1200
 800519c:	00f42400 	.word	0x00f42400

080051a0 <HAL_RCCEx_PeriphCLKConfig>:
=======
 80051fa:	4a12      	ldr	r2, [pc, #72]	@ (8005244 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	4a0e      	ldr	r2, [pc, #56]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005204:	68d2      	ldr	r2, [r2, #12]
 8005206:	0a12      	lsrs	r2, r2, #8
 8005208:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	617b      	str	r3, [r7, #20]
    break;
 8005212:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	0e5b      	lsrs	r3, r3, #25
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	3301      	adds	r3, #1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800522e:	687b      	ldr	r3, [r7, #4]
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40021000 	.word	0x40021000
 8005240:	007a1200 	.word	0x007a1200
 8005244:	00f42400 	.word	0x00f42400

08005248 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051a8:	2300      	movs	r3, #0
 80051aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051ac:	2300      	movs	r3, #0
 80051ae:	74bb      	strb	r3, [r7, #18]
=======
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005250:	2300      	movs	r3, #0
 8005252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005254:	2300      	movs	r3, #0
 8005256:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8098 	beq.w	80052ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051be:	2300      	movs	r3, #0
 80051c0:	747b      	strb	r3, [r7, #17]
=======
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8098 	beq.w	8005396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 80051c2:	4b43      	ldr	r3, [pc, #268]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10d      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ce:	4b40      	ldr	r3, [pc, #256]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d2:	4a3f      	ldr	r2, [pc, #252]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80051da:	4b3d      	ldr	r3, [pc, #244]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e6:	2301      	movs	r3, #1
 80051e8:	747b      	strb	r3, [r7, #17]
=======
 800526a:	4b43      	ldr	r3, [pc, #268]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b40      	ldr	r3, [pc, #256]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527a:	4a3f      	ldr	r2, [pc, #252]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	@ 0x58
 8005282:	4b3d      	ldr	r3, [pc, #244]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528e:	2301      	movs	r3, #1
 8005290:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 80051ea:	4b3a      	ldr	r3, [pc, #232]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a39      	ldr	r2, [pc, #228]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f6:	f7fc f983 	bl	8001500 <HAL_GetTick>
 80051fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fc:	e009      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fe:	f7fc f97f 	bl	8001500 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d902      	bls.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	74fb      	strb	r3, [r7, #19]
        break;
 8005210:	e005      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005212:	4b30      	ldr	r3, [pc, #192]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ef      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 8005292:	4b3a      	ldr	r3, [pc, #232]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a39      	ldr	r2, [pc, #228]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800529c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800529e:	f7fc f983 	bl	80015a8 <HAL_GetTick>
 80052a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052a4:	e009      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7fc f97f 	bl	80015a8 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d902      	bls.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	74fb      	strb	r3, [r7, #19]
        break;
 80052b8:	e005      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ba:	4b30      	ldr	r3, [pc, #192]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ef      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 800521e:	7cfb      	ldrb	r3, [r7, #19]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d159      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005224:	4b2a      	ldr	r3, [pc, #168]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01e      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	429a      	cmp	r2, r3
 800523e:	d019      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005240:	4b23      	ldr	r3, [pc, #140]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800524a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800524c:	4b20      	ldr	r3, [pc, #128]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005252:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800525c:	4b1c      	ldr	r3, [pc, #112]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005262:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800526c:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d159      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01e      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d019      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052e8:	4b23      	ldr	r3, [pc, #140]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052f4:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005304:	4b1c      	ldr	r3, [pc, #112]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	4a1b      	ldr	r2, [pc, #108]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005314:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< Updated upstream
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fc f93f 	bl	8001500 <HAL_GetTick>
 8005282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005284:	e00b      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fc f93b 	bl	8001500 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d902      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	74fb      	strb	r3, [r7, #19]
            break;
 800529c:	e006      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800529e:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ec      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xe6>
=======
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fc f93f 	bl	80015a8 <HAL_GetTick>
 800532a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532c:	e00b      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fc f93b 	bl	80015a8 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533c:	4293      	cmp	r3, r2
 800533e:	d902      	bls.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	74fb      	strb	r3, [r7, #19]
            break;
 8005344:	e006      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005346:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ec      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xe6>
>>>>>>> Stashed changes
          }
        }
      }
      
      if(ret == HAL_OK)
<<<<<<< Updated upstream
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b2:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c0:	4903      	ldr	r1, [pc, #12]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052c8:	e008      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800535a:	4b07      	ldr	r3, [pc, #28]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005368:	4903      	ldr	r1, [pc, #12]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005370:	e008      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	74bb      	strb	r3, [r7, #18]
 80052ce:	e005      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40007000 	.word	0x40007000
=======
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	74bb      	strb	r3, [r7, #18]
 8005376:	e005      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005378:	40021000 	.word	0x40021000
 800537c:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	74bb      	strb	r3, [r7, #18]
=======
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 80052dc:	7c7b      	ldrb	r3, [r7, #17]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d105      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e2:	4ba7      	ldr	r3, [pc, #668]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	4aa6      	ldr	r2, [pc, #664]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ec:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8005384:	7c7b      	ldrb	r3, [r7, #17]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538a:	4ba7      	ldr	r3, [pc, #668]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538e:	4aa6      	ldr	r2, [pc, #664]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x170>
=======
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 80052fa:	4ba1      	ldr	r3, [pc, #644]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	f023 0203 	bic.w	r2, r3, #3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	499d      	ldr	r1, [pc, #628]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80053a2:	4ba1      	ldr	r3, [pc, #644]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a8:	f023 0203 	bic.w	r2, r3, #3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	499d      	ldr	r1, [pc, #628]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 800531c:	4b98      	ldr	r3, [pc, #608]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005322:	f023 020c 	bic.w	r2, r3, #12
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4995      	ldr	r1, [pc, #596]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80053c4:	4b98      	ldr	r3, [pc, #608]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	f023 020c 	bic.w	r2, r3, #12
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4995      	ldr	r1, [pc, #596]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
=======
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 800533e:	4b90      	ldr	r3, [pc, #576]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005344:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	498c      	ldr	r1, [pc, #560]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80053e6:	4b90      	ldr	r3, [pc, #576]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	498c      	ldr	r1, [pc, #560]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
=======
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 8005360:	4b87      	ldr	r3, [pc, #540]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005366:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	4984      	ldr	r1, [pc, #528]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005408:	4b87      	ldr	r3, [pc, #540]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4984      	ldr	r1, [pc, #528]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
=======
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
 8005382:	4b7f      	ldr	r3, [pc, #508]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	497b      	ldr	r1, [pc, #492]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800542a:	4b7f      	ldr	r3, [pc, #508]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	497b      	ldr	r1, [pc, #492]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
=======
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x21a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 80053a4:	4b76      	ldr	r3, [pc, #472]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	4973      	ldr	r1, [pc, #460]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800544c:	4b76      	ldr	r3, [pc, #472]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	4973      	ldr	r1, [pc, #460]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
=======
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x23c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 80053c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	496a      	ldr	r1, [pc, #424]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800546e:	4b6e      	ldr	r3, [pc, #440]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005474:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	496a      	ldr	r1, [pc, #424]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
=======
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 80053e8:	4b65      	ldr	r3, [pc, #404]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4962      	ldr	r1, [pc, #392]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005490:	4b65      	ldr	r3, [pc, #404]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005496:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	4962      	ldr	r1, [pc, #392]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>
=======
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 800540a:	4b5d      	ldr	r3, [pc, #372]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	4959      	ldr	r1, [pc, #356]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80054b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	4959      	ldr	r1, [pc, #356]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
=======
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< Updated upstream
 800542c:	4b54      	ldr	r3, [pc, #336]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005432:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	4951      	ldr	r1, [pc, #324]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80054d4:	4b54      	ldr	r3, [pc, #336]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054da:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	4951      	ldr	r1, [pc, #324]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< Updated upstream
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d015      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x2da>
=======
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d015      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2da>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< Updated upstream
 800544e:	4b4c      	ldr	r3, [pc, #304]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005454:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	4948      	ldr	r1, [pc, #288]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800546c:	d105      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800546e:	4b44      	ldr	r3, [pc, #272]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4a43      	ldr	r2, [pc, #268]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005474:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005478:	60d3      	str	r3, [r2, #12]
=======
 80054f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4948      	ldr	r1, [pc, #288]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005514:	d105      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005516:	4b44      	ldr	r3, [pc, #272]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4a43      	ldr	r2, [pc, #268]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005520:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< Updated upstream
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005482:	2b00      	cmp	r3, #0
 8005484:	d015      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
=======
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800552a:	2b00      	cmp	r3, #0
 800552c:	d015      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x312>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
 8005486:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005494:	493a      	ldr	r1, [pc, #232]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a4:	d105      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a6:	4b36      	ldr	r3, [pc, #216]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	4a35      	ldr	r2, [pc, #212]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054b0:	60d3      	str	r3, [r2, #12]
=======
 800552e:	4b3e      	ldr	r3, [pc, #248]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005534:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	493a      	ldr	r1, [pc, #232]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800554c:	d105      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554e:	4b36      	ldr	r3, [pc, #216]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4a35      	ldr	r2, [pc, #212]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005554:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005558:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< Updated upstream
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d015      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
=======
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d015      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x34a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
<<<<<<< Updated upstream
 80054be:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054cc:	492c      	ldr	r1, [pc, #176]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054dc:	d105      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054de:	4b28      	ldr	r3, [pc, #160]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	4a27      	ldr	r2, [pc, #156]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054e8:	60d3      	str	r3, [r2, #12]
=======
 8005566:	4b30      	ldr	r3, [pc, #192]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005574:	492c      	ldr	r1, [pc, #176]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005584:	d105      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005586:	4b28      	ldr	r3, [pc, #160]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	4a27      	ldr	r2, [pc, #156]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005590:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d015      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f6:	4b22      	ldr	r3, [pc, #136]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	491e      	ldr	r1, [pc, #120]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005514:	d105      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005516:	4b1a      	ldr	r3, [pc, #104]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4a19      	ldr	r2, [pc, #100]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005520:	60d3      	str	r3, [r2, #12]
=======
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d015      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800559e:	4b22      	ldr	r3, [pc, #136]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	491e      	ldr	r1, [pc, #120]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055bc:	d105      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055be:	4b1a      	ldr	r3, [pc, #104]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	4a19      	ldr	r2, [pc, #100]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055c8:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d015      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800552e:	4b14      	ldr	r3, [pc, #80]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005534:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553c:	4910      	ldr	r1, [pc, #64]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800554c:	d105      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554e:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4a0b      	ldr	r2, [pc, #44]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005554:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005558:	60d3      	str	r3, [r2, #12]
=======
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d015      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055d6:	4b14      	ldr	r3, [pc, #80]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	4910      	ldr	r1, [pc, #64]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055f4:	d105      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005600:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< Updated upstream
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d018      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
=======
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d018      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< Updated upstream
 8005566:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	4902      	ldr	r1, [pc, #8]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	e001      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005580:	40021000 	.word	0x40021000
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800558a:	d105      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800558c:	4b21      	ldr	r3, [pc, #132]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a20      	ldr	r2, [pc, #128]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005596:	60d3      	str	r3, [r2, #12]
=======
 800560e:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	4902      	ldr	r1, [pc, #8]	@ (8005628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	e001      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005628:	40021000 	.word	0x40021000
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005632:	d105      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005634:	4b21      	ldr	r3, [pc, #132]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4a20      	ldr	r2, [pc, #128]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563e:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
<<<<<<< Updated upstream
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d015      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x430>
=======
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x430>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
<<<<<<< Updated upstream
 80055a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	4918      	ldr	r1, [pc, #96]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c2:	d105      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055c4:	4b13      	ldr	r3, [pc, #76]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4a12      	ldr	r2, [pc, #72]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ce:	60d3      	str	r3, [r2, #12]
=======
 800564c:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005652:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565a:	4918      	ldr	r1, [pc, #96]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566a:	d105      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800566c:	4b13      	ldr	r3, [pc, #76]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4a12      	ldr	r2, [pc, #72]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005676:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
<<<<<<< Updated upstream
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d015      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
<<<<<<< Updated upstream
 80055dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ea:	490a      	ldr	r1, [pc, #40]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055fa:	d105      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055fc:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a04      	ldr	r2, [pc, #16]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005606:	60d3      	str	r3, [r2, #12]
=======
 8005684:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800568a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005692:	490a      	ldr	r1, [pc, #40]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a2:	d105      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80056aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ae:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

#endif /* QUADSPI */

  return status;
<<<<<<< Updated upstream
 8005608:	7cbb      	ldrb	r3, [r7, #18]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000

08005618 <HAL_TIM_Base_Init>:
=======
 80056b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000

080056c0 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e049      	b.n	80056be <HAL_TIM_Base_Init+0xa6>
=======
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e049      	b.n	8005766 <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f841 	bl	80056c6 <HAL_TIM_Base_MspInit>
=======
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f841 	bl	800576e <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f000 fa28 	bl	8005aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_TIM_Base_MspInit>:
=======
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f000 fa28 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
=======
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_TIM_Base_Start_IT>:
=======
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
=======
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d001      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e04f      	b.n	8005794 <HAL_TIM_Base_Start_IT+0xb8>
=======
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d001      	beq.n	800579c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e04f      	b.n	800583c <HAL_TIM_Base_Start_IT+0xb8>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a23      	ldr	r2, [pc, #140]	@ (80057a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01d      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0x76>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571e:	d018      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0x76>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1f      	ldr	r2, [pc, #124]	@ (80057a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0x76>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0x76>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1c      	ldr	r2, [pc, #112]	@ (80057ac <HAL_TIM_Base_Start_IT+0xd0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0x76>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIM_Base_Start_IT+0x76>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a19      	ldr	r2, [pc, #100]	@ (80057b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d115      	bne.n	800577e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	4b17      	ldr	r3, [pc, #92]	@ (80057b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800575a:	4013      	ands	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d015      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0xb4>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800576a:	d011      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	e008      	b.n	8005790 <HAL_TIM_Base_Start_IT+0xb4>
=======
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a23      	ldr	r2, [pc, #140]	@ (8005848 <HAL_TIM_Base_Start_IT+0xc4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01d      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c6:	d018      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1f      	ldr	r2, [pc, #124]	@ (800584c <HAL_TIM_Base_Start_IT+0xc8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005850 <HAL_TIM_Base_Start_IT+0xcc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005854 <HAL_TIM_Base_Start_IT+0xd0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d009      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005858 <HAL_TIM_Base_Start_IT+0xd4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0x76>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a19      	ldr	r2, [pc, #100]	@ (800585c <HAL_TIM_Base_Start_IT+0xd8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d115      	bne.n	8005826 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	4b17      	ldr	r3, [pc, #92]	@ (8005860 <HAL_TIM_Base_Start_IT+0xdc>)
 8005802:	4013      	ands	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b06      	cmp	r3, #6
 800580a:	d015      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0xb4>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005812:	d011      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005824:	e008      	b.n	8005838 <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e000      	b.n	8005792 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005790:	bf00      	nop
=======
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e000      	b.n	800583a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005838:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40015000 	.word	0x40015000
 80057b8:	00010007 	.word	0x00010007

080057bc <HAL_TIM_IRQHandler>:
=======
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40013400 	.word	0x40013400
 8005858:	40014000 	.word	0x40014000
 800585c:	40015000 	.word	0x40015000
 8005860:	00010007 	.word	0x00010007

08005864 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0202 	mvn.w	r2, #2
 80057f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x52>
=======
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d020      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01b      	beq.n	80058c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0202 	mvn.w	r2, #2
 8005898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x52>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f931 	bl	8005a6e <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0x5e>
=======
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f931 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f923 	bl	8005a5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f934 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
=======
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f923 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f934 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< Updated upstream
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0204 	mvn.w	r2, #4
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x9e>
=======
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0204 	mvn.w	r2, #4
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f90b 	bl	8005a6e <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xaa>
=======
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f90b 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8fd 	bl	8005a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f90e 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
=======
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8fd 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f90e 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< Updated upstream
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d020      	beq.n	80058b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0208 	mvn.w	r2, #8
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2204      	movs	r2, #4
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0xea>
=======
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d020      	beq.n	8005960 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0208 	mvn.w	r2, #8
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0xea>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8e5 	bl	8005a6e <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0xf6>
=======
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8e5 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xf6>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8d7 	bl	8005a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f8e8 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
=======
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8d7 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8e8 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< Updated upstream
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d020      	beq.n	8005904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01b      	beq.n	8005904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0210 	mvn.w	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2208      	movs	r2, #8
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x136>
=======
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0210 	mvn.w	r2, #16
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2208      	movs	r2, #8
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x136>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f8bf 	bl	8005a6e <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x142>
=======
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8bf 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0x142>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8b1 	bl	8005a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f8c2 	bl	8005a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
=======
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f8b1 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f8c2 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< Updated upstream
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0201 	mvn.w	r2, #1
 8005920:	611a      	str	r2, [r3, #16]
=======
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d007      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0201 	mvn.w	r2, #1
 80059c8:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fb fb66 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
=======
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fb fb66 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< Updated upstream
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800594e:	611a      	str	r2, [r3, #16]
=======
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d104      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059f6:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f95f 	bl	8005c14 <HAL_TIMEx_BreakCallback>
=======
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f95f 	bl	8005cbc <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< Updated upstream
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00c      	beq.n	800597a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005972:	611a      	str	r2, [r3, #16]
=======
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00c      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a1a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f957 	bl	8005c28 <HAL_TIMEx_Break2Callback>
=======
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f957 	bl	8005cd0 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< Updated upstream
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00c      	beq.n	800599e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005996:	611a      	str	r2, [r3, #16]
=======
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00c      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a3e:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f87c 	bl	8005a96 <HAL_TIM_TriggerCallback>
=======
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f87c 	bl	8005b3e <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< Updated upstream
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0220 	mvn.w	r2, #32
 80059ba:	611a      	str	r2, [r3, #16]
=======
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f06f 0220 	mvn.w	r2, #32
 8005a62:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f91f 	bl	8005c00 <HAL_TIMEx_CommutCallback>
=======
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f91f 	bl	8005ca8 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
<<<<<<< Updated upstream
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80059de:	611a      	str	r2, [r3, #16]
=======
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00c      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005a86:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
<<<<<<< Updated upstream
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f92b 	bl	8005c3c <HAL_TIMEx_EncoderIndexCallback>
=======
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f92b 	bl	8005ce4 <HAL_TIMEx_EncoderIndexCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
<<<<<<< Updated upstream
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005a02:	611a      	str	r2, [r3, #16]
=======
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005aaa:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
<<<<<<< Updated upstream
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f923 	bl	8005c50 <HAL_TIMEx_DirectionChangeCallback>
=======
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f923 	bl	8005cf8 <HAL_TIMEx_DirectionChangeCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
<<<<<<< Updated upstream
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005a26:	611a      	str	r2, [r3, #16]
=======
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00c      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ace:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
<<<<<<< Updated upstream
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f91b 	bl	8005c64 <HAL_TIMEx_IndexErrorCallback>
=======
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f91b 	bl	8005d0c <HAL_TIMEx_IndexErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
<<<<<<< Updated upstream
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005a4a:	611a      	str	r2, [r3, #16]
=======
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005af2:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
<<<<<<< Updated upstream
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f913 	bl	8005c78 <HAL_TIMEx_TransitionErrorCallback>
=======
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f913 	bl	8005d20 <HAL_TIMEx_TransitionErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
=======
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_TIM_IC_CaptureCallback>:
=======
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
=======
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
=======
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_TIM_TriggerCallback>:
=======
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
=======
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <TIM_Base_SetConfig>:
=======
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a48      	ldr	r2, [pc, #288]	@ (8005be0 <TIM_Base_SetConfig+0x134>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aca:	d00f      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a45      	ldr	r2, [pc, #276]	@ (8005be4 <TIM_Base_SetConfig+0x138>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a44      	ldr	r2, [pc, #272]	@ (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a43      	ldr	r2, [pc, #268]	@ (8005bec <TIM_Base_SetConfig+0x140>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a42      	ldr	r2, [pc, #264]	@ (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d108      	bne.n	8005afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a37      	ldr	r2, [pc, #220]	@ (8005be0 <TIM_Base_SetConfig+0x134>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01f      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b0c:	d01b      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a34      	ldr	r2, [pc, #208]	@ (8005be4 <TIM_Base_SetConfig+0x138>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d017      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a33      	ldr	r2, [pc, #204]	@ (8005be8 <TIM_Base_SetConfig+0x13c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a32      	ldr	r2, [pc, #200]	@ (8005bec <TIM_Base_SetConfig+0x140>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a32      	ldr	r2, [pc, #200]	@ (8005bf4 <TIM_Base_SetConfig+0x148>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a31      	ldr	r2, [pc, #196]	@ (8005bf8 <TIM_Base_SetConfig+0x14c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a30      	ldr	r2, [pc, #192]	@ (8005bfc <TIM_Base_SetConfig+0x150>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_Base_SetConfig+0x9a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2b      	ldr	r2, [pc, #172]	@ (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d108      	bne.n	8005b58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
=======
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a48      	ldr	r2, [pc, #288]	@ (8005c88 <TIM_Base_SetConfig+0x134>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b72:	d00f      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a45      	ldr	r2, [pc, #276]	@ (8005c8c <TIM_Base_SetConfig+0x138>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a44      	ldr	r2, [pc, #272]	@ (8005c90 <TIM_Base_SetConfig+0x13c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a43      	ldr	r2, [pc, #268]	@ (8005c94 <TIM_Base_SetConfig+0x140>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a42      	ldr	r2, [pc, #264]	@ (8005c98 <TIM_Base_SetConfig+0x144>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a37      	ldr	r2, [pc, #220]	@ (8005c88 <TIM_Base_SetConfig+0x134>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01f      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb4:	d01b      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a34      	ldr	r2, [pc, #208]	@ (8005c8c <TIM_Base_SetConfig+0x138>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d017      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a33      	ldr	r2, [pc, #204]	@ (8005c90 <TIM_Base_SetConfig+0x13c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a32      	ldr	r2, [pc, #200]	@ (8005c94 <TIM_Base_SetConfig+0x140>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a32      	ldr	r2, [pc, #200]	@ (8005c9c <TIM_Base_SetConfig+0x148>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a31      	ldr	r2, [pc, #196]	@ (8005ca0 <TIM_Base_SetConfig+0x14c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a30      	ldr	r2, [pc, #192]	@ (8005ca4 <TIM_Base_SetConfig+0x150>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c98 <TIM_Base_SetConfig+0x144>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a18      	ldr	r2, [pc, #96]	@ (8005be0 <TIM_Base_SetConfig+0x134>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <TIM_Base_SetConfig+0x100>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a19      	ldr	r2, [pc, #100]	@ (8005bec <TIM_Base_SetConfig+0x140>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00f      	beq.n	8005bac <TIM_Base_SetConfig+0x100>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a19      	ldr	r2, [pc, #100]	@ (8005bf4 <TIM_Base_SetConfig+0x148>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <TIM_Base_SetConfig+0x100>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <TIM_Base_SetConfig+0x14c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0x100>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a17      	ldr	r2, [pc, #92]	@ (8005bfc <TIM_Base_SetConfig+0x150>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0x100>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <TIM_Base_SetConfig+0x144>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d103      	bne.n	8005bb4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <TIM_Base_SetConfig+0x134>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <TIM_Base_SetConfig+0x100>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a19      	ldr	r2, [pc, #100]	@ (8005c94 <TIM_Base_SetConfig+0x140>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x100>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a19      	ldr	r2, [pc, #100]	@ (8005c9c <TIM_Base_SetConfig+0x148>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x100>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ca0 <TIM_Base_SetConfig+0x14c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x100>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a17      	ldr	r2, [pc, #92]	@ (8005ca4 <TIM_Base_SetConfig+0x150>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x100>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	@ (8005c98 <TIM_Base_SetConfig+0x144>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d105      	bne.n	8005bd2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f023 0201 	bic.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	611a      	str	r2, [r3, #16]
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40015000 	.word	0x40015000
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40014400 	.word	0x40014400
 8005bfc:	40014800 	.word	0x40014800

08005c00 <HAL_TIMEx_CommutCallback>:
=======
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f023 0201 	bic.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	611a      	str	r2, [r3, #16]
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40013400 	.word	0x40013400
 8005c98:	40015000 	.word	0x40015000
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800

08005ca8 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
=======
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_BreakCallback>:
=======
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
=======
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIMEx_Break2Callback>:
=======
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
=======
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIMEx_EncoderIndexCallback>:
=======
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_EncoderIndexCallback>:
>>>>>>> Stashed changes
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
=======
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIMEx_DirectionChangeCallback>:
=======
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_DirectionChangeCallback>:
>>>>>>> Stashed changes
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
=======
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIMEx_IndexErrorCallback>:
=======
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_IndexErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
=======
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIMEx_TransitionErrorCallback>:
=======
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_TransitionErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
=======
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_Init>:
=======
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e042      	b.n	8005d24 <HAL_UART_Init+0x98>
=======
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e042      	b.n	8005dcc <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
=======
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fb fa95 	bl	80011e0 <HAL_UART_MspInit>
=======
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fb fa95 	bl	8001288 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2224      	movs	r2, #36	@ 0x24
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
=======
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	@ 0x24
 8005d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< Updated upstream
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fb24 	bl	8006324 <UART_AdvFeatureConfig>
=======
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fb24 	bl	80063cc <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< Updated upstream
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f825 	bl	8005d2c <UART_SetConfig>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e01b      	b.n	8005d24 <HAL_UART_Init+0x98>
=======
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f825 	bl	8005dd4 <UART_SetConfig>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e01b      	b.n	8005dcc <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fba3 	bl	8006468 <UART_CheckIdleState>
 8005d22:	4603      	mov	r3, r0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UART_SetConfig>:
=======
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fba3 	bl	8006510 <UART_CheckIdleState>
 8005dca:	4603      	mov	r3, r0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8005d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d30:	b08c      	sub	sp, #48	@ 0x30
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6178      	str	r0, [r7, #20]
=======
 8005dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd8:	b08c      	sub	sp, #48	@ 0x30
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 8005d36:	2300      	movs	r3, #0
 8005d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4baa      	ldr	r3, [pc, #680]	@ (8006004 <UART_SetConfig+0x2d8>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6013      	str	r3, [r2, #0]
=======
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4baa      	ldr	r3, [pc, #680]	@ (80060ac <UART_SetConfig+0x2d8>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
=======
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a9f      	ldr	r2, [pc, #636]	@ (8006008 <UART_SetConfig+0x2dc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d94:	4313      	orrs	r3, r2
 8005d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005da2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6093      	str	r3, [r2, #8]
=======
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a9f      	ldr	r2, [pc, #636]	@ (80060b0 <UART_SetConfig+0x2dc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005e4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< Updated upstream
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	f023 010f 	bic.w	r1, r3, #15
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a90      	ldr	r2, [pc, #576]	@ (800600c <UART_SetConfig+0x2e0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d125      	bne.n	8005e1c <UART_SetConfig+0xf0>
 8005dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d81a      	bhi.n	8005e14 <UART_SetConfig+0xe8>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <UART_SetConfig+0xb8>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e0d 	.word	0x08005e0d
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	e116      	b.n	800602a <UART_SetConfig+0x2fe>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e112      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e04:	2304      	movs	r3, #4
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e10e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e12:	e10a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e14:	2310      	movs	r3, #16
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1a:	e106      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7c      	ldr	r2, [pc, #496]	@ (8006014 <UART_SetConfig+0x2e8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d138      	bne.n	8005e98 <UART_SetConfig+0x16c>
 8005e26:	4b7a      	ldr	r3, [pc, #488]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2c:	f003 030c 	and.w	r3, r3, #12
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	d82d      	bhi.n	8005e90 <UART_SetConfig+0x164>
 8005e34:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <UART_SetConfig+0x110>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e91 	.word	0x08005e91
 8005e58:	08005e91 	.word	0x08005e91
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	08005e91 	.word	0x08005e91
 8005e64:	08005e91 	.word	0x08005e91
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e0d8      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e0d4      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e0d0      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	e0cc      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e96:	e0c8      	b.n	800602a <UART_SetConfig+0x2fe>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8006018 <UART_SetConfig+0x2ec>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d125      	bne.n	8005eee <UART_SetConfig+0x1c2>
 8005ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005eac:	2b30      	cmp	r3, #48	@ 0x30
 8005eae:	d016      	beq.n	8005ede <UART_SetConfig+0x1b2>
 8005eb0:	2b30      	cmp	r3, #48	@ 0x30
 8005eb2:	d818      	bhi.n	8005ee6 <UART_SetConfig+0x1ba>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d00a      	beq.n	8005ece <UART_SetConfig+0x1a2>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d814      	bhi.n	8005ee6 <UART_SetConfig+0x1ba>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <UART_SetConfig+0x19a>
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d008      	beq.n	8005ed6 <UART_SetConfig+0x1aa>
 8005ec4:	e00f      	b.n	8005ee6 <UART_SetConfig+0x1ba>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ecc:	e0ad      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed4:	e0a9      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005edc:	e0a5      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ede:	2308      	movs	r3, #8
 8005ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee4:	e0a1      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eec:	e09d      	b.n	800602a <UART_SetConfig+0x2fe>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800601c <UART_SetConfig+0x2f0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d125      	bne.n	8005f44 <UART_SetConfig+0x218>
 8005ef8:	4b45      	ldr	r3, [pc, #276]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f04:	d016      	beq.n	8005f34 <UART_SetConfig+0x208>
 8005f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f08:	d818      	bhi.n	8005f3c <UART_SetConfig+0x210>
 8005f0a:	2b80      	cmp	r3, #128	@ 0x80
 8005f0c:	d00a      	beq.n	8005f24 <UART_SetConfig+0x1f8>
 8005f0e:	2b80      	cmp	r3, #128	@ 0x80
 8005f10:	d814      	bhi.n	8005f3c <UART_SetConfig+0x210>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <UART_SetConfig+0x1f0>
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d008      	beq.n	8005f2c <UART_SetConfig+0x200>
 8005f1a:	e00f      	b.n	8005f3c <UART_SetConfig+0x210>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f22:	e082      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f24:	2302      	movs	r3, #2
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2a:	e07e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f32:	e07a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3a:	e076      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f42:	e072      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a35      	ldr	r2, [pc, #212]	@ (8006020 <UART_SetConfig+0x2f4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d12a      	bne.n	8005fa4 <UART_SetConfig+0x278>
 8005f4e:	4b30      	ldr	r3, [pc, #192]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f5c:	d01a      	beq.n	8005f94 <UART_SetConfig+0x268>
 8005f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f62:	d81b      	bhi.n	8005f9c <UART_SetConfig+0x270>
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f68:	d00c      	beq.n	8005f84 <UART_SetConfig+0x258>
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6e:	d815      	bhi.n	8005f9c <UART_SetConfig+0x270>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <UART_SetConfig+0x250>
 8005f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f78:	d008      	beq.n	8005f8c <UART_SetConfig+0x260>
 8005f7a:	e00f      	b.n	8005f9c <UART_SetConfig+0x270>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e052      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e04e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f92:	e04a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	e046      	b.n	800602a <UART_SetConfig+0x2fe>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fa2:	e042      	b.n	800602a <UART_SetConfig+0x2fe>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <UART_SetConfig+0x2dc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d13a      	bne.n	8006024 <UART_SetConfig+0x2f8>
 8005fae:	4b18      	ldr	r3, [pc, #96]	@ (8006010 <UART_SetConfig+0x2e4>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fbc:	d01a      	beq.n	8005ff4 <UART_SetConfig+0x2c8>
 8005fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fc2:	d81b      	bhi.n	8005ffc <UART_SetConfig+0x2d0>
 8005fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc8:	d00c      	beq.n	8005fe4 <UART_SetConfig+0x2b8>
 8005fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fce:	d815      	bhi.n	8005ffc <UART_SetConfig+0x2d0>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <UART_SetConfig+0x2b0>
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd8:	d008      	beq.n	8005fec <UART_SetConfig+0x2c0>
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x2d0>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe2:	e022      	b.n	800602a <UART_SetConfig+0x2fe>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fea:	e01e      	b.n	800602a <UART_SetConfig+0x2fe>
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	e01a      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffa:	e016      	b.n	800602a <UART_SetConfig+0x2fe>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006002:	e012      	b.n	800602a <UART_SetConfig+0x2fe>
 8006004:	cfff69f3 	.word	0xcfff69f3
 8006008:	40008000 	.word	0x40008000
 800600c:	40013800 	.word	0x40013800
 8006010:	40021000 	.word	0x40021000
 8006014:	40004400 	.word	0x40004400
 8006018:	40004800 	.word	0x40004800
 800601c:	40004c00 	.word	0x40004c00
 8006020:	40005000 	.word	0x40005000
 8006024:	2310      	movs	r3, #16
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4aae      	ldr	r2, [pc, #696]	@ (80062e8 <UART_SetConfig+0x5bc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	f040 8097 	bne.w	8006164 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800603a:	2b08      	cmp	r3, #8
 800603c:	d823      	bhi.n	8006086 <UART_SetConfig+0x35a>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <UART_SetConfig+0x318>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006069 	.word	0x08006069
 8006048:	08006087 	.word	0x08006087
 800604c:	08006071 	.word	0x08006071
 8006050:	08006087 	.word	0x08006087
 8006054:	08006077 	.word	0x08006077
 8006058:	08006087 	.word	0x08006087
 800605c:	08006087 	.word	0x08006087
 8006060:	08006087 	.word	0x08006087
 8006064:	0800607f 	.word	0x0800607f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fe fff6 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800606e:	e010      	b.n	8006092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006070:	4b9e      	ldr	r3, [pc, #632]	@ (80062ec <UART_SetConfig+0x5c0>)
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006074:	e00d      	b.n	8006092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006076:	f7fe ff81 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 800607a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800607c:	e009      	b.n	8006092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006084:	e005      	b.n	8006092 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006090:	bf00      	nop
=======
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	f023 010f 	bic.w	r1, r3, #15
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a90      	ldr	r2, [pc, #576]	@ (80060b4 <UART_SetConfig+0x2e0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d125      	bne.n	8005ec4 <UART_SetConfig+0xf0>
 8005e78:	4b8f      	ldr	r3, [pc, #572]	@ (80060b8 <UART_SetConfig+0x2e4>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d81a      	bhi.n	8005ebc <UART_SetConfig+0xe8>
 8005e86:	a201      	add	r2, pc, #4	@ (adr r2, 8005e8c <UART_SetConfig+0xb8>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	08005ea5 	.word	0x08005ea5
 8005e98:	08005eb5 	.word	0x08005eb5
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ea2:	e116      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eaa:	e112      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005eac:	2304      	movs	r3, #4
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb2:	e10e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eba:	e10a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec2:	e106      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80060bc <UART_SetConfig+0x2e8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d138      	bne.n	8005f40 <UART_SetConfig+0x16c>
 8005ece:	4b7a      	ldr	r3, [pc, #488]	@ (80060b8 <UART_SetConfig+0x2e4>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	d82d      	bhi.n	8005f38 <UART_SetConfig+0x164>
 8005edc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee4 <UART_SetConfig+0x110>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	08005f39 	.word	0x08005f39
 8005eec:	08005f39 	.word	0x08005f39
 8005ef0:	08005f39 	.word	0x08005f39
 8005ef4:	08005f29 	.word	0x08005f29
 8005ef8:	08005f39 	.word	0x08005f39
 8005efc:	08005f39 	.word	0x08005f39
 8005f00:	08005f39 	.word	0x08005f39
 8005f04:	08005f21 	.word	0x08005f21
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	08005f39 	.word	0x08005f39
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1e:	e0d8      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f20:	2302      	movs	r3, #2
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f26:	e0d4      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2e:	e0d0      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f36:	e0cc      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3e:	e0c8      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a5e      	ldr	r2, [pc, #376]	@ (80060c0 <UART_SetConfig+0x2ec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d125      	bne.n	8005f96 <UART_SetConfig+0x1c2>
 8005f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80060b8 <UART_SetConfig+0x2e4>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f54:	2b30      	cmp	r3, #48	@ 0x30
 8005f56:	d016      	beq.n	8005f86 <UART_SetConfig+0x1b2>
 8005f58:	2b30      	cmp	r3, #48	@ 0x30
 8005f5a:	d818      	bhi.n	8005f8e <UART_SetConfig+0x1ba>
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d00a      	beq.n	8005f76 <UART_SetConfig+0x1a2>
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d814      	bhi.n	8005f8e <UART_SetConfig+0x1ba>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <UART_SetConfig+0x19a>
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d008      	beq.n	8005f7e <UART_SetConfig+0x1aa>
 8005f6c:	e00f      	b.n	8005f8e <UART_SetConfig+0x1ba>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f74:	e0ad      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f76:	2302      	movs	r3, #2
 8005f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7c:	e0a9      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f7e:	2304      	movs	r3, #4
 8005f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f84:	e0a5      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f86:	2308      	movs	r3, #8
 8005f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8c:	e0a1      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f8e:	2310      	movs	r3, #16
 8005f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f94:	e09d      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80060c4 <UART_SetConfig+0x2f0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d125      	bne.n	8005fec <UART_SetConfig+0x218>
 8005fa0:	4b45      	ldr	r3, [pc, #276]	@ (80060b8 <UART_SetConfig+0x2e4>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fac:	d016      	beq.n	8005fdc <UART_SetConfig+0x208>
 8005fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fb0:	d818      	bhi.n	8005fe4 <UART_SetConfig+0x210>
 8005fb2:	2b80      	cmp	r3, #128	@ 0x80
 8005fb4:	d00a      	beq.n	8005fcc <UART_SetConfig+0x1f8>
 8005fb6:	2b80      	cmp	r3, #128	@ 0x80
 8005fb8:	d814      	bhi.n	8005fe4 <UART_SetConfig+0x210>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <UART_SetConfig+0x1f0>
 8005fbe:	2b40      	cmp	r3, #64	@ 0x40
 8005fc0:	d008      	beq.n	8005fd4 <UART_SetConfig+0x200>
 8005fc2:	e00f      	b.n	8005fe4 <UART_SetConfig+0x210>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fca:	e082      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fd2:	e07e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fda:	e07a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe2:	e076      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fea:	e072      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a35      	ldr	r2, [pc, #212]	@ (80060c8 <UART_SetConfig+0x2f4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d12a      	bne.n	800604c <UART_SetConfig+0x278>
 8005ff6:	4b30      	ldr	r3, [pc, #192]	@ (80060b8 <UART_SetConfig+0x2e4>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006004:	d01a      	beq.n	800603c <UART_SetConfig+0x268>
 8006006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800600a:	d81b      	bhi.n	8006044 <UART_SetConfig+0x270>
 800600c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006010:	d00c      	beq.n	800602c <UART_SetConfig+0x258>
 8006012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006016:	d815      	bhi.n	8006044 <UART_SetConfig+0x270>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <UART_SetConfig+0x250>
 800601c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006020:	d008      	beq.n	8006034 <UART_SetConfig+0x260>
 8006022:	e00f      	b.n	8006044 <UART_SetConfig+0x270>
 8006024:	2300      	movs	r3, #0
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602a:	e052      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800602c:	2302      	movs	r3, #2
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006032:	e04e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8006034:	2304      	movs	r3, #4
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800603a:	e04a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800603c:	2308      	movs	r3, #8
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006042:	e046      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604a:	e042      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a17      	ldr	r2, [pc, #92]	@ (80060b0 <UART_SetConfig+0x2dc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d13a      	bne.n	80060cc <UART_SetConfig+0x2f8>
 8006056:	4b18      	ldr	r3, [pc, #96]	@ (80060b8 <UART_SetConfig+0x2e4>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006060:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006064:	d01a      	beq.n	800609c <UART_SetConfig+0x2c8>
 8006066:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800606a:	d81b      	bhi.n	80060a4 <UART_SetConfig+0x2d0>
 800606c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006070:	d00c      	beq.n	800608c <UART_SetConfig+0x2b8>
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006076:	d815      	bhi.n	80060a4 <UART_SetConfig+0x2d0>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <UART_SetConfig+0x2b0>
 800607c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006080:	d008      	beq.n	8006094 <UART_SetConfig+0x2c0>
 8006082:	e00f      	b.n	80060a4 <UART_SetConfig+0x2d0>
 8006084:	2300      	movs	r3, #0
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608a:	e022      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800608c:	2302      	movs	r3, #2
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006092:	e01e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8006094:	2304      	movs	r3, #4
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609a:	e01a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800609c:	2308      	movs	r3, #8
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a2:	e016      	b.n	80060d2 <UART_SetConfig+0x2fe>
 80060a4:	2310      	movs	r3, #16
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060aa:	e012      	b.n	80060d2 <UART_SetConfig+0x2fe>
 80060ac:	cfff69f3 	.word	0xcfff69f3
 80060b0:	40008000 	.word	0x40008000
 80060b4:	40013800 	.word	0x40013800
 80060b8:	40021000 	.word	0x40021000
 80060bc:	40004400 	.word	0x40004400
 80060c0:	40004800 	.word	0x40004800
 80060c4:	40004c00 	.word	0x40004c00
 80060c8:	40005000 	.word	0x40005000
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4aae      	ldr	r2, [pc, #696]	@ (8006390 <UART_SetConfig+0x5bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	f040 8097 	bne.w	800620c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d823      	bhi.n	800612e <UART_SetConfig+0x35a>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <UART_SetConfig+0x318>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006111 	.word	0x08006111
 80060f0:	0800612f 	.word	0x0800612f
 80060f4:	08006119 	.word	0x08006119
 80060f8:	0800612f 	.word	0x0800612f
 80060fc:	0800611f 	.word	0x0800611f
 8006100:	0800612f 	.word	0x0800612f
 8006104:	0800612f 	.word	0x0800612f
 8006108:	0800612f 	.word	0x0800612f
 800610c:	08006127 	.word	0x08006127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fe fff6 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006116:	e010      	b.n	800613a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006118:	4b9e      	ldr	r3, [pc, #632]	@ (8006394 <UART_SetConfig+0x5c0>)
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800611c:	e00d      	b.n	800613a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611e:	f7fe ff81 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8006122:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006124:	e009      	b.n	800613a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800612c:	e005      	b.n	800613a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006138:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8130 	beq.w	80062fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	4a94      	ldr	r2, [pc, #592]	@ (80062f0 <UART_SetConfig+0x5c4>)
 80060a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d305      	bcc.n	80060ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d903      	bls.n	80060d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060d0:	e113      	b.n	80062fa <UART_SetConfig+0x5ce>
=======
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8130 	beq.w	80063a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	4a94      	ldr	r2, [pc, #592]	@ (8006398 <UART_SetConfig+0x5c4>)
 8006148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614c:	461a      	mov	r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	fbb3 f3f2 	udiv	r3, r3, r2
 8006154:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	429a      	cmp	r2, r3
 8006164:	d305      	bcc.n	8006172 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	429a      	cmp	r2, r3
 8006170:	d903      	bls.n	800617a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006178:	e113      	b.n	80063a2 <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< Updated upstream
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	2200      	movs	r2, #0
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	60fa      	str	r2, [r7, #12]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	4a84      	ldr	r2, [pc, #528]	@ (80062f0 <UART_SetConfig+0x5c4>)
 80060e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2200      	movs	r2, #0
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060f4:	f7fa f8e4 	bl	80002c0 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	020b      	lsls	r3, r1, #8
 800610a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800610e:	0202      	lsls	r2, r0, #8
 8006110:	6979      	ldr	r1, [r7, #20]
 8006112:	6849      	ldr	r1, [r1, #4]
 8006114:	0849      	lsrs	r1, r1, #1
 8006116:	2000      	movs	r0, #0
 8006118:	460c      	mov	r4, r1
 800611a:	4605      	mov	r5, r0
 800611c:	eb12 0804 	adds.w	r8, r2, r4
 8006120:	eb43 0905 	adc.w	r9, r3, r5
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	469a      	mov	sl, r3
 800612c:	4693      	mov	fp, r2
 800612e:	4652      	mov	r2, sl
 8006130:	465b      	mov	r3, fp
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa f8c3 	bl	80002c0 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4613      	mov	r3, r2
 8006140:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006148:	d308      	bcc.n	800615c <UART_SetConfig+0x430>
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006150:	d204      	bcs.n	800615c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	e0ce      	b.n	80062fa <UART_SetConfig+0x5ce>
=======
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	2200      	movs	r2, #0
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	60fa      	str	r2, [r7, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	4a84      	ldr	r2, [pc, #528]	@ (8006398 <UART_SetConfig+0x5c4>)
 8006188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800618c:	b29b      	uxth	r3, r3
 800618e:	2200      	movs	r2, #0
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800619c:	f7fa f890 	bl	80002c0 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	020b      	lsls	r3, r1, #8
 80061b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061b6:	0202      	lsls	r2, r0, #8
 80061b8:	6979      	ldr	r1, [r7, #20]
 80061ba:	6849      	ldr	r1, [r1, #4]
 80061bc:	0849      	lsrs	r1, r1, #1
 80061be:	2000      	movs	r0, #0
 80061c0:	460c      	mov	r4, r1
 80061c2:	4605      	mov	r5, r0
 80061c4:	eb12 0804 	adds.w	r8, r2, r4
 80061c8:	eb43 0905 	adc.w	r9, r3, r5
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	469a      	mov	sl, r3
 80061d4:	4693      	mov	fp, r2
 80061d6:	4652      	mov	r2, sl
 80061d8:	465b      	mov	r3, fp
 80061da:	4640      	mov	r0, r8
 80061dc:	4649      	mov	r1, r9
 80061de:	f7fa f86f 	bl	80002c0 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4613      	mov	r3, r2
 80061e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061f0:	d308      	bcc.n	8006204 <UART_SetConfig+0x430>
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061f8:	d204      	bcs.n	8006204 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e0ce      	b.n	80063a2 <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 800615c:	2301      	movs	r3, #1
 800615e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006162:	e0ca      	b.n	80062fa <UART_SetConfig+0x5ce>
=======
 8006204:	2301      	movs	r3, #1
 8006206:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800620a:	e0ca      	b.n	80063a2 <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800616c:	d166      	bne.n	800623c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800616e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006172:	2b08      	cmp	r3, #8
 8006174:	d827      	bhi.n	80061c6 <UART_SetConfig+0x49a>
 8006176:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <UART_SetConfig+0x450>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	080061c7 	.word	0x080061c7
 800618c:	080061b7 	.word	0x080061b7
 8006190:	080061c7 	.word	0x080061c7
 8006194:	080061c7 	.word	0x080061c7
 8006198:	080061c7 	.word	0x080061c7
 800619c:	080061bf 	.word	0x080061bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fe ff5a 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061a6:	e014      	b.n	80061d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a8:	f7fe ff6c 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 80061ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ae:	e010      	b.n	80061d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b0:	4b4e      	ldr	r3, [pc, #312]	@ (80062ec <UART_SetConfig+0x5c0>)
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061b4:	e00d      	b.n	80061d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b6:	f7fe fee1 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 80061ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061bc:	e009      	b.n	80061d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061c4:	e005      	b.n	80061d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80061d0:	bf00      	nop
=======
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006214:	d166      	bne.n	80062e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006216:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800621a:	2b08      	cmp	r3, #8
 800621c:	d827      	bhi.n	800626e <UART_SetConfig+0x49a>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <UART_SetConfig+0x450>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	0800626f 	.word	0x0800626f
 8006234:	0800625f 	.word	0x0800625f
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800626f 	.word	0x0800626f
 8006244:	08006267 	.word	0x08006267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7fe ff5a 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 800624c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800624e:	e014      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006250:	f7fe ff6c 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8006254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006256:	e010      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006258:	4b4e      	ldr	r3, [pc, #312]	@ (8006394 <UART_SetConfig+0x5c0>)
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800625c:	e00d      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625e:	f7fe fee1 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8006262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006264:	e009      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800626c:	e005      	b.n	800627a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006278:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8090 	beq.w	80062fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	4a44      	ldr	r2, [pc, #272]	@ (80062f0 <UART_SetConfig+0x5c4>)
 80061e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e4:	461a      	mov	r2, r3
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ec:	005a      	lsls	r2, r3, #1
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	441a      	add	r2, r3
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d916      	bls.n	8006234 <UART_SetConfig+0x508>
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800620c:	d212      	bcs.n	8006234 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f023 030f 	bic.w	r3, r3, #15
 8006216:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	b29b      	uxth	r3, r3
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	b29a      	uxth	r2, r3
 8006224:	8bfb      	ldrh	r3, [r7, #30]
 8006226:	4313      	orrs	r3, r2
 8006228:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	8bfa      	ldrh	r2, [r7, #30]
 8006230:	60da      	str	r2, [r3, #12]
 8006232:	e062      	b.n	80062fa <UART_SetConfig+0x5ce>
=======
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8090 	beq.w	80063a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	4a44      	ldr	r2, [pc, #272]	@ (8006398 <UART_SetConfig+0x5c4>)
 8006288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800628c:	461a      	mov	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	fbb3 f3f2 	udiv	r3, r3, r2
 8006294:	005a      	lsls	r2, r3, #1
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	441a      	add	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	2b0f      	cmp	r3, #15
 80062ac:	d916      	bls.n	80062dc <UART_SetConfig+0x508>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b4:	d212      	bcs.n	80062dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f023 030f 	bic.w	r3, r3, #15
 80062be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	8bfb      	ldrh	r3, [r7, #30]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	8bfa      	ldrh	r2, [r7, #30]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e062      	b.n	80063a2 <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8006234:	2301      	movs	r3, #1
 8006236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800623a:	e05e      	b.n	80062fa <UART_SetConfig+0x5ce>
=======
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062e2:	e05e      	b.n	80063a2 <UART_SetConfig+0x5ce>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 800623c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006240:	2b08      	cmp	r3, #8
 8006242:	d828      	bhi.n	8006296 <UART_SetConfig+0x56a>
 8006244:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <UART_SetConfig+0x520>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	08006271 	.word	0x08006271
 8006250:	08006279 	.word	0x08006279
 8006254:	08006281 	.word	0x08006281
 8006258:	08006297 	.word	0x08006297
 800625c:	08006287 	.word	0x08006287
 8006260:	08006297 	.word	0x08006297
 8006264:	08006297 	.word	0x08006297
 8006268:	08006297 	.word	0x08006297
 800626c:	0800628f 	.word	0x0800628f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006270:	f7fe fef2 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006276:	e014      	b.n	80062a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006278:	f7fe ff04 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 800627c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800627e:	e010      	b.n	80062a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006280:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <UART_SetConfig+0x5c0>)
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006284:	e00d      	b.n	80062a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006286:	f7fe fe79 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 800628a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800628c:	e009      	b.n	80062a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800628e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006294:	e005      	b.n	80062a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062a0:	bf00      	nop
    }

    if (pclk != 0U)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d028      	beq.n	80062fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	4a10      	ldr	r2, [pc, #64]	@ (80062f0 <UART_SetConfig+0x5c4>)
 80062ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	441a      	add	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	2b0f      	cmp	r3, #15
 80062d0:	d910      	bls.n	80062f4 <UART_SetConfig+0x5c8>
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d8:	d20c      	bcs.n	80062f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	b29a      	uxth	r2, r3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e009      	b.n	80062fa <UART_SetConfig+0x5ce>
 80062e6:	bf00      	nop
 80062e8:	40008000 	.word	0x40008000
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	0800e2b4 	.word	0x0800e2b4
=======
 80062e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d828      	bhi.n	800633e <UART_SetConfig+0x56a>
 80062ec:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <UART_SetConfig+0x520>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	0800633f 	.word	0x0800633f
 8006304:	0800632f 	.word	0x0800632f
 8006308:	0800633f 	.word	0x0800633f
 800630c:	0800633f 	.word	0x0800633f
 8006310:	0800633f 	.word	0x0800633f
 8006314:	08006337 	.word	0x08006337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fe fef2 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 800631c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800631e:	e014      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006320:	f7fe ff04 	bl	800512c <HAL_RCC_GetPCLK2Freq>
 8006324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006326:	e010      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b1a      	ldr	r3, [pc, #104]	@ (8006394 <UART_SetConfig+0x5c0>)
 800632a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800632c:	e00d      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7fe fe79 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8006332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006334:	e009      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800633a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800633c:	e005      	b.n	800634a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006348:	bf00      	nop
    }

    if (pclk != 0U)
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d028      	beq.n	80063a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	4a10      	ldr	r2, [pc, #64]	@ (8006398 <UART_SetConfig+0x5c4>)
 8006356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800635a:	461a      	mov	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	441a      	add	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d910      	bls.n	800639c <UART_SetConfig+0x5c8>
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006380:	d20c      	bcs.n	800639c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	b29a      	uxth	r2, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	e009      	b.n	80063a2 <UART_SetConfig+0x5ce>
 800638e:	bf00      	nop
 8006390:	40008000 	.word	0x40008000
 8006394:	00f42400 	.word	0x00f42400
 8006398:	0800ecb4 	.word	0x0800ecb4
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 800639c:	2301      	movs	r3, #1
 800639e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< Updated upstream
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2201      	movs	r2, #1
 8006306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2200      	movs	r2, #0
 800630e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2200      	movs	r2, #0
 8006314:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006316:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800631a:	4618      	mov	r0, r3
 800631c:	3730      	adds	r7, #48	@ 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006324 <UART_AdvFeatureConfig>:
=======
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2200      	movs	r2, #0
 80063bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3730      	adds	r7, #48	@ 0x30
 80063c6:	46bd      	mov	sp, r7
 80063c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080063cc <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
=======
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
=======
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
=======
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
=======
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
=======
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	609a      	str	r2, [r3, #8]
=======
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]
=======
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01a      	beq.n	800643a <UART_AdvFeatureConfig+0x116>
=======
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006422:	d10a      	bne.n	800643a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
=======
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ca:	d10a      	bne.n	80064e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <UART_CheckIdleState>:
=======
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006468:	b580      	push	{r7, lr}
 800646a:	b098      	sub	sp, #96	@ 0x60
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
=======
 8006510:	b580      	push	{r7, lr}
 8006512:	b098      	sub	sp, #96	@ 0x60
 8006514:	af02      	add	r7, sp, #8
 8006516:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006478:	f7fb f842 	bl	8001500 <HAL_GetTick>
 800647c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b08      	cmp	r3, #8
 800648a:	d12f      	bne.n	80064ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800648c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006494:	2200      	movs	r2, #0
 8006496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f88e 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d022      	beq.n	80064ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006520:	f7fb f842 	bl	80015a8 <HAL_GetTick>
 8006524:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d12f      	bne.n	8006594 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653c:	2200      	movs	r2, #0
 800653e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f88e 	bl	8006664 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d022      	beq.n	8006594 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 80064ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c6:	643a      	str	r2, [r7, #64]	@ 0x40
=======
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006562:	653b      	str	r3, [r7, #80]	@ 0x50
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800656c:	647b      	str	r3, [r7, #68]	@ 0x44
 800656e:	643a      	str	r2, [r7, #64]	@ 0x40
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 80064c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e063      	b.n	80065b4 <UART_CheckIdleState+0x14c>
=======
 8006570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e063      	b.n	800665c <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d149      	bne.n	800658e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006502:	2200      	movs	r2, #0
 8006504:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f857 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d03c      	beq.n	800658e <UART_CheckIdleState+0x126>
=======
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d149      	bne.n	8006636 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065aa:	2200      	movs	r2, #0
 80065ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f857 	bl	8006664 <UART_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d03c      	beq.n	8006636 <UART_CheckIdleState+0x126>
>>>>>>> Stashed changes
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	623b      	str	r3, [r7, #32]
   return(result);
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006532:	633b      	str	r3, [r7, #48]	@ 0x30
 8006534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e6      	bne.n	8006514 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	60fb      	str	r3, [r7, #12]
   return(result);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006566:	61fa      	str	r2, [r7, #28]
 8006568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	617b      	str	r3, [r7, #20]
   return(result);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e5      	bne.n	8006546 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e012      	b.n	80065b4 <UART_CheckIdleState+0x14c>
=======
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	623b      	str	r3, [r7, #32]
   return(result);
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065da:	633b      	str	r3, [r7, #48]	@ 0x30
 80065dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e6      	bne.n	80065bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3308      	adds	r3, #8
 80065f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3308      	adds	r3, #8
 800660c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800660e:	61fa      	str	r2, [r7, #28]
 8006610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	69b9      	ldr	r1, [r7, #24]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	617b      	str	r3, [r7, #20]
   return(result);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e5      	bne.n	80065ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e012      	b.n	800665c <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3758      	adds	r7, #88	@ 0x58
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_WaitOnFlagUntilTimeout>:
=======
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3758      	adds	r7, #88	@ 0x58
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065cc:	e04f      	b.n	800666e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d04b      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fa ff93 	bl	8001500 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <UART_WaitOnFlagUntilTimeout+0x30>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e04e      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d037      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0xb2>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b80      	cmp	r3, #128	@ 0x80
 8006602:	d034      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b40      	cmp	r3, #64	@ 0x40
 8006608:	d031      	beq.n	800666e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d110      	bne.n	800663a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2208      	movs	r2, #8
 800661e:	621a      	str	r2, [r3, #32]
=======
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006674:	e04f      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667c:	d04b      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fa ff93 	bl	80015a8 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <UART_WaitOnFlagUntilTimeout+0x30>
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e04e      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d037      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b80      	cmp	r3, #128	@ 0x80
 80066aa:	d034      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b40      	cmp	r3, #64	@ 0x40
 80066b0:	d031      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d110      	bne.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2208      	movs	r2, #8
 80066c6:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f838 	bl	8006696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2208      	movs	r2, #8
 800662a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e029      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006648:	d111      	bne.n	800666e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006652:	621a      	str	r2, [r3, #32]
=======
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f838 	bl	800673e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2208      	movs	r2, #8
 80066d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e029      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f0:	d111      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066fa:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f81e 	bl	8006696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2220      	movs	r2, #32
 800665e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e00f      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4013      	ands	r3, r2
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	429a      	cmp	r2, r3
 800667c:	bf0c      	ite	eq
 800667e:	2301      	moveq	r3, #1
 8006680:	2300      	movne	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	429a      	cmp	r2, r3
 800668a:	d0a0      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f81e 	bl	800673e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e00f      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	429a      	cmp	r2, r3
 8006732:	d0a0      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <UART_EndRxTransfer>:
=======
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006696:	b480      	push	{r7}
 8006698:	b095      	sub	sp, #84	@ 0x54
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e6      	bne.n	800669e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3308      	adds	r3, #8
 80066f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e3      	bne.n	80066d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800670c:	2b01      	cmp	r3, #1
 800670e:	d118      	bne.n	8006742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
   return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 0310 	bic.w	r3, r3, #16
 8006724:	647b      	str	r3, [r7, #68]	@ 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_EndRxTransfer+0x7a>
=======
 800673e:	b480      	push	{r7}
 8006740:	b095      	sub	sp, #84	@ 0x54
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006764:	643b      	str	r3, [r7, #64]	@ 0x40
 8006766:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800676a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e6      	bne.n	8006746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3308      	adds	r3, #8
 800677e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	61fb      	str	r3, [r7, #28]
   return(result);
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800679c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800679e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e3      	bne.n	8006778 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d118      	bne.n	80067ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f023 0310 	bic.w	r3, r3, #16
 80067cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6979      	ldr	r1, [r7, #20]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	613b      	str	r3, [r7, #16]
   return(result);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e6      	bne.n	80067b8 <UART_EndRxTransfer+0x7a>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006756:	bf00      	nop
 8006758:	3754      	adds	r7, #84	@ 0x54
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_UARTEx_DisableFifoMode>:
=======
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067fe:	bf00      	nop
 8006800:	3754      	adds	r7, #84	@ 0x54
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_UARTEx_DisableFifoMode>:
>>>>>>> Stashed changes
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
=======
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_UARTEx_DisableFifoMode+0x16>
 8006774:	2302      	movs	r3, #2
 8006776:	e027      	b.n	80067c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	@ 0x24
 8006784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80067a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UARTEx_SetTxFifoThreshold>:
=======
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_UARTEx_DisableFifoMode+0x16>
 800681c:	2302      	movs	r3, #2
 800681e:	e027      	b.n	8006870 <HAL_UARTEx_DisableFifoMode+0x66>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2224      	movs	r2, #36	@ 0x24
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800684e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
=======
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e02d      	b.n	8006848 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2224      	movs	r2, #36	@ 0x24
 80067f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f84f 	bl	80068cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006864:	2302      	movs	r3, #2
 8006866:	e02d      	b.n	80068c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
=======
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006890:	2302      	movs	r3, #2
 8006892:	e02d      	b.n	80068f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
>>>>>>> Stashed changes

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	@ 0x24
 80068a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

<<<<<<< Updated upstream
  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f811 	bl	80068cc <UARTEx_SetNbDataToProcess>
=======
  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f84f 	bl	8006974 <UARTEx_SetNbDataToProcess>
>>>>>>> Stashed changes

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

<<<<<<< Updated upstream
080068cc <UARTEx_SetNbDataToProcess>:
=======
080068f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e02d      	b.n	800696c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2224      	movs	r2, #36	@ 0x24
 800691c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f811 	bl	8006974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UARTEx_SetNbDataToProcess>:
>>>>>>> Stashed changes
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
=======
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< Updated upstream
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d108      	bne.n	80068ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006980:	2b00      	cmp	r3, #0
 8006982:	d108      	bne.n	8006996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> Stashed changes
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< Updated upstream
 80068ec:	e031      	b.n	8006952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068ee:	2308      	movs	r3, #8
 80068f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068f2:	2308      	movs	r3, #8
 80068f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	0e5b      	lsrs	r3, r3, #25
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	0f5b      	lsrs	r3, r3, #29
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	7b3a      	ldrb	r2, [r7, #12]
 800691a:	4911      	ldr	r1, [pc, #68]	@ (8006960 <UARTEx_SetNbDataToProcess+0x94>)
 800691c:	5c8a      	ldrb	r2, [r1, r2]
 800691e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006922:	7b3a      	ldrb	r2, [r7, #12]
 8006924:	490f      	ldr	r1, [pc, #60]	@ (8006964 <UARTEx_SetNbDataToProcess+0x98>)
 8006926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006928:	fb93 f3f2 	sdiv	r3, r3, r2
 800692c:	b29a      	uxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	7b7a      	ldrb	r2, [r7, #13]
 8006938:	4909      	ldr	r1, [pc, #36]	@ (8006960 <UARTEx_SetNbDataToProcess+0x94>)
 800693a:	5c8a      	ldrb	r2, [r1, r2]
 800693c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006940:	7b7a      	ldrb	r2, [r7, #13]
 8006942:	4908      	ldr	r1, [pc, #32]	@ (8006964 <UARTEx_SetNbDataToProcess+0x98>)
 8006944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006946:	fb93 f3f2 	sdiv	r3, r3, r2
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	0800e2cc 	.word	0x0800e2cc
 8006964:	0800e2d4 	.word	0x0800e2d4

08006968 <USB_EnableGlobalInt>:
=======
 8006994:	e031      	b.n	80069fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006996:	2308      	movs	r3, #8
 8006998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800699a:	2308      	movs	r3, #8
 800699c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	0e5b      	lsrs	r3, r3, #25
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	0f5b      	lsrs	r3, r3, #29
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	7b3a      	ldrb	r2, [r7, #12]
 80069c2:	4911      	ldr	r1, [pc, #68]	@ (8006a08 <UARTEx_SetNbDataToProcess+0x94>)
 80069c4:	5c8a      	ldrb	r2, [r1, r2]
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069ca:	7b3a      	ldrb	r2, [r7, #12]
 80069cc:	490f      	ldr	r1, [pc, #60]	@ (8006a0c <UARTEx_SetNbDataToProcess+0x98>)
 80069ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	7b7a      	ldrb	r2, [r7, #13]
 80069e0:	4909      	ldr	r1, [pc, #36]	@ (8006a08 <UARTEx_SetNbDataToProcess+0x94>)
 80069e2:	5c8a      	ldrb	r2, [r1, r2]
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	4908      	ldr	r1, [pc, #32]	@ (8006a0c <UARTEx_SetNbDataToProcess+0x98>)
 80069ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	0800eccc 	.word	0x0800eccc
 8006a0c:	0800ecd4 	.word	0x0800ecd4

08006a10 <USB_EnableGlobalInt>:
>>>>>>> Stashed changes
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< Updated upstream
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
=======
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
<<<<<<< Updated upstream
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006978:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800697c:	60fb      	str	r3, [r7, #12]
=======
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a20:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006a24:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
<<<<<<< Updated upstream
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	b29a      	uxth	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USB_DisableGlobalInt>:
=======
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USB_DisableGlobalInt>:
>>>>>>> Stashed changes
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< Updated upstream
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
=======
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< Updated upstream
 800699e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80069a2:	60fb      	str	r3, [r7, #12]
=======
 8006a46:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006a4a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< Updated upstream
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	43db      	mvns	r3, r3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4013      	ands	r3, r2
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USB_DevInit>:
=======
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_DevInit>:
>>>>>>> Stashed changes
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< Updated upstream
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	e883 0006 	stmia.w	r3, {r1, r2}
=======
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	1d3b      	adds	r3, r7, #4
 8006a7e:	e883 0006 	stmia.w	r3, {r1, r2}
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< Updated upstream
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_ActivateEndpoint>:
=======
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_ActivateEndpoint>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 8006a08:	b480      	push	{r7}
 8006a0a:	b0a7      	sub	sp, #156	@ 0x9c
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	78db      	ldrb	r3, [r3, #3]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d81f      	bhi.n	8006a7a <USB_ActivateEndpoint+0x72>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <USB_ActivateEndpoint+0x38>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a83 	.word	0x08006a83
 8006a4c:	08006a5f 	.word	0x08006a5f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a50:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a58:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006a5c:	e012      	b.n	8006a84 <USB_ActivateEndpoint+0x7c>
=======
 8006ab0:	b480      	push	{r7}
 8006ab2:	b0a7      	sub	sp, #156	@ 0x9c
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d81f      	bhi.n	8006b22 <USB_ActivateEndpoint+0x72>
 8006ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <USB_ActivateEndpoint+0x38>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b2b 	.word	0x08006b2b
 8006af4:	08006b07 	.word	0x08006b07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006af8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006afc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b00:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006b04:	e012      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>
>>>>>>> Stashed changes
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
<<<<<<< Updated upstream
 8006a5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a62:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006a66:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006a6a:	e00b      	b.n	8006a84 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a6c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a74:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006a78:	e004      	b.n	8006a84 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006a80:	e000      	b.n	8006a84 <USB_ActivateEndpoint+0x7c>
      break;
 8006a82:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006abe:	b21a      	sxth	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b21b      	sxth	r3, r3
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b21b      	sxth	r3, r3
 8006aca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	7b1b      	ldrb	r3, [r3, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 8180 	bne.w	8006dfa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8084 	beq.w	8006c0c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	4413      	add	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	00da      	lsls	r2, r3, #3
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	88db      	ldrh	r3, [r3, #6]
 8006b2c:	085b      	lsrs	r3, r3, #1
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	827b      	strh	r3, [r7, #18]
 8006b46:	8a7b      	ldrh	r3, [r7, #18]
 8006b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01b      	beq.n	8006b88 <USB_ActivateEndpoint+0x180>
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	823b      	strh	r3, [r7, #16]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	8a3b      	ldrh	r3, [r7, #16]
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	78db      	ldrb	r3, [r3, #3]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d020      	beq.n	8006bd2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba6:	81bb      	strh	r3, [r7, #12]
 8006ba8:	89bb      	ldrh	r3, [r7, #12]
 8006baa:	f083 0320 	eor.w	r3, r3, #32
 8006bae:	81bb      	strh	r3, [r7, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	89bb      	ldrh	r3, [r7, #12]
 8006bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	8013      	strh	r3, [r2, #0]
 8006bd0:	e3f9      	b.n	80073c6 <USB_ActivateEndpoint+0x9be>
=======
 8006b06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b0a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006b0e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006b12:	e00b      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b14:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b1c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006b20:	e004      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006b28:	e000      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>
      break;
 8006b2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	b21b      	sxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b66:	b21a      	sxth	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	441a      	add	r2, r3
 8006b80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	7b1b      	ldrb	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f040 8180 	bne.w	8006ea2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8084 	beq.w	8006cb4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	00da      	lsls	r2, r3, #3
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	88db      	ldrh	r3, [r3, #6]
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	827b      	strh	r3, [r7, #18]
 8006bee:	8a7b      	ldrh	r3, [r7, #18]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01b      	beq.n	8006c30 <USB_ActivateEndpoint+0x180>
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0e:	823b      	strh	r3, [r7, #16]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	441a      	add	r2, r3
 8006c1a:	8a3b      	ldrh	r3, [r7, #16]
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	78db      	ldrb	r3, [r3, #3]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d020      	beq.n	8006c7a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c4e:	81bb      	strh	r3, [r7, #12]
 8006c50:	89bb      	ldrh	r3, [r7, #12]
 8006c52:	f083 0320 	eor.w	r3, r3, #32
 8006c56:	81bb      	strh	r3, [r7, #12]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	89bb      	ldrh	r3, [r7, #12]
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
 8006c78:	e3f9      	b.n	800746e <USB_ActivateEndpoint+0x9be>
>>>>>>> Stashed changes
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< Updated upstream
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be8:	81fb      	strh	r3, [r7, #14]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	441a      	add	r2, r3
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	8013      	strh	r3, [r2, #0]
 8006c0a:	e3dc      	b.n	80073c6 <USB_ActivateEndpoint+0x9be>
=======
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c90:	81fb      	strh	r3, [r7, #14]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	441a      	add	r2, r3
 8006c9c:	89fb      	ldrh	r3, [r7, #14]
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]
 8006cb2:	e3dc      	b.n	800746e <USB_ActivateEndpoint+0x9be>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
<<<<<<< Updated upstream
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	4413      	add	r3, r2
 8006c1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	00da      	lsls	r2, r3, #3
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	88db      	ldrh	r3, [r3, #6]
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c50:	4413      	add	r3, r2
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	00da      	lsls	r2, r3, #3
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <USB_ActivateEndpoint+0x28a>
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	e041      	b.n	8006d16 <USB_ActivateEndpoint+0x30e>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c98:	d81c      	bhi.n	8006cd4 <USB_ActivateEndpoint+0x2cc>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d004      	beq.n	8006cba <USB_ActivateEndpoint+0x2b2>
 8006cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	029b      	lsls	r3, r3, #10
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	e020      	b.n	8006d16 <USB_ActivateEndpoint+0x30e>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <USB_ActivateEndpoint+0x2ec>
 8006cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	029b      	lsls	r3, r3, #10
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4313      	orrs	r3, r2
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01b      	beq.n	8006d66 <USB_ActivateEndpoint+0x35e>
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d44:	843b      	strh	r3, [r7, #32]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	441a      	add	r2, r3
 8006d50:	8c3b      	ldrh	r3, [r7, #32]
 8006d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d124      	bne.n	8006db8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	83bb      	strh	r3, [r7, #28]
 8006d86:	8bbb      	ldrh	r3, [r7, #28]
 8006d88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d8c:	83bb      	strh	r3, [r7, #28]
 8006d8e:	8bbb      	ldrh	r3, [r7, #28]
 8006d90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d94:	83bb      	strh	r3, [r7, #28]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	8bbb      	ldrh	r3, [r7, #28]
 8006da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	8013      	strh	r3, [r2, #0]
 8006db6:	e306      	b.n	80073c6 <USB_ActivateEndpoint+0x9be>
=======
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	4413      	add	r3, r2
 8006cc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	00da      	lsls	r2, r3, #3
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	88db      	ldrh	r3, [r3, #6]
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf8:	4413      	add	r3, r2
 8006cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	00da      	lsls	r2, r3, #3
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <USB_ActivateEndpoint+0x28a>
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e041      	b.n	8006dbe <USB_ActivateEndpoint+0x30e>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d40:	d81c      	bhi.n	8006d7c <USB_ActivateEndpoint+0x2cc>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <USB_ActivateEndpoint+0x2b2>
 8006d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e020      	b.n	8006dbe <USB_ActivateEndpoint+0x30e>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d104      	bne.n	8006d9c <USB_ActivateEndpoint+0x2ec>
 8006d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d96:	3b01      	subs	r3, #1
 8006d98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006dcc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01b      	beq.n	8006e0e <USB_ActivateEndpoint+0x35e>
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dec:	843b      	strh	r3, [r7, #32]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	441a      	add	r2, r3
 8006df8:	8c3b      	ldrh	r3, [r7, #32]
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d124      	bne.n	8006e60 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2c:	83bb      	strh	r3, [r7, #28]
 8006e2e:	8bbb      	ldrh	r3, [r7, #28]
 8006e30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e34:	83bb      	strh	r3, [r7, #28]
 8006e36:	8bbb      	ldrh	r3, [r7, #28]
 8006e38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e3c:	83bb      	strh	r3, [r7, #28]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	441a      	add	r2, r3
 8006e48:	8bbb      	ldrh	r3, [r7, #28]
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]
 8006e5e:	e306      	b.n	800746e <USB_ActivateEndpoint+0x9be>
>>>>>>> Stashed changes
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
<<<<<<< Updated upstream
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dce:	83fb      	strh	r3, [r7, #30]
 8006dd0:	8bfb      	ldrh	r3, [r7, #30]
 8006dd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006dd6:	83fb      	strh	r3, [r7, #30]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	441a      	add	r2, r3
 8006de2:	8bfb      	ldrh	r3, [r7, #30]
 8006de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	8013      	strh	r3, [r2, #0]
 8006df8:	e2e5      	b.n	80073c6 <USB_ActivateEndpoint+0x9be>
=======
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e76:	83fb      	strh	r3, [r7, #30]
 8006e78:	8bfb      	ldrh	r3, [r7, #30]
 8006e7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e7e:	83fb      	strh	r3, [r7, #30]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	441a      	add	r2, r3
 8006e8a:	8bfb      	ldrh	r3, [r7, #30]
 8006e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]
 8006ea0:	e2e5      	b.n	800746e <USB_ActivateEndpoint+0x9be>
>>>>>>> Stashed changes
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	78db      	ldrb	r3, [r3, #3]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d11e      	bne.n	8006e40 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e18:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
 8006e3e:	e01d      	b.n	8006e7c <USB_ActivateEndpoint+0x474>
=======
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	78db      	ldrb	r3, [r3, #3]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d11e      	bne.n	8006ee8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eda:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8013      	strh	r3, [r2, #0]
 8006ee6:	e01d      	b.n	8006f24 <USB_ActivateEndpoint+0x474>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
<<<<<<< Updated upstream
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	8013      	strh	r3, [r2, #0]
=======
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efe:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
<<<<<<< Updated upstream
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e8c:	4413      	add	r3, r2
 8006e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	00da      	lsls	r2, r3, #3
 8006e96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	891b      	ldrh	r3, [r3, #8]
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ec0:	4413      	add	r3, r2
 8006ec2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	00da      	lsls	r2, r3, #3
 8006eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ed2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	895b      	ldrh	r3, [r3, #10]
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ee2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 81af 	bne.w	800724c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006efe:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01d      	beq.n	8006f46 <USB_ActivateEndpoint+0x53e>
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f20:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006f56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01d      	beq.n	8006f9e <USB_ActivateEndpoint+0x596>
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f78:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d16b      	bne.n	800707e <USB_ActivateEndpoint+0x676>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb6:	4413      	add	r3, r2
 8006fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	00da      	lsls	r2, r3, #3
 8006fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <USB_ActivateEndpoint+0x5f0>
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e05d      	b.n	80070b4 <USB_ActivateEndpoint+0x6ac>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ffe:	d81c      	bhi.n	800703a <USB_ActivateEndpoint+0x632>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <USB_ActivateEndpoint+0x618>
 8007016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800701a:	3301      	adds	r3, #1
 800701c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800702a:	b29b      	uxth	r3, r3
 800702c:	029b      	lsls	r3, r3, #10
 800702e:	b29b      	uxth	r3, r3
 8007030:	4313      	orrs	r3, r2
 8007032:	b29a      	uxth	r2, r3
 8007034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007036:	801a      	strh	r2, [r3, #0]
 8007038:	e03c      	b.n	80070b4 <USB_ActivateEndpoint+0x6ac>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <USB_ActivateEndpoint+0x652>
 8007050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007054:	3b01      	subs	r3, #1
 8007056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800705a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007064:	b29b      	uxth	r3, r3
 8007066:	029b      	lsls	r3, r3, #10
 8007068:	b29b      	uxth	r3, r3
 800706a:	4313      	orrs	r3, r2
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007076:	b29a      	uxth	r2, r3
 8007078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e01a      	b.n	80070b4 <USB_ActivateEndpoint+0x6ac>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d116      	bne.n	80070b4 <USB_ActivateEndpoint+0x6ac>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	657b      	str	r3, [r7, #84]	@ 0x54
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007090:	b29b      	uxth	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007096:	4413      	add	r3, r2
 8007098:	657b      	str	r3, [r7, #84]	@ 0x54
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	00da      	lsls	r2, r3, #3
 80070a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a2:	4413      	add	r3, r2
 80070a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d16b      	bne.n	8007198 <USB_ActivateEndpoint+0x790>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d0:	4413      	add	r3, r2
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00da      	lsls	r2, r3, #3
 80070da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070dc:	4413      	add	r3, r2
 80070de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <USB_ActivateEndpoint+0x70a>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800710a:	b29a      	uxth	r2, r3
 800710c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e05b      	b.n	80071ca <USB_ActivateEndpoint+0x7c2>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b3e      	cmp	r3, #62	@ 0x3e
 8007118:	d81c      	bhi.n	8007154 <USB_ActivateEndpoint+0x74c>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <USB_ActivateEndpoint+0x732>
 8007130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007134:	3301      	adds	r3, #1
 8007136:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29a      	uxth	r2, r3
 8007140:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007144:	b29b      	uxth	r3, r3
 8007146:	029b      	lsls	r3, r3, #10
 8007148:	b29b      	uxth	r3, r3
 800714a:	4313      	orrs	r3, r2
 800714c:	b29a      	uxth	r2, r3
 800714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e03a      	b.n	80071ca <USB_ActivateEndpoint+0x7c2>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <USB_ActivateEndpoint+0x76c>
 800716a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800716e:	3b01      	subs	r3, #1
 8007170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29a      	uxth	r2, r3
 800717a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800717e:	b29b      	uxth	r3, r3
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	b29b      	uxth	r3, r3
 8007184:	4313      	orrs	r3, r2
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007190:	b29a      	uxth	r2, r3
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	e018      	b.n	80071ca <USB_ActivateEndpoint+0x7c2>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d114      	bne.n	80071ca <USB_ActivateEndpoint+0x7c2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ac:	4413      	add	r3, r2
 80071ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	00da      	lsls	r2, r3, #3
 80071b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071be:	643b      	str	r3, [r7, #64]	@ 0x40
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	441a      	add	r2, r3
 80071fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	b29b      	uxth	r3, r3
 8007220:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007228:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	441a      	add	r2, r3
 8007234:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800723a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800723e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007246:	b29b      	uxth	r3, r3
 8007248:	8013      	strh	r3, [r2, #0]
 800724a:	e0bc      	b.n	80073c6 <USB_ActivateEndpoint+0x9be>
=======
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f34:	4413      	add	r3, r2
 8006f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	00da      	lsls	r2, r3, #3
 8006f3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	891b      	ldrh	r3, [r3, #8]
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f56:	801a      	strh	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f68:	4413      	add	r3, r2
 8006f6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	00da      	lsls	r2, r3, #3
 8006f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f74:	4413      	add	r3, r2
 8006f76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	895b      	ldrh	r3, [r3, #10]
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 81af 	bne.w	80072f4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006fa6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01d      	beq.n	8006fee <USB_ActivateEndpoint+0x53e>
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	441a      	add	r2, r3
 8006fd6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006ffe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01d      	beq.n	8007046 <USB_ActivateEndpoint+0x596>
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007020:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800703a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800703e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007042:	b29b      	uxth	r3, r3
 8007044:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d16b      	bne.n	8007126 <USB_ActivateEndpoint+0x676>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007058:	b29b      	uxth	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705e:	4413      	add	r3, r2
 8007060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00da      	lsls	r2, r3, #3
 8007068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706a:	4413      	add	r3, r2
 800706c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707c:	b29a      	uxth	r2, r3
 800707e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <USB_ActivateEndpoint+0x5f0>
 800708a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007098:	b29a      	uxth	r2, r3
 800709a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e05d      	b.n	800715c <USB_ActivateEndpoint+0x6ac>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80070a6:	d81c      	bhi.n	80070e2 <USB_ActivateEndpoint+0x632>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <USB_ActivateEndpoint+0x618>
 80070be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c2:	3301      	adds	r3, #1
 80070c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	029b      	lsls	r3, r3, #10
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	e03c      	b.n	800715c <USB_ActivateEndpoint+0x6ac>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <USB_ActivateEndpoint+0x652>
 80070f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
 8007108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800710c:	b29b      	uxth	r3, r3
 800710e:	029b      	lsls	r3, r3, #10
 8007110:	b29b      	uxth	r3, r3
 8007112:	4313      	orrs	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711e:	b29a      	uxth	r2, r3
 8007120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	e01a      	b.n	800715c <USB_ActivateEndpoint+0x6ac>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d116      	bne.n	800715c <USB_ActivateEndpoint+0x6ac>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	657b      	str	r3, [r7, #84]	@ 0x54
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007138:	b29b      	uxth	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800713e:	4413      	add	r3, r2
 8007140:	657b      	str	r3, [r7, #84]	@ 0x54
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00da      	lsls	r2, r3, #3
 8007148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714a:	4413      	add	r3, r2
 800714c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007150:	653b      	str	r3, [r7, #80]	@ 0x50
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	b29a      	uxth	r2, r3
 8007158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d16b      	bne.n	8007240 <USB_ActivateEndpoint+0x790>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007172:	b29b      	uxth	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007178:	4413      	add	r3, r2
 800717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	00da      	lsls	r2, r3, #3
 8007182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007184:	4413      	add	r3, r2
 8007186:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800718a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007196:	b29a      	uxth	r2, r3
 8007198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <USB_ActivateEndpoint+0x70a>
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	e05b      	b.n	8007272 <USB_ActivateEndpoint+0x7c2>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b3e      	cmp	r3, #62	@ 0x3e
 80071c0:	d81c      	bhi.n	80071fc <USB_ActivateEndpoint+0x74c>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <USB_ActivateEndpoint+0x732>
 80071d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071dc:	3301      	adds	r3, #1
 80071de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	029b      	lsls	r3, r3, #10
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	4313      	orrs	r3, r2
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e03a      	b.n	8007272 <USB_ActivateEndpoint+0x7c2>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	095b      	lsrs	r3, r3, #5
 8007202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <USB_ActivateEndpoint+0x76c>
 8007212:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007216:	3b01      	subs	r3, #1
 8007218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29a      	uxth	r2, r3
 8007222:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007226:	b29b      	uxth	r3, r3
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	b29b      	uxth	r3, r3
 800722c:	4313      	orrs	r3, r2
 800722e:	b29b      	uxth	r3, r3
 8007230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007238:	b29a      	uxth	r2, r3
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	e018      	b.n	8007272 <USB_ActivateEndpoint+0x7c2>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d114      	bne.n	8007272 <USB_ActivateEndpoint+0x7c2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800724e:	b29b      	uxth	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007254:	4413      	add	r3, r2
 8007256:	647b      	str	r3, [r7, #68]	@ 0x44
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	00da      	lsls	r2, r3, #3
 800725e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007260:	4413      	add	r3, r2
 8007262:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007266:	643b      	str	r3, [r7, #64]	@ 0x40
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	b29a      	uxth	r2, r3
 800726e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007270:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007288:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800728a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800728c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007290:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007292:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007294:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007298:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	441a      	add	r2, r3
 80072a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80072de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	8013      	strh	r3, [r2, #0]
 80072f2:	e0bc      	b.n	800746e <USB_ActivateEndpoint+0x9be>
>>>>>>> Stashed changes
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800725c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01d      	beq.n	80072a4 <USB_ActivateEndpoint+0x89c>
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800727a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800727e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	441a      	add	r2, r3
 800728c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007298:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800729c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80072b4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80072b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01d      	beq.n	80072fc <USB_ActivateEndpoint+0x8f4>
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	441a      	add	r2, r3
 80072e4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80072e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	78db      	ldrb	r3, [r3, #3]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d024      	beq.n	800734e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800731a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800731e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007322:	f083 0320 	eor.w	r3, r3, #32
 8007326:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800733c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007348:	b29b      	uxth	r3, r3
 800734a:	8013      	strh	r3, [r2, #0]
 800734c:	e01d      	b.n	800738a <USB_ActivateEndpoint+0x982>
=======
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007304:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01d      	beq.n	800734c <USB_ActivateEndpoint+0x89c>
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007326:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800733c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007340:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007348:	b29b      	uxth	r3, r3
 800734a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800735c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01d      	beq.n	80073a4 <USB_ActivateEndpoint+0x8f4>
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800737a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800737e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	441a      	add	r2, r3
 800738c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800739c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	78db      	ldrb	r3, [r3, #3]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d024      	beq.n	80073f6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80073c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80073ca:	f083 0320 	eor.w	r3, r3, #32
 80073ce:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	441a      	add	r2, r3
 80073dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80073e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	8013      	strh	r3, [r2, #0]
 80073f4:	e01d      	b.n	8007432 <USB_ActivateEndpoint+0x982>
>>>>>>> Stashed changes
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< Updated upstream
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007360:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007364:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	441a      	add	r2, r3
 8007372:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800737a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800737e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800739c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80073b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	8013      	strh	r3, [r2, #0]
=======
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800740c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007448:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
<<<<<<< Updated upstream
 80073c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	379c      	adds	r7, #156	@ 0x9c
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop

080073d8 <USB_DeactivateEndpoint>:
=======
 800746e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007472:	4618      	mov	r0, r3
 8007474:	379c      	adds	r7, #156	@ 0x9c
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop

08007480 <USB_DeactivateEndpoint>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 80073d8:	b480      	push	{r7}
 80073da:	b08d      	sub	sp, #52	@ 0x34
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	7b1b      	ldrb	r3, [r3, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 808e 	bne.w	8007508 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d044      	beq.n	800747e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	81bb      	strh	r3, [r7, #12]
 8007402:	89bb      	ldrh	r3, [r7, #12]
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01b      	beq.n	8007444 <USB_DeactivateEndpoint+0x6c>
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	b29b      	uxth	r3, r3
 800741a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800741e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007422:	817b      	strh	r3, [r7, #10]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	441a      	add	r2, r3
 800742e:	897b      	ldrh	r3, [r7, #10]
 8007430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800743c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007440:	b29b      	uxth	r3, r3
 8007442:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800745a:	813b      	strh	r3, [r7, #8]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	893b      	ldrh	r3, [r7, #8]
 8007468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800746c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007478:	b29b      	uxth	r3, r3
 800747a:	8013      	strh	r3, [r2, #0]
 800747c:	e192      	b.n	80077a4 <USB_DeactivateEndpoint+0x3cc>
=======
 8007480:	b480      	push	{r7}
 8007482:	b08d      	sub	sp, #52	@ 0x34
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	7b1b      	ldrb	r3, [r3, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f040 808e 	bne.w	80075b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d044      	beq.n	8007526 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	81bb      	strh	r3, [r7, #12]
 80074aa:	89bb      	ldrh	r3, [r7, #12]
 80074ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01b      	beq.n	80074ec <USB_DeactivateEndpoint+0x6c>
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ca:	817b      	strh	r3, [r7, #10]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	441a      	add	r2, r3
 80074d6:	897b      	ldrh	r3, [r7, #10]
 80074d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007502:	813b      	strh	r3, [r7, #8]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	893b      	ldrh	r3, [r7, #8]
 8007510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800751c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007520:	b29b      	uxth	r3, r3
 8007522:	8013      	strh	r3, [r2, #0]
 8007524:	e192      	b.n	800784c <USB_DeactivateEndpoint+0x3cc>
>>>>>>> Stashed changes
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	827b      	strh	r3, [r7, #18]
 800748c:	8a7b      	ldrh	r3, [r7, #18]
 800748e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01b      	beq.n	80074ce <USB_DeactivateEndpoint+0xf6>
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ac:	823b      	strh	r3, [r7, #16]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	441a      	add	r2, r3
 80074b8:	8a3b      	ldrh	r3, [r7, #16]
 80074ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e4:	81fb      	strh	r3, [r7, #14]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	441a      	add	r2, r3
 80074f0:	89fb      	ldrh	r3, [r7, #14]
 80074f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007502:	b29b      	uxth	r3, r3
 8007504:	8013      	strh	r3, [r2, #0]
 8007506:	e14d      	b.n	80077a4 <USB_DeactivateEndpoint+0x3cc>
=======
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	827b      	strh	r3, [r7, #18]
 8007534:	8a7b      	ldrh	r3, [r7, #18]
 8007536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01b      	beq.n	8007576 <USB_DeactivateEndpoint+0xf6>
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007554:	823b      	strh	r3, [r7, #16]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	441a      	add	r2, r3
 8007560:	8a3b      	ldrh	r3, [r7, #16]
 8007562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800756a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800756e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007572:	b29b      	uxth	r3, r3
 8007574:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758c:	81fb      	strh	r3, [r7, #14]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	441a      	add	r2, r3
 8007598:	89fb      	ldrh	r3, [r7, #14]
 800759a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800759e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	8013      	strh	r3, [r2, #0]
 80075ae:	e14d      	b.n	800784c <USB_DeactivateEndpoint+0x3cc>
>>>>>>> Stashed changes
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
<<<<<<< Updated upstream
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 80a5 	bne.w	800765c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	843b      	strh	r3, [r7, #32]
 8007520:	8c3b      	ldrh	r3, [r7, #32]
 8007522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01b      	beq.n	8007562 <USB_DeactivateEndpoint+0x18a>
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800753c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007540:	83fb      	strh	r3, [r7, #30]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	8bfb      	ldrh	r3, [r7, #30]
 800754e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800755a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800755e:	b29b      	uxth	r3, r3
 8007560:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	83bb      	strh	r3, [r7, #28]
 8007570:	8bbb      	ldrh	r3, [r7, #28]
 8007572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01b      	beq.n	80075b2 <USB_DeactivateEndpoint+0x1da>
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800758c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007590:	837b      	strh	r3, [r7, #26]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	441a      	add	r2, r3
 800759c:	8b7b      	ldrh	r3, [r7, #26]
 800759e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c8:	833b      	strh	r3, [r7, #24]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	441a      	add	r2, r3
 80075d4:	8b3b      	ldrh	r3, [r7, #24]
 80075d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007600:	82fb      	strh	r3, [r7, #22]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	441a      	add	r2, r3
 800760c:	8afb      	ldrh	r3, [r7, #22]
 800760e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800761a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800761e:	b29b      	uxth	r3, r3
 8007620:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007638:	82bb      	strh	r3, [r7, #20]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	8abb      	ldrh	r3, [r7, #20]
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]
 800765a:	e0a3      	b.n	80077a4 <USB_DeactivateEndpoint+0x3cc>
=======
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 80a5 	bne.w	8007704 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	843b      	strh	r3, [r7, #32]
 80075c8:	8c3b      	ldrh	r3, [r7, #32]
 80075ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01b      	beq.n	800760a <USB_DeactivateEndpoint+0x18a>
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e8:	83fb      	strh	r3, [r7, #30]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	441a      	add	r2, r3
 80075f4:	8bfb      	ldrh	r3, [r7, #30]
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	83bb      	strh	r3, [r7, #28]
 8007618:	8bbb      	ldrh	r3, [r7, #28]
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01b      	beq.n	800765a <USB_DeactivateEndpoint+0x1da>
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007638:	837b      	strh	r3, [r7, #26]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	8b7b      	ldrh	r3, [r7, #26]
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007652:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007670:	833b      	strh	r3, [r7, #24]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	441a      	add	r2, r3
 800767c:	8b3b      	ldrh	r3, [r7, #24]
 800767e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800768a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800768e:	b29b      	uxth	r3, r3
 8007690:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a8:	82fb      	strh	r3, [r7, #22]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	441a      	add	r2, r3
 80076b4:	8afb      	ldrh	r3, [r7, #22]
 80076b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e0:	82bb      	strh	r3, [r7, #20]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	441a      	add	r2, r3
 80076ec:	8abb      	ldrh	r3, [r7, #20]
 80076ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076fe:	b29b      	uxth	r3, r3
 8007700:	8013      	strh	r3, [r2, #0]
 8007702:	e0a3      	b.n	800784c <USB_DeactivateEndpoint+0x3cc>
>>>>>>> Stashed changes
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800766a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800766c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01b      	beq.n	80076ac <USB_DeactivateEndpoint+0x2d4>
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800769c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80076ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80076bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01b      	beq.n	80076fc <USB_DeactivateEndpoint+0x324>
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	441a      	add	r2, r3
 80076e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80076e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800770e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007712:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	441a      	add	r2, r3
 800771e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800772c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007730:	b29b      	uxth	r3, r3
 8007732:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	441a      	add	r2, r3
 8007756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800775c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007768:	b29b      	uxth	r3, r3
 800776a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800777e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007782:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	441a      	add	r2, r3
 800778e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800779c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	8013      	strh	r3, [r2, #0]
=======
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007712:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01b      	beq.n	8007754 <USB_DeactivateEndpoint+0x2d4>
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800772e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007732:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	441a      	add	r2, r3
 800773e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800774c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007750:	b29b      	uxth	r3, r3
 8007752:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007762:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01b      	beq.n	80077a4 <USB_DeactivateEndpoint+0x324>
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800777e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007782:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	441a      	add	r2, r3
 800778e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800779c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d8:	b29b      	uxth	r3, r3
 80077da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	441a      	add	r2, r3
 80077fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800780c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007810:	b29b      	uxth	r3, r3
 8007812:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	441a      	add	r2, r3
 8007836:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800783c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007848:	b29b      	uxth	r3, r3
 800784a:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
<<<<<<< Updated upstream
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3734      	adds	r7, #52	@ 0x34
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USB_EPStartXfer>:
=======
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3734      	adds	r7, #52	@ 0x34
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_EPStartXfer>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b0ac      	sub	sp, #176	@ 0xb0
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
=======
 800785a:	b580      	push	{r7, lr}
 800785c:	b0ac      	sub	sp, #176	@ 0xb0
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< Updated upstream
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	f040 84ca 	bne.w	800815a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d904      	bls.n	80077dc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077da:	e003      	b.n	80077e4 <USB_EPStartXfer+0x32>
=======
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 84ca 	bne.w	8008202 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	429a      	cmp	r2, r3
 8007878:	d904      	bls.n	8007884 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007882:	e003      	b.n	800788c <USB_EPStartXfer+0x32>
>>>>>>> Stashed changes
    }
    else
    {
      len = ep->xfer_len;
<<<<<<< Updated upstream
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
=======
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
>>>>>>> Stashed changes
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
<<<<<<< Updated upstream
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	7b1b      	ldrb	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d122      	bne.n	8007832 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	6959      	ldr	r1, [r3, #20]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	88da      	ldrh	r2, [r3, #6]
 80077f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 febd 	bl	800857a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	4413      	add	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	00da      	lsls	r2, r3, #3
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	4413      	add	r3, r2
 800781e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	f000 bc6f 	b.w	8008110 <USB_EPStartXfer+0x95e>
=======
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	7b1b      	ldrb	r3, [r3, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d122      	bne.n	80078da <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6959      	ldr	r1, [r3, #20]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	88da      	ldrh	r2, [r3, #6]
 800789c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 febd 	bl	8008622 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4413      	add	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	00da      	lsls	r2, r3, #3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	f000 bc6f 	b.w	80081b8 <USB_EPStartXfer+0x95e>
>>>>>>> Stashed changes
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	78db      	ldrb	r3, [r3, #3]
 8007836:	2b02      	cmp	r3, #2
 8007838:	f040 831e 	bne.w	8007e78 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	6a1a      	ldr	r2, [r3, #32]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	429a      	cmp	r2, r3
 8007846:	f240 82cf 	bls.w	8007de8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800785c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007860:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	441a      	add	r2, r3
 800786e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800787a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800787e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007882:	b29b      	uxth	r3, r3
 8007884:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 814f 	beq.w	8007b4a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	785b      	ldrb	r3, [r3, #1]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d16b      	bne.n	8007990 <USB_EPStartXfer+0x1de>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c8:	4413      	add	r3, r2
 80078ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	00da      	lsls	r2, r3, #3
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	4413      	add	r3, r2
 80078d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <USB_EPStartXfer+0x158>
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007902:	b29a      	uxth	r2, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e05b      	b.n	80079c2 <USB_EPStartXfer+0x210>
 800790a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800790e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007910:	d81c      	bhi.n	800794c <USB_EPStartXfer+0x19a>
 8007912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800791c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <USB_EPStartXfer+0x180>
 8007928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800792c:	3301      	adds	r3, #1
 800792e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29a      	uxth	r2, r3
 8007938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800793c:	b29b      	uxth	r3, r3
 800793e:	029b      	lsls	r3, r3, #10
 8007940:	b29b      	uxth	r3, r3
 8007942:	4313      	orrs	r3, r2
 8007944:	b29a      	uxth	r2, r3
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e03a      	b.n	80079c2 <USB_EPStartXfer+0x210>
 800794c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <USB_EPStartXfer+0x1ba>
 8007962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007966:	3b01      	subs	r3, #1
 8007968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29a      	uxth	r2, r3
 8007972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007976:	b29b      	uxth	r3, r3
 8007978:	029b      	lsls	r3, r3, #10
 800797a:	b29b      	uxth	r3, r3
 800797c:	4313      	orrs	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007988:	b29a      	uxth	r2, r3
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	e018      	b.n	80079c2 <USB_EPStartXfer+0x210>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d114      	bne.n	80079c2 <USB_EPStartXfer+0x210>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	4413      	add	r3, r2
 80079a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	00da      	lsls	r2, r3, #3
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	4413      	add	r3, r2
 80079b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079bc:	b29a      	uxth	r2, r3
 80079be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	895b      	ldrh	r3, [r3, #10]
 80079c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6959      	ldr	r1, [r3, #20]
 80079ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fdce 	bl	800857a <USB_WritePMA>
            ep->xfer_buff += len;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	695a      	ldr	r2, [r3, #20]
 80079e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e6:	441a      	add	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	6a1a      	ldr	r2, [r3, #32]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d907      	bls.n	8007a08 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	6a1a      	ldr	r2, [r3, #32]
 80079fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a00:	1ad2      	subs	r2, r2, r3
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	621a      	str	r2, [r3, #32]
 8007a06:	e006      	b.n	8007a16 <USB_EPStartXfer+0x264>
=======
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	78db      	ldrb	r3, [r3, #3]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	f040 831e 	bne.w	8007f20 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	6a1a      	ldr	r2, [r3, #32]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	f240 82cf 	bls.w	8007e90 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007908:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	441a      	add	r2, r3
 8007916:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007922:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6a1a      	ldr	r2, [r3, #32]
 8007932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 814f 	beq.w	8007bf2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	633b      	str	r3, [r7, #48]	@ 0x30
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d16b      	bne.n	8007a38 <USB_EPStartXfer+0x1de>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800796a:	b29b      	uxth	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	4413      	add	r3, r2
 8007972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	00da      	lsls	r2, r3, #3
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	4413      	add	r3, r2
 800797e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800798e:	b29a      	uxth	r2, r3
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <USB_EPStartXfer+0x158>
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	e05b      	b.n	8007a6a <USB_EPStartXfer+0x210>
 80079b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80079b8:	d81c      	bhi.n	80079f4 <USB_EPStartXfer+0x19a>
 80079ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <USB_EPStartXfer+0x180>
 80079d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079d4:	3301      	adds	r3, #1
 80079d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	b29a      	uxth	r2, r3
 80079e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	e03a      	b.n	8007a6a <USB_EPStartXfer+0x210>
 80079f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079f8:	095b      	lsrs	r3, r3, #5
 80079fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a02:	f003 031f 	and.w	r3, r3, #31
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <USB_EPStartXfer+0x1ba>
 8007a0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	029b      	lsls	r3, r3, #10
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e018      	b.n	8007a6a <USB_EPStartXfer+0x210>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d114      	bne.n	8007a6a <USB_EPStartXfer+0x210>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	4413      	add	r3, r2
 8007a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	00da      	lsls	r2, r3, #3
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	895b      	ldrh	r3, [r3, #10]
 8007a6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6959      	ldr	r1, [r3, #20]
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fdce 	bl	8008622 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695a      	ldr	r2, [r3, #20]
 8007a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a8e:	441a      	add	r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d907      	bls.n	8007ab0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	6a1a      	ldr	r2, [r3, #32]
 8007aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aa8:	1ad2      	subs	r2, r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	621a      	str	r2, [r3, #32]
 8007aae:	e006      	b.n	8007abe <USB_EPStartXfer+0x264>
>>>>>>> Stashed changes
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< Updated upstream
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2200      	movs	r2, #0
 8007a14:	621a      	str	r2, [r3, #32]
=======
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d16b      	bne.n	8007af6 <USB_EPStartXfer+0x344>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	4413      	add	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	00da      	lsls	r2, r3, #3
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <USB_EPStartXfer+0x2be>
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	801a      	strh	r2, [r3, #0]
 8007a6e:	e05d      	b.n	8007b2c <USB_EPStartXfer+0x37a>
 8007a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a74:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a76:	d81c      	bhi.n	8007ab2 <USB_EPStartXfer+0x300>
 8007a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a7c:	085b      	lsrs	r3, r3, #1
 8007a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <USB_EPStartXfer+0x2e6>
 8007a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a92:	3301      	adds	r3, #1
 8007a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	029b      	lsls	r3, r3, #10
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	e03c      	b.n	8007b2c <USB_EPStartXfer+0x37a>
 8007ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <USB_EPStartXfer+0x320>
 8007ac8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007acc:	3b01      	subs	r3, #1
 8007ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	e01a      	b.n	8007b2c <USB_EPStartXfer+0x37a>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d116      	bne.n	8007b2c <USB_EPStartXfer+0x37a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	623b      	str	r3, [r7, #32]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	4413      	add	r3, r2
 8007b10:	623b      	str	r3, [r7, #32]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	00da      	lsls	r2, r3, #3
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b20:	61fb      	str	r3, [r7, #28]
 8007b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	891b      	ldrh	r3, [r3, #8]
 8007b30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	6959      	ldr	r1, [r3, #20]
 8007b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fd19 	bl	800857a <USB_WritePMA>
 8007b48:	e2e2      	b.n	8008110 <USB_EPStartXfer+0x95e>
=======
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	785b      	ldrb	r3, [r3, #1]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d16b      	bne.n	8007b9e <USB_EPStartXfer+0x344>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	61bb      	str	r3, [r7, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	00da      	lsls	r2, r3, #3
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	801a      	strh	r2, [r3, #0]
 8007afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <USB_EPStartXfer+0x2be>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	801a      	strh	r2, [r3, #0]
 8007b16:	e05d      	b.n	8007bd4 <USB_EPStartXfer+0x37a>
 8007b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b1e:	d81c      	bhi.n	8007b5a <USB_EPStartXfer+0x300>
 8007b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <USB_EPStartXfer+0x2e6>
 8007b36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	029b      	lsls	r3, r3, #10
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	e03c      	b.n	8007bd4 <USB_EPStartXfer+0x37a>
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <USB_EPStartXfer+0x320>
 8007b70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b74:	3b01      	subs	r3, #1
 8007b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	029b      	lsls	r3, r3, #10
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e01a      	b.n	8007bd4 <USB_EPStartXfer+0x37a>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d116      	bne.n	8007bd4 <USB_EPStartXfer+0x37a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	00da      	lsls	r2, r3, #3
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	891b      	ldrh	r3, [r3, #8]
 8007bd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	6959      	ldr	r1, [r3, #20]
 8007be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fd19 	bl	8008622 <USB_WritePMA>
 8007bf0:	e2e2      	b.n	80081b8 <USB_EPStartXfer+0x95e>
>>>>>>> Stashed changes
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d16b      	bne.n	8007c2a <USB_EPStartXfer+0x478>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b62:	4413      	add	r3, r2
 8007b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	00da      	lsls	r2, r3, #3
 8007b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b6e:	4413      	add	r3, r2
 8007b70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <USB_EPStartXfer+0x3f2>
 8007b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	e05d      	b.n	8007c60 <USB_EPStartXfer+0x4ae>
 8007ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007baa:	d81c      	bhi.n	8007be6 <USB_EPStartXfer+0x434>
 8007bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <USB_EPStartXfer+0x41a>
 8007bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	029b      	lsls	r3, r3, #10
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be2:	801a      	strh	r2, [r3, #0]
 8007be4:	e03c      	b.n	8007c60 <USB_EPStartXfer+0x4ae>
 8007be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d104      	bne.n	8007c06 <USB_EPStartXfer+0x454>
 8007bfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c00:	3b01      	subs	r3, #1
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	029b      	lsls	r3, r3, #10
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	4313      	orrs	r3, r2
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	e01a      	b.n	8007c60 <USB_EPStartXfer+0x4ae>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d116      	bne.n	8007c60 <USB_EPStartXfer+0x4ae>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c42:	4413      	add	r3, r2
 8007c44:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	00da      	lsls	r2, r3, #3
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c4e:	4413      	add	r3, r2
 8007c50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	891b      	ldrh	r3, [r3, #8]
 8007c64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6959      	ldr	r1, [r3, #20]
 8007c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fc7f 	bl	800857a <USB_WritePMA>
            ep->xfer_buff += len;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	695a      	ldr	r2, [r3, #20]
 8007c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c84:	441a      	add	r2, r3
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	6a1a      	ldr	r2, [r3, #32]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d907      	bls.n	8007ca6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	6a1a      	ldr	r2, [r3, #32]
 8007c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	621a      	str	r2, [r3, #32]
 8007ca4:	e006      	b.n	8007cb4 <USB_EPStartXfer+0x502>
=======
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d16b      	bne.n	8007cd2 <USB_EPStartXfer+0x478>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	461a      	mov	r2, r3
 8007c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c0a:	4413      	add	r3, r2
 8007c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	00da      	lsls	r2, r3, #3
 8007c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c16:	4413      	add	r3, r2
 8007c18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <USB_EPStartXfer+0x3f2>
 8007c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	e05d      	b.n	8007d08 <USB_EPStartXfer+0x4ae>
 8007c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c52:	d81c      	bhi.n	8007c8e <USB_EPStartXfer+0x434>
 8007c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <USB_EPStartXfer+0x41a>
 8007c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c6e:	3301      	adds	r3, #1
 8007c70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	029b      	lsls	r3, r3, #10
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e03c      	b.n	8007d08 <USB_EPStartXfer+0x4ae>
 8007c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <USB_EPStartXfer+0x454>
 8007ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	029b      	lsls	r3, r3, #10
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	e01a      	b.n	8007d08 <USB_EPStartXfer+0x4ae>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d116      	bne.n	8007d08 <USB_EPStartXfer+0x4ae>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cea:	4413      	add	r3, r2
 8007cec:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	00da      	lsls	r2, r3, #3
 8007cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	891b      	ldrh	r3, [r3, #8]
 8007d0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	6959      	ldr	r1, [r3, #20]
 8007d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fc7f 	bl	8008622 <USB_WritePMA>
            ep->xfer_buff += len;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695a      	ldr	r2, [r3, #20]
 8007d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d2c:	441a      	add	r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	6a1a      	ldr	r2, [r3, #32]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d907      	bls.n	8007d4e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	6a1a      	ldr	r2, [r3, #32]
 8007d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	621a      	str	r2, [r3, #32]
 8007d4c:	e006      	b.n	8007d5c <USB_EPStartXfer+0x502>
>>>>>>> Stashed changes
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< Updated upstream
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	621a      	str	r2, [r3, #32]
=======
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d16b      	bne.n	8007d98 <USB_EPStartXfer+0x5e6>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd0:	4413      	add	r3, r2
 8007cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	00da      	lsls	r2, r3, #3
 8007cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cdc:	4413      	add	r3, r2
 8007cde:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <USB_EPStartXfer+0x560>
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	e05b      	b.n	8007dca <USB_EPStartXfer+0x618>
 8007d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d16:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d18:	d81c      	bhi.n	8007d54 <USB_EPStartXfer+0x5a2>
 8007d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <USB_EPStartXfer+0x588>
 8007d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d34:	3301      	adds	r3, #1
 8007d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	029b      	lsls	r3, r3, #10
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d50:	801a      	strh	r2, [r3, #0]
 8007d52:	e03a      	b.n	8007dca <USB_EPStartXfer+0x618>
 8007d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <USB_EPStartXfer+0x5c2>
 8007d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	029b      	lsls	r3, r3, #10
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	4313      	orrs	r3, r2
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	e018      	b.n	8007dca <USB_EPStartXfer+0x618>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d114      	bne.n	8007dca <USB_EPStartXfer+0x618>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dac:	4413      	add	r3, r2
 8007dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	00da      	lsls	r2, r3, #3
 8007db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db8:	4413      	add	r3, r2
 8007dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	895b      	ldrh	r3, [r3, #10]
 8007dce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6959      	ldr	r1, [r3, #20]
 8007dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fbca 	bl	800857a <USB_WritePMA>
 8007de6:	e193      	b.n	8008110 <USB_EPStartXfer+0x95e>
=======
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	785b      	ldrb	r3, [r3, #1]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d16b      	bne.n	8007e40 <USB_EPStartXfer+0x5e6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d78:	4413      	add	r3, r2
 8007d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	00da      	lsls	r2, r3, #3
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	4413      	add	r3, r2
 8007d86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <USB_EPStartXfer+0x560>
 8007da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	e05b      	b.n	8007e72 <USB_EPStartXfer+0x618>
 8007dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dc0:	d81c      	bhi.n	8007dfc <USB_EPStartXfer+0x5a2>
 8007dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <USB_EPStartXfer+0x588>
 8007dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ddc:	3301      	adds	r3, #1
 8007dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	029b      	lsls	r3, r3, #10
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df8:	801a      	strh	r2, [r3, #0]
 8007dfa:	e03a      	b.n	8007e72 <USB_EPStartXfer+0x618>
 8007dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <USB_EPStartXfer+0x5c2>
 8007e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e16:	3b01      	subs	r3, #1
 8007e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	029b      	lsls	r3, r3, #10
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	e018      	b.n	8007e72 <USB_EPStartXfer+0x618>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d114      	bne.n	8007e72 <USB_EPStartXfer+0x618>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e54:	4413      	add	r3, r2
 8007e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	00da      	lsls	r2, r3, #3
 8007e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	895b      	ldrh	r3, [r3, #10]
 8007e76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6959      	ldr	r1, [r3, #20]
 8007e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fbca 	bl	8008622 <USB_WritePMA>
 8007e8e:	e193      	b.n	80081b8 <USB_EPStartXfer+0x95e>
>>>>>>> Stashed changes
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
<<<<<<< Updated upstream
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e06:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	441a      	add	r2, r3
 8007e14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e3c:	4413      	add	r3, r2
 8007e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	00da      	lsls	r2, r3, #3
 8007e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e48:	4413      	add	r3, r2
 8007e4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	891b      	ldrh	r3, [r3, #8]
 8007e5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6959      	ldr	r1, [r3, #20]
 8007e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fb82 	bl	800857a <USB_WritePMA>
 8007e76:	e14b      	b.n	8008110 <USB_EPStartXfer+0x95e>
=======
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ee4:	4413      	add	r3, r2
 8007ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	00da      	lsls	r2, r3, #3
 8007eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	891b      	ldrh	r3, [r3, #8]
 8007f06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6959      	ldr	r1, [r3, #20]
 8007f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fb82 	bl	8008622 <USB_WritePMA>
 8007f1e:	e14b      	b.n	80081b8 <USB_EPStartXfer+0x95e>
>>>>>>> Stashed changes
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
<<<<<<< Updated upstream
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	6a1a      	ldr	r2, [r3, #32]
 8007e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e80:	1ad2      	subs	r2, r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 809a 	beq.w	8007fd2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d16b      	bne.n	8007f82 <USB_EPStartXfer+0x7d0>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007eba:	4413      	add	r3, r2
 8007ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	00da      	lsls	r2, r3, #3
 8007ec4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ecc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <USB_EPStartXfer+0x74a>
 8007ee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ef8:	801a      	strh	r2, [r3, #0]
 8007efa:	e05b      	b.n	8007fb4 <USB_EPStartXfer+0x802>
 8007efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f00:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f02:	d81c      	bhi.n	8007f3e <USB_EPStartXfer+0x78c>
 8007f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <USB_EPStartXfer+0x772>
 8007f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f1e:	3301      	adds	r3, #1
 8007f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	029b      	lsls	r3, r3, #10
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	4313      	orrs	r3, r2
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	e03a      	b.n	8007fb4 <USB_EPStartXfer+0x802>
 8007f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f42:	095b      	lsrs	r3, r3, #5
 8007f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <USB_EPStartXfer+0x7ac>
 8007f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	029b      	lsls	r3, r3, #10
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e018      	b.n	8007fb4 <USB_EPStartXfer+0x802>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	785b      	ldrb	r3, [r3, #1]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d114      	bne.n	8007fb4 <USB_EPStartXfer+0x802>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f96:	4413      	add	r3, r2
 8007f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	00da      	lsls	r2, r3, #3
 8007fa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	895b      	ldrh	r3, [r3, #10]
 8007fb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	6959      	ldr	r1, [r3, #20]
 8007fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fad5 	bl	800857a <USB_WritePMA>
 8007fd0:	e09e      	b.n	8008110 <USB_EPStartXfer+0x95e>
=======
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	6a1a      	ldr	r2, [r3, #32]
 8007f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 809a 	beq.w	800807a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d16b      	bne.n	800802a <USB_EPStartXfer+0x7d0>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	461a      	mov	r2, r3
 8007f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f62:	4413      	add	r3, r2
 8007f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	00da      	lsls	r2, r3, #3
 8007f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f6e:	4413      	add	r3, r2
 8007f70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f74:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <USB_EPStartXfer+0x74a>
 8007f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	e05b      	b.n	800805c <USB_EPStartXfer+0x802>
 8007fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007faa:	d81c      	bhi.n	8007fe6 <USB_EPStartXfer+0x78c>
 8007fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <USB_EPStartXfer+0x772>
 8007fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	029b      	lsls	r3, r3, #10
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fe2:	801a      	strh	r2, [r3, #0]
 8007fe4:	e03a      	b.n	800805c <USB_EPStartXfer+0x802>
 8007fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fea:	095b      	lsrs	r3, r3, #5
 8007fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ff4:	f003 031f 	and.w	r3, r3, #31
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d104      	bne.n	8008006 <USB_EPStartXfer+0x7ac>
 8007ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008000:	3b01      	subs	r3, #1
 8008002:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29a      	uxth	r2, r3
 800800c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008010:	b29b      	uxth	r3, r3
 8008012:	029b      	lsls	r3, r3, #10
 8008014:	b29b      	uxth	r3, r3
 8008016:	4313      	orrs	r3, r2
 8008018:	b29b      	uxth	r3, r3
 800801a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008022:	b29a      	uxth	r2, r3
 8008024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	e018      	b.n	800805c <USB_EPStartXfer+0x802>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d114      	bne.n	800805c <USB_EPStartXfer+0x802>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008038:	b29b      	uxth	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800803e:	4413      	add	r3, r2
 8008040:	673b      	str	r3, [r7, #112]	@ 0x70
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	00da      	lsls	r2, r3, #3
 8008048:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800804a:	4413      	add	r3, r2
 800804c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008050:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008056:	b29a      	uxth	r2, r3
 8008058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800805a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	895b      	ldrh	r3, [r3, #10]
 8008060:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	6959      	ldr	r1, [r3, #20]
 8008068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800806c:	b29b      	uxth	r3, r3
 800806e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fad5 	bl	8008622 <USB_WritePMA>
 8008078:	e09e      	b.n	80081b8 <USB_EPStartXfer+0x95e>
>>>>>>> Stashed changes
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< Updated upstream
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d16b      	bne.n	80080b2 <USB_EPStartXfer+0x900>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fea:	4413      	add	r3, r2
 8007fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	00da      	lsls	r2, r3, #3
 8007ff4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ffe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008008:	b29a      	uxth	r2, r3
 800800a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10a      	bne.n	800802c <USB_EPStartXfer+0x87a>
 8008016:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008024:	b29a      	uxth	r2, r3
 8008026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	e063      	b.n	80080f4 <USB_EPStartXfer+0x942>
 800802c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008030:	2b3e      	cmp	r3, #62	@ 0x3e
 8008032:	d81c      	bhi.n	800806e <USB_EPStartXfer+0x8bc>
 8008034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800803e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <USB_EPStartXfer+0x8a2>
 800804a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800804e:	3301      	adds	r3, #1
 8008050:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29a      	uxth	r2, r3
 800805a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800805e:	b29b      	uxth	r3, r3
 8008060:	029b      	lsls	r3, r3, #10
 8008062:	b29b      	uxth	r3, r3
 8008064:	4313      	orrs	r3, r2
 8008066:	b29a      	uxth	r2, r3
 8008068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	e042      	b.n	80080f4 <USB_EPStartXfer+0x942>
 800806e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008072:	095b      	lsrs	r3, r3, #5
 8008074:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800807c:	f003 031f 	and.w	r3, r3, #31
 8008080:	2b00      	cmp	r3, #0
 8008082:	d104      	bne.n	800808e <USB_EPStartXfer+0x8dc>
 8008084:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008088:	3b01      	subs	r3, #1
 800808a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800808e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29a      	uxth	r2, r3
 8008094:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008098:	b29b      	uxth	r3, r3
 800809a:	029b      	lsls	r3, r3, #10
 800809c:	b29b      	uxth	r3, r3
 800809e:	4313      	orrs	r3, r2
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	e020      	b.n	80080f4 <USB_EPStartXfer+0x942>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d11c      	bne.n	80080f4 <USB_EPStartXfer+0x942>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080ce:	4413      	add	r3, r2
 80080d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	00da      	lsls	r2, r3, #3
 80080da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080de:	4413      	add	r3, r2
 80080e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	891b      	ldrh	r3, [r3, #8]
 80080f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	6959      	ldr	r1, [r3, #20]
 8008100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008104:	b29b      	uxth	r3, r3
 8008106:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa35 	bl	800857a <USB_WritePMA>
=======
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d16b      	bne.n	800815a <USB_EPStartXfer+0x900>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800808c:	b29b      	uxth	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008092:	4413      	add	r3, r2
 8008094:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	00da      	lsls	r2, r3, #3
 800809c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800809e:	4413      	add	r3, r2
 80080a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <USB_EPStartXfer+0x87a>
 80080be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e063      	b.n	800819c <USB_EPStartXfer+0x942>
 80080d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80080da:	d81c      	bhi.n	8008116 <USB_EPStartXfer+0x8bc>
 80080dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <USB_EPStartXfer+0x8a2>
 80080f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080f6:	3301      	adds	r3, #1
 80080f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008106:	b29b      	uxth	r3, r3
 8008108:	029b      	lsls	r3, r3, #10
 800810a:	b29b      	uxth	r3, r3
 800810c:	4313      	orrs	r3, r2
 800810e:	b29a      	uxth	r2, r3
 8008110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008112:	801a      	strh	r2, [r3, #0]
 8008114:	e042      	b.n	800819c <USB_EPStartXfer+0x942>
 8008116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <USB_EPStartXfer+0x8dc>
 800812c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008130:	3b01      	subs	r3, #1
 8008132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008136:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29a      	uxth	r2, r3
 800813c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008140:	b29b      	uxth	r3, r3
 8008142:	029b      	lsls	r3, r3, #10
 8008144:	b29b      	uxth	r3, r3
 8008146:	4313      	orrs	r3, r2
 8008148:	b29b      	uxth	r3, r3
 800814a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800814e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008152:	b29a      	uxth	r2, r3
 8008154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	e020      	b.n	800819c <USB_EPStartXfer+0x942>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d11c      	bne.n	800819c <USB_EPStartXfer+0x942>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800816e:	b29b      	uxth	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008176:	4413      	add	r3, r2
 8008178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	00da      	lsls	r2, r3, #3
 8008182:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008186:	4413      	add	r3, r2
 8008188:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800818c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008194:	b29a      	uxth	r2, r3
 8008196:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800819a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	891b      	ldrh	r3, [r3, #8]
 80081a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	6959      	ldr	r1, [r3, #20]
 80081a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa35 	bl	8008622 <USB_WritePMA>
>>>>>>> Stashed changes
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
<<<<<<< Updated upstream
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008126:	817b      	strh	r3, [r7, #10]
 8008128:	897b      	ldrh	r3, [r7, #10]
 800812a:	f083 0310 	eor.w	r3, r3, #16
 800812e:	817b      	strh	r3, [r7, #10]
 8008130:	897b      	ldrh	r3, [r7, #10]
 8008132:	f083 0320 	eor.w	r3, r3, #32
 8008136:	817b      	strh	r3, [r7, #10]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	441a      	add	r2, r3
 8008142:	897b      	ldrh	r3, [r7, #10]
 8008144:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008148:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800814c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008154:	b29b      	uxth	r3, r3
 8008156:	8013      	strh	r3, [r2, #0]
 8008158:	e0d5      	b.n	8008306 <USB_EPStartXfer+0xb54>
=======
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ce:	817b      	strh	r3, [r7, #10]
 80081d0:	897b      	ldrh	r3, [r7, #10]
 80081d2:	f083 0310 	eor.w	r3, r3, #16
 80081d6:	817b      	strh	r3, [r7, #10]
 80081d8:	897b      	ldrh	r3, [r7, #10]
 80081da:	f083 0320 	eor.w	r3, r3, #32
 80081de:	817b      	strh	r3, [r7, #10]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	441a      	add	r2, r3
 80081ea:	897b      	ldrh	r3, [r7, #10]
 80081ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	8013      	strh	r3, [r2, #0]
 8008200:	e0d5      	b.n	80083ae <USB_EPStartXfer+0xb54>
>>>>>>> Stashed changes
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
<<<<<<< Updated upstream
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	7b1b      	ldrb	r3, [r3, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d156      	bne.n	8008210 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d122      	bne.n	80081b0 <USB_EPStartXfer+0x9fe>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	78db      	ldrb	r3, [r3, #3]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d11e      	bne.n	80081b0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008188:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	441a      	add	r2, r3
 8008196:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800819a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800819e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80081a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	8013      	strh	r3, [r2, #0]
 80081ae:	e01d      	b.n	80081ec <USB_EPStartXfer+0xa3a>
=======
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	7b1b      	ldrb	r3, [r3, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d156      	bne.n	80082b8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d122      	bne.n	8008258 <USB_EPStartXfer+0x9fe>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	78db      	ldrb	r3, [r3, #3]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d11e      	bne.n	8008258 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800822c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008230:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	441a      	add	r2, r3
 800823e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800824a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800824e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008252:	b29b      	uxth	r3, r3
 8008254:	8013      	strh	r3, [r2, #0]
 8008256:	e01d      	b.n	8008294 <USB_EPStartXfer+0xa3a>
>>>>>>> Stashed changes
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
<<<<<<< Updated upstream
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80081c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	441a      	add	r2, r3
 80081d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80081d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	8013      	strh	r3, [r2, #0]
=======
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800826a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800826e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	441a      	add	r2, r3
 800827c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800828c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]
>>>>>>> Stashed changes
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
<<<<<<< Updated upstream
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d907      	bls.n	8008208 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	1ad2      	subs	r2, r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	619a      	str	r2, [r3, #24]
 8008206:	e054      	b.n	80082b2 <USB_EPStartXfer+0xb00>
=======
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	699a      	ldr	r2, [r3, #24]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	429a      	cmp	r2, r3
 800829e:	d907      	bls.n	80082b0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	699a      	ldr	r2, [r3, #24]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	619a      	str	r2, [r3, #24]
 80082ae:	e054      	b.n	800835a <USB_EPStartXfer+0xb00>
>>>>>>> Stashed changes
      }
      else
      {
        ep->xfer_len = 0U;
<<<<<<< Updated upstream
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	619a      	str	r2, [r3, #24]
 800820e:	e050      	b.n	80082b2 <USB_EPStartXfer+0xb00>
=======
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2200      	movs	r2, #0
 80082b4:	619a      	str	r2, [r3, #24]
 80082b6:	e050      	b.n	800835a <USB_EPStartXfer+0xb00>
>>>>>>> Stashed changes
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< Updated upstream
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	78db      	ldrb	r3, [r3, #3]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d142      	bne.n	800829e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d048      	beq.n	80082b2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008230:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <USB_EPStartXfer+0xa96>
 800823c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10b      	bne.n	8008260 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008248:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800824c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008250:	2b00      	cmp	r3, #0
 8008252:	d12e      	bne.n	80082b2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008254:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d128      	bne.n	80082b2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008276:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	441a      	add	r2, r3
 8008284:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800828c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008294:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008298:	b29b      	uxth	r3, r3
 800829a:	8013      	strh	r3, [r2, #0]
 800829c:	e009      	b.n	80082b2 <USB_EPStartXfer+0xb00>
=======
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	78db      	ldrb	r3, [r3, #3]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d142      	bne.n	8008346 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d048      	beq.n	800835a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <USB_EPStartXfer+0xa96>
 80082e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d12e      	bne.n	800835a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d128      	bne.n	800835a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800831a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800833c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008340:	b29b      	uxth	r3, r3
 8008342:	8013      	strh	r3, [r2, #0]
 8008344:	e009      	b.n	800835a <USB_EPStartXfer+0xb00>
>>>>>>> Stashed changes
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
<<<<<<< Updated upstream
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	78db      	ldrb	r3, [r3, #3]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d103      	bne.n	80082ae <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2200      	movs	r2, #0
 80082aa:	619a      	str	r2, [r3, #24]
 80082ac:	e001      	b.n	80082b2 <USB_EPStartXfer+0xb00>
=======
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	78db      	ldrb	r3, [r3, #3]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d103      	bne.n	8008356 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2200      	movs	r2, #0
 8008352:	619a      	str	r2, [r3, #24]
 8008354:	e001      	b.n	800835a <USB_EPStartXfer+0xb00>
>>>>>>> Stashed changes
      }
      else
      {
        return HAL_ERROR;
<<<<<<< Updated upstream
 80082ae:	2301      	movs	r3, #1
 80082b0:	e02a      	b.n	8008308 <USB_EPStartXfer+0xb56>
=======
 8008356:	2301      	movs	r3, #1
 8008358:	e02a      	b.n	80083b0 <USB_EPStartXfer+0xb56>
>>>>>>> Stashed changes
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
<<<<<<< Updated upstream
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	441a      	add	r2, r3
 80082ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008302:	b29b      	uxth	r3, r3
 8008304:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	37b0      	adds	r7, #176	@ 0xb0
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USB_EPSetStall>:
=======
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800836c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008370:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008374:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008378:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800837c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008380:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008384:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008388:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	441a      	add	r2, r3
 8008396:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800839a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800839e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	37b0      	adds	r7, #176	@ 0xb0
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USB_EPSetStall>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d020      	beq.n	8008364 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008338:	81bb      	strh	r3, [r7, #12]
 800833a:	89bb      	ldrh	r3, [r7, #12]
 800833c:	f083 0310 	eor.w	r3, r3, #16
 8008340:	81bb      	strh	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	441a      	add	r2, r3
 800834c:	89bb      	ldrh	r3, [r7, #12]
 800834e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800835a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835e:	b29b      	uxth	r3, r3
 8008360:	8013      	strh	r3, [r2, #0]
 8008362:	e01f      	b.n	80083a4 <USB_EPSetStall+0x94>
=======
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d020      	beq.n	800840c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e0:	81bb      	strh	r3, [r7, #12]
 80083e2:	89bb      	ldrh	r3, [r7, #12]
 80083e4:	f083 0310 	eor.w	r3, r3, #16
 80083e8:	81bb      	strh	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	441a      	add	r2, r3
 80083f4:	89bb      	ldrh	r3, [r7, #12]
 80083f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008406:	b29b      	uxth	r3, r3
 8008408:	8013      	strh	r3, [r2, #0]
 800840a:	e01f      	b.n	800844c <USB_EPSetStall+0x94>
>>>>>>> Stashed changes
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
<<<<<<< Updated upstream
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837a:	81fb      	strh	r3, [r7, #14]
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008382:	81fb      	strh	r3, [r7, #14]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	89fb      	ldrh	r3, [r7, #14]
 8008390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800839c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_EPClearStall>:
=======
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800841e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008422:	81fb      	strh	r3, [r7, #14]
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800842a:	81fb      	strh	r3, [r7, #14]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	89fb      	ldrh	r3, [r7, #14]
 8008438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800843c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USB_EPClearStall>:
>>>>>>> Stashed changes
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< Updated upstream
 80083b2:	b480      	push	{r7}
 80083b4:	b087      	sub	sp, #28
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d04c      	beq.n	800845e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	823b      	strh	r3, [r7, #16]
 80083d2:	8a3b      	ldrh	r3, [r7, #16]
 80083d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01b      	beq.n	8008414 <USB_EPClearStall+0x62>
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f2:	81fb      	strh	r3, [r7, #14]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	441a      	add	r2, r3
 80083fe:	89fb      	ldrh	r3, [r7, #14]
 8008400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800840c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008410:	b29b      	uxth	r3, r3
 8008412:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	78db      	ldrb	r3, [r3, #3]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d06c      	beq.n	80084f6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800842e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008432:	81bb      	strh	r3, [r7, #12]
 8008434:	89bb      	ldrh	r3, [r7, #12]
 8008436:	f083 0320 	eor.w	r3, r3, #32
 800843a:	81bb      	strh	r3, [r7, #12]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	89bb      	ldrh	r3, [r7, #12]
 8008448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800844c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008458:	b29b      	uxth	r3, r3
 800845a:	8013      	strh	r3, [r2, #0]
 800845c:	e04b      	b.n	80084f6 <USB_EPClearStall+0x144>
=======
 800845a:	b480      	push	{r7}
 800845c:	b087      	sub	sp, #28
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d04c      	beq.n	8008506 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	823b      	strh	r3, [r7, #16]
 800847a:	8a3b      	ldrh	r3, [r7, #16]
 800847c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01b      	beq.n	80084bc <USB_EPClearStall+0x62>
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849a:	81fb      	strh	r3, [r7, #14]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	441a      	add	r2, r3
 80084a6:	89fb      	ldrh	r3, [r7, #14]
 80084a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	78db      	ldrb	r3, [r3, #3]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d06c      	beq.n	800859e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084da:	81bb      	strh	r3, [r7, #12]
 80084dc:	89bb      	ldrh	r3, [r7, #12]
 80084de:	f083 0320 	eor.w	r3, r3, #32
 80084e2:	81bb      	strh	r3, [r7, #12]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	441a      	add	r2, r3
 80084ee:	89bb      	ldrh	r3, [r7, #12]
 80084f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008500:	b29b      	uxth	r3, r3
 8008502:	8013      	strh	r3, [r2, #0]
 8008504:	e04b      	b.n	800859e <USB_EPClearStall+0x144>
>>>>>>> Stashed changes
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< Updated upstream
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	82fb      	strh	r3, [r7, #22]
 800846c:	8afb      	ldrh	r3, [r7, #22]
 800846e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01b      	beq.n	80084ae <USB_EPClearStall+0xfc>
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848c:	82bb      	strh	r3, [r7, #20]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	441a      	add	r2, r3
 8008498:	8abb      	ldrh	r3, [r7, #20]
 800849a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800849e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c4:	827b      	strh	r3, [r7, #18]
 80084c6:	8a7b      	ldrh	r3, [r7, #18]
 80084c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084cc:	827b      	strh	r3, [r7, #18]
 80084ce:	8a7b      	ldrh	r3, [r7, #18]
 80084d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084d4:	827b      	strh	r3, [r7, #18]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	441a      	add	r2, r3
 80084e0:	8a7b      	ldrh	r3, [r7, #18]
 80084e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	371c      	adds	r7, #28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <USB_SetDevAddress>:
=======
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	82fb      	strh	r3, [r7, #22]
 8008514:	8afb      	ldrh	r3, [r7, #22]
 8008516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d01b      	beq.n	8008556 <USB_EPClearStall+0xfc>
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008534:	82bb      	strh	r3, [r7, #20]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	441a      	add	r2, r3
 8008540:	8abb      	ldrh	r3, [r7, #20]
 8008542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800854a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800854e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008552:	b29b      	uxth	r3, r3
 8008554:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800856c:	827b      	strh	r3, [r7, #18]
 800856e:	8a7b      	ldrh	r3, [r7, #18]
 8008570:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008574:	827b      	strh	r3, [r7, #18]
 8008576:	8a7b      	ldrh	r3, [r7, #18]
 8008578:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800857c:	827b      	strh	r3, [r7, #18]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	441a      	add	r2, r3
 8008588:	8a7b      	ldrh	r3, [r7, #18]
 800858a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800858e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859a:	b29b      	uxth	r3, r3
 800859c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_SetDevAddress>:
>>>>>>> Stashed changes
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
<<<<<<< Updated upstream
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2280      	movs	r2, #128	@ 0x80
 800851a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USB_DevConnect>:
=======
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2280      	movs	r2, #128	@ 0x80
 80085c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USB_DevConnect>:
>>>>>>> Stashed changes
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
<<<<<<< Updated upstream
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800853a:	b29b      	uxth	r3, r3
 800853c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008544:	b29a      	uxth	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USB_ReadInterrupts>:
=======
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_ReadInterrupts>:
>>>>>>> Stashed changes
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
<<<<<<< Updated upstream
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008568:	b29b      	uxth	r3, r3
 800856a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800856c:	68fb      	ldr	r3, [r7, #12]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USB_WritePMA>:
=======
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008610:	b29b      	uxth	r3, r3
 8008612:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USB_WritePMA>:
>>>>>>> Stashed changes
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< Updated upstream
 800857a:	b480      	push	{r7}
 800857c:	b08b      	sub	sp, #44	@ 0x2c
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	4611      	mov	r1, r2
 8008586:	461a      	mov	r2, r3
 8008588:	460b      	mov	r3, r1
 800858a:	80fb      	strh	r3, [r7, #6]
 800858c:	4613      	mov	r3, r2
 800858e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008590:	88bb      	ldrh	r3, [r7, #4]
 8008592:	3301      	adds	r3, #1
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	617b      	str	r3, [r7, #20]
=======
 8008622:	b480      	push	{r7}
 8008624:	b08b      	sub	sp, #44	@ 0x2c
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	460b      	mov	r3, r1
 8008632:	80fb      	strh	r3, [r7, #6]
 8008634:	4613      	mov	r3, r2
 8008636:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008638:	88bb      	ldrh	r3, [r7, #4]
 800863a:	3301      	adds	r3, #1
 800863c:	085b      	lsrs	r3, r3, #1
 800863e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< Updated upstream
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085a0:	88fa      	ldrh	r2, [r7, #6]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b0:	e01c      	b.n	80085ec <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	3301      	adds	r3, #1
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b21b      	sxth	r3, r3
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	b21a      	sxth	r2, r3
 80085c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	b21b      	sxth	r3, r3
 80085cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	8a7a      	ldrh	r2, [r7, #18]
 80085d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	3302      	adds	r3, #2
 80085d8:	623b      	str	r3, [r7, #32]
=======
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008648:	88fa      	ldrh	r2, [r7, #6]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008652:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	627b      	str	r3, [r7, #36]	@ 0x24
 8008658:	e01c      	b.n	8008694 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b21b      	sxth	r3, r3
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	b21a      	sxth	r2, r3
 800866c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008670:	4313      	orrs	r3, r2
 8008672:	b21b      	sxth	r3, r3
 8008674:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	8a7a      	ldrh	r2, [r7, #18]
 800867a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	3302      	adds	r3, #2
 8008680:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
<<<<<<< Updated upstream
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	3301      	adds	r3, #1
 80085de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	3301      	adds	r3, #1
 80085e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	3b01      	subs	r3, #1
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1df      	bne.n	80085b2 <USB_WritePMA+0x38>
  }
}
 80085f2:	bf00      	nop
 80085f4:	bf00      	nop
 80085f6:	372c      	adds	r7, #44	@ 0x2c
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USB_ReadPMA>:
=======
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	3301      	adds	r3, #1
 8008686:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	3301      	adds	r3, #1
 800868c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	3b01      	subs	r3, #1
 8008692:	627b      	str	r3, [r7, #36]	@ 0x24
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1df      	bne.n	800865a <USB_WritePMA+0x38>
  }
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	372c      	adds	r7, #44	@ 0x2c
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_ReadPMA>:
>>>>>>> Stashed changes
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< Updated upstream
 8008600:	b480      	push	{r7}
 8008602:	b08b      	sub	sp, #44	@ 0x2c
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	460b      	mov	r3, r1
 8008610:	80fb      	strh	r3, [r7, #6]
 8008612:	4613      	mov	r3, r2
 8008614:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008616:	88bb      	ldrh	r3, [r7, #4]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	b29b      	uxth	r3, r3
 800861c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	617b      	str	r3, [r7, #20]
=======
 80086a8:	b480      	push	{r7}
 80086aa:	b08b      	sub	sp, #44	@ 0x2c
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4611      	mov	r1, r2
 80086b4:	461a      	mov	r2, r3
 80086b6:	460b      	mov	r3, r1
 80086b8:	80fb      	strh	r3, [r7, #6]
 80086ba:	4613      	mov	r3, r2
 80086bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086be:	88bb      	ldrh	r3, [r7, #4]
 80086c0:	085b      	lsrs	r3, r3, #1
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
<<<<<<< Updated upstream
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008630:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
 8008636:	e018      	b.n	800866a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	b29b      	uxth	r3, r3
 800863e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	3302      	adds	r3, #2
 8008644:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	b2da      	uxtb	r2, r3
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	3301      	adds	r3, #1
 8008652:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	b2da      	uxtb	r2, r3
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3301      	adds	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	3b01      	subs	r3, #1
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e3      	bne.n	8008638 <USB_ReadPMA+0x38>
=======
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086ce:	88fa      	ldrh	r2, [r7, #6]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80086de:	e018      	b.n	8008712 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	3302      	adds	r3, #2
 80086ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	3301      	adds	r3, #1
 80086fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	b2da      	uxtb	r2, r3
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	3301      	adds	r3, #1
 800870a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	3b01      	subs	r3, #1
 8008710:	627b      	str	r3, [r7, #36]	@ 0x24
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e3      	bne.n	80086e0 <USB_ReadPMA+0x38>
>>>>>>> Stashed changes
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
<<<<<<< Updated upstream
 8008670:	88bb      	ldrh	r3, [r7, #4]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d007      	beq.n	800868c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	b2da      	uxtb	r2, r3
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	701a      	strb	r2, [r3, #0]
  }
}
 800868c:	bf00      	nop
 800868e:	372c      	adds	r7, #44	@ 0x2c
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBD_CDC_Init>:
=======
 8008718:	88bb      	ldrh	r3, [r7, #4]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	b29b      	uxth	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d007      	beq.n	8008734 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	701a      	strb	r2, [r3, #0]
  }
}
 8008734:	bf00      	nop
 8008736:	372c      	adds	r7, #44	@ 0x2c
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USBD_CDC_Init>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
=======
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
<<<<<<< Updated upstream
 80086a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80086a8:	f004 feee 	bl	800d488 <USBD_static_malloc>
 80086ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d105      	bne.n	80086c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80086bc:	2302      	movs	r3, #2
 80086be:	e066      	b.n	800878e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	7c1b      	ldrb	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d119      	bne.n	8008704 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d4:	2202      	movs	r2, #2
 80086d6:	2181      	movs	r1, #129	@ 0x81
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f004 fd7c 	bl	800d1d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086e8:	2202      	movs	r2, #2
 80086ea:	2101      	movs	r1, #1
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f004 fd72 	bl	800d1d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2210      	movs	r2, #16
 80086fe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8008702:	e016      	b.n	8008732 <USBD_CDC_Init+0x9a>
=======
 800874c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008750:	f005 fb2a 	bl	800dda8 <USBD_static_malloc>
 8008754:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d105      	bne.n	8008768 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008764:	2302      	movs	r3, #2
 8008766:	e066      	b.n	8008836 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7c1b      	ldrb	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d119      	bne.n	80087ac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800877c:	2202      	movs	r2, #2
 800877e:	2181      	movs	r1, #129	@ 0x81
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f005 f9b8 	bl	800daf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800878c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008790:	2202      	movs	r2, #2
 8008792:	2101      	movs	r1, #1
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f005 f9ae 	bl	800daf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2210      	movs	r2, #16
 80087a6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80087aa:	e016      	b.n	80087da <USBD_CDC_Init+0x9a>
>>>>>>> Stashed changes
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
<<<<<<< Updated upstream
 8008704:	2340      	movs	r3, #64	@ 0x40
 8008706:	2202      	movs	r2, #2
 8008708:	2181      	movs	r1, #129	@ 0x81
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f004 fd63 	bl	800d1d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008716:	2340      	movs	r3, #64	@ 0x40
 8008718:	2202      	movs	r2, #2
 800871a:	2101      	movs	r1, #1
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f004 fd5a 	bl	800d1d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2210      	movs	r2, #16
 800872e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
=======
 80087ac:	2340      	movs	r3, #64	@ 0x40
 80087ae:	2202      	movs	r2, #2
 80087b0:	2181      	movs	r1, #129	@ 0x81
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f005 f99f 	bl	800daf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087be:	2340      	movs	r3, #64	@ 0x40
 80087c0:	2202      	movs	r2, #2
 80087c2:	2101      	movs	r1, #1
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f005 f996 	bl	800daf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2210      	movs	r2, #16
 80087d6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
>>>>>>> Stashed changes
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
<<<<<<< Updated upstream
 8008732:	2308      	movs	r3, #8
 8008734:	2203      	movs	r2, #3
 8008736:	2182      	movs	r1, #130	@ 0x82
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f004 fd4c 	bl	800d1d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7c1b      	ldrb	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800876e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008772:	2101      	movs	r1, #1
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f004 fe1d 	bl	800d3b4 <USBD_LL_PrepareReceive>
 800877a:	e007      	b.n	800878c <USBD_CDC_Init+0xf4>
=======
 80087da:	2308      	movs	r3, #8
 80087dc:	2203      	movs	r2, #3
 80087de:	2182      	movs	r1, #130	@ 0x82
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f005 f988 	bl	800daf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7c1b      	ldrb	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d109      	bne.n	8008824 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800881a:	2101      	movs	r1, #1
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f005 fa59 	bl	800dcd4 <USBD_LL_PrepareReceive>
 8008822:	e007      	b.n	8008834 <USBD_CDC_Init+0xf4>
>>>>>>> Stashed changes
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< Updated upstream
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008782:	2340      	movs	r3, #64	@ 0x40
 8008784:	2101      	movs	r1, #1
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f004 fe14 	bl	800d3b4 <USBD_LL_PrepareReceive>
=======
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800882a:	2340      	movs	r3, #64	@ 0x40
 800882c:	2101      	movs	r1, #1
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f005 fa50 	bl	800dcd4 <USBD_LL_PrepareReceive>
>>>>>>> Stashed changes
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< Updated upstream
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_CDC_DeInit>:
=======
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_CDC_DeInit>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
=======
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
<<<<<<< Updated upstream
 80087a2:	2181      	movs	r1, #129	@ 0x81
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f004 fd3c 	bl	800d222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087b0:	2101      	movs	r1, #1
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f004 fd35 	bl	800d222 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80087c0:	2182      	movs	r1, #130	@ 0x82
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f004 fd2d 	bl	800d222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087f2:	4618      	mov	r0, r3
 80087f4:	f004 fe56 	bl	800d4a4 <USBD_static_free>
    pdev->pClassData = NULL;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <USBD_CDC_Setup>:
=======
 800884a:	2181      	movs	r1, #129	@ 0x81
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f005 f978 	bl	800db42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008858:	2101      	movs	r1, #1
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f005 f971 	bl	800db42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008868:	2182      	movs	r1, #130	@ 0x82
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f005 f969 	bl	800db42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00e      	beq.n	80088a8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800889a:	4618      	mov	r0, r3
 800889c:	f005 fa92 	bl	800ddc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <USBD_CDC_Setup>:
>>>>>>> Stashed changes
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800881c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008830:	2303      	movs	r3, #3
 8008832:	e0af      	b.n	8008994 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800883c:	2b00      	cmp	r3, #0
 800883e:	d03f      	beq.n	80088c0 <USBD_CDC_Setup+0xb4>
 8008840:	2b20      	cmp	r3, #32
 8008842:	f040 809f 	bne.w	8008984 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	88db      	ldrh	r3, [r3, #6]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d02e      	beq.n	80088ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	b25b      	sxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	da16      	bge.n	8008886 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008864:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	88d2      	ldrh	r2, [r2, #6]
 800886a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	88db      	ldrh	r3, [r3, #6]
 8008870:	2b07      	cmp	r3, #7
 8008872:	bf28      	it	cs
 8008874:	2307      	movcs	r3, #7
 8008876:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	89fa      	ldrh	r2, [r7, #14]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 facf 	bl	8009e22 <USBD_CtlSendData>
=======
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	e0af      	b.n	8008a3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d03f      	beq.n	8008968 <USBD_CDC_Setup+0xb4>
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	f040 809f 	bne.w	8008a2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88db      	ldrh	r3, [r3, #6]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d02e      	beq.n	8008954 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	b25b      	sxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da16      	bge.n	800892e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800890c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	88d2      	ldrh	r2, [r2, #6]
 8008912:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	88db      	ldrh	r3, [r3, #6]
 8008918:	2b07      	cmp	r3, #7
 800891a:	bf28      	it	cs
 800891c:	2307      	movcs	r3, #7
 800891e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	89fa      	ldrh	r2, [r7, #14]
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 facf 	bl	8009eca <USBD_CtlSendData>
>>>>>>> Stashed changes
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
<<<<<<< Updated upstream
 8008884:	e085      	b.n	8008992 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	785a      	ldrb	r2, [r3, #1]
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	88db      	ldrh	r3, [r3, #6]
 8008894:	b2da      	uxtb	r2, r3
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800889c:	6939      	ldr	r1, [r7, #16]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	88db      	ldrh	r3, [r3, #6]
 80088a2:	461a      	mov	r2, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 fae8 	bl	8009e7a <USBD_CtlPrepareRx>
      break;
 80088aa:	e072      	b.n	8008992 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	7850      	ldrb	r0, [r2, #1]
 80088b8:	2200      	movs	r2, #0
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	4798      	blx	r3
      break;
 80088be:	e068      	b.n	8008992 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	2b0b      	cmp	r3, #11
 80088c6:	d852      	bhi.n	800896e <USBD_CDC_Setup+0x162>
 80088c8:	a201      	add	r2, pc, #4	@ (adr r2, 80088d0 <USBD_CDC_Setup+0xc4>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	08008901 	.word	0x08008901
 80088d4:	0800897d 	.word	0x0800897d
 80088d8:	0800896f 	.word	0x0800896f
 80088dc:	0800896f 	.word	0x0800896f
 80088e0:	0800896f 	.word	0x0800896f
 80088e4:	0800896f 	.word	0x0800896f
 80088e8:	0800896f 	.word	0x0800896f
 80088ec:	0800896f 	.word	0x0800896f
 80088f0:	0800896f 	.word	0x0800896f
 80088f4:	0800896f 	.word	0x0800896f
 80088f8:	0800892b 	.word	0x0800892b
 80088fc:	08008955 	.word	0x08008955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b03      	cmp	r3, #3
 800890a:	d107      	bne.n	800891c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800890c:	f107 030a 	add.w	r3, r7, #10
 8008910:	2202      	movs	r2, #2
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fa84 	bl	8009e22 <USBD_CtlSendData>
=======
 800892c:	e085      	b.n	8008a3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	785a      	ldrb	r2, [r3, #1]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	88db      	ldrh	r3, [r3, #6]
 800893c:	b2da      	uxtb	r2, r3
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008944:	6939      	ldr	r1, [r7, #16]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	88db      	ldrh	r3, [r3, #6]
 800894a:	461a      	mov	r2, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 fae8 	bl	8009f22 <USBD_CtlPrepareRx>
      break;
 8008952:	e072      	b.n	8008a3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	7850      	ldrb	r0, [r2, #1]
 8008960:	2200      	movs	r2, #0
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	4798      	blx	r3
      break;
 8008966:	e068      	b.n	8008a3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	785b      	ldrb	r3, [r3, #1]
 800896c:	2b0b      	cmp	r3, #11
 800896e:	d852      	bhi.n	8008a16 <USBD_CDC_Setup+0x162>
 8008970:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <USBD_CDC_Setup+0xc4>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	080089a9 	.word	0x080089a9
 800897c:	08008a25 	.word	0x08008a25
 8008980:	08008a17 	.word	0x08008a17
 8008984:	08008a17 	.word	0x08008a17
 8008988:	08008a17 	.word	0x08008a17
 800898c:	08008a17 	.word	0x08008a17
 8008990:	08008a17 	.word	0x08008a17
 8008994:	08008a17 	.word	0x08008a17
 8008998:	08008a17 	.word	0x08008a17
 800899c:	08008a17 	.word	0x08008a17
 80089a0:	080089d3 	.word	0x080089d3
 80089a4:	080089fd 	.word	0x080089fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d107      	bne.n	80089c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089b4:	f107 030a 	add.w	r3, r7, #10
 80089b8:	2202      	movs	r2, #2
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 fa84 	bl	8009eca <USBD_CtlSendData>
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< Updated upstream
 800891a:	e032      	b.n	8008982 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fa0e 	bl	8009d40 <USBD_CtlError>
            ret = USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	75fb      	strb	r3, [r7, #23]
          break;
 8008928:	e02b      	b.n	8008982 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b03      	cmp	r3, #3
 8008934:	d107      	bne.n	8008946 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008936:	f107 030d 	add.w	r3, r7, #13
 800893a:	2201      	movs	r2, #1
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 fa6f 	bl	8009e22 <USBD_CtlSendData>
=======
 80089c2:	e032      	b.n	8008a2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fa0e 	bl	8009de8 <USBD_CtlError>
            ret = USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	75fb      	strb	r3, [r7, #23]
          break;
 80089d0:	e02b      	b.n	8008a2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d107      	bne.n	80089ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80089de:	f107 030d 	add.w	r3, r7, #13
 80089e2:	2201      	movs	r2, #1
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 fa6f 	bl	8009eca <USBD_CtlSendData>
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< Updated upstream
 8008944:	e01d      	b.n	8008982 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 f9f9 	bl	8009d40 <USBD_CtlError>
            ret = USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	75fb      	strb	r3, [r7, #23]
          break;
 8008952:	e016      	b.n	8008982 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b03      	cmp	r3, #3
 800895e:	d00f      	beq.n	8008980 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 f9ec 	bl	8009d40 <USBD_CtlError>
            ret = USBD_FAIL;
 8008968:	2303      	movs	r3, #3
 800896a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800896c:	e008      	b.n	8008980 <USBD_CDC_Setup+0x174>
=======
 80089ec:	e01d      	b.n	8008a2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f9f9 	bl	8009de8 <USBD_CtlError>
            ret = USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	75fb      	strb	r3, [r7, #23]
          break;
 80089fa:	e016      	b.n	8008a2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d00f      	beq.n	8008a28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 f9ec 	bl	8009de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a10:	2303      	movs	r3, #3
 8008a12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a14:	e008      	b.n	8008a28 <USBD_CDC_Setup+0x174>
>>>>>>> Stashed changes

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f9e5 	bl	8009d40 <USBD_CtlError>
          ret = USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	75fb      	strb	r3, [r7, #23]
          break;
 800897a:	e002      	b.n	8008982 <USBD_CDC_Setup+0x176>
          break;
 800897c:	bf00      	nop
 800897e:	e008      	b.n	8008992 <USBD_CDC_Setup+0x186>
          break;
 8008980:	bf00      	nop
      }
      break;
 8008982:	e006      	b.n	8008992 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 f9da 	bl	8009d40 <USBD_CtlError>
      ret = USBD_FAIL;
 800898c:	2303      	movs	r3, #3
 800898e:	75fb      	strb	r3, [r7, #23]
      break;
 8008990:	bf00      	nop
  }

  return (uint8_t)ret;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_CDC_DataIn>:
=======
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 f9e5 	bl	8009de8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	75fb      	strb	r3, [r7, #23]
          break;
 8008a22:	e002      	b.n	8008a2a <USBD_CDC_Setup+0x176>
          break;
 8008a24:	bf00      	nop
 8008a26:	e008      	b.n	8008a3a <USBD_CDC_Setup+0x186>
          break;
 8008a28:	bf00      	nop
      }
      break;
 8008a2a:	e006      	b.n	8008a3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 f9da 	bl	8009de8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	75fb      	strb	r3, [r7, #23]
      break;
 8008a38:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_CDC_DataIn>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< Updated upstream
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80089ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e04f      	b.n	8008a5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	3318      	adds	r3, #24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d029      	beq.n	8008a30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	3318      	adds	r3, #24
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	78f9      	ldrb	r1, [r7, #3]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	460b      	mov	r3, r1
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	440b      	add	r3, r1
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	4403      	add	r3, r0
 80089fc:	3320      	adds	r3, #32
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d110      	bne.n	8008a30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	3318      	adds	r3, #24
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a22:	78f9      	ldrb	r1, [r7, #3]
 8008a24:	2300      	movs	r3, #0
 8008a26:	2200      	movs	r2, #0
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f004 fca2 	bl	800d372 <USBD_LL_Transmit>
 8008a2e:	e015      	b.n	8008a5c <USBD_CDC_DataIn+0xc0>
=======
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008a56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e04f      	b.n	8008b06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3318      	adds	r3, #24
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d029      	beq.n	8008ad8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	3318      	adds	r3, #24
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	78f9      	ldrb	r1, [r7, #3]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	440b      	add	r3, r1
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	4403      	add	r3, r0
 8008aa4:	3320      	adds	r3, #32
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008aac:	fb01 f303 	mul.w	r3, r1, r3
 8008ab0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d110      	bne.n	8008ad8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4613      	mov	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	440b      	add	r3, r1
 8008ac4:	3318      	adds	r3, #24
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008aca:	78f9      	ldrb	r1, [r7, #3]
 8008acc:	2300      	movs	r3, #0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f005 f8de 	bl	800dc92 <USBD_LL_Transmit>
 8008ad6:	e015      	b.n	8008b04 <USBD_CDC_DataIn+0xc0>
>>>>>>> Stashed changes
  }
  else
  {
    hcdc->TxState = 0U;
<<<<<<< Updated upstream
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	4798      	blx	r3
=======
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00b      	beq.n	8008b04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	4798      	blx	r3
>>>>>>> Stashed changes
    }
  }

  return (uint8_t)USBD_OK;
<<<<<<< Updated upstream
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_CDC_DataOut>:
=======
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_CDC_DataOut>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< Updated upstream
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e015      	b.n	8008ab4 <USBD_CDC_DataOut+0x4e>
=======
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e015      	b.n	8008b5c <USBD_CDC_DataOut+0x4e>
>>>>>>> Stashed changes
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
<<<<<<< Updated upstream
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f004 fcb2 	bl	800d3f6 <USBD_LL_GetRxDataSize>
 8008a92:	4602      	mov	r2, r0
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
=======
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f005 f8ee 	bl	800dd16 <USBD_LL_GetRxDataSize>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
>>>>>>> Stashed changes

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
<<<<<<< Updated upstream
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_CDC_EP0_RxReady>:
=======
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b56:	4611      	mov	r1, r2
 8008b58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_CDC_EP0_RxReady>:
>>>>>>> Stashed changes
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008aca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e01a      	b.n	8008b0c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d014      	beq.n	8008b0a <USBD_CDC_EP0_RxReady+0x4e>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008ae6:	2bff      	cmp	r3, #255	@ 0xff
 8008ae8:	d00f      	beq.n	8008b0a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008af8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	22ff      	movs	r2, #255	@ 0xff
 8008b06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_CDC_GetFSCfgDesc>:
=======
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e01a      	b.n	8008bb4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d014      	beq.n	8008bb2 <USBD_CDC_EP0_RxReady+0x4e>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b8e:	2bff      	cmp	r3, #255	@ 0xff
 8008b90:	d00f      	beq.n	8008bb2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008ba0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ba8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	22ff      	movs	r2, #255	@ 0xff
 8008bae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_CDC_GetFSCfgDesc>:
>>>>>>> Stashed changes
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< Updated upstream
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2243      	movs	r2, #67	@ 0x43
 8008b20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008b22:	4b03      	ldr	r3, [pc, #12]	@ (8008b30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	20000094 	.word	0x20000094

08008b34 <USBD_CDC_GetHSCfgDesc>:
=======
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2243      	movs	r2, #67	@ 0x43
 8008bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008bca:	4b03      	ldr	r3, [pc, #12]	@ (8008bd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	20000094 	.word	0x20000094

08008bdc <USBD_CDC_GetHSCfgDesc>:
>>>>>>> Stashed changes
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< Updated upstream
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2243      	movs	r2, #67	@ 0x43
 8008b40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008b42:	4b03      	ldr	r3, [pc, #12]	@ (8008b50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	20000050 	.word	0x20000050

08008b54 <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2243      	movs	r2, #67	@ 0x43
 8008be8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008bea:	4b03      	ldr	r3, [pc, #12]	@ (8008bf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	20000050 	.word	0x20000050

08008bfc <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> Stashed changes
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< Updated upstream
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2243      	movs	r2, #67	@ 0x43
 8008b60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008b62:	4b03      	ldr	r3, [pc, #12]	@ (8008b70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	200000d8 	.word	0x200000d8

08008b74 <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2243      	movs	r2, #67	@ 0x43
 8008c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008c0a:	4b03      	ldr	r3, [pc, #12]	@ (8008c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	200000d8 	.word	0x200000d8

08008c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> Stashed changes
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< Updated upstream
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	220a      	movs	r2, #10
 8008b80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b82:	4b03      	ldr	r3, [pc, #12]	@ (8008b90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	2000000c 	.word	0x2000000c

08008b94 <USBD_CDC_RegisterInterface>:
=======
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	220a      	movs	r2, #10
 8008c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c2a:	4b03      	ldr	r3, [pc, #12]	@ (8008c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <USBD_CDC_RegisterInterface>:
>>>>>>> Stashed changes
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< Updated upstream
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e004      	b.n	8008bb2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <USBD_CDC_SetTxBuffer>:
=======
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e004      	b.n	8008c5a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USBD_CDC_SetTxBuffer>:
>>>>>>> Stashed changes
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
<<<<<<< Updated upstream
 8008bbe:	b480      	push	{r7}
 8008bc0:	b087      	sub	sp, #28
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bd0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e008      	b.n	8008bee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USBD_CDC_SetRxBuffer>:
=======
 8008c66:	b480      	push	{r7}
 8008c68:	b087      	sub	sp, #28
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c78:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e008      	b.n	8008c96 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <USBD_CDC_SetRxBuffer>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
<<<<<<< Updated upstream
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e004      	b.n	8008c20 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USBD_CDC_TransmitPacket>:
=======
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cb2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e004      	b.n	8008cc8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USBD_CDC_TransmitPacket>:
>>>>>>> Stashed changes
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c3a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e01a      	b.n	8008c84 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d114      	bne.n	8008c82 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c76:	2181      	movs	r1, #129	@ 0x81
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f004 fb7a 	bl	800d372 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_CDC_ReceivePacket>:
=======
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ce2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e01a      	b.n	8008d2c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d114      	bne.n	8008d2a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008d1e:	2181      	movs	r1, #129	@ 0x81
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f004 ffb6 	bl	800dc92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_CDC_ReceivePacket>:
>>>>>>> Stashed changes
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e016      	b.n	8008cd8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	7c1b      	ldrb	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f004 fb78 	bl	800d3b4 <USBD_LL_PrepareReceive>
 8008cc4:	e007      	b.n	8008cd6 <USBD_CDC_ReceivePacket+0x4a>
=======
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e016      	b.n	8008d80 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	7c1b      	ldrb	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d64:	2101      	movs	r1, #1
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f004 ffb4 	bl	800dcd4 <USBD_LL_PrepareReceive>
 8008d6c:	e007      	b.n	8008d7e <USBD_CDC_ReceivePacket+0x4a>
>>>>>>> Stashed changes
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< Updated upstream
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ccc:	2340      	movs	r3, #64	@ 0x40
 8008cce:	2101      	movs	r1, #1
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f004 fb6f 	bl	800d3b4 <USBD_LL_PrepareReceive>
=======
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d74:	2340      	movs	r3, #64	@ 0x40
 8008d76:	2101      	movs	r1, #1
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f004 ffab 	bl	800dcd4 <USBD_LL_PrepareReceive>
>>>>>>> Stashed changes
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< Updated upstream
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_Init>:
=======
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_Init>:
>>>>>>> Stashed changes
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< Updated upstream
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
=======
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
<<<<<<< Updated upstream
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <USBD_Init+0x18>
=======
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <USBD_Init+0x18>
>>>>>>> Stashed changes
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
<<<<<<< Updated upstream
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e01f      	b.n	8008d38 <USBD_Init+0x58>
=======
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e01f      	b.n	8008de0 <USBD_Init+0x58>
>>>>>>> Stashed changes
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
<<<<<<< Updated upstream
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
=======
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
>>>>>>> Stashed changes
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< Updated upstream
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	79fa      	ldrb	r2, [r7, #7]
 8008d2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f004 f9d7 	bl	800d0e0 <USBD_LL_Init>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_RegisterClass>:
=======
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	79fa      	ldrb	r2, [r7, #7]
 8008dd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f004 fe13 	bl	800da00 <USBD_LL_Init>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_RegisterClass>:
>>>>>>> Stashed changes
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< Updated upstream
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <USBD_RegisterClass+0x18>
=======
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <USBD_RegisterClass+0x18>
>>>>>>> Stashed changes
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
<<<<<<< Updated upstream
 8008d54:	2303      	movs	r3, #3
 8008d56:	e016      	b.n	8008d86 <USBD_RegisterClass+0x46>
=======
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e016      	b.n	8008e2e <USBD_RegisterClass+0x46>
>>>>>>> Stashed changes
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
<<<<<<< Updated upstream
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
=======
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
>>>>>>> Stashed changes
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
<<<<<<< Updated upstream
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00b      	beq.n	8008d84 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d74:	f107 020e 	add.w	r2, r7, #14
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
=======
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1c:	f107 020e 	add.w	r2, r7, #14
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	4602      	mov	r2, r0
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
>>>>>>> Stashed changes
  }
#endif /* USE_USB_FS */

  return USBD_OK;
<<<<<<< Updated upstream
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_Start>:
=======
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_Start>:
>>>>>>> Stashed changes
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f004 fa02 	bl	800d1a0 <USBD_LL_Start>
 8008d9c:	4603      	mov	r3, r0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_RunTestMode>:
=======
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f004 fe3e 	bl	800dac0 <USBD_LL_Start>
 8008e44:	4603      	mov	r3, r0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_RunTestMode>:
>>>>>>> Stashed changes
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
<<<<<<< Updated upstream
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
=======
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< Updated upstream
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBD_SetClassConfig>:
=======
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USBD_SetClassConfig>:
>>>>>>> Stashed changes
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	4611      	mov	r1, r2
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_ClrClassConfig>:
=======
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_ClrClassConfig>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< Updated upstream
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d007      	beq.n	8008e1a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	4611      	mov	r1, r2
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
  }

  return USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_LL_SetupStage>:
=======
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	78fa      	ldrb	r2, [r7, #3]
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
  }

  return USBD_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_LL_SetupStage>:
>>>>>>> Stashed changes
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< Updated upstream
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 ff48 	bl	8009ccc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d01a      	beq.n	8008e96 <USBD_LL_SetupStage+0x72>
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d822      	bhi.n	8008eaa <USBD_LL_SetupStage+0x86>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <USBD_LL_SetupStage+0x4a>
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d00a      	beq.n	8008e82 <USBD_LL_SetupStage+0x5e>
 8008e6c:	e01d      	b.n	8008eaa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f9f0 	bl	800925c <USBD_StdDevReq>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e80:	e020      	b.n	8008ec4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fa54 	bl	8009338 <USBD_StdItfReq>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
      break;
 8008e94:	e016      	b.n	8008ec4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa93 	bl	80093ca <USBD_StdEPReq>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea8:	e00c      	b.n	8008ec4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008eb0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f004 f9d1 	bl	800d260 <USBD_LL_StallEP>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec2:	bf00      	nop
  }

  return ret;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_LL_DataOutStage>:
=======
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 ff48 	bl	8009d74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f00:	f003 031f 	and.w	r3, r3, #31
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d01a      	beq.n	8008f3e <USBD_LL_SetupStage+0x72>
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d822      	bhi.n	8008f52 <USBD_LL_SetupStage+0x86>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <USBD_LL_SetupStage+0x4a>
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d00a      	beq.n	8008f2a <USBD_LL_SetupStage+0x5e>
 8008f14:	e01d      	b.n	8008f52 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9f0 	bl	8009304 <USBD_StdDevReq>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
      break;
 8008f28:	e020      	b.n	8008f6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa54 	bl	80093e0 <USBD_StdItfReq>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3c:	e016      	b.n	8008f6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa93 	bl	8009472 <USBD_StdEPReq>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f50:	e00c      	b.n	8008f6c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f004 fe0d 	bl	800db80 <USBD_LL_StallEP>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]
      break;
 8008f6a:	bf00      	nop
  }

  return ret;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_DataOutStage>:
>>>>>>> Stashed changes
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< Updated upstream
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b086      	sub	sp, #24
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	72fb      	strb	r3, [r7, #11]
=======
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	607a      	str	r2, [r7, #4]
 8008f82:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< Updated upstream
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d138      	bne.n	8008f54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008ee8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d14a      	bne.n	8008f8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d913      	bls.n	8008f28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	1ad2      	subs	r2, r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	4293      	cmp	r3, r2
 8008f18:	bf28      	it	cs
 8008f1a:	4613      	movcs	r3, r2
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 ffc7 	bl	8009eb4 <USBD_CtlContinueRx>
 8008f26:	e030      	b.n	8008f8a <USBD_LL_DataOutStage+0xbc>
=======
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d138      	bne.n	8008ffc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d14a      	bne.n	8009032 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d913      	bls.n	8008fd0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	1ad2      	subs	r2, r2, r3
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	bf28      	it	cs
 8008fc2:	4613      	movcs	r3, r2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 ffc7 	bl	8009f5c <USBD_CtlContinueRx>
 8008fce:	e030      	b.n	8009032 <USBD_LL_DataOutStage+0xbc>
>>>>>>> Stashed changes
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< Updated upstream
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d10b      	bne.n	8008f4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	4798      	blx	r3
=======
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d10b      	bne.n	8008ff4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	4798      	blx	r3
>>>>>>> Stashed changes
          }
        }

        (void)USBD_CtlSendStatus(pdev);
<<<<<<< Updated upstream
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 ffc2 	bl	8009ed6 <USBD_CtlSendStatus>
 8008f52:	e01a      	b.n	8008f8a <USBD_LL_DataOutStage+0xbc>
=======
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 ffc2 	bl	8009f7e <USBD_CtlSendStatus>
 8008ffa:	e01a      	b.n	8009032 <USBD_LL_DataOutStage+0xbc>
>>>>>>> Stashed changes
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< Updated upstream
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d114      	bne.n	8008f8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00e      	beq.n	8008f8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	7afa      	ldrb	r2, [r7, #11]
 8008f76:	4611      	mov	r1, r2
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	4798      	blx	r3
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	e000      	b.n	8008f8c <USBD_LL_DataOutStage+0xbe>
=======
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b03      	cmp	r3, #3
 8009006:	d114      	bne.n	8009032 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00e      	beq.n	8009032 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	7afa      	ldrb	r2, [r7, #11]
 800901e:	4611      	mov	r1, r2
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	4798      	blx	r3
 8009024:	4603      	mov	r3, r0
 8009026:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	e000      	b.n	8009034 <USBD_LL_DataOutStage+0xbe>
>>>>>>> Stashed changes
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< Updated upstream
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_DataInStage>:
=======
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_LL_DataInStage>:
>>>>>>> Stashed changes
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< Updated upstream
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	72fb      	strb	r3, [r7, #11]
=======
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	460b      	mov	r3, r1
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< Updated upstream
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d16b      	bne.n	8009080 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3314      	adds	r3, #20
 8008fac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d156      	bne.n	8009066 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d914      	bls.n	8008fee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	1ad2      	subs	r2, r2, r3
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 ff3c 	bl	8009e58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f004 f9e4 	bl	800d3b4 <USBD_LL_PrepareReceive>
 8008fec:	e03b      	b.n	8009066 <USBD_LL_DataInStage+0xd2>
=======
 800904a:	7afb      	ldrb	r3, [r7, #11]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d16b      	bne.n	8009128 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3314      	adds	r3, #20
 8009054:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800905c:	2b02      	cmp	r3, #2
 800905e:	d156      	bne.n	800910e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	429a      	cmp	r2, r3
 800906a:	d914      	bls.n	8009096 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	1ad2      	subs	r2, r2, r3
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	461a      	mov	r2, r3
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 ff3c 	bl	8009f00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009088:	2300      	movs	r3, #0
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f004 fe20 	bl	800dcd4 <USBD_LL_PrepareReceive>
 8009094:	e03b      	b.n	800910e <USBD_LL_DataInStage+0xd2>
>>>>>>> Stashed changes
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
<<<<<<< Updated upstream
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d11c      	bne.n	8009034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009002:	429a      	cmp	r2, r3
 8009004:	d316      	bcc.n	8009034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009010:	429a      	cmp	r2, r3
 8009012:	d20f      	bcs.n	8009034 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009014:	2200      	movs	r2, #0
 8009016:	2100      	movs	r1, #0
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 ff1d 	bl	8009e58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009026:	2300      	movs	r3, #0
 8009028:	2200      	movs	r2, #0
 800902a:	2100      	movs	r1, #0
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f004 f9c1 	bl	800d3b4 <USBD_LL_PrepareReceive>
 8009032:	e018      	b.n	8009066 <USBD_LL_DataInStage+0xd2>
=======
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d11c      	bne.n	80090dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d316      	bcc.n	80090dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d20f      	bcs.n	80090dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090bc:	2200      	movs	r2, #0
 80090be:	2100      	movs	r1, #0
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 ff1d 	bl	8009f00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ce:	2300      	movs	r3, #0
 80090d0:	2200      	movs	r2, #0
 80090d2:	2100      	movs	r1, #0
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f004 fdfd 	bl	800dcd4 <USBD_LL_PrepareReceive>
 80090da:	e018      	b.n	800910e <USBD_LL_DataInStage+0xd2>
>>>>>>> Stashed changes
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< Updated upstream
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b03      	cmp	r3, #3
 800903e:	d10b      	bne.n	8009058 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d005      	beq.n	8009058 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009058:	2180      	movs	r1, #128	@ 0x80
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f004 f900 	bl	800d260 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 ff4b 	bl	8009efc <USBD_CtlReceiveStatus>
=======
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d10b      	bne.n	8009100 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009100:	2180      	movs	r1, #128	@ 0x80
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f004 fd3c 	bl	800db80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 ff4b 	bl	8009fa4 <USBD_CtlReceiveStatus>
>>>>>>> Stashed changes
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
<<<<<<< Updated upstream
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800906c:	2b01      	cmp	r3, #1
 800906e:	d122      	bne.n	80090b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff fe98 	bl	8008da6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800907e:	e01a      	b.n	80090b6 <USBD_LL_DataInStage+0x122>
=======
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009114:	2b01      	cmp	r3, #1
 8009116:	d122      	bne.n	800915e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fe98 	bl	8008e4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009126:	e01a      	b.n	800915e <USBD_LL_DataInStage+0x122>
>>>>>>> Stashed changes
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< Updated upstream
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b03      	cmp	r3, #3
 800908a:	d114      	bne.n	80090b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00e      	beq.n	80090b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	7afa      	ldrb	r2, [r7, #11]
 80090a2:	4611      	mov	r1, r2
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	4798      	blx	r3
 80090a8:	4603      	mov	r3, r0
 80090aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	e000      	b.n	80090b8 <USBD_LL_DataInStage+0x124>
=======
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b03      	cmp	r3, #3
 8009132:	d114      	bne.n	800915e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00e      	beq.n	800915e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	7afa      	ldrb	r2, [r7, #11]
 800914a:	4611      	mov	r1, r2
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	4798      	blx	r3
 8009150:	4603      	mov	r3, r0
 8009152:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009154:	7dfb      	ldrb	r3, [r7, #23]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800915a:	7dfb      	ldrb	r3, [r7, #23]
 800915c:	e000      	b.n	8009160 <USBD_LL_DataInStage+0x124>
>>>>>>> Stashed changes
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< Updated upstream
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_Reset>:
=======
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_Reset>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e02f      	b.n	8009154 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00f      	beq.n	800911e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	6852      	ldr	r2, [r2, #4]
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	4611      	mov	r1, r2
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
=======
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009198:	2303      	movs	r3, #3
 800919a:	e02f      	b.n	80091fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00f      	beq.n	80091c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d009      	beq.n	80091c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6852      	ldr	r2, [r2, #4]
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	4611      	mov	r1, r2
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
>>>>>>> Stashed changes
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
<<<<<<< Updated upstream
 800911e:	2340      	movs	r3, #64	@ 0x40
 8009120:	2200      	movs	r2, #0
 8009122:	2100      	movs	r1, #0
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f004 f856 	bl	800d1d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2240      	movs	r2, #64	@ 0x40
 8009136:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800913a:	2340      	movs	r3, #64	@ 0x40
 800913c:	2200      	movs	r2, #0
 800913e:	2180      	movs	r1, #128	@ 0x80
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f004 f848 	bl	800d1d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2240      	movs	r2, #64	@ 0x40
 8009150:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_LL_SetSpeed>:
=======
 80091c6:	2340      	movs	r3, #64	@ 0x40
 80091c8:	2200      	movs	r2, #0
 80091ca:	2100      	movs	r1, #0
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f004 fc92 	bl	800daf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2240      	movs	r2, #64	@ 0x40
 80091de:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091e2:	2340      	movs	r3, #64	@ 0x40
 80091e4:	2200      	movs	r2, #0
 80091e6:	2180      	movs	r1, #128	@ 0x80
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f004 fc84 	bl	800daf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2240      	movs	r2, #64	@ 0x40
 80091f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBD_LL_SetSpeed>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< Updated upstream
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	78fa      	ldrb	r2, [r7, #3]
 800916c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800918a:	b2da      	uxtb	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2204      	movs	r2, #4
 8009196:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
=======
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	741a      	strb	r2, [r3, #16]
>>>>>>> Stashed changes

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

<<<<<<< Updated upstream
080091a8 <USBD_LL_Resume>:
=======
08009224 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009232:	b2da      	uxtb	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2204      	movs	r2, #4
 800923e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USBD_LL_Resume>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d106      	bne.n	80091ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USBD_LL_SOF>:
=======
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b04      	cmp	r3, #4
 8009262:	d106      	bne.n	8009272 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800926a:	b2da      	uxtb	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USBD_LL_SOF>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e012      	b.n	8009214 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d10b      	bne.n	8009212 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	4798      	blx	r3
=======
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009292:	2303      	movs	r3, #3
 8009294:	e012      	b.n	80092bc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d10b      	bne.n	80092ba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
>>>>>>> Stashed changes
    }
  }

  return USBD_OK;
<<<<<<< Updated upstream
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SWAPBYTE>:
=======
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <SWAPBYTE>:
>>>>>>> Stashed changes

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
<<<<<<< Updated upstream
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	3301      	adds	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800923a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	b21a      	sxth	r2, r3
 8009242:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009246:	4313      	orrs	r3, r2
 8009248:	b21b      	sxth	r3, r3
 800924a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800924c:	89fb      	ldrh	r3, [r7, #14]
}
 800924e:	4618      	mov	r0, r3
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
	...

0800925c <USBD_StdDevReq>:
=======
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	3301      	adds	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80092e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	b21a      	sxth	r2, r3
 80092ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80092f4:	89fb      	ldrh	r3, [r7, #14]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <USBD_StdDevReq>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009272:	2b40      	cmp	r3, #64	@ 0x40
 8009274:	d005      	beq.n	8009282 <USBD_StdDevReq+0x26>
 8009276:	2b40      	cmp	r3, #64	@ 0x40
 8009278:	d853      	bhi.n	8009322 <USBD_StdDevReq+0xc6>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <USBD_StdDevReq+0x3a>
 800927e:	2b20      	cmp	r3, #32
 8009280:	d14f      	bne.n	8009322 <USBD_StdDevReq+0xc6>
=======
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800931a:	2b40      	cmp	r3, #64	@ 0x40
 800931c:	d005      	beq.n	800932a <USBD_StdDevReq+0x26>
 800931e:	2b40      	cmp	r3, #64	@ 0x40
 8009320:	d853      	bhi.n	80093ca <USBD_StdDevReq+0xc6>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <USBD_StdDevReq+0x3a>
 8009326:	2b20      	cmp	r3, #32
 8009328:	d14f      	bne.n	80093ca <USBD_StdDevReq+0xc6>
>>>>>>> Stashed changes
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
<<<<<<< Updated upstream
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
      break;
 8009294:	e04a      	b.n	800932c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	2b09      	cmp	r3, #9
 800929c:	d83b      	bhi.n	8009316 <USBD_StdDevReq+0xba>
 800929e:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <USBD_StdDevReq+0x48>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092f9 	.word	0x080092f9
 80092a8:	0800930d 	.word	0x0800930d
 80092ac:	08009317 	.word	0x08009317
 80092b0:	08009303 	.word	0x08009303
 80092b4:	08009317 	.word	0x08009317
 80092b8:	080092d7 	.word	0x080092d7
 80092bc:	080092cd 	.word	0x080092cd
 80092c0:	08009317 	.word	0x08009317
 80092c4:	080092ef 	.word	0x080092ef
 80092c8:	080092e1 	.word	0x080092e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f9de 	bl	8009690 <USBD_GetDescriptor>
          break;
 80092d4:	e024      	b.n	8009320 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fb6d 	bl	80099b8 <USBD_SetAddress>
          break;
 80092de:	e01f      	b.n	8009320 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fbac 	bl	8009a40 <USBD_SetConfig>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
          break;
 80092ec:	e018      	b.n	8009320 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fc4b 	bl	8009b8c <USBD_GetConfig>
          break;
 80092f6:	e013      	b.n	8009320 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fc7c 	bl	8009bf8 <USBD_GetStatus>
          break;
 8009300:	e00e      	b.n	8009320 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fcab 	bl	8009c60 <USBD_SetFeature>
          break;
 800930a:	e009      	b.n	8009320 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fcba 	bl	8009c88 <USBD_ClrFeature>
          break;
 8009314:	e004      	b.n	8009320 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fd11 	bl	8009d40 <USBD_CtlError>
          break;
 800931e:	bf00      	nop
      }
      break;
 8009320:	e004      	b.n	800932c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fd0b 	bl	8009d40 <USBD_CtlError>
      break;
 800932a:	bf00      	nop
  }

  return ret;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop

08009338 <USBD_StdItfReq>:
=======
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	4798      	blx	r3
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
      break;
 800933c:	e04a      	b.n	80093d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	785b      	ldrb	r3, [r3, #1]
 8009342:	2b09      	cmp	r3, #9
 8009344:	d83b      	bhi.n	80093be <USBD_StdDevReq+0xba>
 8009346:	a201      	add	r2, pc, #4	@ (adr r2, 800934c <USBD_StdDevReq+0x48>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	080093a1 	.word	0x080093a1
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080093bf 	.word	0x080093bf
 8009358:	080093ab 	.word	0x080093ab
 800935c:	080093bf 	.word	0x080093bf
 8009360:	0800937f 	.word	0x0800937f
 8009364:	08009375 	.word	0x08009375
 8009368:	080093bf 	.word	0x080093bf
 800936c:	08009397 	.word	0x08009397
 8009370:	08009389 	.word	0x08009389
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f9de 	bl	8009738 <USBD_GetDescriptor>
          break;
 800937c:	e024      	b.n	80093c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fb6d 	bl	8009a60 <USBD_SetAddress>
          break;
 8009386:	e01f      	b.n	80093c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fbac 	bl	8009ae8 <USBD_SetConfig>
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]
          break;
 8009394:	e018      	b.n	80093c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fc4b 	bl	8009c34 <USBD_GetConfig>
          break;
 800939e:	e013      	b.n	80093c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc7c 	bl	8009ca0 <USBD_GetStatus>
          break;
 80093a8:	e00e      	b.n	80093c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fcab 	bl	8009d08 <USBD_SetFeature>
          break;
 80093b2:	e009      	b.n	80093c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fcba 	bl	8009d30 <USBD_ClrFeature>
          break;
 80093bc:	e004      	b.n	80093c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fd11 	bl	8009de8 <USBD_CtlError>
          break;
 80093c6:	bf00      	nop
      }
      break;
 80093c8:	e004      	b.n	80093d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fd0b 	bl	8009de8 <USBD_CtlError>
      break;
 80093d2:	bf00      	nop
  }

  return ret;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop

080093e0 <USBD_StdItfReq>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800934e:	2b40      	cmp	r3, #64	@ 0x40
 8009350:	d005      	beq.n	800935e <USBD_StdItfReq+0x26>
 8009352:	2b40      	cmp	r3, #64	@ 0x40
 8009354:	d82f      	bhi.n	80093b6 <USBD_StdItfReq+0x7e>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <USBD_StdItfReq+0x26>
 800935a:	2b20      	cmp	r3, #32
 800935c:	d12b      	bne.n	80093b6 <USBD_StdItfReq+0x7e>
=======
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093f6:	2b40      	cmp	r3, #64	@ 0x40
 80093f8:	d005      	beq.n	8009406 <USBD_StdItfReq+0x26>
 80093fa:	2b40      	cmp	r3, #64	@ 0x40
 80093fc:	d82f      	bhi.n	800945e <USBD_StdItfReq+0x7e>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <USBD_StdItfReq+0x26>
 8009402:	2b20      	cmp	r3, #32
 8009404:	d12b      	bne.n	800945e <USBD_StdItfReq+0x7e>
>>>>>>> Stashed changes
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< Updated upstream
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009364:	b2db      	uxtb	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	2b02      	cmp	r3, #2
 800936a:	d81d      	bhi.n	80093a8 <USBD_StdItfReq+0x70>
=======
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800940c:	b2db      	uxtb	r3, r3
 800940e:	3b01      	subs	r3, #1
 8009410:	2b02      	cmp	r3, #2
 8009412:	d81d      	bhi.n	8009450 <USBD_StdItfReq+0x70>
>>>>>>> Stashed changes
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< Updated upstream
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	889b      	ldrh	r3, [r3, #4]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b01      	cmp	r3, #1
 8009374:	d813      	bhi.n	800939e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	4798      	blx	r3
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	88db      	ldrh	r3, [r3, #6]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d110      	bne.n	80093b2 <USBD_StdItfReq+0x7a>
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10d      	bne.n	80093b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fd9d 	bl	8009ed6 <USBD_CtlSendStatus>
=======
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	889b      	ldrh	r3, [r3, #4]
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b01      	cmp	r3, #1
 800941c:	d813      	bhi.n	8009446 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	4798      	blx	r3
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	88db      	ldrh	r3, [r3, #6]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d110      	bne.n	800945a <USBD_StdItfReq+0x7a>
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10d      	bne.n	800945a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fd9d 	bl	8009f7e <USBD_CtlSendStatus>
>>>>>>> Stashed changes
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< Updated upstream
 800939c:	e009      	b.n	80093b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fccd 	bl	8009d40 <USBD_CtlError>
          break;
 80093a6:	e004      	b.n	80093b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fcc8 	bl	8009d40 <USBD_CtlError>
          break;
 80093b0:	e000      	b.n	80093b4 <USBD_StdItfReq+0x7c>
          break;
 80093b2:	bf00      	nop
      }
      break;
 80093b4:	e004      	b.n	80093c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fcc1 	bl	8009d40 <USBD_CtlError>
      break;
 80093be:	bf00      	nop
  }

  return ret;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_StdEPReq>:
=======
 8009444:	e009      	b.n	800945a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fccd 	bl	8009de8 <USBD_CtlError>
          break;
 800944e:	e004      	b.n	800945a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fcc8 	bl	8009de8 <USBD_CtlError>
          break;
 8009458:	e000      	b.n	800945c <USBD_StdItfReq+0x7c>
          break;
 800945a:	bf00      	nop
      }
      break;
 800945c:	e004      	b.n	8009468 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fcc1 	bl	8009de8 <USBD_CtlError>
      break;
 8009466:	bf00      	nop
  }

  return ret;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_StdEPReq>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	889b      	ldrh	r3, [r3, #4]
 80093dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093e6:	2b40      	cmp	r3, #64	@ 0x40
 80093e8:	d007      	beq.n	80093fa <USBD_StdEPReq+0x30>
 80093ea:	2b40      	cmp	r3, #64	@ 0x40
 80093ec:	f200 8145 	bhi.w	800967a <USBD_StdEPReq+0x2b0>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00c      	beq.n	800940e <USBD_StdEPReq+0x44>
 80093f4:	2b20      	cmp	r3, #32
 80093f6:	f040 8140 	bne.w	800967a <USBD_StdEPReq+0x2b0>
=======
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	889b      	ldrh	r3, [r3, #4]
 8009484:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800948e:	2b40      	cmp	r3, #64	@ 0x40
 8009490:	d007      	beq.n	80094a2 <USBD_StdEPReq+0x30>
 8009492:	2b40      	cmp	r3, #64	@ 0x40
 8009494:	f200 8145 	bhi.w	8009722 <USBD_StdEPReq+0x2b0>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00c      	beq.n	80094b6 <USBD_StdEPReq+0x44>
 800949c:	2b20      	cmp	r3, #32
 800949e:	f040 8140 	bne.w	8009722 <USBD_StdEPReq+0x2b0>
>>>>>>> Stashed changes
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
<<<<<<< Updated upstream
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
      break;
 800940c:	e13a      	b.n	8009684 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	785b      	ldrb	r3, [r3, #1]
 8009412:	2b03      	cmp	r3, #3
 8009414:	d007      	beq.n	8009426 <USBD_StdEPReq+0x5c>
 8009416:	2b03      	cmp	r3, #3
 8009418:	f300 8129 	bgt.w	800966e <USBD_StdEPReq+0x2a4>
 800941c:	2b00      	cmp	r3, #0
 800941e:	d07f      	beq.n	8009520 <USBD_StdEPReq+0x156>
 8009420:	2b01      	cmp	r3, #1
 8009422:	d03c      	beq.n	800949e <USBD_StdEPReq+0xd4>
 8009424:	e123      	b.n	800966e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b02      	cmp	r3, #2
 8009430:	d002      	beq.n	8009438 <USBD_StdEPReq+0x6e>
 8009432:	2b03      	cmp	r3, #3
 8009434:	d016      	beq.n	8009464 <USBD_StdEPReq+0x9a>
 8009436:	e02c      	b.n	8009492 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <USBD_StdEPReq+0x90>
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b80      	cmp	r3, #128	@ 0x80
 8009442:	d00a      	beq.n	800945a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f003 ff09 	bl	800d260 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800944e:	2180      	movs	r1, #128	@ 0x80
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f003 ff05 	bl	800d260 <USBD_LL_StallEP>
 8009456:	bf00      	nop
=======
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]
      break;
 80094b4:	e13a      	b.n	800972c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d007      	beq.n	80094ce <USBD_StdEPReq+0x5c>
 80094be:	2b03      	cmp	r3, #3
 80094c0:	f300 8129 	bgt.w	8009716 <USBD_StdEPReq+0x2a4>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d07f      	beq.n	80095c8 <USBD_StdEPReq+0x156>
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d03c      	beq.n	8009546 <USBD_StdEPReq+0xd4>
 80094cc:	e123      	b.n	8009716 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d002      	beq.n	80094e0 <USBD_StdEPReq+0x6e>
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d016      	beq.n	800950c <USBD_StdEPReq+0x9a>
 80094de:	e02c      	b.n	800953a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00d      	beq.n	8009502 <USBD_StdEPReq+0x90>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	@ 0x80
 80094ea:	d00a      	beq.n	8009502 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f004 fb45 	bl	800db80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f6:	2180      	movs	r1, #128	@ 0x80
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f004 fb41 	bl	800db80 <USBD_LL_StallEP>
 80094fe:	bf00      	nop
>>>>>>> Stashed changes
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< Updated upstream
 8009458:	e020      	b.n	800949c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fc6f 	bl	8009d40 <USBD_CtlError>
              break;
 8009462:	e01b      	b.n	800949c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	885b      	ldrh	r3, [r3, #2]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10e      	bne.n	800948a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <USBD_StdEPReq+0xc0>
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	2b80      	cmp	r3, #128	@ 0x80
 8009476:	d008      	beq.n	800948a <USBD_StdEPReq+0xc0>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	88db      	ldrh	r3, [r3, #6]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f003 feeb 	bl	800d260 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fd23 	bl	8009ed6 <USBD_CtlSendStatus>

              break;
 8009490:	e004      	b.n	800949c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc53 	bl	8009d40 <USBD_CtlError>
              break;
 800949a:	bf00      	nop
          }
          break;
 800949c:	e0ec      	b.n	8009678 <USBD_StdEPReq+0x2ae>
=======
 8009500:	e020      	b.n	8009544 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc6f 	bl	8009de8 <USBD_CtlError>
              break;
 800950a:	e01b      	b.n	8009544 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	885b      	ldrh	r3, [r3, #2]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10e      	bne.n	8009532 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <USBD_StdEPReq+0xc0>
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b80      	cmp	r3, #128	@ 0x80
 800951e:	d008      	beq.n	8009532 <USBD_StdEPReq+0xc0>
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	88db      	ldrh	r3, [r3, #6]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f004 fb27 	bl	800db80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fd23 	bl	8009f7e <USBD_CtlSendStatus>

              break;
 8009538:	e004      	b.n	8009544 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fc53 	bl	8009de8 <USBD_CtlError>
              break;
 8009542:	bf00      	nop
          }
          break;
 8009544:	e0ec      	b.n	8009720 <USBD_StdEPReq+0x2ae>
>>>>>>> Stashed changes

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< Updated upstream
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d002      	beq.n	80094b0 <USBD_StdEPReq+0xe6>
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d016      	beq.n	80094dc <USBD_StdEPReq+0x112>
 80094ae:	e030      	b.n	8009512 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <USBD_StdEPReq+0x108>
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b80      	cmp	r3, #128	@ 0x80
 80094ba:	d00a      	beq.n	80094d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f003 fecd 	bl	800d260 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094c6:	2180      	movs	r1, #128	@ 0x80
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f003 fec9 	bl	800d260 <USBD_LL_StallEP>
 80094ce:	bf00      	nop
=======
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b02      	cmp	r3, #2
 8009550:	d002      	beq.n	8009558 <USBD_StdEPReq+0xe6>
 8009552:	2b03      	cmp	r3, #3
 8009554:	d016      	beq.n	8009584 <USBD_StdEPReq+0x112>
 8009556:	e030      	b.n	80095ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00d      	beq.n	800957a <USBD_StdEPReq+0x108>
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b80      	cmp	r3, #128	@ 0x80
 8009562:	d00a      	beq.n	800957a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f004 fb09 	bl	800db80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800956e:	2180      	movs	r1, #128	@ 0x80
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f004 fb05 	bl	800db80 <USBD_LL_StallEP>
 8009576:	bf00      	nop
>>>>>>> Stashed changes
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< Updated upstream
 80094d0:	e025      	b.n	800951e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fc33 	bl	8009d40 <USBD_CtlError>
              break;
 80094da:	e020      	b.n	800951e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	885b      	ldrh	r3, [r3, #2]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d11b      	bne.n	800951c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f003 fed3 	bl	800d29e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fcec 	bl	8009ed6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009510:	e004      	b.n	800951c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fc13 	bl	8009d40 <USBD_CtlError>
              break;
 800951a:	e000      	b.n	800951e <USBD_StdEPReq+0x154>
              break;
 800951c:	bf00      	nop
          }
          break;
 800951e:	e0ab      	b.n	8009678 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009526:	b2db      	uxtb	r3, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d002      	beq.n	8009532 <USBD_StdEPReq+0x168>
 800952c:	2b03      	cmp	r3, #3
 800952e:	d032      	beq.n	8009596 <USBD_StdEPReq+0x1cc>
 8009530:	e097      	b.n	8009662 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <USBD_StdEPReq+0x17e>
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	2b80      	cmp	r3, #128	@ 0x80
 800953c:	d004      	beq.n	8009548 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fbfd 	bl	8009d40 <USBD_CtlError>
                break;
 8009546:	e091      	b.n	800966c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800954c:	2b00      	cmp	r3, #0
 800954e:	da0b      	bge.n	8009568 <USBD_StdEPReq+0x19e>
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	3310      	adds	r3, #16
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	4413      	add	r3, r2
 8009564:	3304      	adds	r3, #4
 8009566:	e00b      	b.n	8009580 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800956e:	4613      	mov	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	4413      	add	r3, r2
 800957e:	3304      	adds	r3, #4
 8009580:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2202      	movs	r2, #2
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fc47 	bl	8009e22 <USBD_CtlSendData>
              break;
 8009594:	e06a      	b.n	800966c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800959a:	2b00      	cmp	r3, #0
 800959c:	da11      	bge.n	80095c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	f003 020f 	and.w	r2, r3, #15
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	3324      	adds	r3, #36	@ 0x24
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d117      	bne.n	80095e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fbc0 	bl	8009d40 <USBD_CtlError>
                  break;
 80095c0:	e054      	b.n	800966c <USBD_StdEPReq+0x2a2>
=======
 8009578:	e025      	b.n	80095c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fc33 	bl	8009de8 <USBD_CtlError>
              break;
 8009582:	e020      	b.n	80095c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	885b      	ldrh	r3, [r3, #2]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d11b      	bne.n	80095c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f004 fb0f 	bl	800dbbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fcec 	bl	8009f7e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	4798      	blx	r3
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80095b8:	e004      	b.n	80095c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fc13 	bl	8009de8 <USBD_CtlError>
              break;
 80095c2:	e000      	b.n	80095c6 <USBD_StdEPReq+0x154>
              break;
 80095c4:	bf00      	nop
          }
          break;
 80095c6:	e0ab      	b.n	8009720 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d002      	beq.n	80095da <USBD_StdEPReq+0x168>
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d032      	beq.n	800963e <USBD_StdEPReq+0x1cc>
 80095d8:	e097      	b.n	800970a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <USBD_StdEPReq+0x17e>
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b80      	cmp	r3, #128	@ 0x80
 80095e4:	d004      	beq.n	80095f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fbfd 	bl	8009de8 <USBD_CtlError>
                break;
 80095ee:	e091      	b.n	8009714 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	da0b      	bge.n	8009610 <USBD_StdEPReq+0x19e>
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	3310      	adds	r3, #16
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4413      	add	r3, r2
 800960c:	3304      	adds	r3, #4
 800960e:	e00b      	b.n	8009628 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	3304      	adds	r3, #4
 8009628:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2202      	movs	r2, #2
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fc47 	bl	8009eca <USBD_CtlSendData>
              break;
 800963c:	e06a      	b.n	8009714 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800963e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009642:	2b00      	cmp	r3, #0
 8009644:	da11      	bge.n	800966a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	f003 020f 	and.w	r2, r3, #15
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	3324      	adds	r3, #36	@ 0x24
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d117      	bne.n	8009690 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fbc0 	bl	8009de8 <USBD_CtlError>
                  break;
 8009668:	e054      	b.n	8009714 <USBD_StdEPReq+0x2a2>
>>>>>>> Stashed changes
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< Updated upstream
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	f003 020f 	and.w	r2, r3, #15
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d104      	bne.n	80095e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fbad 	bl	8009d40 <USBD_CtlError>
                  break;
 80095e6:	e041      	b.n	800966c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	da0b      	bge.n	8009608 <USBD_StdEPReq+0x23e>
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	3310      	adds	r3, #16
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	4413      	add	r3, r2
 8009604:	3304      	adds	r3, #4
 8009606:	e00b      	b.n	8009620 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009608:	7bbb      	ldrb	r3, [r7, #14]
 800960a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	3304      	adds	r3, #4
 8009620:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <USBD_StdEPReq+0x264>
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	2b80      	cmp	r3, #128	@ 0x80
 800962c:	d103      	bne.n	8009636 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e00e      	b.n	8009654 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f003 fe4e 	bl	800d2dc <USBD_LL_IsStallEP>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2201      	movs	r2, #1
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	e002      	b.n	8009654 <USBD_StdEPReq+0x28a>
=======
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fbad 	bl	8009de8 <USBD_CtlError>
                  break;
 800968e:	e041      	b.n	8009714 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009694:	2b00      	cmp	r3, #0
 8009696:	da0b      	bge.n	80096b0 <USBD_StdEPReq+0x23e>
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	3310      	adds	r3, #16
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4413      	add	r3, r2
 80096ac:	3304      	adds	r3, #4
 80096ae:	e00b      	b.n	80096c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4413      	add	r3, r2
 80096c6:	3304      	adds	r3, #4
 80096c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <USBD_StdEPReq+0x264>
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b80      	cmp	r3, #128	@ 0x80
 80096d4:	d103      	bne.n	80096de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e00e      	b.n	80096fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f004 fa8a 	bl	800dbfc <USBD_LL_IsStallEP>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e002      	b.n	80096fc <USBD_StdEPReq+0x28a>
>>>>>>> Stashed changes
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< Updated upstream
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2202      	movs	r2, #2
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fbe1 	bl	8009e22 <USBD_CtlSendData>
              break;
 8009660:	e004      	b.n	800966c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fb6b 	bl	8009d40 <USBD_CtlError>
              break;
 800966a:	bf00      	nop
          }
          break;
 800966c:	e004      	b.n	8009678 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fb65 	bl	8009d40 <USBD_CtlError>
          break;
 8009676:	bf00      	nop
      }
      break;
 8009678:	e004      	b.n	8009684 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fb5f 	bl	8009d40 <USBD_CtlError>
      break;
 8009682:	bf00      	nop
  }

  return ret;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <USBD_GetDescriptor>:
=======
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2202      	movs	r2, #2
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fbe1 	bl	8009eca <USBD_CtlSendData>
              break;
 8009708:	e004      	b.n	8009714 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb6b 	bl	8009de8 <USBD_CtlError>
              break;
 8009712:	bf00      	nop
          }
          break;
 8009714:	e004      	b.n	8009720 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fb65 	bl	8009de8 <USBD_CtlError>
          break;
 800971e:	bf00      	nop
      }
      break;
 8009720:	e004      	b.n	800972c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fb5f 	bl	8009de8 <USBD_CtlError>
      break;
 800972a:	bf00      	nop
  }

  return ret;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <USBD_GetDescriptor>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	885b      	ldrh	r3, [r3, #2]
 80096aa:	0a1b      	lsrs	r3, r3, #8
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	2b0e      	cmp	r3, #14
 80096b2:	f200 8152 	bhi.w	800995a <USBD_GetDescriptor+0x2ca>
 80096b6:	a201      	add	r2, pc, #4	@ (adr r2, 80096bc <USBD_GetDescriptor+0x2c>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	0800972d 	.word	0x0800972d
 80096c0:	08009745 	.word	0x08009745
 80096c4:	08009785 	.word	0x08009785
 80096c8:	0800995b 	.word	0x0800995b
 80096cc:	0800995b 	.word	0x0800995b
 80096d0:	080098fb 	.word	0x080098fb
 80096d4:	08009927 	.word	0x08009927
 80096d8:	0800995b 	.word	0x0800995b
 80096dc:	0800995b 	.word	0x0800995b
 80096e0:	0800995b 	.word	0x0800995b
 80096e4:	0800995b 	.word	0x0800995b
 80096e8:	0800995b 	.word	0x0800995b
 80096ec:	0800995b 	.word	0x0800995b
 80096f0:	0800995b 	.word	0x0800995b
 80096f4:	080096f9 	.word	0x080096f9
=======
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	0a1b      	lsrs	r3, r3, #8
 8009754:	b29b      	uxth	r3, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	2b0e      	cmp	r3, #14
 800975a:	f200 8152 	bhi.w	8009a02 <USBD_GetDescriptor+0x2ca>
 800975e:	a201      	add	r2, pc, #4	@ (adr r2, 8009764 <USBD_GetDescriptor+0x2c>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	080097d5 	.word	0x080097d5
 8009768:	080097ed 	.word	0x080097ed
 800976c:	0800982d 	.word	0x0800982d
 8009770:	08009a03 	.word	0x08009a03
 8009774:	08009a03 	.word	0x08009a03
 8009778:	080099a3 	.word	0x080099a3
 800977c:	080099cf 	.word	0x080099cf
 8009780:	08009a03 	.word	0x08009a03
 8009784:	08009a03 	.word	0x08009a03
 8009788:	08009a03 	.word	0x08009a03
 800978c:	08009a03 	.word	0x08009a03
 8009790:	08009a03 	.word	0x08009a03
 8009794:	08009a03 	.word	0x08009a03
 8009798:	08009a03 	.word	0x08009a03
 800979c:	080097a1 	.word	0x080097a1
>>>>>>> Stashed changes
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
<<<<<<< Updated upstream
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	7c12      	ldrb	r2, [r2, #16]
 8009710:	f107 0108 	add.w	r1, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
=======
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	7c12      	ldrb	r2, [r2, #16]
 80097b8:	f107 0108 	add.w	r1, r7, #8
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
 80097c0:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< Updated upstream
 800971a:	e126      	b.n	800996a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fb0e 	bl	8009d40 <USBD_CtlError>
        err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
      break;
 800972a:	e11e      	b.n	800996a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	7c12      	ldrb	r2, [r2, #16]
 8009738:	f107 0108 	add.w	r1, r7, #8
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
 8009740:	60f8      	str	r0, [r7, #12]
      break;
 8009742:	e112      	b.n	800996a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	7c1b      	ldrb	r3, [r3, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10d      	bne.n	8009768 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009754:	f107 0208 	add.w	r2, r7, #8
 8009758:	4610      	mov	r0, r2
 800975a:	4798      	blx	r3
 800975c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	2202      	movs	r2, #2
 8009764:	701a      	strb	r2, [r3, #0]
=======
 80097c2:	e126      	b.n	8009a12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fb0e 	bl	8009de8 <USBD_CtlError>
        err++;
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	3301      	adds	r3, #1
 80097d0:	72fb      	strb	r3, [r7, #11]
      break;
 80097d2:	e11e      	b.n	8009a12 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	7c12      	ldrb	r2, [r2, #16]
 80097e0:	f107 0108 	add.w	r1, r7, #8
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	60f8      	str	r0, [r7, #12]
      break;
 80097ea:	e112      	b.n	8009a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7c1b      	ldrb	r3, [r3, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10d      	bne.n	8009810 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fc:	f107 0208 	add.w	r2, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3301      	adds	r3, #1
 800980a:	2202      	movs	r2, #2
 800980c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< Updated upstream
 8009766:	e100      	b.n	800996a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800976e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009770:	f107 0208 	add.w	r2, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3301      	adds	r3, #1
 800977e:	2202      	movs	r2, #2
 8009780:	701a      	strb	r2, [r3, #0]
      break;
 8009782:	e0f2      	b.n	800996a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	885b      	ldrh	r3, [r3, #2]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b05      	cmp	r3, #5
 800978c:	f200 80ac 	bhi.w	80098e8 <USBD_GetDescriptor+0x258>
 8009790:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <USBD_GetDescriptor+0x108>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097b1 	.word	0x080097b1
 800979c:	080097e5 	.word	0x080097e5
 80097a0:	08009819 	.word	0x08009819
 80097a4:	0800984d 	.word	0x0800984d
 80097a8:	08009881 	.word	0x08009881
 80097ac:	080098b5 	.word	0x080098b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	7c12      	ldrb	r2, [r2, #16]
 80097c8:	f107 0108 	add.w	r1, r7, #8
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
 80097d0:	60f8      	str	r0, [r7, #12]
=======
 800980e:	e100      	b.n	8009a12 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	f107 0208 	add.w	r2, r7, #8
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3301      	adds	r3, #1
 8009826:	2202      	movs	r2, #2
 8009828:	701a      	strb	r2, [r3, #0]
      break;
 800982a:	e0f2      	b.n	8009a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	885b      	ldrh	r3, [r3, #2]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b05      	cmp	r3, #5
 8009834:	f200 80ac 	bhi.w	8009990 <USBD_GetDescriptor+0x258>
 8009838:	a201      	add	r2, pc, #4	@ (adr r2, 8009840 <USBD_GetDescriptor+0x108>)
 800983a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983e:	bf00      	nop
 8009840:	08009859 	.word	0x08009859
 8009844:	0800988d 	.word	0x0800988d
 8009848:	080098c1 	.word	0x080098c1
 800984c:	080098f5 	.word	0x080098f5
 8009850:	08009929 	.word	0x08009929
 8009854:	0800995d 	.word	0x0800995d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00b      	beq.n	800987c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	7c12      	ldrb	r2, [r2, #16]
 8009870:	f107 0108 	add.w	r1, r7, #8
 8009874:	4610      	mov	r0, r2
 8009876:	4798      	blx	r3
 8009878:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 80097d2:	e091      	b.n	80098f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fab2 	bl	8009d40 <USBD_CtlError>
            err++;
 80097dc:	7afb      	ldrb	r3, [r7, #11]
 80097de:	3301      	adds	r3, #1
 80097e0:	72fb      	strb	r3, [r7, #11]
          break;
 80097e2:	e089      	b.n	80098f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7c12      	ldrb	r2, [r2, #16]
 80097fc:	f107 0108 	add.w	r1, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
=======
 800987a:	e091      	b.n	80099a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fab2 	bl	8009de8 <USBD_CtlError>
            err++;
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	3301      	adds	r3, #1
 8009888:	72fb      	strb	r3, [r7, #11]
          break;
 800988a:	e089      	b.n	80099a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	7c12      	ldrb	r2, [r2, #16]
 80098a4:	f107 0108 	add.w	r1, r7, #8
 80098a8:	4610      	mov	r0, r2
 80098aa:	4798      	blx	r3
 80098ac:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 8009806:	e077      	b.n	80098f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa98 	bl	8009d40 <USBD_CtlError>
            err++;
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	3301      	adds	r3, #1
 8009814:	72fb      	strb	r3, [r7, #11]
          break;
 8009816:	e06f      	b.n	80098f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7c12      	ldrb	r2, [r2, #16]
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
=======
 80098ae:	e077      	b.n	80099a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa98 	bl	8009de8 <USBD_CtlError>
            err++;
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	3301      	adds	r3, #1
 80098bc:	72fb      	strb	r3, [r7, #11]
          break;
 80098be:	e06f      	b.n	80099a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00b      	beq.n	80098e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	7c12      	ldrb	r2, [r2, #16]
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	4610      	mov	r0, r2
 80098de:	4798      	blx	r3
 80098e0:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 800983a:	e05d      	b.n	80098f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa7e 	bl	8009d40 <USBD_CtlError>
            err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
          break;
 800984a:	e055      	b.n	80098f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
=======
 80098e2:	e05d      	b.n	80099a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa7e 	bl	8009de8 <USBD_CtlError>
            err++;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	3301      	adds	r3, #1
 80098f0:	72fb      	strb	r3, [r7, #11]
          break;
 80098f2:	e055      	b.n	80099a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00b      	beq.n	8009918 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	7c12      	ldrb	r2, [r2, #16]
 800990c:	f107 0108 	add.w	r1, r7, #8
 8009910:	4610      	mov	r0, r2
 8009912:	4798      	blx	r3
 8009914:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 800986e:	e043      	b.n	80098f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa64 	bl	8009d40 <USBD_CtlError>
            err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
          break;
 800987e:	e03b      	b.n	80098f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	7c12      	ldrb	r2, [r2, #16]
 8009898:	f107 0108 	add.w	r1, r7, #8
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	60f8      	str	r0, [r7, #12]
=======
 8009916:	e043      	b.n	80099a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa64 	bl	8009de8 <USBD_CtlError>
            err++;
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	3301      	adds	r3, #1
 8009924:	72fb      	strb	r3, [r7, #11]
          break;
 8009926:	e03b      	b.n	80099a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	7c12      	ldrb	r2, [r2, #16]
 8009940:	f107 0108 	add.w	r1, r7, #8
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
 8009948:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 80098a2:	e029      	b.n	80098f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa4a 	bl	8009d40 <USBD_CtlError>
            err++;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	3301      	adds	r3, #1
 80098b0:	72fb      	strb	r3, [r7, #11]
          break;
 80098b2:	e021      	b.n	80098f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
=======
 800994a:	e029      	b.n	80099a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fa4a 	bl	8009de8 <USBD_CtlError>
            err++;
 8009954:	7afb      	ldrb	r3, [r7, #11]
 8009956:	3301      	adds	r3, #1
 8009958:	72fb      	strb	r3, [r7, #11]
          break;
 800995a:	e021      	b.n	80099a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7c12      	ldrb	r2, [r2, #16]
 8009974:	f107 0108 	add.w	r1, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< Updated upstream
 80098d6:	e00f      	b.n	80098f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa30 	bl	8009d40 <USBD_CtlError>
            err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
          break;
 80098e6:	e007      	b.n	80098f8 <USBD_GetDescriptor+0x268>
=======
 800997e:	e00f      	b.n	80099a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa30 	bl	8009de8 <USBD_CtlError>
            err++;
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	3301      	adds	r3, #1
 800998c:	72fb      	strb	r3, [r7, #11]
          break;
 800998e:	e007      	b.n	80099a0 <USBD_GetDescriptor+0x268>
>>>>>>> Stashed changes
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa28 	bl	8009d40 <USBD_CtlError>
          err++;
 80098f0:	7afb      	ldrb	r3, [r7, #11]
 80098f2:	3301      	adds	r3, #1
 80098f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80098f6:	bf00      	nop
      }
      break;
 80098f8:	e037      	b.n	800996a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7c1b      	ldrb	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800990a:	f107 0208 	add.w	r2, r7, #8
 800990e:	4610      	mov	r0, r2
 8009910:	4798      	blx	r3
 8009912:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009914:	e029      	b.n	800996a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fa11 	bl	8009d40 <USBD_CtlError>
        err++;
 800991e:	7afb      	ldrb	r3, [r7, #11]
 8009920:	3301      	adds	r3, #1
 8009922:	72fb      	strb	r3, [r7, #11]
      break;
 8009924:	e021      	b.n	800996a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7c1b      	ldrb	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10d      	bne.n	800994a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	4610      	mov	r0, r2
 800993c:	4798      	blx	r3
 800993e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3301      	adds	r3, #1
 8009944:	2207      	movs	r2, #7
 8009946:	701a      	strb	r2, [r3, #0]
=======
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa28 	bl	8009de8 <USBD_CtlError>
          err++;
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	3301      	adds	r3, #1
 800999c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800999e:	bf00      	nop
      }
      break;
 80099a0:	e037      	b.n	8009a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7c1b      	ldrb	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099b2:	f107 0208 	add.w	r2, r7, #8
 80099b6:	4610      	mov	r0, r2
 80099b8:	4798      	blx	r3
 80099ba:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< Updated upstream
 8009948:	e00f      	b.n	800996a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f9f7 	bl	8009d40 <USBD_CtlError>
        err++;
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	3301      	adds	r3, #1
 8009956:	72fb      	strb	r3, [r7, #11]
      break;
 8009958:	e007      	b.n	800996a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9ef 	bl	8009d40 <USBD_CtlError>
      err++;
 8009962:	7afb      	ldrb	r3, [r7, #11]
 8009964:	3301      	adds	r3, #1
 8009966:	72fb      	strb	r3, [r7, #11]
      break;
 8009968:	bf00      	nop
  }

  if (err != 0U)
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d11e      	bne.n	80099ae <USBD_GetDescriptor+0x31e>
=======
 80099bc:	e029      	b.n	8009a12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fa11 	bl	8009de8 <USBD_CtlError>
        err++;
 80099c6:	7afb      	ldrb	r3, [r7, #11]
 80099c8:	3301      	adds	r3, #1
 80099ca:	72fb      	strb	r3, [r7, #11]
      break;
 80099cc:	e021      	b.n	8009a12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	7c1b      	ldrb	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10d      	bne.n	80099f2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099de:	f107 0208 	add.w	r2, r7, #8
 80099e2:	4610      	mov	r0, r2
 80099e4:	4798      	blx	r3
 80099e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3301      	adds	r3, #1
 80099ec:	2207      	movs	r2, #7
 80099ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f0:	e00f      	b.n	8009a12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9f7 	bl	8009de8 <USBD_CtlError>
        err++;
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	3301      	adds	r3, #1
 80099fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009a00:	e007      	b.n	8009a12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f9ef 	bl	8009de8 <USBD_CtlError>
      err++;
 8009a0a:	7afb      	ldrb	r3, [r7, #11]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a10:	bf00      	nop
  }

  if (err != 0U)
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11e      	bne.n	8009a56 <USBD_GetDescriptor+0x31e>
>>>>>>> Stashed changes
  {
    return;
  }

  if (req->wLength != 0U)
<<<<<<< Updated upstream
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	88db      	ldrh	r3, [r3, #6]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d016      	beq.n	80099a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009978:	893b      	ldrh	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00e      	beq.n	800999c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	88da      	ldrh	r2, [r3, #6]
 8009982:	893b      	ldrh	r3, [r7, #8]
 8009984:	4293      	cmp	r3, r2
 8009986:	bf28      	it	cs
 8009988:	4613      	movcs	r3, r2
 800998a:	b29b      	uxth	r3, r3
 800998c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800998e:	893b      	ldrh	r3, [r7, #8]
 8009990:	461a      	mov	r2, r3
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fa44 	bl	8009e22 <USBD_CtlSendData>
 800999a:	e009      	b.n	80099b0 <USBD_GetDescriptor+0x320>
=======
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	88db      	ldrh	r3, [r3, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d016      	beq.n	8009a4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009a20:	893b      	ldrh	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00e      	beq.n	8009a44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	88da      	ldrh	r2, [r3, #6]
 8009a2a:	893b      	ldrh	r3, [r7, #8]
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	bf28      	it	cs
 8009a30:	4613      	movcs	r3, r2
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a36:	893b      	ldrh	r3, [r7, #8]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa44 	bl	8009eca <USBD_CtlSendData>
 8009a42:	e009      	b.n	8009a58 <USBD_GetDescriptor+0x320>
>>>>>>> Stashed changes
    }
    else
    {
      USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f9ce 	bl	8009d40 <USBD_CtlError>
 80099a4:	e004      	b.n	80099b0 <USBD_GetDescriptor+0x320>
=======
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f9ce 	bl	8009de8 <USBD_CtlError>
 8009a4c:	e004      	b.n	8009a58 <USBD_GetDescriptor+0x320>
>>>>>>> Stashed changes
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
<<<<<<< Updated upstream
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa95 	bl	8009ed6 <USBD_CtlSendStatus>
 80099ac:	e000      	b.n	80099b0 <USBD_GetDescriptor+0x320>
    return;
 80099ae:	bf00      	nop
  }
}
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop

080099b8 <USBD_SetAddress>:
=======
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa95 	bl	8009f7e <USBD_CtlSendStatus>
 8009a54:	e000      	b.n	8009a58 <USBD_GetDescriptor+0x320>
    return;
 8009a56:	bf00      	nop
  }
}
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop

08009a60 <USBD_SetAddress>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	889b      	ldrh	r3, [r3, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d131      	bne.n	8009a2e <USBD_SetAddress+0x76>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d12d      	bne.n	8009a2e <USBD_SetAddress+0x76>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80099d8:	d829      	bhi.n	8009a2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	885b      	ldrh	r3, [r3, #2]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d104      	bne.n	80099fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9a3 	bl	8009d40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fa:	e01d      	b.n	8009a38 <USBD_SetAddress+0x80>
=======
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	889b      	ldrh	r3, [r3, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d131      	bne.n	8009ad6 <USBD_SetAddress+0x76>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	88db      	ldrh	r3, [r3, #6]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d12d      	bne.n	8009ad6 <USBD_SetAddress+0x76>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a80:	d829      	bhi.n	8009ad6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	885b      	ldrh	r3, [r3, #2]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d104      	bne.n	8009aa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f9a3 	bl	8009de8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa2:	e01d      	b.n	8009ae0 <USBD_SetAddress+0x80>
>>>>>>> Stashed changes
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< Updated upstream
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	7bfa      	ldrb	r2, [r7, #15]
 8009a00:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f003 fc93 	bl	800d334 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa61 	bl	8009ed6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d004      	beq.n	8009a24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a22:	e009      	b.n	8009a38 <USBD_SetAddress+0x80>
=======
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7bfa      	ldrb	r2, [r7, #15]
 8009aa8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f004 f8cf 	bl	800dc54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa61 	bl	8009f7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d004      	beq.n	8009acc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aca:	e009      	b.n	8009ae0 <USBD_SetAddress+0x80>
>>>>>>> Stashed changes
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< Updated upstream
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2c:	e004      	b.n	8009a38 <USBD_SetAddress+0x80>
=======
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad4:	e004      	b.n	8009ae0 <USBD_SetAddress+0x80>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< Updated upstream
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f985 	bl	8009d40 <USBD_CtlError>
  }
}
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_SetConfig>:
=======
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f985 	bl	8009de8 <USBD_CtlError>
  }
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_SetConfig>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	4b4c      	ldr	r3, [pc, #304]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009a56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a58:	4b4b      	ldr	r3, [pc, #300]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d905      	bls.n	8009a6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f96c 	bl	8009d40 <USBD_CtlError>
    return USBD_FAIL;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e088      	b.n	8009b7e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d002      	beq.n	8009a7e <USBD_SetConfig+0x3e>
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d025      	beq.n	8009ac8 <USBD_SetConfig+0x88>
 8009a7c:	e071      	b.n	8009b62 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a7e:	4b42      	ldr	r3, [pc, #264]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d01c      	beq.n	8009ac0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009a86:	4b40      	ldr	r3, [pc, #256]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a90:	4b3d      	ldr	r3, [pc, #244]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff f990 	bl	8008dbc <USBD_SetClassConfig>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f949 	bl	8009d40 <USBD_CtlError>
=======
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	885b      	ldrh	r3, [r3, #2]
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	4b4c      	ldr	r3, [pc, #304]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009afe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b00:	4b4b      	ldr	r3, [pc, #300]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d905      	bls.n	8009b14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f96c 	bl	8009de8 <USBD_CtlError>
    return USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e088      	b.n	8009c26 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d002      	beq.n	8009b26 <USBD_SetConfig+0x3e>
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d025      	beq.n	8009b70 <USBD_SetConfig+0x88>
 8009b24:	e071      	b.n	8009c0a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b26:	4b42      	ldr	r3, [pc, #264]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d01c      	beq.n	8009b68 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009b2e:	4b40      	ldr	r3, [pc, #256]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b38:	4b3d      	ldr	r3, [pc, #244]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff f990 	bl	8008e64 <USBD_SetClassConfig>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d004      	beq.n	8009b58 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f949 	bl	8009de8 <USBD_CtlError>
>>>>>>> Stashed changes
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< Updated upstream
 8009aae:	e065      	b.n	8009b7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fa10 	bl	8009ed6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2203      	movs	r2, #3
 8009aba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009abe:	e05d      	b.n	8009b7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fa08 	bl	8009ed6 <USBD_CtlSendStatus>
      break;
 8009ac6:	e059      	b.n	8009b7c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d112      	bne.n	8009af6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ae2:	4b29      	ldr	r3, [pc, #164]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7ff f983 	bl	8008df4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f9f1 	bl	8009ed6 <USBD_CtlSendStatus>
=======
 8009b56:	e065      	b.n	8009c24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fa10 	bl	8009f7e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2203      	movs	r2, #3
 8009b62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b66:	e05d      	b.n	8009c24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fa08 	bl	8009f7e <USBD_CtlSendStatus>
      break;
 8009b6e:	e059      	b.n	8009c24 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b70:	4b2f      	ldr	r3, [pc, #188]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d112      	bne.n	8009b9e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009b80:	4b2b      	ldr	r3, [pc, #172]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b8a:	4b29      	ldr	r3, [pc, #164]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff f983 	bl	8008e9c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f9f1 	bl	8009f7e <USBD_CtlSendStatus>
>>>>>>> Stashed changes
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< Updated upstream
 8009af4:	e042      	b.n	8009b7c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009af6:	4b24      	ldr	r3, [pc, #144]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d02a      	beq.n	8009b5a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff f971 	bl	8008df4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b12:	4b1d      	ldr	r3, [pc, #116]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff f94a 	bl	8008dbc <USBD_SetClassConfig>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00f      	beq.n	8009b52 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f903 	bl	8009d40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff f956 	bl	8008df4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b50:	e014      	b.n	8009b7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f9bf 	bl	8009ed6 <USBD_CtlSendStatus>
      break;
 8009b58:	e010      	b.n	8009b7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f9bb 	bl	8009ed6 <USBD_CtlSendStatus>
      break;
 8009b60:	e00c      	b.n	8009b7c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f8eb 	bl	8009d40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b6a:	4b07      	ldr	r3, [pc, #28]	@ (8009b88 <USBD_SetConfig+0x148>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff f93f 	bl	8008df4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b76:	2303      	movs	r3, #3
 8009b78:	73fb      	strb	r3, [r7, #15]
      break;
 8009b7a:	bf00      	nop
  }

  return ret;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200003b8 	.word	0x200003b8

08009b8c <USBD_GetConfig>:
=======
 8009b9c:	e042      	b.n	8009c24 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009b9e:	4b24      	ldr	r3, [pc, #144]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d02a      	beq.n	8009c02 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff f971 	bl	8008e9c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bba:	4b1d      	ldr	r3, [pc, #116]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff f94a 	bl	8008e64 <USBD_SetClassConfig>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00f      	beq.n	8009bfa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f903 	bl	8009de8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff f956 	bl	8008e9c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009bf8:	e014      	b.n	8009c24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f9bf 	bl	8009f7e <USBD_CtlSendStatus>
      break;
 8009c00:	e010      	b.n	8009c24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f9bb 	bl	8009f7e <USBD_CtlSendStatus>
      break;
 8009c08:	e00c      	b.n	8009c24 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f8eb 	bl	8009de8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c12:	4b07      	ldr	r3, [pc, #28]	@ (8009c30 <USBD_SetConfig+0x148>)
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff f93f 	bl	8008e9c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	73fb      	strb	r3, [r7, #15]
      break;
 8009c22:	bf00      	nop
  }

  return ret;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200003cc 	.word	0x200003cc

08009c34 <USBD_GetConfig>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	88db      	ldrh	r3, [r3, #6]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d004      	beq.n	8009ba8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f8cd 	bl	8009d40 <USBD_CtlError>
=======
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	88db      	ldrh	r3, [r3, #6]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d004      	beq.n	8009c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f8cd 	bl	8009de8 <USBD_CtlError>
>>>>>>> Stashed changes
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< Updated upstream
 8009ba6:	e023      	b.n	8009bf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	dc02      	bgt.n	8009bba <USBD_GetConfig+0x2e>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dc03      	bgt.n	8009bc0 <USBD_GetConfig+0x34>
 8009bb8:	e015      	b.n	8009be6 <USBD_GetConfig+0x5a>
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d00b      	beq.n	8009bd6 <USBD_GetConfig+0x4a>
 8009bbe:	e012      	b.n	8009be6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f927 	bl	8009e22 <USBD_CtlSendData>
        break;
 8009bd4:	e00c      	b.n	8009bf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f91f 	bl	8009e22 <USBD_CtlSendData>
        break;
 8009be4:	e004      	b.n	8009bf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f8a9 	bl	8009d40 <USBD_CtlError>
        break;
 8009bee:	bf00      	nop
}
 8009bf0:	bf00      	nop
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_GetStatus>:
=======
 8009c4e:	e023      	b.n	8009c98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	dc02      	bgt.n	8009c62 <USBD_GetConfig+0x2e>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dc03      	bgt.n	8009c68 <USBD_GetConfig+0x34>
 8009c60:	e015      	b.n	8009c8e <USBD_GetConfig+0x5a>
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d00b      	beq.n	8009c7e <USBD_GetConfig+0x4a>
 8009c66:	e012      	b.n	8009c8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3308      	adds	r3, #8
 8009c72:	2201      	movs	r2, #1
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f927 	bl	8009eca <USBD_CtlSendData>
        break;
 8009c7c:	e00c      	b.n	8009c98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3304      	adds	r3, #4
 8009c82:	2201      	movs	r2, #1
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f91f 	bl	8009eca <USBD_CtlSendData>
        break;
 8009c8c:	e004      	b.n	8009c98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f8a9 	bl	8009de8 <USBD_CtlError>
        break;
 8009c96:	bf00      	nop
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_GetStatus>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d81e      	bhi.n	8009c4e <USBD_GetStatus+0x56>
=======
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d81e      	bhi.n	8009cf6 <USBD_GetStatus+0x56>
>>>>>>> Stashed changes
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< Updated upstream
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	88db      	ldrh	r3, [r3, #6]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d004      	beq.n	8009c22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f890 	bl	8009d40 <USBD_CtlError>
        break;
 8009c20:	e01a      	b.n	8009c58 <USBD_GetStatus+0x60>
=======
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	88db      	ldrh	r3, [r3, #6]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d004      	beq.n	8009cca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f890 	bl	8009de8 <USBD_CtlError>
        break;
 8009cc8:	e01a      	b.n	8009d00 <USBD_GetStatus+0x60>
>>>>>>> Stashed changes
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< Updated upstream
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	60da      	str	r2, [r3, #12]
=======
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
<<<<<<< Updated upstream
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	f043 0202 	orr.w	r2, r3, #2
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	330c      	adds	r3, #12
 8009c42:	2202      	movs	r2, #2
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f8eb 	bl	8009e22 <USBD_CtlSendData>
      break;
 8009c4c:	e004      	b.n	8009c58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f875 	bl	8009d40 <USBD_CtlError>
      break;
 8009c56:	bf00      	nop
  }
}
 8009c58:	bf00      	nop
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_SetFeature>:
=======
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f043 0202 	orr.w	r2, r3, #2
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	330c      	adds	r3, #12
 8009cea:	2202      	movs	r2, #2
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f8eb 	bl	8009eca <USBD_CtlSendData>
      break;
 8009cf4:	e004      	b.n	8009d00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f875 	bl	8009de8 <USBD_CtlError>
      break;
 8009cfe:	bf00      	nop
  }
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_SetFeature>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	885b      	ldrh	r3, [r3, #2]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d106      	bne.n	8009c80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f92b 	bl	8009ed6 <USBD_CtlSendStatus>
  }
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_ClrFeature>:
=======
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d106      	bne.n	8009d28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f92b 	bl	8009f7e <USBD_CtlSendStatus>
  }
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_ClrFeature>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d80b      	bhi.n	8009cb8 <USBD_ClrFeature+0x30>
=======
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d80b      	bhi.n	8009d60 <USBD_ClrFeature+0x30>
>>>>>>> Stashed changes
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< Updated upstream
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	885b      	ldrh	r3, [r3, #2]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d10c      	bne.n	8009cc2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f910 	bl	8009ed6 <USBD_CtlSendStatus>
      }
      break;
 8009cb6:	e004      	b.n	8009cc2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f840 	bl	8009d40 <USBD_CtlError>
      break;
 8009cc0:	e000      	b.n	8009cc4 <USBD_ClrFeature+0x3c>
      break;
 8009cc2:	bf00      	nop
  }
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_ParseSetupRequest>:
=======
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	885b      	ldrh	r3, [r3, #2]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d10c      	bne.n	8009d6a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f910 	bl	8009f7e <USBD_CtlSendStatus>
      }
      break;
 8009d5e:	e004      	b.n	8009d6a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f840 	bl	8009de8 <USBD_CtlError>
      break;
 8009d68:	e000      	b.n	8009d6c <USBD_ClrFeature+0x3c>
      break;
 8009d6a:	bf00      	nop
  }
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_ParseSetupRequest>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< Updated upstream
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	781a      	ldrb	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	781a      	ldrb	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7ff fa90 	bl	800921c <SWAPBYTE>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	461a      	mov	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3301      	adds	r3, #1
 8009d08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff fa83 	bl	800921c <SWAPBYTE>
 8009d16:	4603      	mov	r3, r0
 8009d18:	461a      	mov	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3301      	adds	r3, #1
 8009d28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f7ff fa76 	bl	800921c <SWAPBYTE>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	80da      	strh	r2, [r3, #6]
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_CtlError>:
=======
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	781a      	ldrb	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	781a      	ldrb	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fa90 	bl	80092c4 <SWAPBYTE>
 8009da4:	4603      	mov	r3, r0
 8009da6:	461a      	mov	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7ff fa83 	bl	80092c4 <SWAPBYTE>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7ff fa76 	bl	80092c4 <SWAPBYTE>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	80da      	strh	r2, [r3, #6]
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_CtlError>:
>>>>>>> Stashed changes
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< Updated upstream
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d4a:	2180      	movs	r1, #128	@ 0x80
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f003 fa87 	bl	800d260 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d52:	2100      	movs	r1, #0
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f003 fa83 	bl	800d260 <USBD_LL_StallEP>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_GetString>:
=======
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009df2:	2180      	movs	r1, #128	@ 0x80
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f003 fec3 	bl	800db80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f003 febf 	bl	800db80 <USBD_LL_StallEP>
}
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <USBD_GetString>:
>>>>>>> Stashed changes
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< Updated upstream
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b086      	sub	sp, #24
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d036      	beq.n	8009de6 <USBD_GetString+0x84>
=======
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b086      	sub	sp, #24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d036      	beq.n	8009e8e <USBD_GetString+0x84>
>>>>>>> Stashed changes
  {
    return;
  }

  pdesc = desc;
<<<<<<< Updated upstream
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d7c:	6938      	ldr	r0, [r7, #16]
 8009d7e:	f000 f836 	bl	8009dee <USBD_GetLen>
 8009d82:	4603      	mov	r3, r0
 8009d84:	3301      	adds	r3, #1
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	4413      	add	r3, r2
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	7812      	ldrb	r2, [r2, #0]
 8009d9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	4413      	add	r3, r2
 8009da8:	2203      	movs	r2, #3
 8009daa:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	3301      	adds	r3, #1
 8009db0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009db2:	e013      	b.n	8009ddc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4413      	add	r3, r2
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	7812      	ldrb	r2, [r2, #0]
 8009dbe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	613b      	str	r3, [r7, #16]
    idx++;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]
    idx++;
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e7      	bne.n	8009db4 <USBD_GetString+0x52>
 8009de4:	e000      	b.n	8009de8 <USBD_GetString+0x86>
    return;
 8009de6:	bf00      	nop
  }
}
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_GetLen>:
=======
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e24:	6938      	ldr	r0, [r7, #16]
 8009e26:	f000 f836 	bl	8009e96 <USBD_GetLen>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	3301      	adds	r3, #1
 8009e48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	4413      	add	r3, r2
 8009e50:	2203      	movs	r2, #3
 8009e52:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	3301      	adds	r3, #1
 8009e58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e5a:	e013      	b.n	8009e84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4413      	add	r3, r2
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	7812      	ldrb	r2, [r2, #0]
 8009e66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	613b      	str	r3, [r7, #16]
    idx++;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	3301      	adds	r3, #1
 8009e72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	4413      	add	r3, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	3301      	adds	r3, #1
 8009e82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e7      	bne.n	8009e5c <USBD_GetString+0x52>
 8009e8c:	e000      	b.n	8009e90 <USBD_GetString+0x86>
    return;
 8009e8e:	bf00      	nop
  }
}
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_GetLen>:
>>>>>>> Stashed changes
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< Updated upstream
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dfe:	e005      	b.n	8009e0c <USBD_GetLen+0x1e>
  {
    len++;
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	3301      	adds	r3, #1
 8009e04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1f5      	bne.n	8009e00 <USBD_GetLen+0x12>
  }

  return len;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USBD_CtlSendData>:
=======
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ea6:	e005      	b.n	8009eb4 <USBD_GetLen+0x1e>
  {
    len++;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1f5      	bne.n	8009ea8 <USBD_GetLen+0x12>
  }

  return len;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <USBD_CtlSendData>:
>>>>>>> Stashed changes
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2202      	movs	r2, #2
 8009e32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	619a      	str	r2, [r3, #24]
=======
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
<<<<<<< Updated upstream
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	61da      	str	r2, [r3, #28]
=======
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
<<<<<<< Updated upstream
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	2100      	movs	r1, #0
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f003 fa92 	bl	800d372 <USBD_LL_Transmit>

  return USBD_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_CtlContinueSendData>:
=======
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	2100      	movs	r1, #0
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f003 fece 	bl	800dc92 <USBD_LL_Transmit>

  return USBD_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_CtlContinueSendData>:
>>>>>>> Stashed changes
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f003 fa81 	bl	800d372 <USBD_LL_Transmit>

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_CtlPrepareRx>:
=======
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	2100      	movs	r1, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f003 febd 	bl	800dc92 <USBD_LL_Transmit>

  return USBD_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_CtlPrepareRx>:
>>>>>>> Stashed changes
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2203      	movs	r2, #3
 8009e8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
=======
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2203      	movs	r2, #3
 8009f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
>>>>>>> Stashed changes

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
<<<<<<< Updated upstream
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
=======
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
>>>>>>> Stashed changes
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
<<<<<<< Updated upstream
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f003 fa85 	bl	800d3b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_CtlContinueRx>:
=======
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f003 fec1 	bl	800dcd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_CtlContinueRx>:
>>>>>>> Stashed changes
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
<<<<<<< Updated upstream
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f003 fa74 	bl	800d3b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_CtlSendStatus>:
=======
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f003 feb0 	bl	800dcd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBD_CtlSendStatus>:
>>>>>>> Stashed changes
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f003 fa40 	bl	800d372 <USBD_LL_Transmit>

  return USBD_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_CtlReceiveStatus>:
=======
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2204      	movs	r2, #4
 8009f8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f8e:	2300      	movs	r3, #0
 8009f90:	2200      	movs	r2, #0
 8009f92:	2100      	movs	r1, #0
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f003 fe7c 	bl	800dc92 <USBD_LL_Transmit>

  return USBD_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_CtlReceiveStatus>:
>>>>>>> Stashed changes
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2205      	movs	r2, #5
 8009f08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f003 fa4e 	bl	800d3b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <__NVIC_SetPriority>:
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	db0a      	blt.n	8009f4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	490c      	ldr	r1, [pc, #48]	@ (8009f70 <__NVIC_SetPriority+0x4c>)
 8009f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f42:	0112      	lsls	r2, r2, #4
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	440b      	add	r3, r1
 8009f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009f4c:	e00a      	b.n	8009f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	4908      	ldr	r1, [pc, #32]	@ (8009f74 <__NVIC_SetPriority+0x50>)
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	f003 030f 	and.w	r3, r3, #15
 8009f5a:	3b04      	subs	r3, #4
 8009f5c:	0112      	lsls	r2, r2, #4
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	440b      	add	r3, r1
 8009f62:	761a      	strb	r2, [r3, #24]
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	e000e100 	.word	0xe000e100
 8009f74:	e000ed00 	.word	0xe000ed00

08009f78 <SysTick_Handler>:
=======
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2205      	movs	r2, #5
 8009fb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2100      	movs	r1, #0
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f003 fe8a 	bl	800dcd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <__NVIC_SetPriority>:
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	db0a      	blt.n	8009ff6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	490c      	ldr	r1, [pc, #48]	@ (800a018 <__NVIC_SetPriority+0x4c>)
 8009fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fea:	0112      	lsls	r2, r2, #4
 8009fec:	b2d2      	uxtb	r2, r2
 8009fee:	440b      	add	r3, r1
 8009ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ff4:	e00a      	b.n	800a00c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	4908      	ldr	r1, [pc, #32]	@ (800a01c <__NVIC_SetPriority+0x50>)
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	f003 030f 	and.w	r3, r3, #15
 800a002:	3b04      	subs	r3, #4
 800a004:	0112      	lsls	r2, r2, #4
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	440b      	add	r3, r1
 800a00a:	761a      	strb	r2, [r3, #24]
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	e000e100 	.word	0xe000e100
 800a01c:	e000ed00 	.word	0xe000ed00

0800a020 <SysTick_Handler>:
>>>>>>> Stashed changes

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< Updated upstream
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f7c:	4b05      	ldr	r3, [pc, #20]	@ (8009f94 <SysTick_Handler+0x1c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f80:	f001 fd46 	bl	800ba10 <xTaskGetSchedulerState>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d001      	beq.n	8009f8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f8a:	f002 fb3d 	bl	800c608 <xPortSysTickHandler>
  }
}
 8009f8e:	bf00      	nop
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	e000e010 	.word	0xe000e010

08009f98 <SVC_Setup>:
=======
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a024:	4b05      	ldr	r3, [pc, #20]	@ (800a03c <SysTick_Handler+0x1c>)
 800a026:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a028:	f002 f880 	bl	800c12c <xTaskGetSchedulerState>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d001      	beq.n	800a036 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a032:	f002 ff79 	bl	800cf28 <xPortSysTickHandler>
  }
}
 800a036:	bf00      	nop
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	e000e010 	.word	0xe000e010

0800a040 <SVC_Setup>:
>>>>>>> Stashed changes
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< Updated upstream
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
=======
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< Updated upstream
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	f06f 0004 	mvn.w	r0, #4
 8009fa2:	f7ff ffbf 	bl	8009f24 <__NVIC_SetPriority>
#endif
}
 8009fa6:	bf00      	nop
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <osKernelInitialize>:
=======
 800a044:	2100      	movs	r1, #0
 800a046:	f06f 0004 	mvn.w	r0, #4
 800a04a:	f7ff ffbf 	bl	8009fcc <__NVIC_SetPriority>
#endif
}
 800a04e:	bf00      	nop
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <osKernelInitialize>:
>>>>>>> Stashed changes
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< Updated upstream
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fb2:	f3ef 8305 	mrs	r3, IPSR
 8009fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8009fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009fbe:	f06f 0305 	mvn.w	r3, #5
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	e00c      	b.n	8009fe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff0 <osKernelInitialize+0x44>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d105      	bne.n	8009fda <osKernelInitialize+0x2e>
=======
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a05a:	f3ef 8305 	mrs	r3, IPSR
 800a05e:	603b      	str	r3, [r7, #0]
  return(result);
 800a060:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a066:	f06f 0305 	mvn.w	r3, #5
 800a06a:	607b      	str	r3, [r7, #4]
 800a06c:	e00c      	b.n	800a088 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a06e:	4b0a      	ldr	r3, [pc, #40]	@ (800a098 <osKernelInitialize+0x44>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d105      	bne.n	800a082 <osKernelInitialize+0x2e>
>>>>>>> Stashed changes
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< Updated upstream
 8009fce:	4b08      	ldr	r3, [pc, #32]	@ (8009ff0 <osKernelInitialize+0x44>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	e002      	b.n	8009fe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009fda:	f04f 33ff 	mov.w	r3, #4294967295
 8009fde:	607b      	str	r3, [r7, #4]
=======
 800a076:	4b08      	ldr	r3, [pc, #32]	@ (800a098 <osKernelInitialize+0x44>)
 800a078:	2201      	movs	r2, #1
 800a07a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	607b      	str	r3, [r7, #4]
 800a080:	e002      	b.n	800a088 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a082:	f04f 33ff 	mov.w	r3, #4294967295
 800a086:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 8009fe0:	687b      	ldr	r3, [r7, #4]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	200003bc 	.word	0x200003bc

08009ff4 <osKernelStart>:
=======
 800a088:	687b      	ldr	r3, [r7, #4]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	200003d0 	.word	0x200003d0

0800a09c <osKernelStart>:
>>>>>>> Stashed changes
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< Updated upstream
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ffa:	f3ef 8305 	mrs	r3, IPSR
 8009ffe:	603b      	str	r3, [r7, #0]
  return(result);
 800a000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a006:	f06f 0305 	mvn.w	r3, #5
 800a00a:	607b      	str	r3, [r7, #4]
 800a00c:	e010      	b.n	800a030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a00e:	4b0b      	ldr	r3, [pc, #44]	@ (800a03c <osKernelStart+0x48>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d109      	bne.n	800a02a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a016:	f7ff ffbf 	bl	8009f98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a01a:	4b08      	ldr	r3, [pc, #32]	@ (800a03c <osKernelStart+0x48>)
 800a01c:	2202      	movs	r2, #2
 800a01e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a020:	f001 f892 	bl	800b148 <vTaskStartScheduler>
      stat = osOK;
 800a024:	2300      	movs	r3, #0
 800a026:	607b      	str	r3, [r7, #4]
 800a028:	e002      	b.n	800a030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a02a:	f04f 33ff 	mov.w	r3, #4294967295
 800a02e:	607b      	str	r3, [r7, #4]
=======
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a2:	f3ef 8305 	mrs	r3, IPSR
 800a0a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a0a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0ae:	f06f 0305 	mvn.w	r3, #5
 800a0b2:	607b      	str	r3, [r7, #4]
 800a0b4:	e010      	b.n	800a0d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e4 <osKernelStart+0x48>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d109      	bne.n	800a0d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0be:	f7ff ffbf 	bl	800a040 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0c2:	4b08      	ldr	r3, [pc, #32]	@ (800a0e4 <osKernelStart+0x48>)
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0c8:	f001 fbbc 	bl	800b844 <vTaskStartScheduler>
      stat = osOK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	e002      	b.n	800a0d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d6:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 800a030:	687b      	ldr	r3, [r7, #4]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200003bc 	.word	0x200003bc

0800a040 <osThreadNew>:
=======
 800a0d8:	687b      	ldr	r3, [r7, #4]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200003d0 	.word	0x200003d0

0800a0e8 <osThreadNew>:
>>>>>>> Stashed changes
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< Updated upstream
 800a040:	b580      	push	{r7, lr}
 800a042:	b08e      	sub	sp, #56	@ 0x38
 800a044:	af04      	add	r7, sp, #16
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
=======
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08e      	sub	sp, #56	@ 0x38
 800a0ec:	af04      	add	r7, sp, #16
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< Updated upstream
 800a04c:	2300      	movs	r3, #0
 800a04e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a050:	f3ef 8305 	mrs	r3, IPSR
 800a054:	617b      	str	r3, [r7, #20]
  return(result);
 800a056:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d17f      	bne.n	800a15c <osThreadNew+0x11c>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d07c      	beq.n	800a15c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a062:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800a066:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a068:	2318      	movs	r3, #24
 800a06a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a06c:	2300      	movs	r3, #0
 800a06e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a070:	f04f 33ff 	mov.w	r3, #4294967295
 800a074:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d045      	beq.n	800a108 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <osThreadNew+0x4a>
        name = attr->name;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d008      	beq.n	800a0b0 <osThreadNew+0x70>
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	2b38      	cmp	r3, #56	@ 0x38
 800a0a2:	d805      	bhi.n	800a0b0 <osThreadNew+0x70>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <osThreadNew+0x74>
        return (NULL);
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	e054      	b.n	800a15e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	089b      	lsrs	r3, r3, #2
 800a0c2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00e      	beq.n	800a0ea <osThreadNew+0xaa>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	2ba7      	cmp	r3, #167	@ 0xa7
 800a0d2:	d90a      	bls.n	800a0ea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d006      	beq.n	800a0ea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <osThreadNew+0xaa>
        mem = 1;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	61bb      	str	r3, [r7, #24]
 800a0e8:	e010      	b.n	800a10c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10c      	bne.n	800a10c <osThreadNew+0xcc>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d108      	bne.n	800a10c <osThreadNew+0xcc>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d104      	bne.n	800a10c <osThreadNew+0xcc>
          mem = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	61bb      	str	r3, [r7, #24]
 800a106:	e001      	b.n	800a10c <osThreadNew+0xcc>
=======
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0f8:	f3ef 8305 	mrs	r3, IPSR
 800a0fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a0fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a100:	2b00      	cmp	r3, #0
 800a102:	d17f      	bne.n	800a204 <osThreadNew+0x11c>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d07c      	beq.n	800a204 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a10a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800a10e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a110:	2318      	movs	r3, #24
 800a112:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a118:	f04f 33ff 	mov.w	r3, #4294967295
 800a11c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d045      	beq.n	800a1b0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <osThreadNew+0x4a>
        name = attr->name;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d008      	beq.n	800a158 <osThreadNew+0x70>
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	2b38      	cmp	r3, #56	@ 0x38
 800a14a:	d805      	bhi.n	800a158 <osThreadNew+0x70>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <osThreadNew+0x74>
        return (NULL);
 800a158:	2300      	movs	r3, #0
 800a15a:	e054      	b.n	800a206 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	089b      	lsrs	r3, r3, #2
 800a16a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00e      	beq.n	800a192 <osThreadNew+0xaa>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	2ba7      	cmp	r3, #167	@ 0xa7
 800a17a:	d90a      	bls.n	800a192 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a180:	2b00      	cmp	r3, #0
 800a182:	d006      	beq.n	800a192 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <osThreadNew+0xaa>
        mem = 1;
 800a18c:	2301      	movs	r3, #1
 800a18e:	61bb      	str	r3, [r7, #24]
 800a190:	e010      	b.n	800a1b4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10c      	bne.n	800a1b4 <osThreadNew+0xcc>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d108      	bne.n	800a1b4 <osThreadNew+0xcc>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <osThreadNew+0xcc>
          mem = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	61bb      	str	r3, [r7, #24]
 800a1ae:	e001      	b.n	800a1b4 <osThreadNew+0xcc>
>>>>>>> Stashed changes
        }
      }
    }
    else {
      mem = 0;
<<<<<<< Updated upstream
 800a108:	2300      	movs	r3, #0
 800a10a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d110      	bne.n	800a134 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a11a:	9202      	str	r2, [sp, #8]
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6a3a      	ldr	r2, [r7, #32]
 800a126:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fe19 	bl	800ad60 <xTaskCreateStatic>
 800a12e:	4603      	mov	r3, r0
 800a130:	613b      	str	r3, [r7, #16]
 800a132:	e013      	b.n	800a15c <osThreadNew+0x11c>
=======
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d110      	bne.n	800a1dc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1c2:	9202      	str	r2, [sp, #8]
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	6a3a      	ldr	r2, [r7, #32]
 800a1ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f001 f943 	bl	800b45c <xTaskCreateStatic>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	613b      	str	r3, [r7, #16]
 800a1da:	e013      	b.n	800a204 <osThreadNew+0x11c>
>>>>>>> Stashed changes
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< Updated upstream
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d110      	bne.n	800a15c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	f107 0310 	add.w	r3, r7, #16
 800a142:	9301      	str	r3, [sp, #4]
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fe67 	bl	800ae20 <xTaskCreate>
 800a152:	4603      	mov	r3, r0
 800a154:	2b01      	cmp	r3, #1
 800a156:	d001      	beq.n	800a15c <osThreadNew+0x11c>
            hTask = NULL;
 800a158:	2300      	movs	r3, #0
 800a15a:	613b      	str	r3, [r7, #16]
=======
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d110      	bne.n	800a204 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	f107 0310 	add.w	r3, r7, #16
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f001 f991 	bl	800b51c <xTaskCreate>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d001      	beq.n	800a204 <osThreadNew+0x11c>
            hTask = NULL;
 800a200:	2300      	movs	r3, #0
 800a202:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< Updated upstream
 800a15c:	693b      	ldr	r3, [r7, #16]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3728      	adds	r7, #40	@ 0x28
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <osDelay>:
=======
 800a204:	693b      	ldr	r3, [r7, #16]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3728      	adds	r7, #40	@ 0x28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <osDelay>:
>>>>>>> Stashed changes
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< Updated upstream
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a16e:	f3ef 8305 	mrs	r3, IPSR
 800a172:	60bb      	str	r3, [r7, #8]
  return(result);
 800a174:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <osDelay+0x1c>
    stat = osErrorISR;
 800a17a:	f06f 0305 	mvn.w	r3, #5
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	e007      	b.n	800a192 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a182:	2300      	movs	r3, #0
 800a184:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 ffa5 	bl	800b0dc <vTaskDelay>
=======
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a216:	f3ef 8305 	mrs	r3, IPSR
 800a21a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a21c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <osDelay+0x1c>
    stat = osErrorISR;
 800a222:	f06f 0305 	mvn.w	r3, #5
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	e007      	b.n	800a23a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <osDelay+0x2c>
      vTaskDelay(ticks);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f001 facf 	bl	800b7d8 <vTaskDelay>
>>>>>>> Stashed changes
    }
  }

  return (stat);
<<<<<<< Updated upstream
 800a192:	68fb      	ldr	r3, [r7, #12]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <vApplicationGetIdleTaskMemory>:
=======
 800a23a:	68fb      	ldr	r3, [r7, #12]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a24c:	2300      	movs	r3, #0
 800a24e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a250:	f3ef 8305 	mrs	r3, IPSR
 800a254:	60bb      	str	r3, [r7, #8]
  return(result);
 800a256:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d174      	bne.n	800a346 <osMutexNew+0x102>
    if (attr != NULL) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <osMutexNew+0x26>
      type = attr->attr_bits;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	61bb      	str	r3, [r7, #24]
 800a268:	e001      	b.n	800a26e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <osMutexNew+0x3a>
      rmtx = 1U;
 800a278:	2301      	movs	r3, #1
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e001      	b.n	800a282 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	f003 0308 	and.w	r3, r3, #8
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d15c      	bne.n	800a346 <osMutexNew+0x102>
      mem = -1;
 800a28c:	f04f 33ff 	mov.w	r3, #4294967295
 800a290:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d015      	beq.n	800a2c4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d006      	beq.n	800a2ae <osMutexNew+0x6a>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	2b4f      	cmp	r3, #79	@ 0x4f
 800a2a6:	d902      	bls.n	800a2ae <osMutexNew+0x6a>
          mem = 1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	613b      	str	r3, [r7, #16]
 800a2ac:	e00c      	b.n	800a2c8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d108      	bne.n	800a2c8 <osMutexNew+0x84>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d104      	bne.n	800a2c8 <osMutexNew+0x84>
            mem = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	613b      	str	r3, [r7, #16]
 800a2c2:	e001      	b.n	800a2c8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d112      	bne.n	800a2f4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	2004      	movs	r0, #4
 800a2dc:	f000 fb1f 	bl	800a91e <xQueueCreateMutexStatic>
 800a2e0:	61f8      	str	r0, [r7, #28]
 800a2e2:	e016      	b.n	800a312 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	f000 fb17 	bl	800a91e <xQueueCreateMutexStatic>
 800a2f0:	61f8      	str	r0, [r7, #28]
 800a2f2:	e00e      	b.n	800a312 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10b      	bne.n	800a312 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a300:	2004      	movs	r0, #4
 800a302:	f000 faf4 	bl	800a8ee <xQueueCreateMutex>
 800a306:	61f8      	str	r0, [r7, #28]
 800a308:	e003      	b.n	800a312 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a30a:	2001      	movs	r0, #1
 800a30c:	f000 faef 	bl	800a8ee <xQueueCreateMutex>
 800a310:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00c      	beq.n	800a332 <osMutexNew+0xee>
        if (attr != NULL) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <osMutexNew+0xe2>
          name = attr->name;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	e001      	b.n	800a32a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a32a:	68f9      	ldr	r1, [r7, #12]
 800a32c:	69f8      	ldr	r0, [r7, #28]
 800a32e:	f001 f837 	bl	800b3a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d006      	beq.n	800a346 <osMutexNew+0x102>
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	f043 0301 	orr.w	r3, r3, #1
 800a344:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a346:	69fb      	ldr	r3, [r7, #28]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3720      	adds	r7, #32
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f023 0301 	bic.w	r3, r3, #1
 800a360:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a36e:	f3ef 8305 	mrs	r3, IPSR
 800a372:	60bb      	str	r3, [r7, #8]
  return(result);
 800a374:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a37a:	f06f 0305 	mvn.w	r3, #5
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e02c      	b.n	800a3dc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d103      	bne.n	800a390 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a388:	f06f 0303 	mvn.w	r3, #3
 800a38c:	617b      	str	r3, [r7, #20]
 800a38e:	e025      	b.n	800a3dc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d011      	beq.n	800a3ba <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6938      	ldr	r0, [r7, #16]
 800a39a:	f000 fb10 	bl	800a9be <xQueueTakeMutexRecursive>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d01b      	beq.n	800a3dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a3aa:	f06f 0301 	mvn.w	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	e014      	b.n	800a3dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a3b2:	f06f 0302 	mvn.w	r3, #2
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e010      	b.n	800a3dc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6938      	ldr	r0, [r7, #16]
 800a3be:	f000 fdb7 	bl	800af30 <xQueueSemaphoreTake>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d009      	beq.n	800a3dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a3ce:	f06f 0301 	mvn.w	r3, #1
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e002      	b.n	800a3dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a3d6:	f06f 0302 	mvn.w	r3, #2
 800a3da:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a3dc:	697b      	ldr	r3, [r7, #20]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b086      	sub	sp, #24
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a402:	f3ef 8305 	mrs	r3, IPSR
 800a406:	60bb      	str	r3, [r7, #8]
  return(result);
 800a408:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a40e:	f06f 0305 	mvn.w	r3, #5
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e01f      	b.n	800a456 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a41c:	f06f 0303 	mvn.w	r3, #3
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	e018      	b.n	800a456 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d009      	beq.n	800a43e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f000 fa92 	bl	800a954 <xQueueGiveMutexRecursive>
 800a430:	4603      	mov	r3, r0
 800a432:	2b01      	cmp	r3, #1
 800a434:	d00f      	beq.n	800a456 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a436:	f06f 0302 	mvn.w	r3, #2
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	e00b      	b.n	800a456 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a43e:	2300      	movs	r3, #0
 800a440:	2200      	movs	r2, #0
 800a442:	2100      	movs	r1, #0
 800a444:	6938      	ldr	r0, [r7, #16]
 800a446:	f000 faf1 	bl	800aa2c <xQueueGenericSend>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d002      	beq.n	800a456 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a450:	f06f 0302 	mvn.w	r3, #2
 800a454:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a456:	697b      	ldr	r3, [r7, #20]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <vApplicationGetIdleTaskMemory>:
>>>>>>> Stashed changes

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< Updated upstream
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
=======
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< Updated upstream
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4a07      	ldr	r2, [pc, #28]	@ (800a1c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a1ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	4a06      	ldr	r2, [pc, #24]	@ (800a1cc <vApplicationGetIdleTaskMemory+0x30>)
 800a1b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800a1ba:	601a      	str	r2, [r3, #0]
}
 800a1bc:	bf00      	nop
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	200003c0 	.word	0x200003c0
 800a1cc:	20000468 	.word	0x20000468

0800a1d0 <vApplicationGetTimerTaskMemory>:
=======
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4a07      	ldr	r2, [pc, #28]	@ (800a48c <vApplicationGetIdleTaskMemory+0x2c>)
 800a470:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	4a06      	ldr	r2, [pc, #24]	@ (800a490 <vApplicationGetIdleTaskMemory+0x30>)
 800a476:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800a47e:	601a      	str	r2, [r3, #0]
}
 800a480:	bf00      	nop
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	200003d4 	.word	0x200003d4
 800a490:	2000047c 	.word	0x2000047c

0800a494 <vApplicationGetTimerTaskMemory>:
>>>>>>> Stashed changes

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< Updated upstream
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
=======
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< Updated upstream
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4a07      	ldr	r2, [pc, #28]	@ (800a1fc <vApplicationGetTimerTaskMemory+0x2c>)
 800a1e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	4a06      	ldr	r2, [pc, #24]	@ (800a200 <vApplicationGetTimerTaskMemory+0x30>)
 800a1e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800a1ee:	601a      	str	r2, [r3, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	20000f58 	.word	0x20000f58
 800a200:	20001000 	.word	0x20001000

0800a204 <vListInitialise>:
=======
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4a07      	ldr	r2, [pc, #28]	@ (800a4c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	4a06      	ldr	r2, [pc, #24]	@ (800a4c4 <vApplicationGetTimerTaskMemory+0x30>)
 800a4aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800a4b2:	601a      	str	r2, [r3, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	20000f6c 	.word	0x20000f6c
 800a4c4:	20001014 	.word	0x20001014

0800a4c8 <vListInitialise>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< Updated upstream
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
=======
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f103 0208 	add.w	r2, r3, #8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	605a      	str	r2, [r3, #4]
=======
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f103 0208 	add.w	r2, r3, #8
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< Updated upstream
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f04f 32ff 	mov.w	r2, #4294967295
 800a21c:	609a      	str	r2, [r3, #8]
=======
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e0:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f103 0208 	add.w	r2, r3, #8
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f103 0208 	add.w	r2, r3, #8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]
=======
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f103 0208 	add.w	r2, r3, #8
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f103 0208 	add.w	r2, r3, #8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< Updated upstream
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <vListInitialiseItem>:
=======
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <vListInitialiseItem>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< Updated upstream
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	611a      	str	r2, [r3, #16]
=======
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< Updated upstream
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <vListInsertEnd>:
=======
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <vListInsertEnd>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 800a25e:	b480      	push	{r7}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	60fb      	str	r3, [r7, #12]
=======
 800a522:	b480      	push	{r7}
 800a524:	b085      	sub	sp, #20
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< Updated upstream
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	609a      	str	r2, [r3, #8]
=======
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< Updated upstream
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	1c5a      	adds	r2, r3, #1
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
}
 800a29a:	bf00      	nop
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <vListInsert>:
=======
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	601a      	str	r2, [r3, #0]
}
 800a55e:	bf00      	nop
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <vListInsert>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	60bb      	str	r3, [r7, #8]
=======
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< Updated upstream
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2bc:	d103      	bne.n	800a2c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	e00c      	b.n	800a2e0 <vListInsert+0x3a>
=======
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a580:	d103      	bne.n	800a58a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	e00c      	b.n	800a5a4 <vListInsert+0x3a>
>>>>>>> Stashed changes
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< Updated upstream
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	e002      	b.n	800a2d4 <vListInsert+0x2e>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d2f6      	bcs.n	800a2ce <vListInsert+0x28>
=======
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3308      	adds	r3, #8
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e002      	b.n	800a598 <vListInsert+0x2e>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d2f6      	bcs.n	800a592 <vListInsert+0x28>
>>>>>>> Stashed changes
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< Updated upstream
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	605a      	str	r2, [r3, #4]
=======
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< Updated upstream
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	601a      	str	r2, [r3, #0]
}
 800a30c:	bf00      	nop
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <uxListRemove>:
=======
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	601a      	str	r2, [r3, #0]
}
 800a5d0:	bf00      	nop
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <uxListRemove>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< Updated upstream
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6892      	ldr	r2, [r2, #8]
 800a32e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6852      	ldr	r2, [r2, #4]
 800a338:	605a      	str	r2, [r3, #4]
=======
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6892      	ldr	r2, [r2, #8]
 800a5f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	6852      	ldr	r2, [r2, #4]
 800a5fc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< Updated upstream
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	429a      	cmp	r2, r3
 800a342:	d103      	bne.n	800a34c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	605a      	str	r2, [r3, #4]
=======
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d103      	bne.n	800a610 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< Updated upstream
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	1e5a      	subs	r2, r3, #1
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <xQueueGenericReset>:
=======
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	1e5a      	subs	r2, r3, #1
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <xQueueGenericReset>:
>>>>>>> Stashed changes
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< Updated upstream
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10b      	bne.n	800a398 <xQueueGenericReset+0x2c>
=======
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10b      	bne.n	800a65c <xQueueGenericReset+0x2c>
>>>>>>> Stashed changes

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 800a380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	60bb      	str	r3, [r7, #8]
=======
 800a644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< Updated upstream
 800a392:	bf00      	nop
 800a394:	bf00      	nop
 800a396:	e7fd      	b.n	800a394 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a398:	f002 f8a6 	bl	800c4e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3a4:	68f9      	ldr	r1, [r7, #12]
 800a3a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a3a8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ac:	441a      	add	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a3ce:	fb01 f303 	mul.w	r3, r1, r3
 800a3d2:	441a      	add	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	22ff      	movs	r2, #255	@ 0xff
 800a3dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	22ff      	movs	r2, #255	@ 0xff
 800a3e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d114      	bne.n	800a418 <xQueueGenericReset+0xac>
=======
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	e7fd      	b.n	800a658 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a65c:	f002 fbd4 	bl	800ce08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a668:	68f9      	ldr	r1, [r7, #12]
 800a66a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a66c:	fb01 f303 	mul.w	r3, r1, r3
 800a670:	441a      	add	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a68c:	3b01      	subs	r3, #1
 800a68e:	68f9      	ldr	r1, [r7, #12]
 800a690:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a692:	fb01 f303 	mul.w	r3, r1, r3
 800a696:	441a      	add	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	22ff      	movs	r2, #255	@ 0xff
 800a6a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	22ff      	movs	r2, #255	@ 0xff
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d114      	bne.n	800a6dc <xQueueGenericReset+0xac>
>>>>>>> Stashed changes
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d01a      	beq.n	800a42c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3310      	adds	r3, #16
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 f942 	bl	800b684 <xTaskRemoveFromEventList>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d012      	beq.n	800a42c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a406:	4b0d      	ldr	r3, [pc, #52]	@ (800a43c <xQueueGenericReset+0xd0>)
 800a408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	e009      	b.n	800a42c <xQueueGenericReset+0xc0>
=======
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01a      	beq.n	800a6f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f001 fb5e 	bl	800bd80 <xTaskRemoveFromEventList>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d012      	beq.n	800a6f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a700 <xQueueGenericReset+0xd0>)
 800a6cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	e009      	b.n	800a6f0 <xQueueGenericReset+0xc0>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< Updated upstream
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3310      	adds	r3, #16
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fef1 	bl	800a204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3324      	adds	r3, #36	@ 0x24
 800a426:	4618      	mov	r0, r3
 800a428:	f7ff feec 	bl	800a204 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a42c:	f002 f88e 	bl	800c54c <vPortExitCritical>
=======
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3310      	adds	r3, #16
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fef1 	bl	800a4c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3324      	adds	r3, #36	@ 0x24
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7ff feec 	bl	800a4c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6f0:	f002 fbbc 	bl	800ce6c <vPortExitCritical>
>>>>>>> Stashed changes

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< Updated upstream
 800a430:	2301      	movs	r3, #1
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	e000ed04 	.word	0xe000ed04

0800a440 <xQueueGenericCreateStatic>:
=======
 800a6f4:	2301      	movs	r3, #1
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	e000ed04 	.word	0xe000ed04

0800a704 <xQueueGenericCreateStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 800a440:	b580      	push	{r7, lr}
 800a442:	b08e      	sub	sp, #56	@ 0x38
 800a444:	af02      	add	r7, sp, #8
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10b      	bne.n	800a46c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a466:	bf00      	nop
 800a468:	bf00      	nop
 800a46a:	e7fd      	b.n	800a468 <xQueueGenericCreateStatic+0x28>
=======
 800a704:	b580      	push	{r7, lr}
 800a706:	b08e      	sub	sp, #56	@ 0x38
 800a708:	af02      	add	r7, sp, #8
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
 800a710:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10b      	bne.n	800a730 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a72a:	bf00      	nop
 800a72c:	bf00      	nop
 800a72e:	e7fd      	b.n	800a72c <xQueueGenericCreateStatic+0x28>
>>>>>>> Stashed changes

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< Updated upstream
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10b      	bne.n	800a48a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop
 800a488:	e7fd      	b.n	800a486 <xQueueGenericCreateStatic+0x46>
=======
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10b      	bne.n	800a74e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	e7fd      	b.n	800a74a <xQueueGenericCreateStatic+0x46>
>>>>>>> Stashed changes

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< Updated upstream
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <xQueueGenericCreateStatic+0x56>
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <xQueueGenericCreateStatic+0x5a>
 800a496:	2301      	movs	r3, #1
 800a498:	e000      	b.n	800a49c <xQueueGenericCreateStatic+0x5c>
 800a49a:	2300      	movs	r3, #0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10b      	bne.n	800a4b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	623b      	str	r3, [r7, #32]
}
 800a4b2:	bf00      	nop
 800a4b4:	bf00      	nop
 800a4b6:	e7fd      	b.n	800a4b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d102      	bne.n	800a4c4 <xQueueGenericCreateStatic+0x84>
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <xQueueGenericCreateStatic+0x88>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e000      	b.n	800a4ca <xQueueGenericCreateStatic+0x8a>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10b      	bne.n	800a4e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	61fb      	str	r3, [r7, #28]
}
 800a4e0:	bf00      	nop
 800a4e2:	bf00      	nop
 800a4e4:	e7fd      	b.n	800a4e2 <xQueueGenericCreateStatic+0xa2>
=======
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <xQueueGenericCreateStatic+0x56>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <xQueueGenericCreateStatic+0x5a>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e000      	b.n	800a760 <xQueueGenericCreateStatic+0x5c>
 800a75e:	2300      	movs	r3, #0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10b      	bne.n	800a77c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	623b      	str	r3, [r7, #32]
}
 800a776:	bf00      	nop
 800a778:	bf00      	nop
 800a77a:	e7fd      	b.n	800a778 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <xQueueGenericCreateStatic+0x84>
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d101      	bne.n	800a78c <xQueueGenericCreateStatic+0x88>
 800a788:	2301      	movs	r3, #1
 800a78a:	e000      	b.n	800a78e <xQueueGenericCreateStatic+0x8a>
 800a78c:	2300      	movs	r3, #0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10b      	bne.n	800a7aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	61fb      	str	r3, [r7, #28]
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	e7fd      	b.n	800a7a6 <xQueueGenericCreateStatic+0xa2>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< Updated upstream
 800a4e6:	2350      	movs	r3, #80	@ 0x50
 800a4e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b50      	cmp	r3, #80	@ 0x50
 800a4ee:	d00b      	beq.n	800a508 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	61bb      	str	r3, [r7, #24]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a508:	697b      	ldr	r3, [r7, #20]
=======
 800a7aa:	2350      	movs	r3, #80	@ 0x50
 800a7ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b50      	cmp	r3, #80	@ 0x50
 800a7b2:	d00b      	beq.n	800a7cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	61bb      	str	r3, [r7, #24]
}
 800a7c6:	bf00      	nop
 800a7c8:	bf00      	nop
 800a7ca:	e7fd      	b.n	800a7c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7cc:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00d      	beq.n	800a530 <xQueueGenericCreateStatic+0xf0>
=======
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00d      	beq.n	800a7f4 <xQueueGenericCreateStatic+0xf0>
>>>>>>> Stashed changes
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< Updated upstream
 800a514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
=======
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 800a51c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4613      	mov	r3, r2
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 f805 	bl	800a53a <prvInitialiseNewQueue>
=======
 800a7e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f840 	bl	800a874 <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 800a530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a532:	4618      	mov	r0, r3
 800a534:	3730      	adds	r7, #48	@ 0x30
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <prvInitialiseNewQueue>:
=======
 800a7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3730      	adds	r7, #48	@ 0x30
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b08a      	sub	sp, #40	@ 0x28
 800a802:	af02      	add	r7, sp, #8
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	4613      	mov	r3, r2
 800a80a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10b      	bne.n	800a82a <xQueueGenericCreate+0x2c>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	613b      	str	r3, [r7, #16]
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	e7fd      	b.n	800a826 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	fb02 f303 	mul.w	r3, r2, r3
 800a832:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	3350      	adds	r3, #80	@ 0x50
 800a838:	4618      	mov	r0, r3
 800a83a:	f002 fc07 	bl	800d04c <pvPortMalloc>
 800a83e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d011      	beq.n	800a86a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	3350      	adds	r3, #80	@ 0x50
 800a84e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a858:	79fa      	ldrb	r2, [r7, #7]
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	4613      	mov	r3, r2
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	68b9      	ldr	r1, [r7, #8]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f805 	bl	800a874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a86a:	69bb      	ldr	r3, [r7, #24]
	}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <prvInitialiseNewQueue>:
>>>>>>> Stashed changes

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< Updated upstream
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	60b9      	str	r1, [r7, #8]
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	70fb      	strb	r3, [r7, #3]
=======
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <prvInitialiseNewQueue+0x1c>
=======
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d103      	bne.n	800a890 <prvInitialiseNewQueue+0x1c>
>>>>>>> Stashed changes
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	e002      	b.n	800a55c <prvInitialiseNewQueue+0x22>
=======
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	e002      	b.n	800a896 <prvInitialiseNewQueue+0x22>
>>>>>>> Stashed changes
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< Updated upstream
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	601a      	str	r2, [r3, #0]
=======
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< Updated upstream
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a568:	2101      	movs	r1, #1
 800a56a:	69b8      	ldr	r0, [r7, #24]
 800a56c:	f7ff fefe 	bl	800a36c <xQueueGenericReset>
=======
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	69b8      	ldr	r0, [r7, #24]
 800a8a6:	f7ff fec3 	bl	800a630 <xQueueGenericReset>
>>>>>>> Stashed changes

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< Updated upstream
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	78fa      	ldrb	r2, [r7, #3]
 800a574:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
=======
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
>>>>>>> Stashed changes
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< Updated upstream
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <xQueueGenericSend>:
=======
 800a8b2:	bf00      	nop
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00e      	beq.n	800a8e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f8a3 	bl	800aa2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b086      	sub	sp, #24
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	461a      	mov	r2, r3
 800a904:	6939      	ldr	r1, [r7, #16]
 800a906:	6978      	ldr	r0, [r7, #20]
 800a908:	f7ff ff79 	bl	800a7fe <xQueueGenericCreate>
 800a90c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7ff ffd3 	bl	800a8ba <prvInitialiseMutex>

		return xNewQueue;
 800a914:	68fb      	ldr	r3, [r7, #12]
	}
 800a916:	4618      	mov	r0, r3
 800a918:	3718      	adds	r7, #24
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b088      	sub	sp, #32
 800a922:	af02      	add	r7, sp, #8
 800a924:	4603      	mov	r3, r0
 800a926:	6039      	str	r1, [r7, #0]
 800a928:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a92a:	2301      	movs	r3, #1
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2200      	movs	r2, #0
 800a93a:	6939      	ldr	r1, [r7, #16]
 800a93c:	6978      	ldr	r0, [r7, #20]
 800a93e:	f7ff fee1 	bl	800a704 <xQueueGenericCreateStatic>
 800a942:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7ff ffb8 	bl	800a8ba <prvInitialiseMutex>

		return xNewQueue;
 800a94a:	68fb      	ldr	r3, [r7, #12]
	}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a954:	b590      	push	{r4, r7, lr}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	60fb      	str	r3, [r7, #12]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	689c      	ldr	r4, [r3, #8]
 800a982:	f001 fbc3 	bl	800c10c <xTaskGetCurrentTaskHandle>
 800a986:	4603      	mov	r3, r0
 800a988:	429c      	cmp	r4, r3
 800a98a:	d111      	bne.n	800a9b0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	1e5a      	subs	r2, r3, #1
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d105      	bne.n	800a9aa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a99e:	2300      	movs	r3, #0
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	6938      	ldr	r0, [r7, #16]
 800a9a6:	f000 f841 	bl	800aa2c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	617b      	str	r3, [r7, #20]
 800a9ae:	e001      	b.n	800a9b4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a9b4:	697b      	ldr	r3, [r7, #20]
	}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	371c      	adds	r7, #28
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd90      	pop	{r4, r7, pc}

0800a9be <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a9be:	b590      	push	{r4, r7, lr}
 800a9c0:	b087      	sub	sp, #28
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10b      	bne.n	800a9ea <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	60fb      	str	r3, [r7, #12]
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop
 800a9e8:	e7fd      	b.n	800a9e6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	689c      	ldr	r4, [r3, #8]
 800a9ee:	f001 fb8d 	bl	800c10c <xTaskGetCurrentTaskHandle>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d107      	bne.n	800aa08 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800aa02:	2301      	movs	r3, #1
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	e00c      	b.n	800aa22 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6938      	ldr	r0, [r7, #16]
 800aa0c:	f000 fa90 	bl	800af30 <xQueueSemaphoreTake>
 800aa10:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800aa22:	697b      	ldr	r3, [r7, #20]
	}
 800aa24:	4618      	mov	r0, r3
 800aa26:	371c      	adds	r7, #28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd90      	pop	{r4, r7, pc}

0800aa2c <xQueueGenericSend>:
>>>>>>> Stashed changes

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800a580:	b580      	push	{r7, lr}
 800a582:	b08e      	sub	sp, #56	@ 0x38
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a58e:	2300      	movs	r3, #0
 800a590:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10b      	bne.n	800a5b4 <xQueueGenericSend+0x34>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d103      	bne.n	800a5c2 <xQueueGenericSend+0x42>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <xQueueGenericSend+0x46>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <xQueueGenericSend+0x48>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10b      	bne.n	800a5e4 <xQueueGenericSend+0x64>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	e7fd      	b.n	800a5e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d103      	bne.n	800a5f2 <xQueueGenericSend+0x72>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d101      	bne.n	800a5f6 <xQueueGenericSend+0x76>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <xQueueGenericSend+0x78>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10b      	bne.n	800a614 <xQueueGenericSend+0x94>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	623b      	str	r3, [r7, #32]
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a614:	f001 f9fc 	bl	800ba10 <xTaskGetSchedulerState>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d102      	bne.n	800a624 <xQueueGenericSend+0xa4>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <xQueueGenericSend+0xa8>
 800a624:	2301      	movs	r3, #1
 800a626:	e000      	b.n	800a62a <xQueueGenericSend+0xaa>
 800a628:	2300      	movs	r3, #0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <xQueueGenericSend+0xc6>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	61fb      	str	r3, [r7, #28]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <xQueueGenericSend+0xc2>
=======
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08e      	sub	sp, #56	@ 0x38
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <xQueueGenericSend+0x34>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	e7fd      	b.n	800aa5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <xQueueGenericSend+0x42>
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <xQueueGenericSend+0x46>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e000      	b.n	800aa74 <xQueueGenericSend+0x48>
 800aa72:	2300      	movs	r3, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <xQueueGenericSend+0x64>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa8a:	bf00      	nop
 800aa8c:	bf00      	nop
 800aa8e:	e7fd      	b.n	800aa8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d103      	bne.n	800aa9e <xQueueGenericSend+0x72>
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <xQueueGenericSend+0x76>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <xQueueGenericSend+0x78>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10b      	bne.n	800aac0 <xQueueGenericSend+0x94>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	623b      	str	r3, [r7, #32]
}
 800aaba:	bf00      	nop
 800aabc:	bf00      	nop
 800aabe:	e7fd      	b.n	800aabc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aac0:	f001 fb34 	bl	800c12c <xTaskGetSchedulerState>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d102      	bne.n	800aad0 <xQueueGenericSend+0xa4>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <xQueueGenericSend+0xa8>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e000      	b.n	800aad6 <xQueueGenericSend+0xaa>
 800aad4:	2300      	movs	r3, #0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10b      	bne.n	800aaf2 <xQueueGenericSend+0xc6>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	61fb      	str	r3, [r7, #28]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <xQueueGenericSend+0xc2>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800a646:	f001 ff4f 	bl	800c4e8 <vPortEnterCritical>
=======
 800aaf2:	f002 f989 	bl	800ce08 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< Updated upstream
 800a64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a652:	429a      	cmp	r2, r3
 800a654:	d302      	bcc.n	800a65c <xQueueGenericSend+0xdc>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d129      	bne.n	800a6b0 <xQueueGenericSend+0x130>
=======
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d302      	bcc.n	800ab08 <xQueueGenericSend+0xdc>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d129      	bne.n	800ab5c <xQueueGenericSend+0x130>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a662:	f000 fa0f 	bl	800aa84 <prvCopyDataToQueue>
 800a666:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab0e:	f000 fb37 	bl	800b180 <prvCopyDataToQueue>
 800ab12:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d010      	beq.n	800a692 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a672:	3324      	adds	r3, #36	@ 0x24
 800a674:	4618      	mov	r0, r3
 800a676:	f001 f805 	bl	800b684 <xTaskRemoveFromEventList>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d013      	beq.n	800a6a8 <xQueueGenericSend+0x128>
=======
 800ab14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d010      	beq.n	800ab3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1e:	3324      	adds	r3, #36	@ 0x24
 800ab20:	4618      	mov	r0, r3
 800ab22:	f001 f92d 	bl	800bd80 <xTaskRemoveFromEventList>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d013      	beq.n	800ab54 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800a680:	4b3f      	ldr	r3, [pc, #252]	@ (800a780 <xQueueGenericSend+0x200>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	e00a      	b.n	800a6a8 <xQueueGenericSend+0x128>
=======
 800ab2c:	4b3f      	ldr	r3, [pc, #252]	@ (800ac2c <xQueueGenericSend+0x200>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	e00a      	b.n	800ab54 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< Updated upstream
 800a692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <xQueueGenericSend+0x128>
=======
 800ab3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d007      	beq.n	800ab54 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800a698:	4b39      	ldr	r3, [pc, #228]	@ (800a780 <xQueueGenericSend+0x200>)
 800a69a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a69e:	601a      	str	r2, [r3, #0]
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	f3bf 8f6f 	isb	sy
=======
 800ab44:	4b39      	ldr	r3, [pc, #228]	@ (800ac2c <xQueueGenericSend+0x200>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a6a8:	f001 ff50 	bl	800c54c <vPortExitCritical>
				return pdPASS;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e063      	b.n	800a778 <xQueueGenericSend+0x1f8>
=======
 800ab54:	f002 f98a 	bl	800ce6c <vPortExitCritical>
				return pdPASS;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e063      	b.n	800ac24 <xQueueGenericSend+0x1f8>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d103      	bne.n	800a6be <xQueueGenericSend+0x13e>
=======
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <xQueueGenericSend+0x13e>
>>>>>>> Stashed changes
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a6b6:	f001 ff49 	bl	800c54c <vPortExitCritical>
=======
 800ab62:	f002 f983 	bl	800ce6c <vPortExitCritical>
>>>>>>> Stashed changes

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< Updated upstream
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e05c      	b.n	800a778 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d106      	bne.n	800a6d2 <xQueueGenericSend+0x152>
=======
 800ab66:	2300      	movs	r3, #0
 800ab68:	e05c      	b.n	800ac24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <xQueueGenericSend+0x152>
>>>>>>> Stashed changes
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800a6c4:	f107 0314 	add.w	r3, r7, #20
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 f83f 	bl	800b74c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 f967 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a6d2:	f001 ff3b 	bl	800c54c <vPortExitCritical>
=======
 800ab7e:	f002 f975 	bl	800ce6c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800a6d6:	f000 fda7 	bl	800b228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6da:	f001 ff05 	bl	800c4e8 <vPortEnterCritical>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6e4:	b25b      	sxtb	r3, r3
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ea:	d103      	bne.n	800a6f4 <xQueueGenericSend+0x174>
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6fa:	b25b      	sxtb	r3, r3
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a700:	d103      	bne.n	800a70a <xQueueGenericSend+0x18a>
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a70a:	f001 ff1f 	bl	800c54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a70e:	1d3a      	adds	r2, r7, #4
 800a710:	f107 0314 	add.w	r3, r7, #20
 800a714:	4611      	mov	r1, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f001 f82e 	bl	800b778 <xTaskCheckForTimeOut>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d124      	bne.n	800a76c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a724:	f000 faa6 	bl	800ac74 <prvIsQueueFull>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d018      	beq.n	800a760 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a730:	3310      	adds	r3, #16
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f000 ff52 	bl	800b5e0 <vTaskPlaceOnEventList>
=======
 800ab82:	f000 fecf 	bl	800b924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab86:	f002 f93f 	bl	800ce08 <vPortEnterCritical>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab90:	b25b      	sxtb	r3, r3
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d103      	bne.n	800aba0 <xQueueGenericSend+0x174>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aba6:	b25b      	sxtb	r3, r3
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abac:	d103      	bne.n	800abb6 <xQueueGenericSend+0x18a>
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abb6:	f002 f959 	bl	800ce6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abba:	1d3a      	adds	r2, r7, #4
 800abbc:	f107 0314 	add.w	r3, r7, #20
 800abc0:	4611      	mov	r1, r2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f001 f956 	bl	800be74 <xTaskCheckForTimeOut>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d124      	bne.n	800ac18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abd0:	f000 fbce 	bl	800b370 <prvIsQueueFull>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d018      	beq.n	800ac0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	3310      	adds	r3, #16
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4611      	mov	r1, r2
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 f87a 	bl	800bcdc <vTaskPlaceOnEventList>
>>>>>>> Stashed changes
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a73c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a73e:	f000 fa31 	bl	800aba4 <prvUnlockQueue>
=======
 800abe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abea:	f000 fb59 	bl	800b2a0 <prvUnlockQueue>
>>>>>>> Stashed changes
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< Updated upstream
 800a742:	f000 fd7f 	bl	800b244 <xTaskResumeAll>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f47f af7c 	bne.w	800a646 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a74e:	4b0c      	ldr	r3, [pc, #48]	@ (800a780 <xQueueGenericSend+0x200>)
 800a750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	e772      	b.n	800a646 <xQueueGenericSend+0xc6>
=======
 800abee:	f000 fea7 	bl	800b940 <xTaskResumeAll>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f47f af7c 	bne.w	800aaf2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800abfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <xQueueGenericSend+0x200>)
 800abfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	e772      	b.n	800aaf2 <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a762:	f000 fa1f 	bl	800aba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a766:	f000 fd6d 	bl	800b244 <xTaskResumeAll>
 800a76a:	e76c      	b.n	800a646 <xQueueGenericSend+0xc6>
=======
 800ac0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac0e:	f000 fb47 	bl	800b2a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac12:	f000 fe95 	bl	800b940 <xTaskResumeAll>
 800ac16:	e76c      	b.n	800aaf2 <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800a76c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a76e:	f000 fa19 	bl	800aba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a772:	f000 fd67 	bl	800b244 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3738      	adds	r7, #56	@ 0x38
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <xQueueGenericSendFromISR>:
=======
 800ac18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac1a:	f000 fb41 	bl	800b2a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac1e:	f000 fe8f 	bl	800b940 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3738      	adds	r7, #56	@ 0x38
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <xQueueGenericSendFromISR>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800a784:	b580      	push	{r7, lr}
 800a786:	b090      	sub	sp, #64	@ 0x40
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a7ae:	bf00      	nop
 800a7b0:	bf00      	nop
 800a7b2:	e7fd      	b.n	800a7b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d103      	bne.n	800a7c2 <xQueueGenericSendFromISR+0x3e>
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x42>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <xQueueGenericSendFromISR+0x44>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10b      	bne.n	800a7e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
 800a7e2:	e7fd      	b.n	800a7e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d103      	bne.n	800a7f2 <xQueueGenericSendFromISR+0x6e>
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d101      	bne.n	800a7f6 <xQueueGenericSendFromISR+0x72>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <xQueueGenericSendFromISR+0x74>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10b      	bne.n	800a814 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	623b      	str	r3, [r7, #32]
}
 800a80e:	bf00      	nop
 800a810:	bf00      	nop
 800a812:	e7fd      	b.n	800a810 <xQueueGenericSendFromISR+0x8c>
=======
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b090      	sub	sp, #64	@ 0x40
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ac42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10b      	bne.n	800ac60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
 800ac5e:	e7fd      	b.n	800ac5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d103      	bne.n	800ac6e <xQueueGenericSendFromISR+0x3e>
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <xQueueGenericSendFromISR+0x42>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <xQueueGenericSendFromISR+0x44>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10b      	bne.n	800ac90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac8a:	bf00      	nop
 800ac8c:	bf00      	nop
 800ac8e:	e7fd      	b.n	800ac8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d103      	bne.n	800ac9e <xQueueGenericSendFromISR+0x6e>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d101      	bne.n	800aca2 <xQueueGenericSendFromISR+0x72>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <xQueueGenericSendFromISR+0x74>
 800aca2:	2300      	movs	r3, #0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	623b      	str	r3, [r7, #32]
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xQueueGenericSendFromISR+0x8c>
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 800a814:	f001 ff48 	bl	800c6a8 <vPortValidateInterruptPriority>
=======
 800acc0:	f002 f982 	bl	800cfc8 <vPortValidateInterruptPriority>
>>>>>>> Stashed changes

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 800a818:	f3ef 8211 	mrs	r2, BASEPRI
 800a81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	61fa      	str	r2, [r7, #28]
 800a82e:	61bb      	str	r3, [r7, #24]
=======
 800acc4:	f3ef 8211 	mrs	r2, BASEPRI
 800acc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	61fa      	str	r2, [r7, #28]
 800acda:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< Updated upstream
 800a830:	69fb      	ldr	r3, [r7, #28]
=======
 800acdc:	69fb      	ldr	r3, [r7, #28]
>>>>>>> Stashed changes
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< Updated upstream
 800a832:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d302      	bcc.n	800a846 <xQueueGenericSendFromISR+0xc2>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d12f      	bne.n	800a8a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a84c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a854:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800acde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ace0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace8:	429a      	cmp	r2, r3
 800acea:	d302      	bcc.n	800acf2 <xQueueGenericSendFromISR+0xc2>
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d12f      	bne.n	800ad52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad00:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a85c:	f000 f912 	bl	800aa84 <prvCopyDataToQueue>
=======
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	68b9      	ldr	r1, [r7, #8]
 800ad06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ad08:	f000 fa3a 	bl	800b180 <prvCopyDataToQueue>
>>>>>>> Stashed changes

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< Updated upstream
 800a860:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a868:	d112      	bne.n	800a890 <xQueueGenericSendFromISR+0x10c>
=======
 800ad0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ad10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad14:	d112      	bne.n	800ad3c <xQueueGenericSendFromISR+0x10c>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d016      	beq.n	800a8a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	3324      	adds	r3, #36	@ 0x24
 800a876:	4618      	mov	r0, r3
 800a878:	f000 ff04 	bl	800b684 <xTaskRemoveFromEventList>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00e      	beq.n	800a8a0 <xQueueGenericSendFromISR+0x11c>
=======
 800ad16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d016      	beq.n	800ad4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	3324      	adds	r3, #36	@ 0x24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 f82c 	bl	800bd80 <xTaskRemoveFromEventList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00e      	beq.n	800ad4c <xQueueGenericSendFromISR+0x11c>
>>>>>>> Stashed changes
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< Updated upstream
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00b      	beq.n	800a8a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	e007      	b.n	800a8a0 <xQueueGenericSendFromISR+0x11c>
=======
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00b      	beq.n	800ad4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	e007      	b.n	800ad4c <xQueueGenericSendFromISR+0x11c>
>>>>>>> Stashed changes
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< Updated upstream
 800a890:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a894:	3301      	adds	r3, #1
 800a896:	b2db      	uxtb	r3, r3
 800a898:	b25a      	sxtb	r2, r3
 800a89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a8a4:	e001      	b.n	800a8aa <xQueueGenericSendFromISR+0x126>
=======
 800ad3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ad40:	3301      	adds	r3, #1
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	b25a      	sxtb	r2, r3
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ad50:	e001      	b.n	800ad56 <xQueueGenericSendFromISR+0x126>
>>>>>>> Stashed changes
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< Updated upstream
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ac:	617b      	str	r3, [r7, #20]
=======
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad58:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< Updated upstream
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f383 8811 	msr	BASEPRI, r3
=======
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< Updated upstream
 800a8b4:	bf00      	nop
=======
 800ad60:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 800a8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3740      	adds	r7, #64	@ 0x40
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <xQueueReceive>:
=======
 800ad62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3740      	adds	r7, #64	@ 0x40
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <xQueueReceive>:
>>>>>>> Stashed changes
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08c      	sub	sp, #48	@ 0x30
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10b      	bne.n	800a8f2 <xQueueReceive+0x32>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	623b      	str	r3, [r7, #32]
}
 800a8ec:	bf00      	nop
 800a8ee:	bf00      	nop
 800a8f0:	e7fd      	b.n	800a8ee <xQueueReceive+0x2e>
=======
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08c      	sub	sp, #48	@ 0x30
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10b      	bne.n	800ad9e <xQueueReceive+0x32>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	623b      	str	r3, [r7, #32]
}
 800ad98:	bf00      	nop
 800ad9a:	bf00      	nop
 800ad9c:	e7fd      	b.n	800ad9a <xQueueReceive+0x2e>
>>>>>>> Stashed changes

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< Updated upstream
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d103      	bne.n	800a900 <xQueueReceive+0x40>
 800a8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <xQueueReceive+0x44>
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <xQueueReceive+0x46>
 800a904:	2300      	movs	r3, #0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10b      	bne.n	800a922 <xQueueReceive+0x62>
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	61fb      	str	r3, [r7, #28]
}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	e7fd      	b.n	800a91e <xQueueReceive+0x5e>
=======
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d103      	bne.n	800adac <xQueueReceive+0x40>
 800ada4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <xQueueReceive+0x44>
 800adac:	2301      	movs	r3, #1
 800adae:	e000      	b.n	800adb2 <xQueueReceive+0x46>
 800adb0:	2300      	movs	r3, #0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10b      	bne.n	800adce <xQueueReceive+0x62>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	61fb      	str	r3, [r7, #28]
}
 800adc8:	bf00      	nop
 800adca:	bf00      	nop
 800adcc:	e7fd      	b.n	800adca <xQueueReceive+0x5e>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 800a922:	f001 f875 	bl	800ba10 <xTaskGetSchedulerState>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d102      	bne.n	800a932 <xQueueReceive+0x72>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <xQueueReceive+0x76>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <xQueueReceive+0x78>
 800a936:	2300      	movs	r3, #0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10b      	bne.n	800a954 <xQueueReceive+0x94>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	61bb      	str	r3, [r7, #24]
}
 800a94e:	bf00      	nop
 800a950:	bf00      	nop
 800a952:	e7fd      	b.n	800a950 <xQueueReceive+0x90>
=======
 800adce:	f001 f9ad 	bl	800c12c <xTaskGetSchedulerState>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <xQueueReceive+0x72>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <xQueueReceive+0x76>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <xQueueReceive+0x78>
 800ade2:	2300      	movs	r3, #0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10b      	bne.n	800ae00 <xQueueReceive+0x94>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	61bb      	str	r3, [r7, #24]
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	e7fd      	b.n	800adfc <xQueueReceive+0x90>
>>>>>>> Stashed changes
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800a954:	f001 fdc8 	bl	800c4e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95c:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 800ae00:	f002 f802 	bl	800ce08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01f      	beq.n	800a9a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a964:	68b9      	ldr	r1, [r7, #8]
 800a966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a968:	f000 f8f6 	bl	800ab58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96e:	1e5a      	subs	r2, r3, #1
 800a970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a972:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01f      	beq.n	800ae50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae14:	f000 fa1e 	bl	800b254 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> Stashed changes

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00f      	beq.n	800a99c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97e:	3310      	adds	r3, #16
 800a980:	4618      	mov	r0, r3
 800a982:	f000 fe7f 	bl	800b684 <xTaskRemoveFromEventList>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d007      	beq.n	800a99c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a98c:	4b3c      	ldr	r3, [pc, #240]	@ (800aa80 <xQueueReceive+0x1c0>)
 800a98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	f3bf 8f6f 	isb	sy
=======
 800ae20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00f      	beq.n	800ae48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2a:	3310      	adds	r3, #16
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 ffa7 	bl	800bd80 <xTaskRemoveFromEventList>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d007      	beq.n	800ae48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae38:	4b3c      	ldr	r3, [pc, #240]	@ (800af2c <xQueueReceive+0x1c0>)
 800ae3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a99c:	f001 fdd6 	bl	800c54c <vPortExitCritical>
				return pdPASS;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e069      	b.n	800aa78 <xQueueReceive+0x1b8>
=======
 800ae48:	f002 f810 	bl	800ce6c <vPortExitCritical>
				return pdPASS;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e069      	b.n	800af24 <xQueueReceive+0x1b8>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d103      	bne.n	800a9b2 <xQueueReceive+0xf2>
=======
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <xQueueReceive+0xf2>
>>>>>>> Stashed changes
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a9aa:	f001 fdcf 	bl	800c54c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e062      	b.n	800aa78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <xQueueReceive+0x106>
=======
 800ae56:	f002 f809 	bl	800ce6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e062      	b.n	800af24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <xQueueReceive+0x106>
>>>>>>> Stashed changes
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800a9b8:	f107 0310 	add.w	r3, r7, #16
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fec5 	bl	800b74c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800ae64:	f107 0310 	add.w	r3, r7, #16
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 ffed 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800a9c6:	f001 fdc1 	bl	800c54c <vPortExitCritical>
=======
 800ae72:	f001 fffb 	bl	800ce6c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800a9ca:	f000 fc2d 	bl	800b228 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ce:	f001 fd8b 	bl	800c4e8 <vPortEnterCritical>
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9d8:	b25b      	sxtb	r3, r3
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9de:	d103      	bne.n	800a9e8 <xQueueReceive+0x128>
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9ee:	b25b      	sxtb	r3, r3
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f4:	d103      	bne.n	800a9fe <xQueueReceive+0x13e>
 800a9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9fe:	f001 fda5 	bl	800c54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa02:	1d3a      	adds	r2, r7, #4
 800aa04:	f107 0310 	add.w	r3, r7, #16
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 feb4 	bl	800b778 <xTaskCheckForTimeOut>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d123      	bne.n	800aa5e <xQueueReceive+0x19e>
=======
 800ae76:	f000 fd55 	bl	800b924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae7a:	f001 ffc5 	bl	800ce08 <vPortEnterCritical>
 800ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae84:	b25b      	sxtb	r3, r3
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8a:	d103      	bne.n	800ae94 <xQueueReceive+0x128>
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae9a:	b25b      	sxtb	r3, r3
 800ae9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea0:	d103      	bne.n	800aeaa <xQueueReceive+0x13e>
 800aea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aeaa:	f001 ffdf 	bl	800ce6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeae:	1d3a      	adds	r2, r7, #4
 800aeb0:	f107 0310 	add.w	r3, r7, #16
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 ffdc 	bl	800be74 <xTaskCheckForTimeOut>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d123      	bne.n	800af0a <xQueueReceive+0x19e>
>>>>>>> Stashed changes
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800aa16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa18:	f000 f916 	bl	800ac48 <prvIsQueueEmpty>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d017      	beq.n	800aa52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa24:	3324      	adds	r3, #36	@ 0x24
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	4611      	mov	r1, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fdd8 	bl	800b5e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa32:	f000 f8b7 	bl	800aba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa36:	f000 fc05 	bl	800b244 <xTaskResumeAll>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d189      	bne.n	800a954 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aa40:	4b0f      	ldr	r3, [pc, #60]	@ (800aa80 <xQueueReceive+0x1c0>)
 800aa42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	e780      	b.n	800a954 <xQueueReceive+0x94>
=======
 800aec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aec4:	f000 fa3e 	bl	800b344 <prvIsQueueEmpty>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d017      	beq.n	800aefe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed0:	3324      	adds	r3, #36	@ 0x24
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 ff00 	bl	800bcdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aedc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aede:	f000 f9df 	bl	800b2a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aee2:	f000 fd2d 	bl	800b940 <xTaskResumeAll>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d189      	bne.n	800ae00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aeec:	4b0f      	ldr	r3, [pc, #60]	@ (800af2c <xQueueReceive+0x1c0>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	e780      	b.n	800ae00 <xQueueReceive+0x94>
>>>>>>> Stashed changes
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800aa52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa54:	f000 f8a6 	bl	800aba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa58:	f000 fbf4 	bl	800b244 <xTaskResumeAll>
 800aa5c:	e77a      	b.n	800a954 <xQueueReceive+0x94>
=======
 800aefe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af00:	f000 f9ce 	bl	800b2a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af04:	f000 fd1c 	bl	800b940 <xTaskResumeAll>
 800af08:	e77a      	b.n	800ae00 <xQueueReceive+0x94>
>>>>>>> Stashed changes
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800aa5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa60:	f000 f8a0 	bl	800aba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa64:	f000 fbee 	bl	800b244 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa6a:	f000 f8ed 	bl	800ac48 <prvIsQueueEmpty>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f43f af6f 	beq.w	800a954 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa76:	2300      	movs	r3, #0
=======
 800af0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af0c:	f000 f9c8 	bl	800b2a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af10:	f000 fd16 	bl	800b940 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af16:	f000 fa15 	bl	800b344 <prvIsQueueEmpty>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f43f af6f 	beq.w	800ae00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af22:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< Updated upstream
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3730      	adds	r7, #48	@ 0x30
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	e000ed04 	.word	0xe000ed04

0800aa84 <prvCopyDataToQueue>:
=======
 800af24:	4618      	mov	r0, r3
 800af26:	3730      	adds	r7, #48	@ 0x30
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08e      	sub	sp, #56	@ 0x38
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800af42:	2300      	movs	r3, #0
 800af44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10b      	bne.n	800af64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	623b      	str	r3, [r7, #32]
}
 800af5e:	bf00      	nop
 800af60:	bf00      	nop
 800af62:	e7fd      	b.n	800af60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00b      	beq.n	800af84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	61fb      	str	r3, [r7, #28]
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af84:	f001 f8d2 	bl	800c12c <xTaskGetSchedulerState>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d102      	bne.n	800af94 <xQueueSemaphoreTake+0x64>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <xQueueSemaphoreTake+0x68>
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <xQueueSemaphoreTake+0x6a>
 800af98:	2300      	movs	r3, #0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10b      	bne.n	800afb6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	61bb      	str	r3, [r7, #24]
}
 800afb0:	bf00      	nop
 800afb2:	bf00      	nop
 800afb4:	e7fd      	b.n	800afb2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afb6:	f001 ff27 	bl	800ce08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800afc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d024      	beq.n	800b010 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800afc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc8:	1e5a      	subs	r2, r3, #1
 800afca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afcc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d104      	bne.n	800afe0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800afd6:	f001 fa23 	bl	800c420 <pvTaskIncrementMutexHeldCount>
 800afda:	4602      	mov	r2, r0
 800afdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afde:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00f      	beq.n	800b008 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afea:	3310      	adds	r3, #16
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fec7 	bl	800bd80 <xTaskRemoveFromEventList>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d007      	beq.n	800b008 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aff8:	4b54      	ldr	r3, [pc, #336]	@ (800b14c <xQueueSemaphoreTake+0x21c>)
 800affa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b008:	f001 ff30 	bl	800ce6c <vPortExitCritical>
				return pdPASS;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e098      	b.n	800b142 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d112      	bne.n	800b03c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	617b      	str	r3, [r7, #20]
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b034:	f001 ff1a 	bl	800ce6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b038:	2300      	movs	r3, #0
 800b03a:	e082      	b.n	800b142 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d106      	bne.n	800b050 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b042:	f107 030c 	add.w	r3, r7, #12
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fefe 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b050:	f001 ff0c 	bl	800ce6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b054:	f000 fc66 	bl	800b924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b058:	f001 fed6 	bl	800ce08 <vPortEnterCritical>
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b062:	b25b      	sxtb	r3, r3
 800b064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b068:	d103      	bne.n	800b072 <xQueueSemaphoreTake+0x142>
 800b06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b078:	b25b      	sxtb	r3, r3
 800b07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07e:	d103      	bne.n	800b088 <xQueueSemaphoreTake+0x158>
 800b080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b088:	f001 fef0 	bl	800ce6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b08c:	463a      	mov	r2, r7
 800b08e:	f107 030c 	add.w	r3, r7, #12
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f000 feed 	bl	800be74 <xTaskCheckForTimeOut>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d132      	bne.n	800b106 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b0a2:	f000 f94f 	bl	800b344 <prvIsQueueEmpty>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d026      	beq.n	800b0fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d109      	bne.n	800b0c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b0b4:	f001 fea8 	bl	800ce08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f001 f853 	bl	800c168 <xTaskPriorityInherit>
 800b0c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b0c4:	f001 fed2 	bl	800ce6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ca:	3324      	adds	r3, #36	@ 0x24
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 fe03 	bl	800bcdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b0d8:	f000 f8e2 	bl	800b2a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0dc:	f000 fc30 	bl	800b940 <xTaskResumeAll>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f47f af67 	bne.w	800afb6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b0e8:	4b18      	ldr	r3, [pc, #96]	@ (800b14c <xQueueSemaphoreTake+0x21c>)
 800b0ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	e75d      	b.n	800afb6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b0fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b0fc:	f000 f8d0 	bl	800b2a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b100:	f000 fc1e 	bl	800b940 <xTaskResumeAll>
 800b104:	e757      	b.n	800afb6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b108:	f000 f8ca 	bl	800b2a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b10c:	f000 fc18 	bl	800b940 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b110:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b112:	f000 f917 	bl	800b344 <prvIsQueueEmpty>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f43f af4c 	beq.w	800afb6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00d      	beq.n	800b140 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b124:	f001 fe70 	bl	800ce08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b128:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b12a:	f000 f811 	bl	800b150 <prvGetDisinheritPriorityAfterTimeout>
 800b12e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b136:	4618      	mov	r0, r3
 800b138:	f001 f8ee 	bl	800c318 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b13c:	f001 fe96 	bl	800ce6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b142:	4618      	mov	r0, r3
 800b144:	3738      	adds	r7, #56	@ 0x38
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d006      	beq.n	800b16e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	e001      	b.n	800b172 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b172:	68fb      	ldr	r3, [r7, #12]
	}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <prvCopyDataToQueue>:
>>>>>>> Stashed changes

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< Updated upstream
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa90:	2300      	movs	r3, #0
 800aa92:	617b      	str	r3, [r7, #20]
=======
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <prvCopyDataToQueue+0x3a>
=======
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b194:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10d      	bne.n	800b1ba <prvCopyDataToQueue+0x3a>
>>>>>>> Stashed changes
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d14d      	bne.n	800ab46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 ffcc 	bl	800ba4c <xTaskPriorityDisinherit>
 800aab4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	609a      	str	r2, [r3, #8]
 800aabc:	e043      	b.n	800ab46 <prvCopyDataToQueue+0xc2>
=======
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d14d      	bne.n	800b242 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f844 	bl	800c238 <xTaskPriorityDisinherit>
 800b1b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	609a      	str	r2, [r3, #8]
 800b1b8:	e043      	b.n	800b242 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< Updated upstream
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d119      	bne.n	800aaf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6858      	ldr	r0, [r3, #4]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aacc:	461a      	mov	r2, r3
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	f002 fdf8 	bl	800d6c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aadc:	441a      	add	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d32b      	bcc.n	800ab46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	605a      	str	r2, [r3, #4]
 800aaf6:	e026      	b.n	800ab46 <prvCopyDataToQueue+0xc2>
=======
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d119      	bne.n	800b1f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6858      	ldr	r0, [r3, #4]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	68b9      	ldr	r1, [r7, #8]
 800b1cc:	f002 ff0a 	bl	800dfe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d8:	441a      	add	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d32b      	bcc.n	800b242 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	605a      	str	r2, [r3, #4]
 800b1f2:	e026      	b.n	800b242 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< Updated upstream
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	68d8      	ldr	r0, [r3, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab00:	461a      	mov	r2, r3
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	f002 fdde 	bl	800d6c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab10:	425b      	negs	r3, r3
 800ab12:	441a      	add	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	68da      	ldr	r2, [r3, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d207      	bcs.n	800ab34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab2c:	425b      	negs	r3, r3
 800ab2e:	441a      	add	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	60da      	str	r2, [r3, #12]
=======
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	68d8      	ldr	r0, [r3, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	f002 fef0 	bl	800dfe4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20c:	425b      	negs	r3, r3
 800b20e:	441a      	add	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d207      	bcs.n	800b230 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	689a      	ldr	r2, [r3, #8]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b228:	425b      	negs	r3, r3
 800b22a:	441a      	add	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< Updated upstream
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d105      	bne.n	800ab46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <prvCopyDataToQueue+0xc2>
=======
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d105      	bne.n	800b242 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< Updated upstream
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	613b      	str	r3, [r7, #16]
=======
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	3b01      	subs	r3, #1
 800b240:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ab4e:	697b      	ldr	r3, [r7, #20]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <prvCopyDataFromQueue>:
=======
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b24a:	697b      	ldr	r3, [r7, #20]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <prvCopyDataFromQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< Updated upstream
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d018      	beq.n	800ab9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68da      	ldr	r2, [r3, #12]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab72:	441a      	add	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68da      	ldr	r2, [r3, #12]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d303      	bcc.n	800ab8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	60da      	str	r2, [r3, #12]
=======
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b262:	2b00      	cmp	r3, #0
 800b264:	d018      	beq.n	800b298 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68da      	ldr	r2, [r3, #12]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26e:	441a      	add	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68da      	ldr	r2, [r3, #12]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d303      	bcc.n	800b288 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< Updated upstream
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68d9      	ldr	r1, [r3, #12]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab94:	461a      	mov	r2, r3
 800ab96:	6838      	ldr	r0, [r7, #0]
 800ab98:	f002 fd94 	bl	800d6c4 <memcpy>
	}
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <prvUnlockQueue>:
=======
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68d9      	ldr	r1, [r3, #12]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b290:	461a      	mov	r2, r3
 800b292:	6838      	ldr	r0, [r7, #0]
 800b294:	f002 fea6 	bl	800dfe4 <memcpy>
	}
}
 800b298:	bf00      	nop
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <prvUnlockQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< Updated upstream
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
=======
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800abac:	f001 fc9c 	bl	800c4e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abb8:	e011      	b.n	800abde <prvUnlockQueue+0x3a>
=======
 800b2a8:	f001 fdae 	bl	800ce08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2b4:	e011      	b.n	800b2da <prvUnlockQueue+0x3a>
>>>>>>> Stashed changes
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d012      	beq.n	800abe8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3324      	adds	r3, #36	@ 0x24
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fd5c 	bl	800b684 <xTaskRemoveFromEventList>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <prvUnlockQueue+0x32>
=======
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d012      	beq.n	800b2e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	3324      	adds	r3, #36	@ 0x24
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 fd5c 	bl	800bd80 <xTaskRemoveFromEventList>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <prvUnlockQueue+0x32>
>>>>>>> Stashed changes
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< Updated upstream
 800abd2:	f000 fe35 	bl	800b840 <vTaskMissedYield>
=======
 800b2ce:	f000 fe35 	bl	800bf3c <vTaskMissedYield>
>>>>>>> Stashed changes
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< Updated upstream
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	3b01      	subs	r3, #1
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dce9      	bgt.n	800abba <prvUnlockQueue+0x16>
 800abe6:	e000      	b.n	800abea <prvUnlockQueue+0x46>
					break;
 800abe8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	22ff      	movs	r2, #255	@ 0xff
 800abee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800abf2:	f001 fcab 	bl	800c54c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abf6:	f001 fc77 	bl	800c4e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac02:	e011      	b.n	800ac28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d012      	beq.n	800ac32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3310      	adds	r3, #16
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fd37 	bl	800b684 <xTaskRemoveFromEventList>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac1c:	f000 fe10 	bl	800b840 <vTaskMissedYield>
=======
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	dce9      	bgt.n	800b2b6 <prvUnlockQueue+0x16>
 800b2e2:	e000      	b.n	800b2e6 <prvUnlockQueue+0x46>
					break;
 800b2e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	22ff      	movs	r2, #255	@ 0xff
 800b2ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b2ee:	f001 fdbd 	bl	800ce6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2f2:	f001 fd89 	bl	800ce08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2fe:	e011      	b.n	800b324 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d012      	beq.n	800b32e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	3310      	adds	r3, #16
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 fd37 	bl	800bd80 <xTaskRemoveFromEventList>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b318:	f000 fe10 	bl	800bf3c <vTaskMissedYield>
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< Updated upstream
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dce9      	bgt.n	800ac04 <prvUnlockQueue+0x60>
 800ac30:	e000      	b.n	800ac34 <prvUnlockQueue+0x90>
=======
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	3b01      	subs	r3, #1
 800b320:	b2db      	uxtb	r3, r3
 800b322:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	dce9      	bgt.n	800b300 <prvUnlockQueue+0x60>
 800b32c:	e000      	b.n	800b330 <prvUnlockQueue+0x90>
>>>>>>> Stashed changes
			}
			else
			{
				break;
<<<<<<< Updated upstream
 800ac32:	bf00      	nop
=======
 800b32e:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< Updated upstream
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	22ff      	movs	r2, #255	@ 0xff
 800ac38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac3c:	f001 fc86 	bl	800c54c <vPortExitCritical>
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <prvIsQueueEmpty>:
=======
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	22ff      	movs	r2, #255	@ 0xff
 800b334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b338:	f001 fd98 	bl	800ce6c <vPortExitCritical>
}
 800b33c:	bf00      	nop
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <prvIsQueueEmpty>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac50:	f001 fc4a 	bl	800c4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e001      	b.n	800ac66 <prvIsQueueEmpty+0x1e>
=======
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b34c:	f001 fd5c 	bl	800ce08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b358:	2301      	movs	r3, #1
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	e001      	b.n	800b362 <prvIsQueueEmpty+0x1e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800ac62:	2300      	movs	r3, #0
 800ac64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac66:	f001 fc71 	bl	800c54c <vPortExitCritical>

	return xReturn;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <prvIsQueueFull>:
=======
 800b35e:	2300      	movs	r3, #0
 800b360:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b362:	f001 fd83 	bl	800ce6c <vPortExitCritical>

	return xReturn;
 800b366:	68fb      	ldr	r3, [r7, #12]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <prvIsQueueFull>:
>>>>>>> Stashed changes
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac7c:	f001 fc34 	bl	800c4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d102      	bne.n	800ac92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	e001      	b.n	800ac96 <prvIsQueueFull+0x22>
=======
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b378:	f001 fd46 	bl	800ce08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b384:	429a      	cmp	r2, r3
 800b386:	d102      	bne.n	800b38e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b388:	2301      	movs	r3, #1
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	e001      	b.n	800b392 <prvIsQueueFull+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac96:	f001 fc59 	bl	800c54c <vPortExitCritical>

	return xReturn;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <vQueueAddToRegistry>:
=======
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b392:	f001 fd6b 	bl	800ce6c <vPortExitCritical>

	return xReturn;
 800b396:	68fb      	ldr	r3, [r7, #12]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <vQueueAddToRegistry>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< Updated upstream
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
=======
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< Updated upstream
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	e014      	b.n	800acde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acb4:	4a0f      	ldr	r2, [pc, #60]	@ (800acf4 <vQueueAddToRegistry+0x50>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10b      	bne.n	800acd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800acc0:	490c      	ldr	r1, [pc, #48]	@ (800acf4 <vQueueAddToRegistry+0x50>)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acca:	4a0a      	ldr	r2, [pc, #40]	@ (800acf4 <vQueueAddToRegistry+0x50>)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	4413      	add	r3, r2
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acd6:	e006      	b.n	800ace6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b07      	cmp	r3, #7
 800ace2:	d9e7      	bls.n	800acb4 <vQueueAddToRegistry+0x10>
=======
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	e014      	b.n	800b3da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3b0:	4a0f      	ldr	r2, [pc, #60]	@ (800b3f0 <vQueueAddToRegistry+0x50>)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10b      	bne.n	800b3d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3bc:	490c      	ldr	r1, [pc, #48]	@ (800b3f0 <vQueueAddToRegistry+0x50>)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3c6:	4a0a      	ldr	r2, [pc, #40]	@ (800b3f0 <vQueueAddToRegistry+0x50>)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	4413      	add	r3, r2
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3d2:	e006      	b.n	800b3e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b07      	cmp	r3, #7
 800b3de:	d9e7      	bls.n	800b3b0 <vQueueAddToRegistry+0x10>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< Updated upstream
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	200025e0 	.word	0x200025e0

0800acf8 <vQueueWaitForMessageRestricted>:
=======
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	200025f4 	.word	0x200025f4

0800b3f4 <vQueueWaitForMessageRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	617b      	str	r3, [r7, #20]
=======
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< Updated upstream
 800ad08:	f001 fbee 	bl	800c4e8 <vPortEnterCritical>
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d103      	bne.n	800ad22 <vQueueWaitForMessageRestricted+0x2a>
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad28:	b25b      	sxtb	r3, r3
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d103      	bne.n	800ad38 <vQueueWaitForMessageRestricted+0x40>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad38:	f001 fc08 	bl	800c54c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d106      	bne.n	800ad52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	3324      	adds	r3, #36	@ 0x24
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	68b9      	ldr	r1, [r7, #8]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fc6d 	bl	800b62c <vTaskPlaceOnEventListRestricted>
=======
 800b404:	f001 fd00 	bl	800ce08 <vPortEnterCritical>
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b40e:	b25b      	sxtb	r3, r3
 800b410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b414:	d103      	bne.n	800b41e <vQueueWaitForMessageRestricted+0x2a>
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b424:	b25b      	sxtb	r3, r3
 800b426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42a:	d103      	bne.n	800b434 <vQueueWaitForMessageRestricted+0x40>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b434:	f001 fd1a 	bl	800ce6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d106      	bne.n	800b44e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	3324      	adds	r3, #36	@ 0x24
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	68b9      	ldr	r1, [r7, #8]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 fc6d 	bl	800bd28 <vTaskPlaceOnEventListRestricted>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800ad52:	6978      	ldr	r0, [r7, #20]
 800ad54:	f7ff ff26 	bl	800aba4 <prvUnlockQueue>
	}
 800ad58:	bf00      	nop
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <xTaskCreateStatic>:
=======
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f7ff ff26 	bl	800b2a0 <prvUnlockQueue>
	}
 800b454:	bf00      	nop
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <xTaskCreateStatic>:
>>>>>>> Stashed changes
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< Updated upstream
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	@ 0x38
 800ad64:	af04      	add	r7, sp, #16
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
=======
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08e      	sub	sp, #56	@ 0x38
 800b460:	af04      	add	r7, sp, #16
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< Updated upstream
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10b      	bne.n	800ad8c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	623b      	str	r3, [r7, #32]
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	e7fd      	b.n	800ad88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10b      	bne.n	800adaa <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	61fb      	str	r3, [r7, #28]
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop
 800ada8:	e7fd      	b.n	800ada6 <xTaskCreateStatic+0x46>
=======
 800b46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10b      	bne.n	800b488 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	623b      	str	r3, [r7, #32]
}
 800b482:	bf00      	nop
 800b484:	bf00      	nop
 800b486:	e7fd      	b.n	800b484 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10b      	bne.n	800b4a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	61fb      	str	r3, [r7, #28]
}
 800b4a0:	bf00      	nop
 800b4a2:	bf00      	nop
 800b4a4:	e7fd      	b.n	800b4a2 <xTaskCreateStatic+0x46>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< Updated upstream
 800adaa:	23a8      	movs	r3, #168	@ 0xa8
 800adac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2ba8      	cmp	r3, #168	@ 0xa8
 800adb2:	d00b      	beq.n	800adcc <xTaskCreateStatic+0x6c>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	61bb      	str	r3, [r7, #24]
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	e7fd      	b.n	800adc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800adcc:	693b      	ldr	r3, [r7, #16]
=======
 800b4a6:	23a8      	movs	r3, #168	@ 0xa8
 800b4a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2ba8      	cmp	r3, #168	@ 0xa8
 800b4ae:	d00b      	beq.n	800b4c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	61bb      	str	r3, [r7, #24]
}
 800b4c2:	bf00      	nop
 800b4c4:	bf00      	nop
 800b4c6:	e7fd      	b.n	800b4c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4c8:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< Updated upstream
 800adce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add0:	2b00      	cmp	r3, #0
 800add2:	d01e      	beq.n	800ae12 <xTaskCreateStatic+0xb2>
 800add4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01b      	beq.n	800ae12 <xTaskCreateStatic+0xb2>
=======
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d01e      	beq.n	800b50e <xTaskCreateStatic+0xb2>
 800b4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d01b      	beq.n	800b50e <xTaskCreateStatic+0xb2>
>>>>>>> Stashed changes
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 800adda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800addc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ade2:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4de:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	2202      	movs	r2, #2
 800ade8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800adec:	2300      	movs	r3, #0
 800adee:	9303      	str	r3, [sp, #12]
 800adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	f107 0314 	add.w	r3, r7, #20
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f851 	bl	800aeac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae0c:	f000 f8f6 	bl	800affc <prvAddNewTaskToReadyList>
 800ae10:	e001      	b.n	800ae16 <xTaskCreateStatic+0xb6>
=======
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	9303      	str	r3, [sp, #12]
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	f107 0314 	add.w	r3, r7, #20
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	68b9      	ldr	r1, [r7, #8]
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 f851 	bl	800b5a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b506:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b508:	f000 f8f6 	bl	800b6f8 <prvAddNewTaskToReadyList>
 800b50c:	e001      	b.n	800b512 <xTaskCreateStatic+0xb6>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = NULL;
<<<<<<< Updated upstream
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae16:	697b      	ldr	r3, [r7, #20]
	}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3728      	adds	r7, #40	@ 0x28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <xTaskCreate>:
=======
 800b50e:	2300      	movs	r3, #0
 800b510:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b512:	697b      	ldr	r3, [r7, #20]
	}
 800b514:	4618      	mov	r0, r3
 800b516:	3728      	adds	r7, #40	@ 0x28
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <xTaskCreate>:
>>>>>>> Stashed changes
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< Updated upstream
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08c      	sub	sp, #48	@ 0x30
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	80fb      	strh	r3, [r7, #6]
=======
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08c      	sub	sp, #48	@ 0x30
 800b520:	af04      	add	r7, sp, #16
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	4613      	mov	r3, r2
 800b52a:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< Updated upstream
 800ae30:	88fb      	ldrh	r3, [r7, #6]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 fc79 	bl	800c72c <pvPortMalloc>
 800ae3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00e      	beq.n	800ae60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae42:	20a8      	movs	r0, #168	@ 0xa8
 800ae44:	f001 fc72 	bl	800c72c <pvPortMalloc>
 800ae48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae56:	e005      	b.n	800ae64 <xTaskCreate+0x44>
=======
 800b52c:	88fb      	ldrh	r3, [r7, #6]
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4618      	mov	r0, r3
 800b532:	f001 fd8b 	bl	800d04c <pvPortMalloc>
 800b536:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00e      	beq.n	800b55c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b53e:	20a8      	movs	r0, #168	@ 0xa8
 800b540:	f001 fd84 	bl	800d04c <pvPortMalloc>
 800b544:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	631a      	str	r2, [r3, #48]	@ 0x30
 800b552:	e005      	b.n	800b560 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< Updated upstream
 800ae58:	6978      	ldr	r0, [r7, #20]
 800ae5a:	f001 fd35 	bl	800c8c8 <vPortFree>
 800ae5e:	e001      	b.n	800ae64 <xTaskCreate+0x44>
=======
 800b554:	6978      	ldr	r0, [r7, #20]
 800b556:	f001 fe47 	bl	800d1e8 <vPortFree>
 800b55a:	e001      	b.n	800b560 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< Updated upstream
 800ae60:	2300      	movs	r3, #0
 800ae62:	61fb      	str	r3, [r7, #28]
=======
 800b55c:	2300      	movs	r3, #0
 800b55e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< Updated upstream
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d017      	beq.n	800ae9a <xTaskCreate+0x7a>
=======
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d017      	beq.n	800b596 <xTaskCreate+0x7a>
>>>>>>> Stashed changes
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
=======
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800ae72:	88fa      	ldrh	r2, [r7, #6]
 800ae74:	2300      	movs	r3, #0
 800ae76:	9303      	str	r3, [sp, #12]
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	9302      	str	r3, [sp, #8]
 800ae7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	68b9      	ldr	r1, [r7, #8]
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 f80f 	bl	800aeac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae8e:	69f8      	ldr	r0, [r7, #28]
 800ae90:	f000 f8b4 	bl	800affc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae94:	2301      	movs	r3, #1
 800ae96:	61bb      	str	r3, [r7, #24]
 800ae98:	e002      	b.n	800aea0 <xTaskCreate+0x80>
=======
 800b56e:	88fa      	ldrh	r2, [r7, #6]
 800b570:	2300      	movs	r3, #0
 800b572:	9303      	str	r3, [sp, #12]
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	9302      	str	r3, [sp, #8]
 800b578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57a:	9301      	str	r3, [sp, #4]
 800b57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	68b9      	ldr	r1, [r7, #8]
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 f80f 	bl	800b5a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b58a:	69f8      	ldr	r0, [r7, #28]
 800b58c:	f000 f8b4 	bl	800b6f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b590:	2301      	movs	r3, #1
 800b592:	61bb      	str	r3, [r7, #24]
 800b594:	e002      	b.n	800b59c <xTaskCreate+0x80>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< Updated upstream
 800ae9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea0:	69bb      	ldr	r3, [r7, #24]
	}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3720      	adds	r7, #32
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <prvInitialiseNewTask>:
=======
 800b596:	f04f 33ff 	mov.w	r3, #4294967295
 800b59a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b59c:	69bb      	ldr	r3, [r7, #24]
	}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3720      	adds	r7, #32
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <prvInitialiseNewTask>:
>>>>>>> Stashed changes
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< Updated upstream
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
=======
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< Updated upstream
 800aeba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	461a      	mov	r2, r3
 800aec4:	21a5      	movs	r1, #165	@ 0xa5
 800aec6:	f002 fb6b 	bl	800d5a0 <memset>
=======
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	461a      	mov	r2, r3
 800b5c0:	21a5      	movs	r1, #165	@ 0xa5
 800b5c2:	f002 fc7d 	bl	800dec0 <memset>
>>>>>>> Stashed changes
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< Updated upstream
 800aeca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aed4:	3b01      	subs	r3, #1
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	f023 0307 	bic.w	r3, r3, #7
 800aee2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	617b      	str	r3, [r7, #20]
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	e7fd      	b.n	800af02 <prvInitialiseNewTask+0x56>
=======
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f023 0307 	bic.w	r3, r3, #7
 800b5de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00b      	beq.n	800b602 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	617b      	str	r3, [r7, #20]
}
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	e7fd      	b.n	800b5fe <prvInitialiseNewTask+0x56>
>>>>>>> Stashed changes
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< Updated upstream
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01f      	beq.n	800af4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af0c:	2300      	movs	r3, #0
 800af0e:	61fb      	str	r3, [r7, #28]
 800af10:	e012      	b.n	800af38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	4413      	add	r3, r2
 800af18:	7819      	ldrb	r1, [r3, #0]
 800af1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	4413      	add	r3, r2
 800af20:	3334      	adds	r3, #52	@ 0x34
 800af22:	460a      	mov	r2, r1
 800af24:	701a      	strb	r2, [r3, #0]
=======
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d01f      	beq.n	800b648 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b608:	2300      	movs	r3, #0
 800b60a:	61fb      	str	r3, [r7, #28]
 800b60c:	e012      	b.n	800b634 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	4413      	add	r3, r2
 800b614:	7819      	ldrb	r1, [r3, #0]
 800b616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	4413      	add	r3, r2
 800b61c:	3334      	adds	r3, #52	@ 0x34
 800b61e:	460a      	mov	r2, r1
 800b620:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< Updated upstream
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	4413      	add	r3, r2
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d006      	beq.n	800af40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	3301      	adds	r3, #1
 800af36:	61fb      	str	r3, [r7, #28]
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	2b0f      	cmp	r3, #15
 800af3c:	d9e9      	bls.n	800af12 <prvInitialiseNewTask+0x66>
 800af3e:	e000      	b.n	800af42 <prvInitialiseNewTask+0x96>
			{
				break;
 800af40:	bf00      	nop
=======
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	4413      	add	r3, r2
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d006      	beq.n	800b63c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	3301      	adds	r3, #1
 800b632:	61fb      	str	r3, [r7, #28]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	2b0f      	cmp	r3, #15
 800b638:	d9e9      	bls.n	800b60e <prvInitialiseNewTask+0x66>
 800b63a:	e000      	b.n	800b63e <prvInitialiseNewTask+0x96>
			{
				break;
 800b63c:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< Updated upstream
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af4a:	e003      	b.n	800af54 <prvInitialiseNewTask+0xa8>
=======
 800b63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b646:	e003      	b.n	800b650 <prvInitialiseNewTask+0xa8>
>>>>>>> Stashed changes
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< Updated upstream
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 800b648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> Stashed changes
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< Updated upstream
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	2b37      	cmp	r3, #55	@ 0x37
 800af58:	d901      	bls.n	800af5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af5a:	2337      	movs	r3, #55	@ 0x37
 800af5c:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 800b650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b652:	2b37      	cmp	r3, #55	@ 0x37
 800b654:	d901      	bls.n	800b65a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b656:	2337      	movs	r3, #55	@ 0x37
 800b658:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< Updated upstream
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af68:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6c:	2200      	movs	r2, #0
 800af6e:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 800b65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b65e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b664:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b668:	2200      	movs	r2, #0
 800b66a:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> Stashed changes
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af72:	3304      	adds	r3, #4
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff f965 	bl	800a244 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7c:	3318      	adds	r3, #24
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff f960 	bl	800a244 <vListInitialiseItem>
=======
 800b66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66e:	3304      	adds	r3, #4
 800b670:	4618      	mov	r0, r3
 800b672:	f7fe ff49 	bl	800a508 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b678:	3318      	adds	r3, #24
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe ff44 	bl	800a508 <vListInitialiseItem>
>>>>>>> Stashed changes

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< Updated upstream
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af98:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 800b680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b684:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b688:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b694:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> Stashed changes
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< Updated upstream
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
=======
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	2200      	movs	r2, #0
 800b69a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
>>>>>>> Stashed changes
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< Updated upstream
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	3354      	adds	r3, #84	@ 0x54
 800afae:	224c      	movs	r2, #76	@ 0x4c
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f002 faf4 	bl	800d5a0 <memset>
 800afb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afba:	4a0d      	ldr	r2, [pc, #52]	@ (800aff0 <prvInitialiseNewTask+0x144>)
 800afbc:	659a      	str	r2, [r3, #88]	@ 0x58
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	4a0c      	ldr	r2, [pc, #48]	@ (800aff4 <prvInitialiseNewTask+0x148>)
 800afc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800afc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc6:	4a0c      	ldr	r2, [pc, #48]	@ (800aff8 <prvInitialiseNewTask+0x14c>)
 800afc8:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a8:	3354      	adds	r3, #84	@ 0x54
 800b6aa:	224c      	movs	r2, #76	@ 0x4c
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f002 fc06 	bl	800dec0 <memset>
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	4a0d      	ldr	r2, [pc, #52]	@ (800b6ec <prvInitialiseNewTask+0x144>)
 800b6b8:	659a      	str	r2, [r3, #88]	@ 0x58
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b6f0 <prvInitialiseNewTask+0x148>)
 800b6be:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b6f4 <prvInitialiseNewTask+0x14c>)
 800b6c4:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> Stashed changes
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< Updated upstream
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	68f9      	ldr	r1, [r7, #12]
 800afce:	69b8      	ldr	r0, [r7, #24]
 800afd0:	f001 f95a 	bl	800c288 <pxPortInitialiseStack>
 800afd4:	4602      	mov	r2, r0
 800afd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd8:	601a      	str	r2, [r3, #0]
=======
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	68f9      	ldr	r1, [r7, #12]
 800b6ca:	69b8      	ldr	r0, [r7, #24]
 800b6cc:	f001 fa6a 	bl	800cba4 <pxPortInitialiseStack>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< Updated upstream
 800afda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <prvInitialiseNewTask+0x13a>
=======
 800b6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <prvInitialiseNewTask+0x13a>
>>>>>>> Stashed changes
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< Updated upstream
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe4:	601a      	str	r2, [r3, #0]
=======
 800b6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800afe6:	bf00      	nop
 800afe8:	3720      	adds	r7, #32
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20007520 	.word	0x20007520
 800aff4:	20007588 	.word	0x20007588
 800aff8:	200075f0 	.word	0x200075f0

0800affc <prvAddNewTaskToReadyList>:
=======
 800b6e2:	bf00      	nop
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	2000a414 	.word	0x2000a414
 800b6f0:	2000a47c 	.word	0x2000a47c
 800b6f4:	2000a4e4 	.word	0x2000a4e4

0800b6f8 <prvAddNewTaskToReadyList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< Updated upstream
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b004:	f001 fa70 	bl	800c4e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b008:	4b2d      	ldr	r3, [pc, #180]	@ (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	4a2c      	ldr	r2, [pc, #176]	@ (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b012:	4b2c      	ldr	r3, [pc, #176]	@ (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <prvAddNewTaskToReadyList+0x32>
=======
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b700:	f001 fb82 	bl	800ce08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b704:	4b2d      	ldr	r3, [pc, #180]	@ (800b7bc <prvAddNewTaskToReadyList+0xc4>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	4a2c      	ldr	r2, [pc, #176]	@ (800b7bc <prvAddNewTaskToReadyList+0xc4>)
 800b70c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b70e:	4b2c      	ldr	r3, [pc, #176]	@ (800b7c0 <prvAddNewTaskToReadyList+0xc8>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d109      	bne.n	800b72a <prvAddNewTaskToReadyList+0x32>
>>>>>>> Stashed changes
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< Updated upstream
 800b01a:	4a2a      	ldr	r2, [pc, #168]	@ (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b020:	4b27      	ldr	r3, [pc, #156]	@ (800b0c0 <prvAddNewTaskToReadyList+0xc4>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d110      	bne.n	800b04a <prvAddNewTaskToReadyList+0x4e>
=======
 800b716:	4a2a      	ldr	r2, [pc, #168]	@ (800b7c0 <prvAddNewTaskToReadyList+0xc8>)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b71c:	4b27      	ldr	r3, [pc, #156]	@ (800b7bc <prvAddNewTaskToReadyList+0xc4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d110      	bne.n	800b746 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< Updated upstream
 800b028:	f000 fc2e 	bl	800b888 <prvInitialiseTaskLists>
 800b02c:	e00d      	b.n	800b04a <prvAddNewTaskToReadyList+0x4e>
=======
 800b724:	f000 fc2e 	bl	800bf84 <prvInitialiseTaskLists>
 800b728:	e00d      	b.n	800b746 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< Updated upstream
 800b02e:	4b26      	ldr	r3, [pc, #152]	@ (800b0c8 <prvAddNewTaskToReadyList+0xcc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b036:	4b23      	ldr	r3, [pc, #140]	@ (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b040:	429a      	cmp	r2, r3
 800b042:	d802      	bhi.n	800b04a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b044:	4a1f      	ldr	r2, [pc, #124]	@ (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6013      	str	r3, [r2, #0]
=======
 800b72a:	4b26      	ldr	r3, [pc, #152]	@ (800b7c4 <prvAddNewTaskToReadyList+0xcc>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d109      	bne.n	800b746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b732:	4b23      	ldr	r3, [pc, #140]	@ (800b7c0 <prvAddNewTaskToReadyList+0xc8>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d802      	bhi.n	800b746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b740:	4a1f      	ldr	r2, [pc, #124]	@ (800b7c0 <prvAddNewTaskToReadyList+0xc8>)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< Updated upstream
 800b04a:	4b20      	ldr	r3, [pc, #128]	@ (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3301      	adds	r3, #1
 800b050:	4a1e      	ldr	r2, [pc, #120]	@ (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b052:	6013      	str	r3, [r2, #0]
=======
 800b746:	4b20      	ldr	r3, [pc, #128]	@ (800b7c8 <prvAddNewTaskToReadyList+0xd0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	4a1e      	ldr	r2, [pc, #120]	@ (800b7c8 <prvAddNewTaskToReadyList+0xd0>)
 800b74e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< Updated upstream
 800b054:	4b1d      	ldr	r3, [pc, #116]	@ (800b0cc <prvAddNewTaskToReadyList+0xd0>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800b750:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c8 <prvAddNewTaskToReadyList+0xd0>)
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< Updated upstream
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b060:	4b1b      	ldr	r3, [pc, #108]	@ (800b0d0 <prvAddNewTaskToReadyList+0xd4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d903      	bls.n	800b070 <prvAddNewTaskToReadyList+0x74>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06c:	4a18      	ldr	r2, [pc, #96]	@ (800b0d0 <prvAddNewTaskToReadyList+0xd4>)
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4a15      	ldr	r2, [pc, #84]	@ (800b0d4 <prvAddNewTaskToReadyList+0xd8>)
 800b07e:	441a      	add	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	3304      	adds	r3, #4
 800b084:	4619      	mov	r1, r3
 800b086:	4610      	mov	r0, r2
 800b088:	f7ff f8e9 	bl	800a25e <vListInsertEnd>
=======
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7cc <prvAddNewTaskToReadyList+0xd4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d903      	bls.n	800b76c <prvAddNewTaskToReadyList+0x74>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b768:	4a18      	ldr	r2, [pc, #96]	@ (800b7cc <prvAddNewTaskToReadyList+0xd4>)
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b770:	4613      	mov	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4a15      	ldr	r2, [pc, #84]	@ (800b7d0 <prvAddNewTaskToReadyList+0xd8>)
 800b77a:	441a      	add	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3304      	adds	r3, #4
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f7fe fecd 	bl	800a522 <vListInsertEnd>
>>>>>>> Stashed changes

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800b08c:	f001 fa5e 	bl	800c54c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b090:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c8 <prvAddNewTaskToReadyList+0xcc>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00e      	beq.n	800b0b6 <prvAddNewTaskToReadyList+0xba>
=======
 800b788:	f001 fb70 	bl	800ce6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b78c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c4 <prvAddNewTaskToReadyList+0xcc>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00e      	beq.n	800b7b2 <prvAddNewTaskToReadyList+0xba>
>>>>>>> Stashed changes
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< Updated upstream
 800b098:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c4 <prvAddNewTaskToReadyList+0xc8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d207      	bcs.n	800b0b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d8 <prvAddNewTaskToReadyList+0xdc>)
 800b0a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	f3bf 8f6f 	isb	sy
=======
 800b794:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c0 <prvAddNewTaskToReadyList+0xc8>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d207      	bcs.n	800b7b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b7d4 <prvAddNewTaskToReadyList+0xdc>)
 800b7a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7a8:	601a      	str	r2, [r3, #0]
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20002af4 	.word	0x20002af4
 800b0c4:	20002620 	.word	0x20002620
 800b0c8:	20002b00 	.word	0x20002b00
 800b0cc:	20002b10 	.word	0x20002b10
 800b0d0:	20002afc 	.word	0x20002afc
 800b0d4:	20002624 	.word	0x20002624
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <vTaskDelay>:
=======
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20002b08 	.word	0x20002b08
 800b7c0:	20002634 	.word	0x20002634
 800b7c4:	20002b14 	.word	0x20002b14
 800b7c8:	20002b24 	.word	0x20002b24
 800b7cc:	20002b10 	.word	0x20002b10
 800b7d0:	20002638 	.word	0x20002638
 800b7d4:	e000ed04 	.word	0xe000ed04

0800b7d8 <vTaskDelay>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< Updated upstream
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d018      	beq.n	800b120 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0ee:	4b14      	ldr	r3, [pc, #80]	@ (800b140 <vTaskDelay+0x64>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00b      	beq.n	800b10e <vTaskDelay+0x32>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60bb      	str	r3, [r7, #8]
}
 800b108:	bf00      	nop
 800b10a:	bf00      	nop
 800b10c:	e7fd      	b.n	800b10a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b10e:	f000 f88b 	bl	800b228 <vTaskSuspendAll>
=======
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d018      	beq.n	800b81c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7ea:	4b14      	ldr	r3, [pc, #80]	@ (800b83c <vTaskDelay+0x64>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00b      	beq.n	800b80a <vTaskDelay+0x32>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	60bb      	str	r3, [r7, #8]
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop
 800b808:	e7fd      	b.n	800b806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b80a:	f000 f88b 	bl	800b924 <vTaskSuspendAll>
>>>>>>> Stashed changes
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< Updated upstream
 800b112:	2100      	movs	r1, #0
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fd09 	bl	800bb2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b11a:	f000 f893 	bl	800b244 <xTaskResumeAll>
 800b11e:	60f8      	str	r0, [r7, #12]
=======
 800b80e:	2100      	movs	r1, #0
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fe19 	bl	800c448 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b816:	f000 f893 	bl	800b940 <xTaskResumeAll>
 800b81a:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d107      	bne.n	800b136 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b126:	4b07      	ldr	r3, [pc, #28]	@ (800b144 <vTaskDelay+0x68>)
 800b128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
=======
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d107      	bne.n	800b832 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b822:	4b07      	ldr	r3, [pc, #28]	@ (800b840 <vTaskDelay+0x68>)
 800b824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800b136:	bf00      	nop
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20002b1c 	.word	0x20002b1c
 800b144:	e000ed04 	.word	0xe000ed04

0800b148 <vTaskStartScheduler>:
=======
 800b832:	bf00      	nop
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20002b30 	.word	0x20002b30
 800b840:	e000ed04 	.word	0xe000ed04

0800b844 <vTaskStartScheduler>:
>>>>>>> Stashed changes

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< Updated upstream
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08a      	sub	sp, #40	@ 0x28
 800b14c:	af04      	add	r7, sp, #16
=======
 800b844:	b580      	push	{r7, lr}
 800b846:	b08a      	sub	sp, #40	@ 0x28
 800b848:	af04      	add	r7, sp, #16
>>>>>>> Stashed changes
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 800b14e:	2300      	movs	r3, #0
 800b150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	607b      	str	r3, [r7, #4]
=======
 800b84a:	2300      	movs	r3, #0
 800b84c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b84e:	2300      	movs	r3, #0
 800b850:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< Updated upstream
 800b156:	463a      	mov	r2, r7
 800b158:	1d39      	adds	r1, r7, #4
 800b15a:	f107 0308 	add.w	r3, r7, #8
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff f81c 	bl	800a19c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	9202      	str	r2, [sp, #8]
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	2300      	movs	r3, #0
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	2300      	movs	r3, #0
 800b174:	460a      	mov	r2, r1
 800b176:	4924      	ldr	r1, [pc, #144]	@ (800b208 <vTaskStartScheduler+0xc0>)
 800b178:	4824      	ldr	r0, [pc, #144]	@ (800b20c <vTaskStartScheduler+0xc4>)
 800b17a:	f7ff fdf1 	bl	800ad60 <xTaskCreateStatic>
 800b17e:	4603      	mov	r3, r0
 800b180:	4a23      	ldr	r2, [pc, #140]	@ (800b210 <vTaskStartScheduler+0xc8>)
 800b182:	6013      	str	r3, [r2, #0]
=======
 800b852:	463a      	mov	r2, r7
 800b854:	1d39      	adds	r1, r7, #4
 800b856:	f107 0308 	add.w	r3, r7, #8
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fe00 	bl	800a460 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	9202      	str	r2, [sp, #8]
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	2300      	movs	r3, #0
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	2300      	movs	r3, #0
 800b870:	460a      	mov	r2, r1
 800b872:	4924      	ldr	r1, [pc, #144]	@ (800b904 <vTaskStartScheduler+0xc0>)
 800b874:	4824      	ldr	r0, [pc, #144]	@ (800b908 <vTaskStartScheduler+0xc4>)
 800b876:	f7ff fdf1 	bl	800b45c <xTaskCreateStatic>
 800b87a:	4603      	mov	r3, r0
 800b87c:	4a23      	ldr	r2, [pc, #140]	@ (800b90c <vTaskStartScheduler+0xc8>)
 800b87e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< Updated upstream
 800b184:	4b22      	ldr	r3, [pc, #136]	@ (800b210 <vTaskStartScheduler+0xc8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b18c:	2301      	movs	r3, #1
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	e001      	b.n	800b196 <vTaskStartScheduler+0x4e>
=======
 800b880:	4b22      	ldr	r3, [pc, #136]	@ (800b90c <vTaskStartScheduler+0xc8>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b888:	2301      	movs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
 800b88c:	e001      	b.n	800b892 <vTaskStartScheduler+0x4e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< Updated upstream
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
=======
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< Updated upstream
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d102      	bne.n	800b1a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b19c:	f000 fd1a 	bl	800bbd4 <xTimerCreateTimerTask>
 800b1a0:	6178      	str	r0, [r7, #20]
=======
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d102      	bne.n	800b89e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b898:	f000 fe2a 	bl	800c4f0 <xTimerCreateTimerTask>
 800b89c:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< Updated upstream
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d11b      	bne.n	800b1e0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	613b      	str	r3, [r7, #16]
}
 800b1ba:	bf00      	nop
=======
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d11b      	bne.n	800b8dc <vTaskStartScheduler+0x98>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	613b      	str	r3, [r7, #16]
}
 800b8b6:	bf00      	nop
>>>>>>> Stashed changes
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< Updated upstream
 800b1bc:	4b15      	ldr	r3, [pc, #84]	@ (800b214 <vTaskStartScheduler+0xcc>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3354      	adds	r3, #84	@ 0x54
 800b1c2:	4a15      	ldr	r2, [pc, #84]	@ (800b218 <vTaskStartScheduler+0xd0>)
 800b1c4:	6013      	str	r3, [r2, #0]
=======
 800b8b8:	4b15      	ldr	r3, [pc, #84]	@ (800b910 <vTaskStartScheduler+0xcc>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3354      	adds	r3, #84	@ 0x54
 800b8be:	4a15      	ldr	r2, [pc, #84]	@ (800b914 <vTaskStartScheduler+0xd0>)
 800b8c0:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800b1c6:	4b15      	ldr	r3, [pc, #84]	@ (800b21c <vTaskStartScheduler+0xd4>)
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1ce:	4b14      	ldr	r3, [pc, #80]	@ (800b220 <vTaskStartScheduler+0xd8>)
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1d4:	4b13      	ldr	r3, [pc, #76]	@ (800b224 <vTaskStartScheduler+0xdc>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
=======
 800b8c2:	4b15      	ldr	r3, [pc, #84]	@ (800b918 <vTaskStartScheduler+0xd4>)
 800b8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8ca:	4b14      	ldr	r3, [pc, #80]	@ (800b91c <vTaskStartScheduler+0xd8>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8d0:	4b13      	ldr	r3, [pc, #76]	@ (800b920 <vTaskStartScheduler+0xdc>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< Updated upstream
 800b1da:	f001 f8e1 	bl	800c3a0 <xPortStartScheduler>
=======
 800b8d6:	f001 f9f3 	bl	800ccc0 <xPortStartScheduler>
>>>>>>> Stashed changes
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< Updated upstream
 800b1de:	e00f      	b.n	800b200 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d10b      	bne.n	800b200 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	bf00      	nop
 800b1fe:	e7fd      	b.n	800b1fc <vTaskStartScheduler+0xb4>
}
 800b200:	bf00      	nop
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	0800e1d0 	.word	0x0800e1d0
 800b20c:	0800b859 	.word	0x0800b859
 800b210:	20002b18 	.word	0x20002b18
 800b214:	20002620 	.word	0x20002620
 800b218:	20000188 	.word	0x20000188
 800b21c:	20002b14 	.word	0x20002b14
 800b220:	20002b00 	.word	0x20002b00
 800b224:	20002af8 	.word	0x20002af8

0800b228 <vTaskSuspendAll>:
=======
 800b8da:	e00f      	b.n	800b8fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e2:	d10b      	bne.n	800b8fc <vTaskStartScheduler+0xb8>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	60fb      	str	r3, [r7, #12]
}
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	e7fd      	b.n	800b8f8 <vTaskStartScheduler+0xb4>
}
 800b8fc:	bf00      	nop
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	0800eb44 	.word	0x0800eb44
 800b908:	0800bf55 	.word	0x0800bf55
 800b90c:	20002b2c 	.word	0x20002b2c
 800b910:	20002634 	.word	0x20002634
 800b914:	20000188 	.word	0x20000188
 800b918:	20002b28 	.word	0x20002b28
 800b91c:	20002b14 	.word	0x20002b14
 800b920:	20002b0c 	.word	0x20002b0c

0800b924 <vTaskSuspendAll>:
>>>>>>> Stashed changes
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< Updated upstream
 800b228:	b480      	push	{r7}
 800b22a:	af00      	add	r7, sp, #0
=======
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< Updated upstream
 800b22c:	4b04      	ldr	r3, [pc, #16]	@ (800b240 <vTaskSuspendAll+0x18>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	4a03      	ldr	r2, [pc, #12]	@ (800b240 <vTaskSuspendAll+0x18>)
 800b234:	6013      	str	r3, [r2, #0]
=======
 800b928:	4b04      	ldr	r3, [pc, #16]	@ (800b93c <vTaskSuspendAll+0x18>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3301      	adds	r3, #1
 800b92e:	4a03      	ldr	r2, [pc, #12]	@ (800b93c <vTaskSuspendAll+0x18>)
 800b930:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< Updated upstream
 800b236:	bf00      	nop
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	20002b1c 	.word	0x20002b1c

0800b244 <xTaskResumeAll>:
=======
 800b932:	bf00      	nop
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	20002b30 	.word	0x20002b30

0800b940 <xTaskResumeAll>:
>>>>>>> Stashed changes

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< Updated upstream
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b24e:	2300      	movs	r3, #0
 800b250:	60bb      	str	r3, [r7, #8]
=======
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b946:	2300      	movs	r3, #0
 800b948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b94a:	2300      	movs	r3, #0
 800b94c:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< Updated upstream
 800b252:	4b42      	ldr	r3, [pc, #264]	@ (800b35c <xTaskResumeAll+0x118>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10b      	bne.n	800b272 <xTaskResumeAll+0x2e>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	603b      	str	r3, [r7, #0]
}
 800b26c:	bf00      	nop
 800b26e:	bf00      	nop
 800b270:	e7fd      	b.n	800b26e <xTaskResumeAll+0x2a>
=======
 800b94e:	4b42      	ldr	r3, [pc, #264]	@ (800ba58 <xTaskResumeAll+0x118>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10b      	bne.n	800b96e <xTaskResumeAll+0x2e>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	603b      	str	r3, [r7, #0]
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	e7fd      	b.n	800b96a <xTaskResumeAll+0x2a>
>>>>>>> Stashed changes
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800b272:	f001 f939 	bl	800c4e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b276:	4b39      	ldr	r3, [pc, #228]	@ (800b35c <xTaskResumeAll+0x118>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	4a37      	ldr	r2, [pc, #220]	@ (800b35c <xTaskResumeAll+0x118>)
 800b27e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b280:	4b36      	ldr	r3, [pc, #216]	@ (800b35c <xTaskResumeAll+0x118>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d162      	bne.n	800b34e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b288:	4b35      	ldr	r3, [pc, #212]	@ (800b360 <xTaskResumeAll+0x11c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d05e      	beq.n	800b34e <xTaskResumeAll+0x10a>
=======
 800b96e:	f001 fa4b 	bl	800ce08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b972:	4b39      	ldr	r3, [pc, #228]	@ (800ba58 <xTaskResumeAll+0x118>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3b01      	subs	r3, #1
 800b978:	4a37      	ldr	r2, [pc, #220]	@ (800ba58 <xTaskResumeAll+0x118>)
 800b97a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97c:	4b36      	ldr	r3, [pc, #216]	@ (800ba58 <xTaskResumeAll+0x118>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d162      	bne.n	800ba4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b984:	4b35      	ldr	r3, [pc, #212]	@ (800ba5c <xTaskResumeAll+0x11c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d05e      	beq.n	800ba4a <xTaskResumeAll+0x10a>
>>>>>>> Stashed changes
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< Updated upstream
 800b290:	e02f      	b.n	800b2f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b292:	4b34      	ldr	r3, [pc, #208]	@ (800b364 <xTaskResumeAll+0x120>)
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	3318      	adds	r3, #24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff f83a 	bl	800a318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7ff f835 	bl	800a318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b368 <xTaskResumeAll+0x124>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d903      	bls.n	800b2c2 <xTaskResumeAll+0x7e>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2be:	4a2a      	ldr	r2, [pc, #168]	@ (800b368 <xTaskResumeAll+0x124>)
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4a27      	ldr	r2, [pc, #156]	@ (800b36c <xTaskResumeAll+0x128>)
 800b2d0:	441a      	add	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f7fe ffc0 	bl	800a25e <vListInsertEnd>
=======
 800b98c:	e02f      	b.n	800b9ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b98e:	4b34      	ldr	r3, [pc, #208]	@ (800ba60 <xTaskResumeAll+0x120>)
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3318      	adds	r3, #24
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fe1e 	bl	800a5dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe fe19 	bl	800a5dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ae:	4b2d      	ldr	r3, [pc, #180]	@ (800ba64 <xTaskResumeAll+0x124>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d903      	bls.n	800b9be <xTaskResumeAll+0x7e>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ba:	4a2a      	ldr	r2, [pc, #168]	@ (800ba64 <xTaskResumeAll+0x124>)
 800b9bc:	6013      	str	r3, [r2, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4a27      	ldr	r2, [pc, #156]	@ (800ba68 <xTaskResumeAll+0x128>)
 800b9cc:	441a      	add	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f7fe fda4 	bl	800a522 <vListInsertEnd>
>>>>>>> Stashed changes

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e2:	4b23      	ldr	r3, [pc, #140]	@ (800b370 <xTaskResumeAll+0x12c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d302      	bcc.n	800b2f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b2ec:	4b21      	ldr	r3, [pc, #132]	@ (800b374 <xTaskResumeAll+0x130>)
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2f2:	4b1c      	ldr	r3, [pc, #112]	@ (800b364 <xTaskResumeAll+0x120>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1cb      	bne.n	800b292 <xTaskResumeAll+0x4e>
=======
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9de:	4b23      	ldr	r3, [pc, #140]	@ (800ba6c <xTaskResumeAll+0x12c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d302      	bcc.n	800b9ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b9e8:	4b21      	ldr	r3, [pc, #132]	@ (800ba70 <xTaskResumeAll+0x130>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9ee:	4b1c      	ldr	r3, [pc, #112]	@ (800ba60 <xTaskResumeAll+0x120>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1cb      	bne.n	800b98e <xTaskResumeAll+0x4e>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< Updated upstream
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <xTaskResumeAll+0xc0>
=======
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <xTaskResumeAll+0xc0>
>>>>>>> Stashed changes
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< Updated upstream
 800b300:	f000 fb66 	bl	800b9d0 <prvResetNextTaskUnblockTime>
=======
 800b9fc:	f000 fb66 	bl	800c0cc <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< Updated upstream
 800b304:	4b1c      	ldr	r3, [pc, #112]	@ (800b378 <xTaskResumeAll+0x134>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d010      	beq.n	800b332 <xTaskResumeAll+0xee>
=======
 800ba00:	4b1c      	ldr	r3, [pc, #112]	@ (800ba74 <xTaskResumeAll+0x134>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d010      	beq.n	800ba2e <xTaskResumeAll+0xee>
>>>>>>> Stashed changes
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 800b310:	f000 f846 	bl	800b3a0 <xTaskIncrementTick>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b31a:	4b16      	ldr	r3, [pc, #88]	@ (800b374 <xTaskResumeAll+0x130>)
 800b31c:	2201      	movs	r2, #1
 800b31e:	601a      	str	r2, [r3, #0]
=======
 800ba0c:	f000 f846 	bl	800ba9c <xTaskIncrementTick>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba16:	4b16      	ldr	r3, [pc, #88]	@ (800ba70 <xTaskResumeAll+0x130>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< Updated upstream
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3b01      	subs	r3, #1
 800b324:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1f1      	bne.n	800b310 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b32c:	4b12      	ldr	r3, [pc, #72]	@ (800b378 <xTaskResumeAll+0x134>)
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
=======
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1f1      	bne.n	800ba0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba28:	4b12      	ldr	r3, [pc, #72]	@ (800ba74 <xTaskResumeAll+0x134>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800b332:	4b10      	ldr	r3, [pc, #64]	@ (800b374 <xTaskResumeAll+0x130>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d009      	beq.n	800b34e <xTaskResumeAll+0x10a>
=======
 800ba2e:	4b10      	ldr	r3, [pc, #64]	@ (800ba70 <xTaskResumeAll+0x130>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <xTaskResumeAll+0x10a>
>>>>>>> Stashed changes
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< Updated upstream
 800b33a:	2301      	movs	r3, #1
 800b33c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b33e:	4b0f      	ldr	r3, [pc, #60]	@ (800b37c <xTaskResumeAll+0x138>)
 800b340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	f3bf 8f6f 	isb	sy
=======
 800ba36:	2301      	movs	r3, #1
 800ba38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba78 <xTaskResumeAll+0x138>)
 800ba3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800b34e:	f001 f8fd 	bl	800c54c <vPortExitCritical>

	return xAlreadyYielded;
 800b352:	68bb      	ldr	r3, [r7, #8]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	20002b1c 	.word	0x20002b1c
 800b360:	20002af4 	.word	0x20002af4
 800b364:	20002ab4 	.word	0x20002ab4
 800b368:	20002afc 	.word	0x20002afc
 800b36c:	20002624 	.word	0x20002624
 800b370:	20002620 	.word	0x20002620
 800b374:	20002b08 	.word	0x20002b08
 800b378:	20002b04 	.word	0x20002b04
 800b37c:	e000ed04 	.word	0xe000ed04

0800b380 <xTaskGetTickCount>:
=======
 800ba4a:	f001 fa0f 	bl	800ce6c <vPortExitCritical>

	return xAlreadyYielded;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20002b30 	.word	0x20002b30
 800ba5c:	20002b08 	.word	0x20002b08
 800ba60:	20002ac8 	.word	0x20002ac8
 800ba64:	20002b10 	.word	0x20002b10
 800ba68:	20002638 	.word	0x20002638
 800ba6c:	20002634 	.word	0x20002634
 800ba70:	20002b1c 	.word	0x20002b1c
 800ba74:	20002b18 	.word	0x20002b18
 800ba78:	e000ed04 	.word	0xe000ed04

0800ba7c <xTaskGetTickCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< Updated upstream
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
=======
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< Updated upstream
 800b386:	4b05      	ldr	r3, [pc, #20]	@ (800b39c <xTaskGetTickCount+0x1c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	607b      	str	r3, [r7, #4]
=======
 800ba82:	4b05      	ldr	r3, [pc, #20]	@ (800ba98 <xTaskGetTickCount+0x1c>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< Updated upstream
 800b38c:	687b      	ldr	r3, [r7, #4]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	20002af8 	.word	0x20002af8

0800b3a0 <xTaskIncrementTick>:
=======
 800ba88:	687b      	ldr	r3, [r7, #4]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20002b0c 	.word	0x20002b0c

0800ba9c <xTaskIncrementTick>:
>>>>>>> Stashed changes

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< Updated upstream
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]
=======
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800b3aa:	4b4f      	ldr	r3, [pc, #316]	@ (800b4e8 <xTaskIncrementTick+0x148>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f040 8090 	bne.w	800b4d4 <xTaskIncrementTick+0x134>
=======
 800baa6:	4b4f      	ldr	r3, [pc, #316]	@ (800bbe4 <xTaskIncrementTick+0x148>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f040 8090 	bne.w	800bbd0 <xTaskIncrementTick+0x134>
>>>>>>> Stashed changes
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< Updated upstream
 800b3b4:	4b4d      	ldr	r3, [pc, #308]	@ (800b4ec <xTaskIncrementTick+0x14c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	613b      	str	r3, [r7, #16]
=======
 800bab0:	4b4d      	ldr	r3, [pc, #308]	@ (800bbe8 <xTaskIncrementTick+0x14c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3301      	adds	r3, #1
 800bab6:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< Updated upstream
 800b3bc:	4a4b      	ldr	r2, [pc, #300]	@ (800b4ec <xTaskIncrementTick+0x14c>)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d121      	bne.n	800b40c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3c8:	4b49      	ldr	r3, [pc, #292]	@ (800b4f0 <xTaskIncrementTick+0x150>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	603b      	str	r3, [r7, #0]
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	e7fd      	b.n	800b3e6 <xTaskIncrementTick+0x46>
 800b3ea:	4b41      	ldr	r3, [pc, #260]	@ (800b4f0 <xTaskIncrementTick+0x150>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	4b40      	ldr	r3, [pc, #256]	@ (800b4f4 <xTaskIncrementTick+0x154>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b4f0 <xTaskIncrementTick+0x150>)
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	4a3e      	ldr	r2, [pc, #248]	@ (800b4f4 <xTaskIncrementTick+0x154>)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	4b3e      	ldr	r3, [pc, #248]	@ (800b4f8 <xTaskIncrementTick+0x158>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	4a3c      	ldr	r2, [pc, #240]	@ (800b4f8 <xTaskIncrementTick+0x158>)
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	f000 fae2 	bl	800b9d0 <prvResetNextTaskUnblockTime>
=======
 800bab8:	4a4b      	ldr	r2, [pc, #300]	@ (800bbe8 <xTaskIncrementTick+0x14c>)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d121      	bne.n	800bb08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bac4:	4b49      	ldr	r3, [pc, #292]	@ (800bbec <xTaskIncrementTick+0x150>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00b      	beq.n	800bae6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	603b      	str	r3, [r7, #0]
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	e7fd      	b.n	800bae2 <xTaskIncrementTick+0x46>
 800bae6:	4b41      	ldr	r3, [pc, #260]	@ (800bbec <xTaskIncrementTick+0x150>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	4b40      	ldr	r3, [pc, #256]	@ (800bbf0 <xTaskIncrementTick+0x154>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a3e      	ldr	r2, [pc, #248]	@ (800bbec <xTaskIncrementTick+0x150>)
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	4a3e      	ldr	r2, [pc, #248]	@ (800bbf0 <xTaskIncrementTick+0x154>)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	4b3e      	ldr	r3, [pc, #248]	@ (800bbf4 <xTaskIncrementTick+0x158>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	3301      	adds	r3, #1
 800bb00:	4a3c      	ldr	r2, [pc, #240]	@ (800bbf4 <xTaskIncrementTick+0x158>)
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	f000 fae2 	bl	800c0cc <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< Updated upstream
 800b40c:	4b3b      	ldr	r3, [pc, #236]	@ (800b4fc <xTaskIncrementTick+0x15c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	429a      	cmp	r2, r3
 800b414:	d349      	bcc.n	800b4aa <xTaskIncrementTick+0x10a>
=======
 800bb08:	4b3b      	ldr	r3, [pc, #236]	@ (800bbf8 <xTaskIncrementTick+0x15c>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d349      	bcc.n	800bba6 <xTaskIncrementTick+0x10a>
>>>>>>> Stashed changes
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< Updated upstream
 800b416:	4b36      	ldr	r3, [pc, #216]	@ (800b4f0 <xTaskIncrementTick+0x150>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <xTaskIncrementTick+0x8a>
=======
 800bb12:	4b36      	ldr	r3, [pc, #216]	@ (800bbec <xTaskIncrementTick+0x150>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d104      	bne.n	800bb26 <xTaskIncrementTick+0x8a>
>>>>>>> Stashed changes
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800b420:	4b36      	ldr	r3, [pc, #216]	@ (800b4fc <xTaskIncrementTick+0x15c>)
 800b422:	f04f 32ff 	mov.w	r2, #4294967295
 800b426:	601a      	str	r2, [r3, #0]
					break;
 800b428:	e03f      	b.n	800b4aa <xTaskIncrementTick+0x10a>
=======
 800bb1c:	4b36      	ldr	r3, [pc, #216]	@ (800bbf8 <xTaskIncrementTick+0x15c>)
 800bb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb22:	601a      	str	r2, [r3, #0]
					break;
 800bb24:	e03f      	b.n	800bba6 <xTaskIncrementTick+0x10a>
>>>>>>> Stashed changes
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 800b42a:	4b31      	ldr	r3, [pc, #196]	@ (800b4f0 <xTaskIncrementTick+0x150>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d203      	bcs.n	800b44a <xTaskIncrementTick+0xaa>
=======
 800bb26:	4b31      	ldr	r3, [pc, #196]	@ (800bbec <xTaskIncrementTick+0x150>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d203      	bcs.n	800bb46 <xTaskIncrementTick+0xaa>
>>>>>>> Stashed changes
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< Updated upstream
 800b442:	4a2e      	ldr	r2, [pc, #184]	@ (800b4fc <xTaskIncrementTick+0x15c>)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b448:	e02f      	b.n	800b4aa <xTaskIncrementTick+0x10a>
=======
 800bb3e:	4a2e      	ldr	r2, [pc, #184]	@ (800bbf8 <xTaskIncrementTick+0x15c>)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb44:	e02f      	b.n	800bba6 <xTaskIncrementTick+0x10a>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe ff62 	bl	800a318 <uxListRemove>
=======
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe fd46 	bl	800a5dc <uxListRemove>
>>>>>>> Stashed changes

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d004      	beq.n	800b466 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	3318      	adds	r3, #24
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe ff59 	bl	800a318 <uxListRemove>
=======
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d004      	beq.n	800bb62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	3318      	adds	r3, #24
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe fd3d 	bl	800a5dc <uxListRemove>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46a:	4b25      	ldr	r3, [pc, #148]	@ (800b500 <xTaskIncrementTick+0x160>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d903      	bls.n	800b47a <xTaskIncrementTick+0xda>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b476:	4a22      	ldr	r2, [pc, #136]	@ (800b500 <xTaskIncrementTick+0x160>)
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4a1f      	ldr	r2, [pc, #124]	@ (800b504 <xTaskIncrementTick+0x164>)
 800b488:	441a      	add	r2, r3
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4619      	mov	r1, r3
 800b490:	4610      	mov	r0, r2
 800b492:	f7fe fee4 	bl	800a25e <vListInsertEnd>
=======
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb66:	4b25      	ldr	r3, [pc, #148]	@ (800bbfc <xTaskIncrementTick+0x160>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d903      	bls.n	800bb76 <xTaskIncrementTick+0xda>
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb72:	4a22      	ldr	r2, [pc, #136]	@ (800bbfc <xTaskIncrementTick+0x160>)
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4a1f      	ldr	r2, [pc, #124]	@ (800bc00 <xTaskIncrementTick+0x164>)
 800bb84:	441a      	add	r2, r3
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	f7fe fcc8 	bl	800a522 <vListInsertEnd>
>>>>>>> Stashed changes
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b49a:	4b1b      	ldr	r3, [pc, #108]	@ (800b508 <xTaskIncrementTick+0x168>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d3b8      	bcc.n	800b416 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a8:	e7b5      	b.n	800b416 <xTaskIncrementTick+0x76>
=======
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb96:	4b1b      	ldr	r3, [pc, #108]	@ (800bc04 <xTaskIncrementTick+0x168>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d3b8      	bcc.n	800bb12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bba0:	2301      	movs	r3, #1
 800bba2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bba4:	e7b5      	b.n	800bb12 <xTaskIncrementTick+0x76>
>>>>>>> Stashed changes
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800b4aa:	4b17      	ldr	r3, [pc, #92]	@ (800b508 <xTaskIncrementTick+0x168>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b0:	4914      	ldr	r1, [pc, #80]	@ (800b504 <xTaskIncrementTick+0x164>)
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4413      	add	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	440b      	add	r3, r1
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d901      	bls.n	800b4c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	617b      	str	r3, [r7, #20]
=======
 800bba6:	4b17      	ldr	r3, [pc, #92]	@ (800bc04 <xTaskIncrementTick+0x168>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbac:	4914      	ldr	r1, [pc, #80]	@ (800bc00 <xTaskIncrementTick+0x164>)
 800bbae:	4613      	mov	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	440b      	add	r3, r1
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d901      	bls.n	800bbc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800b4c6:	4b11      	ldr	r3, [pc, #68]	@ (800b50c <xTaskIncrementTick+0x16c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d007      	beq.n	800b4de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
 800b4d2:	e004      	b.n	800b4de <xTaskIncrementTick+0x13e>
=======
 800bbc2:	4b11      	ldr	r3, [pc, #68]	@ (800bc08 <xTaskIncrementTick+0x16c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	e004      	b.n	800bbda <xTaskIncrementTick+0x13e>
>>>>>>> Stashed changes
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< Updated upstream
 800b4d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b510 <xTaskIncrementTick+0x170>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	4a0d      	ldr	r2, [pc, #52]	@ (800b510 <xTaskIncrementTick+0x170>)
 800b4dc:	6013      	str	r3, [r2, #0]
=======
 800bbd0:	4b0e      	ldr	r3, [pc, #56]	@ (800bc0c <xTaskIncrementTick+0x170>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	4a0d      	ldr	r2, [pc, #52]	@ (800bc0c <xTaskIncrementTick+0x170>)
 800bbd8:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< Updated upstream
 800b4de:	697b      	ldr	r3, [r7, #20]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20002b1c 	.word	0x20002b1c
 800b4ec:	20002af8 	.word	0x20002af8
 800b4f0:	20002aac 	.word	0x20002aac
 800b4f4:	20002ab0 	.word	0x20002ab0
 800b4f8:	20002b0c 	.word	0x20002b0c
 800b4fc:	20002b14 	.word	0x20002b14
 800b500:	20002afc 	.word	0x20002afc
 800b504:	20002624 	.word	0x20002624
 800b508:	20002620 	.word	0x20002620
 800b50c:	20002b08 	.word	0x20002b08
 800b510:	20002b04 	.word	0x20002b04

0800b514 <vTaskSwitchContext>:
=======
 800bbda:	697b      	ldr	r3, [r7, #20]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3718      	adds	r7, #24
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20002b30 	.word	0x20002b30
 800bbe8:	20002b0c 	.word	0x20002b0c
 800bbec:	20002ac0 	.word	0x20002ac0
 800bbf0:	20002ac4 	.word	0x20002ac4
 800bbf4:	20002b20 	.word	0x20002b20
 800bbf8:	20002b28 	.word	0x20002b28
 800bbfc:	20002b10 	.word	0x20002b10
 800bc00:	20002638 	.word	0x20002638
 800bc04:	20002634 	.word	0x20002634
 800bc08:	20002b1c 	.word	0x20002b1c
 800bc0c:	20002b18 	.word	0x20002b18

0800bc10 <vTaskSwitchContext>:
>>>>>>> Stashed changes

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< Updated upstream
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b51a:	4b2b      	ldr	r3, [pc, #172]	@ (800b5c8 <vTaskSwitchContext+0xb4>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <vTaskSwitchContext+0x16>
=======
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc16:	4b2b      	ldr	r3, [pc, #172]	@ (800bcc4 <vTaskSwitchContext+0xb4>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <vTaskSwitchContext+0x16>
>>>>>>> Stashed changes
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800b522:	4b2a      	ldr	r3, [pc, #168]	@ (800b5cc <vTaskSwitchContext+0xb8>)
 800b524:	2201      	movs	r2, #1
 800b526:	601a      	str	r2, [r3, #0]
=======
 800bc1e:	4b2a      	ldr	r3, [pc, #168]	@ (800bcc8 <vTaskSwitchContext+0xb8>)
 800bc20:	2201      	movs	r2, #1
 800bc22:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< Updated upstream
 800b528:	e047      	b.n	800b5ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b52a:	4b28      	ldr	r3, [pc, #160]	@ (800b5cc <vTaskSwitchContext+0xb8>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b530:	4b27      	ldr	r3, [pc, #156]	@ (800b5d0 <vTaskSwitchContext+0xbc>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	e011      	b.n	800b55c <vTaskSwitchContext+0x48>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10b      	bne.n	800b556 <vTaskSwitchContext+0x42>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	607b      	str	r3, [r7, #4]
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	e7fd      	b.n	800b552 <vTaskSwitchContext+0x3e>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3b01      	subs	r3, #1
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	491d      	ldr	r1, [pc, #116]	@ (800b5d4 <vTaskSwitchContext+0xc0>)
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0e3      	beq.n	800b538 <vTaskSwitchContext+0x24>
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4a16      	ldr	r2, [pc, #88]	@ (800b5d4 <vTaskSwitchContext+0xc0>)
 800b57c:	4413      	add	r3, r2
 800b57e:	60bb      	str	r3, [r7, #8]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	605a      	str	r2, [r3, #4]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	3308      	adds	r3, #8
 800b592:	429a      	cmp	r2, r3
 800b594:	d104      	bne.n	800b5a0 <vTaskSwitchContext+0x8c>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	605a      	str	r2, [r3, #4]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b5d8 <vTaskSwitchContext+0xc4>)
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	4a09      	ldr	r2, [pc, #36]	@ (800b5d0 <vTaskSwitchContext+0xbc>)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5b0:	4b09      	ldr	r3, [pc, #36]	@ (800b5d8 <vTaskSwitchContext+0xc4>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3354      	adds	r3, #84	@ 0x54
 800b5b6:	4a09      	ldr	r2, [pc, #36]	@ (800b5dc <vTaskSwitchContext+0xc8>)
 800b5b8:	6013      	str	r3, [r2, #0]
}
 800b5ba:	bf00      	nop
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	20002b1c 	.word	0x20002b1c
 800b5cc:	20002b08 	.word	0x20002b08
 800b5d0:	20002afc 	.word	0x20002afc
 800b5d4:	20002624 	.word	0x20002624
 800b5d8:	20002620 	.word	0x20002620
 800b5dc:	20000188 	.word	0x20000188

0800b5e0 <vTaskPlaceOnEventList>:
=======
 800bc24:	e047      	b.n	800bcb6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bc26:	4b28      	ldr	r3, [pc, #160]	@ (800bcc8 <vTaskSwitchContext+0xb8>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2c:	4b27      	ldr	r3, [pc, #156]	@ (800bccc <vTaskSwitchContext+0xbc>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	60fb      	str	r3, [r7, #12]
 800bc32:	e011      	b.n	800bc58 <vTaskSwitchContext+0x48>
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10b      	bne.n	800bc52 <vTaskSwitchContext+0x42>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	607b      	str	r3, [r7, #4]
}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	e7fd      	b.n	800bc4e <vTaskSwitchContext+0x3e>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3b01      	subs	r3, #1
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	491d      	ldr	r1, [pc, #116]	@ (800bcd0 <vTaskSwitchContext+0xc0>)
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	440b      	add	r3, r1
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d0e3      	beq.n	800bc34 <vTaskSwitchContext+0x24>
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4a16      	ldr	r2, [pc, #88]	@ (800bcd0 <vTaskSwitchContext+0xc0>)
 800bc78:	4413      	add	r3, r2
 800bc7a:	60bb      	str	r3, [r7, #8]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	605a      	str	r2, [r3, #4]
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d104      	bne.n	800bc9c <vTaskSwitchContext+0x8c>
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	605a      	str	r2, [r3, #4]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	4a0c      	ldr	r2, [pc, #48]	@ (800bcd4 <vTaskSwitchContext+0xc4>)
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	4a09      	ldr	r2, [pc, #36]	@ (800bccc <vTaskSwitchContext+0xbc>)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcac:	4b09      	ldr	r3, [pc, #36]	@ (800bcd4 <vTaskSwitchContext+0xc4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3354      	adds	r3, #84	@ 0x54
 800bcb2:	4a09      	ldr	r2, [pc, #36]	@ (800bcd8 <vTaskSwitchContext+0xc8>)
 800bcb4:	6013      	str	r3, [r2, #0]
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20002b30 	.word	0x20002b30
 800bcc8:	20002b1c 	.word	0x20002b1c
 800bccc:	20002b10 	.word	0x20002b10
 800bcd0:	20002638 	.word	0x20002638
 800bcd4:	20002634 	.word	0x20002634
 800bcd8:	20000188 	.word	0x20000188

0800bcdc <vTaskPlaceOnEventList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10b      	bne.n	800b608 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	60fb      	str	r3, [r7, #12]
}
 800b602:	bf00      	nop
 800b604:	bf00      	nop
 800b606:	e7fd      	b.n	800b604 <vTaskPlaceOnEventList+0x24>
=======
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10b      	bne.n	800bd04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	60fb      	str	r3, [r7, #12]
}
 800bcfe:	bf00      	nop
 800bd00:	bf00      	nop
 800bd02:	e7fd      	b.n	800bd00 <vTaskPlaceOnEventList+0x24>
>>>>>>> Stashed changes

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800b608:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <vTaskPlaceOnEventList+0x48>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3318      	adds	r3, #24
 800b60e:	4619      	mov	r1, r3
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7fe fe48 	bl	800a2a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b616:	2101      	movs	r1, #1
 800b618:	6838      	ldr	r0, [r7, #0]
 800b61a:	f000 fa87 	bl	800bb2c <prvAddCurrentTaskToDelayedList>
}
 800b61e:	bf00      	nop
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20002620 	.word	0x20002620

0800b62c <vTaskPlaceOnEventListRestricted>:
=======
 800bd04:	4b07      	ldr	r3, [pc, #28]	@ (800bd24 <vTaskPlaceOnEventList+0x48>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3318      	adds	r3, #24
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7fe fc2c 	bl	800a56a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd12:	2101      	movs	r1, #1
 800bd14:	6838      	ldr	r0, [r7, #0]
 800bd16:	f000 fb97 	bl	800c448 <prvAddCurrentTaskToDelayedList>
}
 800bd1a:	bf00      	nop
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20002634 	.word	0x20002634

0800bd28 <vTaskPlaceOnEventListRestricted>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< Updated upstream
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10b      	bne.n	800b656 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	617b      	str	r3, [r7, #20]
}
 800b650:	bf00      	nop
 800b652:	bf00      	nop
 800b654:	e7fd      	b.n	800b652 <vTaskPlaceOnEventListRestricted+0x26>
=======
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10b      	bne.n	800bd52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	617b      	str	r3, [r7, #20]
}
 800bd4c:	bf00      	nop
 800bd4e:	bf00      	nop
 800bd50:	e7fd      	b.n	800bd4e <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> Stashed changes

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800b656:	4b0a      	ldr	r3, [pc, #40]	@ (800b680 <vTaskPlaceOnEventListRestricted+0x54>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3318      	adds	r3, #24
 800b65c:	4619      	mov	r1, r3
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f7fe fdfd 	bl	800a25e <vListInsertEnd>
=======
 800bd52:	4b0a      	ldr	r3, [pc, #40]	@ (800bd7c <vTaskPlaceOnEventListRestricted+0x54>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3318      	adds	r3, #24
 800bd58:	4619      	mov	r1, r3
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7fe fbe1 	bl	800a522 <vListInsertEnd>
>>>>>>> Stashed changes

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< Updated upstream
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b66a:	f04f 33ff 	mov.w	r3, #4294967295
 800b66e:	60bb      	str	r3, [r7, #8]
=======
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d002      	beq.n	800bd6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bd66:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6a:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< Updated upstream
 800b670:	6879      	ldr	r1, [r7, #4]
 800b672:	68b8      	ldr	r0, [r7, #8]
 800b674:	f000 fa5a 	bl	800bb2c <prvAddCurrentTaskToDelayedList>
	}
 800b678:	bf00      	nop
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	20002620 	.word	0x20002620

0800b684 <xTaskRemoveFromEventList>:
=======
 800bd6c:	6879      	ldr	r1, [r7, #4]
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f000 fb6a 	bl	800c448 <prvAddCurrentTaskToDelayedList>
	}
 800bd74:	bf00      	nop
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20002634 	.word	0x20002634

0800bd80 <xTaskRemoveFromEventList>:
>>>>>>> Stashed changes

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< Updated upstream
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
=======
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10b      	bne.n	800b6b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	60fb      	str	r3, [r7, #12]
}
 800b6ac:	bf00      	nop
 800b6ae:	bf00      	nop
 800b6b0:	e7fd      	b.n	800b6ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	3318      	adds	r3, #24
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fe2e 	bl	800a318 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b734 <xTaskRemoveFromEventList+0xb0>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d11d      	bne.n	800b700 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe fe25 	bl	800a318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d2:	4b19      	ldr	r3, [pc, #100]	@ (800b738 <xTaskRemoveFromEventList+0xb4>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d903      	bls.n	800b6e2 <xTaskRemoveFromEventList+0x5e>
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6de:	4a16      	ldr	r2, [pc, #88]	@ (800b738 <xTaskRemoveFromEventList+0xb4>)
 800b6e0:	6013      	str	r3, [r2, #0]
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4a13      	ldr	r2, [pc, #76]	@ (800b73c <xTaskRemoveFromEventList+0xb8>)
 800b6f0:	441a      	add	r2, r3
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	f7fe fdb0 	bl	800a25e <vListInsertEnd>
 800b6fe:	e005      	b.n	800b70c <xTaskRemoveFromEventList+0x88>
=======
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10b      	bne.n	800bdae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	60fb      	str	r3, [r7, #12]
}
 800bda8:	bf00      	nop
 800bdaa:	bf00      	nop
 800bdac:	e7fd      	b.n	800bdaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	3318      	adds	r3, #24
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe fc12 	bl	800a5dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdb8:	4b1d      	ldr	r3, [pc, #116]	@ (800be30 <xTaskRemoveFromEventList+0xb0>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d11d      	bne.n	800bdfc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fe fc09 	bl	800a5dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdce:	4b19      	ldr	r3, [pc, #100]	@ (800be34 <xTaskRemoveFromEventList+0xb4>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d903      	bls.n	800bdde <xTaskRemoveFromEventList+0x5e>
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdda:	4a16      	ldr	r2, [pc, #88]	@ (800be34 <xTaskRemoveFromEventList+0xb4>)
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4a13      	ldr	r2, [pc, #76]	@ (800be38 <xTaskRemoveFromEventList+0xb8>)
 800bdec:	441a      	add	r2, r3
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f7fe fb94 	bl	800a522 <vListInsertEnd>
 800bdfa:	e005      	b.n	800be08 <xTaskRemoveFromEventList+0x88>
>>>>>>> Stashed changes
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	3318      	adds	r3, #24
 800b704:	4619      	mov	r1, r3
 800b706:	480e      	ldr	r0, [pc, #56]	@ (800b740 <xTaskRemoveFromEventList+0xbc>)
 800b708:	f7fe fda9 	bl	800a25e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b710:	4b0c      	ldr	r3, [pc, #48]	@ (800b744 <xTaskRemoveFromEventList+0xc0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b716:	429a      	cmp	r2, r3
 800b718:	d905      	bls.n	800b726 <xTaskRemoveFromEventList+0xa2>
=======
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	3318      	adds	r3, #24
 800be00:	4619      	mov	r1, r3
 800be02:	480e      	ldr	r0, [pc, #56]	@ (800be3c <xTaskRemoveFromEventList+0xbc>)
 800be04:	f7fe fb8d 	bl	800a522 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0c:	4b0c      	ldr	r3, [pc, #48]	@ (800be40 <xTaskRemoveFromEventList+0xc0>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be12:	429a      	cmp	r2, r3
 800be14:	d905      	bls.n	800be22 <xTaskRemoveFromEventList+0xa2>
>>>>>>> Stashed changes
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< Updated upstream
 800b71a:	2301      	movs	r3, #1
 800b71c:	617b      	str	r3, [r7, #20]
=======
 800be16:	2301      	movs	r3, #1
 800be18:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800b71e:	4b0a      	ldr	r3, [pc, #40]	@ (800b748 <xTaskRemoveFromEventList+0xc4>)
 800b720:	2201      	movs	r2, #1
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	e001      	b.n	800b72a <xTaskRemoveFromEventList+0xa6>
=======
 800be1a:	4b0a      	ldr	r3, [pc, #40]	@ (800be44 <xTaskRemoveFromEventList+0xc4>)
 800be1c:	2201      	movs	r2, #1
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	e001      	b.n	800be26 <xTaskRemoveFromEventList+0xa6>
>>>>>>> Stashed changes
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< Updated upstream
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b72a:	697b      	ldr	r3, [r7, #20]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3718      	adds	r7, #24
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	20002b1c 	.word	0x20002b1c
 800b738:	20002afc 	.word	0x20002afc
 800b73c:	20002624 	.word	0x20002624
 800b740:	20002ab4 	.word	0x20002ab4
 800b744:	20002620 	.word	0x20002620
 800b748:	20002b08 	.word	0x20002b08

0800b74c <vTaskInternalSetTimeOutState>:
=======
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be26:	697b      	ldr	r3, [r7, #20]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3718      	adds	r7, #24
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20002b30 	.word	0x20002b30
 800be34:	20002b10 	.word	0x20002b10
 800be38:	20002638 	.word	0x20002638
 800be3c:	20002ac8 	.word	0x20002ac8
 800be40:	20002634 	.word	0x20002634
 800be44:	20002b1c 	.word	0x20002b1c

0800be48 <vTaskInternalSetTimeOutState>:
>>>>>>> Stashed changes
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< Updated upstream
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b754:	4b06      	ldr	r3, [pc, #24]	@ (800b770 <vTaskInternalSetTimeOutState+0x24>)
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b75c:	4b05      	ldr	r3, [pc, #20]	@ (800b774 <vTaskInternalSetTimeOutState+0x28>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	605a      	str	r2, [r3, #4]
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	20002b0c 	.word	0x20002b0c
 800b774:	20002af8 	.word	0x20002af8

0800b778 <xTaskCheckForTimeOut>:
=======
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be50:	4b06      	ldr	r3, [pc, #24]	@ (800be6c <vTaskInternalSetTimeOutState+0x24>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be58:	4b05      	ldr	r3, [pc, #20]	@ (800be70 <vTaskInternalSetTimeOutState+0x28>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	605a      	str	r2, [r3, #4]
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20002b20 	.word	0x20002b20
 800be70:	20002b0c 	.word	0x20002b0c

0800be74 <xTaskCheckForTimeOut>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< Updated upstream
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10b      	bne.n	800b7a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	613b      	str	r3, [r7, #16]
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	e7fd      	b.n	800b79c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10b      	bne.n	800b7be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60fb      	str	r3, [r7, #12]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b7be:	f000 fe93 	bl	800c4e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b838 <xTaskCheckForTimeOut+0xc0>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	617b      	str	r3, [r7, #20]
=======
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10b      	bne.n	800be9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	613b      	str	r3, [r7, #16]
}
 800be96:	bf00      	nop
 800be98:	bf00      	nop
 800be9a:	e7fd      	b.n	800be98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10b      	bne.n	800beba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	60fb      	str	r3, [r7, #12]
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	e7fd      	b.n	800beb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800beba:	f000 ffa5 	bl	800ce08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bebe:	4b1d      	ldr	r3, [pc, #116]	@ (800bf34 <xTaskCheckForTimeOut+0xc0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	69ba      	ldr	r2, [r7, #24]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< Updated upstream
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7da:	d102      	bne.n	800b7e2 <xTaskCheckForTimeOut+0x6a>
=======
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed6:	d102      	bne.n	800bede <xTaskCheckForTimeOut+0x6a>
>>>>>>> Stashed changes
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< Updated upstream
 800b7dc:	2300      	movs	r3, #0
 800b7de:	61fb      	str	r3, [r7, #28]
 800b7e0:	e023      	b.n	800b82a <xTaskCheckForTimeOut+0xb2>
=======
 800bed8:	2300      	movs	r3, #0
 800beda:	61fb      	str	r3, [r7, #28]
 800bedc:	e023      	b.n	800bf26 <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< Updated upstream
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	4b15      	ldr	r3, [pc, #84]	@ (800b83c <xTaskCheckForTimeOut+0xc4>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d007      	beq.n	800b7fe <xTaskCheckForTimeOut+0x86>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	69ba      	ldr	r2, [r7, #24]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d302      	bcc.n	800b7fe <xTaskCheckForTimeOut+0x86>
=======
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	4b15      	ldr	r3, [pc, #84]	@ (800bf38 <xTaskCheckForTimeOut+0xc4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d007      	beq.n	800befa <xTaskCheckForTimeOut+0x86>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	69ba      	ldr	r2, [r7, #24]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d302      	bcc.n	800befa <xTaskCheckForTimeOut+0x86>
>>>>>>> Stashed changes
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< Updated upstream
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	61fb      	str	r3, [r7, #28]
 800b7fc:	e015      	b.n	800b82a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	429a      	cmp	r2, r3
 800b806:	d20b      	bcs.n	800b820 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	1ad2      	subs	r2, r2, r3
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff ff99 	bl	800b74c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b81a:	2300      	movs	r3, #0
 800b81c:	61fb      	str	r3, [r7, #28]
 800b81e:	e004      	b.n	800b82a <xTaskCheckForTimeOut+0xb2>
=======
 800bef4:	2301      	movs	r3, #1
 800bef6:	61fb      	str	r3, [r7, #28]
 800bef8:	e015      	b.n	800bf26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d20b      	bcs.n	800bf1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	1ad2      	subs	r2, r2, r3
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff ff99 	bl	800be48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf16:	2300      	movs	r3, #0
 800bf18:	61fb      	str	r3, [r7, #28]
 800bf1a:	e004      	b.n	800bf26 <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< Updated upstream
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b826:	2301      	movs	r3, #1
 800b828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b82a:	f000 fe8f 	bl	800c54c <vPortExitCritical>

	return xReturn;
 800b82e:	69fb      	ldr	r3, [r7, #28]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3720      	adds	r7, #32
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20002af8 	.word	0x20002af8
 800b83c:	20002b0c 	.word	0x20002b0c

0800b840 <vTaskMissedYield>:
=======
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf22:	2301      	movs	r3, #1
 800bf24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf26:	f000 ffa1 	bl	800ce6c <vPortExitCritical>

	return xReturn;
 800bf2a:	69fb      	ldr	r3, [r7, #28]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20002b0c 	.word	0x20002b0c
 800bf38:	20002b20 	.word	0x20002b20

0800bf3c <vTaskMissedYield>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< Updated upstream
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b844:	4b03      	ldr	r3, [pc, #12]	@ (800b854 <vTaskMissedYield+0x14>)
 800b846:	2201      	movs	r2, #1
 800b848:	601a      	str	r2, [r3, #0]
}
 800b84a:	bf00      	nop
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20002b08 	.word	0x20002b08

0800b858 <prvIdleTask>:
=======
 800bf3c:	b480      	push	{r7}
 800bf3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf40:	4b03      	ldr	r3, [pc, #12]	@ (800bf50 <vTaskMissedYield+0x14>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	601a      	str	r2, [r3, #0]
}
 800bf46:	bf00      	nop
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	20002b1c 	.word	0x20002b1c

0800bf54 <prvIdleTask>:
>>>>>>> Stashed changes
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< Updated upstream
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
=======
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< Updated upstream
 800b860:	f000 f852 	bl	800b908 <prvCheckTasksWaitingTermination>
=======
 800bf5c:	f000 f852 	bl	800c004 <prvCheckTasksWaitingTermination>
>>>>>>> Stashed changes

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800b864:	4b06      	ldr	r3, [pc, #24]	@ (800b880 <prvIdleTask+0x28>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d9f9      	bls.n	800b860 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b86c:	4b05      	ldr	r3, [pc, #20]	@ (800b884 <prvIdleTask+0x2c>)
 800b86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b87c:	e7f0      	b.n	800b860 <prvIdleTask+0x8>
 800b87e:	bf00      	nop
 800b880:	20002624 	.word	0x20002624
 800b884:	e000ed04 	.word	0xe000ed04

0800b888 <prvInitialiseTaskLists>:
=======
 800bf60:	4b06      	ldr	r3, [pc, #24]	@ (800bf7c <prvIdleTask+0x28>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d9f9      	bls.n	800bf5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf68:	4b05      	ldr	r3, [pc, #20]	@ (800bf80 <prvIdleTask+0x2c>)
 800bf6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf78:	e7f0      	b.n	800bf5c <prvIdleTask+0x8>
 800bf7a:	bf00      	nop
 800bf7c:	20002638 	.word	0x20002638
 800bf80:	e000ed04 	.word	0xe000ed04

0800bf84 <prvInitialiseTaskLists>:
>>>>>>> Stashed changes

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< Updated upstream
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b88e:	2300      	movs	r3, #0
 800b890:	607b      	str	r3, [r7, #4]
 800b892:	e00c      	b.n	800b8ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4a12      	ldr	r2, [pc, #72]	@ (800b8e8 <prvInitialiseTaskLists+0x60>)
 800b8a0:	4413      	add	r3, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe fcae 	bl	800a204 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	607b      	str	r3, [r7, #4]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2b37      	cmp	r3, #55	@ 0x37
 800b8b2:	d9ef      	bls.n	800b894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8b4:	480d      	ldr	r0, [pc, #52]	@ (800b8ec <prvInitialiseTaskLists+0x64>)
 800b8b6:	f7fe fca5 	bl	800a204 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8ba:	480d      	ldr	r0, [pc, #52]	@ (800b8f0 <prvInitialiseTaskLists+0x68>)
 800b8bc:	f7fe fca2 	bl	800a204 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8c0:	480c      	ldr	r0, [pc, #48]	@ (800b8f4 <prvInitialiseTaskLists+0x6c>)
 800b8c2:	f7fe fc9f 	bl	800a204 <vListInitialise>
=======
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	e00c      	b.n	800bfaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	4613      	mov	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4413      	add	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4a12      	ldr	r2, [pc, #72]	@ (800bfe4 <prvInitialiseTaskLists+0x60>)
 800bf9c:	4413      	add	r3, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fa92 	bl	800a4c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	607b      	str	r3, [r7, #4]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b37      	cmp	r3, #55	@ 0x37
 800bfae:	d9ef      	bls.n	800bf90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfb0:	480d      	ldr	r0, [pc, #52]	@ (800bfe8 <prvInitialiseTaskLists+0x64>)
 800bfb2:	f7fe fa89 	bl	800a4c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfb6:	480d      	ldr	r0, [pc, #52]	@ (800bfec <prvInitialiseTaskLists+0x68>)
 800bfb8:	f7fe fa86 	bl	800a4c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfbc:	480c      	ldr	r0, [pc, #48]	@ (800bff0 <prvInitialiseTaskLists+0x6c>)
 800bfbe:	f7fe fa83 	bl	800a4c8 <vListInitialise>
>>>>>>> Stashed changes

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< Updated upstream
 800b8c6:	480c      	ldr	r0, [pc, #48]	@ (800b8f8 <prvInitialiseTaskLists+0x70>)
 800b8c8:	f7fe fc9c 	bl	800a204 <vListInitialise>
=======
 800bfc2:	480c      	ldr	r0, [pc, #48]	@ (800bff4 <prvInitialiseTaskLists+0x70>)
 800bfc4:	f7fe fa80 	bl	800a4c8 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< Updated upstream
 800b8cc:	480b      	ldr	r0, [pc, #44]	@ (800b8fc <prvInitialiseTaskLists+0x74>)
 800b8ce:	f7fe fc99 	bl	800a204 <vListInitialise>
=======
 800bfc8:	480b      	ldr	r0, [pc, #44]	@ (800bff8 <prvInitialiseTaskLists+0x74>)
 800bfca:	f7fe fa7d 	bl	800a4c8 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< Updated upstream
 800b8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b900 <prvInitialiseTaskLists+0x78>)
 800b8d4:	4a05      	ldr	r2, [pc, #20]	@ (800b8ec <prvInitialiseTaskLists+0x64>)
 800b8d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b904 <prvInitialiseTaskLists+0x7c>)
 800b8da:	4a05      	ldr	r2, [pc, #20]	@ (800b8f0 <prvInitialiseTaskLists+0x68>)
 800b8dc:	601a      	str	r2, [r3, #0]
}
 800b8de:	bf00      	nop
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20002624 	.word	0x20002624
 800b8ec:	20002a84 	.word	0x20002a84
 800b8f0:	20002a98 	.word	0x20002a98
 800b8f4:	20002ab4 	.word	0x20002ab4
 800b8f8:	20002ac8 	.word	0x20002ac8
 800b8fc:	20002ae0 	.word	0x20002ae0
 800b900:	20002aac 	.word	0x20002aac
 800b904:	20002ab0 	.word	0x20002ab0

0800b908 <prvCheckTasksWaitingTermination>:
=======
 800bfce:	4b0b      	ldr	r3, [pc, #44]	@ (800bffc <prvInitialiseTaskLists+0x78>)
 800bfd0:	4a05      	ldr	r2, [pc, #20]	@ (800bfe8 <prvInitialiseTaskLists+0x64>)
 800bfd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	@ (800c000 <prvInitialiseTaskLists+0x7c>)
 800bfd6:	4a05      	ldr	r2, [pc, #20]	@ (800bfec <prvInitialiseTaskLists+0x68>)
 800bfd8:	601a      	str	r2, [r3, #0]
}
 800bfda:	bf00      	nop
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20002638 	.word	0x20002638
 800bfe8:	20002a98 	.word	0x20002a98
 800bfec:	20002aac 	.word	0x20002aac
 800bff0:	20002ac8 	.word	0x20002ac8
 800bff4:	20002adc 	.word	0x20002adc
 800bff8:	20002af4 	.word	0x20002af4
 800bffc:	20002ac0 	.word	0x20002ac0
 800c000:	20002ac4 	.word	0x20002ac4

0800c004 <prvCheckTasksWaitingTermination>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< Updated upstream
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
=======
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< Updated upstream
 800b90e:	e019      	b.n	800b944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b910:	f000 fdea 	bl	800c4e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b914:	4b10      	ldr	r3, [pc, #64]	@ (800b958 <prvCheckTasksWaitingTermination+0x50>)
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3304      	adds	r3, #4
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe fcf9 	bl	800a318 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b926:	4b0d      	ldr	r3, [pc, #52]	@ (800b95c <prvCheckTasksWaitingTermination+0x54>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	4a0b      	ldr	r2, [pc, #44]	@ (800b95c <prvCheckTasksWaitingTermination+0x54>)
 800b92e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b930:	4b0b      	ldr	r3, [pc, #44]	@ (800b960 <prvCheckTasksWaitingTermination+0x58>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3b01      	subs	r3, #1
 800b936:	4a0a      	ldr	r2, [pc, #40]	@ (800b960 <prvCheckTasksWaitingTermination+0x58>)
 800b938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b93a:	f000 fe07 	bl	800c54c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f810 	bl	800b964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b944:	4b06      	ldr	r3, [pc, #24]	@ (800b960 <prvCheckTasksWaitingTermination+0x58>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e1      	bne.n	800b910 <prvCheckTasksWaitingTermination+0x8>
=======
 800c00a:	e019      	b.n	800c040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c00c:	f000 fefc 	bl	800ce08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c010:	4b10      	ldr	r3, [pc, #64]	@ (800c054 <prvCheckTasksWaitingTermination+0x50>)
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3304      	adds	r3, #4
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fadd 	bl	800a5dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c022:	4b0d      	ldr	r3, [pc, #52]	@ (800c058 <prvCheckTasksWaitingTermination+0x54>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3b01      	subs	r3, #1
 800c028:	4a0b      	ldr	r2, [pc, #44]	@ (800c058 <prvCheckTasksWaitingTermination+0x54>)
 800c02a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c02c:	4b0b      	ldr	r3, [pc, #44]	@ (800c05c <prvCheckTasksWaitingTermination+0x58>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3b01      	subs	r3, #1
 800c032:	4a0a      	ldr	r2, [pc, #40]	@ (800c05c <prvCheckTasksWaitingTermination+0x58>)
 800c034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c036:	f000 ff19 	bl	800ce6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f810 	bl	800c060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c040:	4b06      	ldr	r3, [pc, #24]	@ (800c05c <prvCheckTasksWaitingTermination+0x58>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e1      	bne.n	800c00c <prvCheckTasksWaitingTermination+0x8>
>>>>>>> Stashed changes
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< Updated upstream
 800b94c:	bf00      	nop
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20002ac8 	.word	0x20002ac8
 800b95c:	20002af4 	.word	0x20002af4
 800b960:	20002adc 	.word	0x20002adc

0800b964 <prvDeleteTCB>:
=======
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20002adc 	.word	0x20002adc
 800c058:	20002b08 	.word	0x20002b08
 800c05c:	20002af0 	.word	0x20002af0

0800c060 <prvDeleteTCB>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< Updated upstream
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
=======
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< Updated upstream
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3354      	adds	r3, #84	@ 0x54
 800b970:	4618      	mov	r0, r3
 800b972:	f001 fe1d 	bl	800d5b0 <_reclaim_reent>
=======
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3354      	adds	r3, #84	@ 0x54
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 ff2f 	bl	800ded0 <_reclaim_reent>
>>>>>>> Stashed changes
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< Updated upstream
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d108      	bne.n	800b992 <prvDeleteTCB+0x2e>
=======
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d108      	bne.n	800c08e <prvDeleteTCB+0x2e>
>>>>>>> Stashed changes
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< Updated upstream
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b984:	4618      	mov	r0, r3
 800b986:	f000 ff9f 	bl	800c8c8 <vPortFree>
				vPortFree( pxTCB );
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 ff9c 	bl	800c8c8 <vPortFree>
=======
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c080:	4618      	mov	r0, r3
 800c082:	f001 f8b1 	bl	800d1e8 <vPortFree>
				vPortFree( pxTCB );
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f001 f8ae 	bl	800d1e8 <vPortFree>
>>>>>>> Stashed changes
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< Updated upstream
 800b990:	e019      	b.n	800b9c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d103      	bne.n	800b9a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 ff93 	bl	800c8c8 <vPortFree>
	}
 800b9a2:	e010      	b.n	800b9c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d00b      	beq.n	800b9c6 <prvDeleteTCB+0x62>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	60fb      	str	r3, [r7, #12]
}
 800b9c0:	bf00      	nop
 800b9c2:	bf00      	nop
 800b9c4:	e7fd      	b.n	800b9c2 <prvDeleteTCB+0x5e>
	}
 800b9c6:	bf00      	nop
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <prvResetNextTaskUnblockTime>:
=======
 800c08c:	e019      	b.n	800c0c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c094:	2b01      	cmp	r3, #1
 800c096:	d103      	bne.n	800c0a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f8a5 	bl	800d1e8 <vPortFree>
	}
 800c09e:	e010      	b.n	800c0c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d00b      	beq.n	800c0c2 <prvDeleteTCB+0x62>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	60fb      	str	r3, [r7, #12]
}
 800c0bc:	bf00      	nop
 800c0be:	bf00      	nop
 800c0c0:	e7fd      	b.n	800c0be <prvDeleteTCB+0x5e>
	}
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< Updated upstream
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba08 <prvResetNextTaskUnblockTime+0x38>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d104      	bne.n	800b9ea <prvResetNextTaskUnblockTime+0x1a>
=======
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c104 <prvResetNextTaskUnblockTime+0x38>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d104      	bne.n	800c0e6 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> Stashed changes
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800b9e0:	4b0a      	ldr	r3, [pc, #40]	@ (800ba0c <prvResetNextTaskUnblockTime+0x3c>)
 800b9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e6:	601a      	str	r2, [r3, #0]
=======
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c108 <prvResetNextTaskUnblockTime+0x3c>)
 800c0de:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< Updated upstream
 800b9e8:	e008      	b.n	800b9fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ea:	4b07      	ldr	r3, [pc, #28]	@ (800ba08 <prvResetNextTaskUnblockTime+0x38>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	4a04      	ldr	r2, [pc, #16]	@ (800ba0c <prvResetNextTaskUnblockTime+0x3c>)
 800b9fa:	6013      	str	r3, [r2, #0]
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	20002aac 	.word	0x20002aac
 800ba0c:	20002b14 	.word	0x20002b14

0800ba10 <xTaskGetSchedulerState>:
=======
 800c0e4:	e008      	b.n	800c0f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0e6:	4b07      	ldr	r3, [pc, #28]	@ (800c104 <prvResetNextTaskUnblockTime+0x38>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	4a04      	ldr	r2, [pc, #16]	@ (800c108 <prvResetNextTaskUnblockTime+0x3c>)
 800c0f6:	6013      	str	r3, [r2, #0]
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	20002ac0 	.word	0x20002ac0
 800c108:	20002b28 	.word	0x20002b28

0800c10c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c112:	4b05      	ldr	r3, [pc, #20]	@ (800c128 <xTaskGetCurrentTaskHandle+0x1c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c118:	687b      	ldr	r3, [r7, #4]
	}
 800c11a:	4618      	mov	r0, r3
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	20002634 	.word	0x20002634

0800c12c <xTaskGetSchedulerState>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< Updated upstream
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba16:	4b0b      	ldr	r3, [pc, #44]	@ (800ba44 <xTaskGetSchedulerState+0x34>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d102      	bne.n	800ba24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	607b      	str	r3, [r7, #4]
 800ba22:	e008      	b.n	800ba36 <xTaskGetSchedulerState+0x26>
=======
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c132:	4b0b      	ldr	r3, [pc, #44]	@ (800c160 <xTaskGetSchedulerState+0x34>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d102      	bne.n	800c140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c13a:	2301      	movs	r3, #1
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	e008      	b.n	800c152 <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800ba24:	4b08      	ldr	r3, [pc, #32]	@ (800ba48 <xTaskGetSchedulerState+0x38>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d102      	bne.n	800ba32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	e001      	b.n	800ba36 <xTaskGetSchedulerState+0x26>
=======
 800c140:	4b08      	ldr	r3, [pc, #32]	@ (800c164 <xTaskGetSchedulerState+0x38>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d102      	bne.n	800c14e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c148:	2302      	movs	r3, #2
 800c14a:	607b      	str	r3, [r7, #4]
 800c14c:	e001      	b.n	800c152 <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< Updated upstream
 800ba32:	2300      	movs	r3, #0
 800ba34:	607b      	str	r3, [r7, #4]
=======
 800c14e:	2300      	movs	r3, #0
 800c150:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
			}
		}

		return xReturn;
<<<<<<< Updated upstream
 800ba36:	687b      	ldr	r3, [r7, #4]
	}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	20002b00 	.word	0x20002b00
 800ba48:	20002b1c 	.word	0x20002b1c

0800ba4c <xTaskPriorityDisinherit>:
=======
 800c152:	687b      	ldr	r3, [r7, #4]
	}
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	20002b14 	.word	0x20002b14
 800c164:	20002b30 	.word	0x20002b30

0800c168 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c174:	2300      	movs	r3, #0
 800c176:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d051      	beq.n	800c222 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c182:	4b2a      	ldr	r3, [pc, #168]	@ (800c22c <xTaskPriorityInherit+0xc4>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c188:	429a      	cmp	r2, r3
 800c18a:	d241      	bcs.n	800c210 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	2b00      	cmp	r3, #0
 800c192:	db06      	blt.n	800c1a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c194:	4b25      	ldr	r3, [pc, #148]	@ (800c22c <xTaskPriorityInherit+0xc4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	6959      	ldr	r1, [r3, #20]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4a1f      	ldr	r2, [pc, #124]	@ (800c230 <xTaskPriorityInherit+0xc8>)
 800c1b4:	4413      	add	r3, r2
 800c1b6:	4299      	cmp	r1, r3
 800c1b8:	d122      	bne.n	800c200 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fe fa0c 	bl	800a5dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1c4:	4b19      	ldr	r3, [pc, #100]	@ (800c22c <xTaskPriorityInherit+0xc4>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d2:	4b18      	ldr	r3, [pc, #96]	@ (800c234 <xTaskPriorityInherit+0xcc>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d903      	bls.n	800c1e2 <xTaskPriorityInherit+0x7a>
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1de:	4a15      	ldr	r2, [pc, #84]	@ (800c234 <xTaskPriorityInherit+0xcc>)
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4a10      	ldr	r2, [pc, #64]	@ (800c230 <xTaskPriorityInherit+0xc8>)
 800c1f0:	441a      	add	r2, r3
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	f7fe f992 	bl	800a522 <vListInsertEnd>
 800c1fe:	e004      	b.n	800c20a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c200:	4b0a      	ldr	r3, [pc, #40]	@ (800c22c <xTaskPriorityInherit+0xc4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c20a:	2301      	movs	r3, #1
 800c20c:	60fb      	str	r3, [r7, #12]
 800c20e:	e008      	b.n	800c222 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c214:	4b05      	ldr	r3, [pc, #20]	@ (800c22c <xTaskPriorityInherit+0xc4>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d201      	bcs.n	800c222 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c21e:	2301      	movs	r3, #1
 800c220:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c222:	68fb      	ldr	r3, [r7, #12]
	}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20002634 	.word	0x20002634
 800c230:	20002638 	.word	0x20002638
 800c234:	20002b10 	.word	0x20002b10

0800c238 <xTaskPriorityDisinherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d058      	beq.n	800bb14 <xTaskPriorityDisinherit+0xc8>
=======
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c244:	2300      	movs	r3, #0
 800c246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d058      	beq.n	800c300 <xTaskPriorityDisinherit+0xc8>
>>>>>>> Stashed changes
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< Updated upstream
 800ba62:	4b2f      	ldr	r3, [pc, #188]	@ (800bb20 <xTaskPriorityDisinherit+0xd4>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d00b      	beq.n	800ba84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	60fb      	str	r3, [r7, #12]
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	e7fd      	b.n	800ba80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10b      	bne.n	800baa4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	60bb      	str	r3, [r7, #8]
}
 800ba9e:	bf00      	nop
 800baa0:	bf00      	nop
 800baa2:	e7fd      	b.n	800baa0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baa8:	1e5a      	subs	r2, r3, #1
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	651a      	str	r2, [r3, #80]	@ 0x50
=======
 800c24e:	4b2f      	ldr	r3, [pc, #188]	@ (800c30c <xTaskPriorityDisinherit+0xd4>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	429a      	cmp	r2, r3
 800c256:	d00b      	beq.n	800c270 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	60fb      	str	r3, [r7, #12]
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10b      	bne.n	800c290 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	60bb      	str	r3, [r7, #8]
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c294:	1e5a      	subs	r2, r3, #1
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	651a      	str	r2, [r3, #80]	@ 0x50
>>>>>>> Stashed changes

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< Updated upstream
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d02c      	beq.n	800bb14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d128      	bne.n	800bb14 <xTaskPriorityDisinherit+0xc8>
=======
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d02c      	beq.n	800c300 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d128      	bne.n	800c300 <xTaskPriorityDisinherit+0xc8>
>>>>>>> Stashed changes
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fe fc26 	bl	800a318 <uxListRemove>
=======
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe f992 	bl	800a5dc <uxListRemove>
>>>>>>> Stashed changes
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae4:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <xTaskPriorityDisinherit+0xd8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d903      	bls.n	800baf4 <xTaskPriorityDisinherit+0xa8>
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf0:	4a0c      	ldr	r2, [pc, #48]	@ (800bb24 <xTaskPriorityDisinherit+0xd8>)
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf8:	4613      	mov	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4a09      	ldr	r2, [pc, #36]	@ (800bb28 <xTaskPriorityDisinherit+0xdc>)
 800bb02:	441a      	add	r2, r3
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	3304      	adds	r3, #4
 800bb08:	4619      	mov	r1, r3
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	f7fe fba7 	bl	800a25e <vListInsertEnd>
=======
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c310 <xTaskPriorityDisinherit+0xd8>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d903      	bls.n	800c2e0 <xTaskPriorityDisinherit+0xa8>
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2dc:	4a0c      	ldr	r2, [pc, #48]	@ (800c310 <xTaskPriorityDisinherit+0xd8>)
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4a09      	ldr	r2, [pc, #36]	@ (800c314 <xTaskPriorityDisinherit+0xdc>)
 800c2ee:	441a      	add	r2, r3
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	f7fe f913 	bl	800a522 <vListInsertEnd>
>>>>>>> Stashed changes
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 800bb10:	2301      	movs	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
=======
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 800bb14:	697b      	ldr	r3, [r7, #20]
	}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20002620 	.word	0x20002620
 800bb24:	20002afc 	.word	0x20002afc
 800bb28:	20002624 	.word	0x20002624

0800bb2c <prvAddCurrentTaskToDelayedList>:
=======
 800c300:	697b      	ldr	r3, [r7, #20]
	}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20002634 	.word	0x20002634
 800c310:	20002b10 	.word	0x20002b10
 800c314:	20002638 	.word	0x20002638

0800c318 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c326:	2301      	movs	r3, #1
 800c328:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d06c      	beq.n	800c40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10b      	bne.n	800c350 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	60fb      	str	r3, [r7, #12]
}
 800c34a:	bf00      	nop
 800c34c:	bf00      	nop
 800c34e:	e7fd      	b.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d902      	bls.n	800c360 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	61fb      	str	r3, [r7, #28]
 800c35e:	e002      	b.n	800c366 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c364:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36a:	69fa      	ldr	r2, [r7, #28]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d04c      	beq.n	800c40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	429a      	cmp	r2, r3
 800c378:	d147      	bne.n	800c40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c37a:	4b26      	ldr	r3, [pc, #152]	@ (800c414 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	429a      	cmp	r2, r3
 800c382:	d10b      	bne.n	800c39c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	60bb      	str	r3, [r7, #8]
}
 800c396:	bf00      	nop
 800c398:	bf00      	nop
 800c39a:	e7fd      	b.n	800c398 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	69fa      	ldr	r2, [r7, #28]
 800c3a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	db04      	blt.n	800c3ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	6959      	ldr	r1, [r3, #20]
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4a13      	ldr	r2, [pc, #76]	@ (800c418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3ca:	4413      	add	r3, r2
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	d11c      	bne.n	800c40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fe f901 	bl	800a5dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3de:	4b0f      	ldr	r3, [pc, #60]	@ (800c41c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d903      	bls.n	800c3ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c41c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4a07      	ldr	r2, [pc, #28]	@ (800c418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3fc:	441a      	add	r2, r3
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	3304      	adds	r3, #4
 800c402:	4619      	mov	r1, r3
 800c404:	4610      	mov	r0, r2
 800c406:	f7fe f88c 	bl	800a522 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c40a:	bf00      	nop
 800c40c:	3720      	adds	r7, #32
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20002634 	.word	0x20002634
 800c418:	20002638 	.word	0x20002638
 800c41c:	20002b10 	.word	0x20002b10

0800c420 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c420:	b480      	push	{r7}
 800c422:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c424:	4b07      	ldr	r3, [pc, #28]	@ (800c444 <pvTaskIncrementMutexHeldCount+0x24>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c42c:	4b05      	ldr	r3, [pc, #20]	@ (800c444 <pvTaskIncrementMutexHeldCount+0x24>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c432:	3201      	adds	r2, #1
 800c434:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c436:	4b03      	ldr	r3, [pc, #12]	@ (800c444 <pvTaskIncrementMutexHeldCount+0x24>)
 800c438:	681b      	ldr	r3, [r3, #0]
	}
 800c43a:	4618      	mov	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	20002634 	.word	0x20002634

0800c448 <prvAddCurrentTaskToDelayedList>:
>>>>>>> Stashed changes

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< Updated upstream
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb36:	4b21      	ldr	r3, [pc, #132]	@ (800bbbc <prvAddCurrentTaskToDelayedList+0x90>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]
=======
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c452:	4b21      	ldr	r3, [pc, #132]	@ (800c4d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800bb3c:	4b20      	ldr	r3, [pc, #128]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe fbe8 	bl	800a318 <uxListRemove>
=======
 800c458:	4b20      	ldr	r3, [pc, #128]	@ (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3304      	adds	r3, #4
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe f8bc 	bl	800a5dc <uxListRemove>
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< Updated upstream
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4e:	d10a      	bne.n	800bb66 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d007      	beq.n	800bb66 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d10a      	bne.n	800c482 <prvAddCurrentTaskToDelayedList+0x3a>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d007      	beq.n	800c482 <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> Stashed changes
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800bb56:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4819      	ldr	r0, [pc, #100]	@ (800bbc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb60:	f7fe fb7d 	bl	800a25e <vListInsertEnd>
=======
 800c472:	4b1a      	ldr	r3, [pc, #104]	@ (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3304      	adds	r3, #4
 800c478:	4619      	mov	r1, r3
 800c47a:	4819      	ldr	r0, [pc, #100]	@ (800c4e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c47c:	f7fe f851 	bl	800a522 <vListInsertEnd>
>>>>>>> Stashed changes

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< Updated upstream
 800bb64:	e026      	b.n	800bbb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb6e:	4b14      	ldr	r3, [pc, #80]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d209      	bcs.n	800bb92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb7e:	4b12      	ldr	r3, [pc, #72]	@ (800bbc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7fe fb8b 	bl	800a2a6 <vListInsert>
}
 800bb90:	e010      	b.n	800bbb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb92:	4b0e      	ldr	r3, [pc, #56]	@ (800bbcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	4610      	mov	r0, r2
 800bba0:	f7fe fb81 	bl	800a2a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bba4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d202      	bcs.n	800bbb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bbae:	4a08      	ldr	r2, [pc, #32]	@ (800bbd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	6013      	str	r3, [r2, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20002af8 	.word	0x20002af8
 800bbc0:	20002620 	.word	0x20002620
 800bbc4:	20002ae0 	.word	0x20002ae0
 800bbc8:	20002ab0 	.word	0x20002ab0
 800bbcc:	20002aac 	.word	0x20002aac
 800bbd0:	20002b14 	.word	0x20002b14

0800bbd4 <xTimerCreateTimerTask>:
=======
 800c480:	e026      	b.n	800c4d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4413      	add	r3, r2
 800c488:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c48a:	4b14      	ldr	r3, [pc, #80]	@ (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	429a      	cmp	r2, r3
 800c498:	d209      	bcs.n	800c4ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c49a:	4b12      	ldr	r3, [pc, #72]	@ (800c4e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	f7fe f85f 	bl	800a56a <vListInsert>
}
 800c4ac:	e010      	b.n	800c4d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c4e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f7fe f855 	bl	800a56a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c4ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d202      	bcs.n	800c4d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c4ca:	4a08      	ldr	r2, [pc, #32]	@ (800c4ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	6013      	str	r3, [r2, #0]
}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	20002b0c 	.word	0x20002b0c
 800c4dc:	20002634 	.word	0x20002634
 800c4e0:	20002af4 	.word	0x20002af4
 800c4e4:	20002ac4 	.word	0x20002ac4
 800c4e8:	20002ac0 	.word	0x20002ac0
 800c4ec:	20002b28 	.word	0x20002b28

0800c4f0 <xTimerCreateTimerTask>:
>>>>>>> Stashed changes
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< Updated upstream
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	@ 0x28
 800bbd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
=======
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	@ 0x28
 800c4f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< Updated upstream
 800bbde:	f000 fb13 	bl	800c208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bbe2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc58 <xTimerCreateTimerTask+0x84>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d021      	beq.n	800bc2e <xTimerCreateTimerTask+0x5a>
=======
 800c4fa:	f000 fb13 	bl	800cb24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c4fe:	4b1d      	ldr	r3, [pc, #116]	@ (800c574 <xTimerCreateTimerTask+0x84>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d021      	beq.n	800c54a <xTimerCreateTimerTask+0x5a>
>>>>>>> Stashed changes
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 800bbea:	2300      	movs	r3, #0
 800bbec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbf2:	1d3a      	adds	r2, r7, #4
 800bbf4:	f107 0108 	add.w	r1, r7, #8
 800bbf8:	f107 030c 	add.w	r3, r7, #12
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe fae7 	bl	800a1d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc02:	6879      	ldr	r1, [r7, #4]
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	9202      	str	r2, [sp, #8]
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	2300      	movs	r3, #0
 800bc12:	460a      	mov	r2, r1
 800bc14:	4911      	ldr	r1, [pc, #68]	@ (800bc5c <xTimerCreateTimerTask+0x88>)
 800bc16:	4812      	ldr	r0, [pc, #72]	@ (800bc60 <xTimerCreateTimerTask+0x8c>)
 800bc18:	f7ff f8a2 	bl	800ad60 <xTaskCreateStatic>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	4a11      	ldr	r2, [pc, #68]	@ (800bc64 <xTimerCreateTimerTask+0x90>)
 800bc20:	6013      	str	r3, [r2, #0]
=======
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c50e:	1d3a      	adds	r2, r7, #4
 800c510:	f107 0108 	add.w	r1, r7, #8
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fd ffbb 	bl	800a494 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c51e:	6879      	ldr	r1, [r7, #4]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	9202      	str	r2, [sp, #8]
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	2302      	movs	r3, #2
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	2300      	movs	r3, #0
 800c52e:	460a      	mov	r2, r1
 800c530:	4911      	ldr	r1, [pc, #68]	@ (800c578 <xTimerCreateTimerTask+0x88>)
 800c532:	4812      	ldr	r0, [pc, #72]	@ (800c57c <xTimerCreateTimerTask+0x8c>)
 800c534:	f7fe ff92 	bl	800b45c <xTaskCreateStatic>
 800c538:	4603      	mov	r3, r0
 800c53a:	4a11      	ldr	r2, [pc, #68]	@ (800c580 <xTimerCreateTimerTask+0x90>)
 800c53c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< Updated upstream
 800bc22:	4b10      	ldr	r3, [pc, #64]	@ (800bc64 <xTimerCreateTimerTask+0x90>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	617b      	str	r3, [r7, #20]
=======
 800c53e:	4b10      	ldr	r3, [pc, #64]	@ (800c580 <xTimerCreateTimerTask+0x90>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c546:	2301      	movs	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< Updated upstream
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10b      	bne.n	800bc4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	613b      	str	r3, [r7, #16]
}
 800bc46:	bf00      	nop
 800bc48:	bf00      	nop
 800bc4a:	e7fd      	b.n	800bc48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc4c:	697b      	ldr	r3, [r7, #20]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20002b50 	.word	0x20002b50
 800bc5c:	0800e1d8 	.word	0x0800e1d8
 800bc60:	0800bda1 	.word	0x0800bda1
 800bc64:	20002b54 	.word	0x20002b54

0800bc68 <xTimerGenericCommand>:
=======
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10b      	bne.n	800c568 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	613b      	str	r3, [r7, #16]
}
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	e7fd      	b.n	800c564 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c568:	697b      	ldr	r3, [r7, #20]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20002b64 	.word	0x20002b64
 800c578:	0800eb4c 	.word	0x0800eb4c
 800c57c:	0800c6bd 	.word	0x0800c6bd
 800c580:	20002b68 	.word	0x20002b68

0800c584 <xTimerGenericCommand>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08a      	sub	sp, #40	@ 0x28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10b      	bne.n	800bc98 <xTimerGenericCommand+0x30>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	623b      	str	r3, [r7, #32]
}
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
 800bc96:	e7fd      	b.n	800bc94 <xTimerGenericCommand+0x2c>
=======
 800c584:	b580      	push	{r7, lr}
 800c586:	b08a      	sub	sp, #40	@ 0x28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
 800c590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c592:	2300      	movs	r3, #0
 800c594:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10b      	bne.n	800c5b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	623b      	str	r3, [r7, #32]
}
 800c5ae:	bf00      	nop
 800c5b0:	bf00      	nop
 800c5b2:	e7fd      	b.n	800c5b0 <xTimerGenericCommand+0x2c>
>>>>>>> Stashed changes

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 800bc98:	4b19      	ldr	r3, [pc, #100]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d02a      	beq.n	800bcf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b05      	cmp	r3, #5
 800bcb0:	dc18      	bgt.n	800bce4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bcb2:	f7ff fead 	bl	800ba10 <xTaskGetSchedulerState>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d109      	bne.n	800bcd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bcbc:	4b10      	ldr	r3, [pc, #64]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bcbe:	6818      	ldr	r0, [r3, #0]
 800bcc0:	f107 0110 	add.w	r1, r7, #16
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcc8:	f7fe fc5a 	bl	800a580 <xQueueGenericSend>
 800bccc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bcce:	e012      	b.n	800bcf6 <xTimerGenericCommand+0x8e>
=======
 800c5b4:	4b19      	ldr	r3, [pc, #100]	@ (800c61c <xTimerGenericCommand+0x98>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d02a      	beq.n	800c612 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	2b05      	cmp	r3, #5
 800c5cc:	dc18      	bgt.n	800c600 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5ce:	f7ff fdad 	bl	800c12c <xTaskGetSchedulerState>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d109      	bne.n	800c5ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5d8:	4b10      	ldr	r3, [pc, #64]	@ (800c61c <xTimerGenericCommand+0x98>)
 800c5da:	6818      	ldr	r0, [r3, #0]
 800c5dc:	f107 0110 	add.w	r1, r7, #16
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5e4:	f7fe fa22 	bl	800aa2c <xQueueGenericSend>
 800c5e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c5ea:	e012      	b.n	800c612 <xTimerGenericCommand+0x8e>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< Updated upstream
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	f107 0110 	add.w	r1, r7, #16
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f7fe fc50 	bl	800a580 <xQueueGenericSend>
 800bce0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bce2:	e008      	b.n	800bcf6 <xTimerGenericCommand+0x8e>
=======
 800c5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c61c <xTimerGenericCommand+0x98>)
 800c5ee:	6818      	ldr	r0, [r3, #0]
 800c5f0:	f107 0110 	add.w	r1, r7, #16
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f7fe fa18 	bl	800aa2c <xQueueGenericSend>
 800c5fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c5fe:	e008      	b.n	800c612 <xTimerGenericCommand+0x8e>
>>>>>>> Stashed changes
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< Updated upstream
 800bce4:	4b06      	ldr	r3, [pc, #24]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	f107 0110 	add.w	r1, r7, #16
 800bcec:	2300      	movs	r3, #0
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	f7fe fd48 	bl	800a784 <xQueueGenericSendFromISR>
 800bcf4:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 800c600:	4b06      	ldr	r3, [pc, #24]	@ (800c61c <xTimerGenericCommand+0x98>)
 800c602:	6818      	ldr	r0, [r3, #0]
 800c604:	f107 0110 	add.w	r1, r7, #16
 800c608:	2300      	movs	r3, #0
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	f7fe fb10 	bl	800ac30 <xQueueGenericSendFromISR>
 800c610:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< Updated upstream
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3728      	adds	r7, #40	@ 0x28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20002b50 	.word	0x20002b50

0800bd04 <prvProcessExpiredTimer>:
=======
 800c612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c614:	4618      	mov	r0, r3
 800c616:	3728      	adds	r7, #40	@ 0x28
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	20002b64 	.word	0x20002b64

0800c620 <prvProcessExpiredTimer>:
>>>>>>> Stashed changes
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< Updated upstream
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd0e:	4b23      	ldr	r3, [pc, #140]	@ (800bd9c <prvProcessExpiredTimer+0x98>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	617b      	str	r3, [r7, #20]
=======
 800c620:	b580      	push	{r7, lr}
 800c622:	b088      	sub	sp, #32
 800c624:	af02      	add	r7, sp, #8
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62a:	4b23      	ldr	r3, [pc, #140]	@ (800c6b8 <prvProcessExpiredTimer+0x98>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fe fafb 	bl	800a318 <uxListRemove>
=======
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	3304      	adds	r3, #4
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fd ffcf 	bl	800a5dc <uxListRemove>
>>>>>>> Stashed changes
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< Updated upstream
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd28:	f003 0304 	and.w	r3, r3, #4
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d023      	beq.n	800bd78 <prvProcessExpiredTimer+0x74>
=======
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c644:	f003 0304 	and.w	r3, r3, #4
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d023      	beq.n	800c694 <prvProcessExpiredTimer+0x74>
>>>>>>> Stashed changes
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< Updated upstream
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	699a      	ldr	r2, [r3, #24]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	18d1      	adds	r1, r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	6978      	ldr	r0, [r7, #20]
 800bd3e:	f000 f8d5 	bl	800beec <prvInsertTimerInActiveList>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d020      	beq.n	800bd8a <prvProcessExpiredTimer+0x86>
=======
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	699a      	ldr	r2, [r3, #24]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	18d1      	adds	r1, r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	6978      	ldr	r0, [r7, #20]
 800c65a:	f000 f8d5 	bl	800c808 <prvInsertTimerInActiveList>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d020      	beq.n	800c6a6 <prvProcessExpiredTimer+0x86>
>>>>>>> Stashed changes
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	2100      	movs	r1, #0
 800bd52:	6978      	ldr	r0, [r7, #20]
 800bd54:	f7ff ff88 	bl	800bc68 <xTimerGenericCommand>
 800bd58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d114      	bne.n	800bd8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	60fb      	str	r3, [r7, #12]
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	e7fd      	b.n	800bd74 <prvProcessExpiredTimer+0x70>
=======
 800c664:	2300      	movs	r3, #0
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	2300      	movs	r3, #0
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	2100      	movs	r1, #0
 800c66e:	6978      	ldr	r0, [r7, #20]
 800c670:	f7ff ff88 	bl	800c584 <xTimerGenericCommand>
 800c674:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d114      	bne.n	800c6a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c680:	f383 8811 	msr	BASEPRI, r3
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	60fb      	str	r3, [r7, #12]
}
 800c68e:	bf00      	nop
 800c690:	bf00      	nop
 800c692:	e7fd      	b.n	800c690 <prvProcessExpiredTimer+0x70>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
=======
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c69a:	f023 0301 	bic.w	r3, r3, #1
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	6978      	ldr	r0, [r7, #20]
 800bd90:	4798      	blx	r3
}
 800bd92:	bf00      	nop
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20002b48 	.word	0x20002b48

0800bda0 <prvTimerTask>:
=======
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	6978      	ldr	r0, [r7, #20]
 800c6ac:	4798      	blx	r3
}
 800c6ae:	bf00      	nop
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20002b5c 	.word	0x20002b5c

0800c6bc <prvTimerTask>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< Updated upstream
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
=======
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< Updated upstream
 800bda8:	f107 0308 	add.w	r3, r7, #8
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 f859 	bl	800be64 <prvGetNextExpireTime>
 800bdb2:	60f8      	str	r0, [r7, #12]
=======
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 f859 	bl	800c780 <prvGetNextExpireTime>
 800c6ce:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< Updated upstream
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 f805 	bl	800bdc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bdbe:	f000 f8d7 	bl	800bf70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdc2:	bf00      	nop
 800bdc4:	e7f0      	b.n	800bda8 <prvTimerTask+0x8>
	...

0800bdc8 <prvProcessTimerOrBlockTask>:
=======
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 f805 	bl	800c6e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6da:	f000 f8d7 	bl	800c88c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6de:	bf00      	nop
 800c6e0:	e7f0      	b.n	800c6c4 <prvTimerTask+0x8>
	...

0800c6e4 <prvProcessTimerOrBlockTask>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< Updated upstream
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
=======
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< Updated upstream
 800bdd2:	f7ff fa29 	bl	800b228 <vTaskSuspendAll>
=======
 800c6ee:	f7ff f919 	bl	800b924 <vTaskSuspendAll>
>>>>>>> Stashed changes
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 800bdd6:	f107 0308 	add.w	r3, r7, #8
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f866 	bl	800beac <prvSampleTimeNow>
 800bde0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d130      	bne.n	800be4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <prvProcessTimerOrBlockTask+0x3c>
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d806      	bhi.n	800be04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bdf6:	f7ff fa25 	bl	800b244 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff ff81 	bl	800bd04 <prvProcessExpiredTimer>
=======
 800c6f2:	f107 0308 	add.w	r3, r7, #8
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f866 	bl	800c7c8 <prvSampleTimeNow>
 800c6fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d130      	bne.n	800c766 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <prvProcessTimerOrBlockTask+0x3c>
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d806      	bhi.n	800c720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c712:	f7ff f915 	bl	800b940 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c716:	68f9      	ldr	r1, [r7, #12]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff ff81 	bl	800c620 <prvProcessExpiredTimer>
>>>>>>> Stashed changes
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< Updated upstream
 800be02:	e024      	b.n	800be4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d008      	beq.n	800be1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be0a:	4b13      	ldr	r3, [pc, #76]	@ (800be58 <prvProcessTimerOrBlockTask+0x90>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <prvProcessTimerOrBlockTask+0x50>
 800be14:	2301      	movs	r3, #1
 800be16:	e000      	b.n	800be1a <prvProcessTimerOrBlockTask+0x52>
 800be18:	2300      	movs	r3, #0
 800be1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be1c:	4b0f      	ldr	r3, [pc, #60]	@ (800be5c <prvProcessTimerOrBlockTask+0x94>)
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4619      	mov	r1, r3
 800be2a:	f7fe ff65 	bl	800acf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be2e:	f7ff fa09 	bl	800b244 <xTaskResumeAll>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be38:	4b09      	ldr	r3, [pc, #36]	@ (800be60 <prvProcessTimerOrBlockTask+0x98>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
}
 800be48:	e001      	b.n	800be4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be4a:	f7ff f9fb 	bl	800b244 <xTaskResumeAll>
}
 800be4e:	bf00      	nop
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20002b4c 	.word	0x20002b4c
 800be5c:	20002b50 	.word	0x20002b50
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <prvGetNextExpireTime>:
=======
 800c71e:	e024      	b.n	800c76a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d008      	beq.n	800c738 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c726:	4b13      	ldr	r3, [pc, #76]	@ (800c774 <prvProcessTimerOrBlockTask+0x90>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <prvProcessTimerOrBlockTask+0x50>
 800c730:	2301      	movs	r3, #1
 800c732:	e000      	b.n	800c736 <prvProcessTimerOrBlockTask+0x52>
 800c734:	2300      	movs	r3, #0
 800c736:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c738:	4b0f      	ldr	r3, [pc, #60]	@ (800c778 <prvProcessTimerOrBlockTask+0x94>)
 800c73a:	6818      	ldr	r0, [r3, #0]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	4619      	mov	r1, r3
 800c746:	f7fe fe55 	bl	800b3f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c74a:	f7ff f8f9 	bl	800b940 <xTaskResumeAll>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10a      	bne.n	800c76a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c754:	4b09      	ldr	r3, [pc, #36]	@ (800c77c <prvProcessTimerOrBlockTask+0x98>)
 800c756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	f3bf 8f6f 	isb	sy
}
 800c764:	e001      	b.n	800c76a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c766:	f7ff f8eb 	bl	800b940 <xTaskResumeAll>
}
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	20002b60 	.word	0x20002b60
 800c778:	20002b64 	.word	0x20002b64
 800c77c:	e000ed04 	.word	0xe000ed04

0800c780 <prvGetNextExpireTime>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< Updated upstream
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
=======
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< Updated upstream
 800be6c:	4b0e      	ldr	r3, [pc, #56]	@ (800bea8 <prvGetNextExpireTime+0x44>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <prvGetNextExpireTime+0x16>
 800be76:	2201      	movs	r2, #1
 800be78:	e000      	b.n	800be7c <prvGetNextExpireTime+0x18>
 800be7a:	2200      	movs	r2, #0
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d105      	bne.n	800be94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be88:	4b07      	ldr	r3, [pc, #28]	@ (800bea8 <prvGetNextExpireTime+0x44>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	e001      	b.n	800be98 <prvGetNextExpireTime+0x34>
=======
 800c788:	4b0e      	ldr	r3, [pc, #56]	@ (800c7c4 <prvGetNextExpireTime+0x44>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <prvGetNextExpireTime+0x16>
 800c792:	2201      	movs	r2, #1
 800c794:	e000      	b.n	800c798 <prvGetNextExpireTime+0x18>
 800c796:	2200      	movs	r2, #0
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d105      	bne.n	800c7b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7a4:	4b07      	ldr	r3, [pc, #28]	@ (800c7c4 <prvGetNextExpireTime+0x44>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	e001      	b.n	800c7b4 <prvGetNextExpireTime+0x34>
>>>>>>> Stashed changes
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< Updated upstream
 800be94:	2300      	movs	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be98:	68fb      	ldr	r3, [r7, #12]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	20002b48 	.word	0x20002b48

0800beac <prvSampleTimeNow>:
=======
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	20002b5c 	.word	0x20002b5c

0800c7c8 <prvSampleTimeNow>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< Updated upstream
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
=======
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< Updated upstream
 800beb4:	f7ff fa64 	bl	800b380 <xTaskGetTickCount>
 800beb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800beba:	4b0b      	ldr	r3, [pc, #44]	@ (800bee8 <prvSampleTimeNow+0x3c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d205      	bcs.n	800bed0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bec4:	f000 f93a 	bl	800c13c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	e002      	b.n	800bed6 <prvSampleTimeNow+0x2a>
=======
 800c7d0:	f7ff f954 	bl	800ba7c <xTaskGetTickCount>
 800c7d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c804 <prvSampleTimeNow+0x3c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d205      	bcs.n	800c7ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7e0:	f000 f93a 	bl	800ca58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	601a      	str	r2, [r3, #0]
 800c7ea:	e002      	b.n	800c7f2 <prvSampleTimeNow+0x2a>
>>>>>>> Stashed changes
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< Updated upstream
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bed6:	4a04      	ldr	r2, [pc, #16]	@ (800bee8 <prvSampleTimeNow+0x3c>)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bedc:	68fb      	ldr	r3, [r7, #12]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20002b58 	.word	0x20002b58

0800beec <prvInsertTimerInActiveList>:
=======
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c7f2:	4a04      	ldr	r2, [pc, #16]	@ (800c804 <prvSampleTimeNow+0x3c>)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20002b6c 	.word	0x20002b6c

0800c808 <prvInsertTimerInActiveList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< Updated upstream
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d812      	bhi.n	800bf38 <prvInsertTimerInActiveList+0x4c>
=======
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c816:	2300      	movs	r3, #0
 800c818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d812      	bhi.n	800c854 <prvInsertTimerInActiveList+0x4c>
>>>>>>> Stashed changes
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d302      	bcc.n	800bf26 <prvInsertTimerInActiveList+0x3a>
=======
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	1ad2      	subs	r2, r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d302      	bcc.n	800c842 <prvInsertTimerInActiveList+0x3a>
>>>>>>> Stashed changes
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	e01b      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
=======
 800c83c:	2301      	movs	r3, #1
 800c83e:	617b      	str	r3, [r7, #20]
 800c840:	e01b      	b.n	800c87a <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800bf26:	4b10      	ldr	r3, [pc, #64]	@ (800bf68 <prvInsertTimerInActiveList+0x7c>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f7fe f9b8 	bl	800a2a6 <vListInsert>
 800bf36:	e012      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
=======
 800c842:	4b10      	ldr	r3, [pc, #64]	@ (800c884 <prvInsertTimerInActiveList+0x7c>)
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3304      	adds	r3, #4
 800c84a:	4619      	mov	r1, r3
 800c84c:	4610      	mov	r0, r2
 800c84e:	f7fd fe8c 	bl	800a56a <vListInsert>
 800c852:	e012      	b.n	800c87a <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< Updated upstream
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d206      	bcs.n	800bf4e <prvInsertTimerInActiveList+0x62>
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d302      	bcc.n	800bf4e <prvInsertTimerInActiveList+0x62>
=======
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d206      	bcs.n	800c86a <prvInsertTimerInActiveList+0x62>
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d302      	bcc.n	800c86a <prvInsertTimerInActiveList+0x62>
>>>>>>> Stashed changes
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< Updated upstream
 800bf48:	2301      	movs	r3, #1
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e007      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
=======
 800c864:	2301      	movs	r3, #1
 800c866:	617b      	str	r3, [r7, #20]
 800c868:	e007      	b.n	800c87a <prvInsertTimerInActiveList+0x72>
>>>>>>> Stashed changes
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< Updated upstream
 800bf4e:	4b07      	ldr	r3, [pc, #28]	@ (800bf6c <prvInsertTimerInActiveList+0x80>)
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7fe f9a4 	bl	800a2a6 <vListInsert>
=======
 800c86a:	4b07      	ldr	r3, [pc, #28]	@ (800c888 <prvInsertTimerInActiveList+0x80>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3304      	adds	r3, #4
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7fd fe78 	bl	800a56a <vListInsert>
>>>>>>> Stashed changes
		}
	}

	return xProcessTimerNow;
<<<<<<< Updated upstream
 800bf5e:	697b      	ldr	r3, [r7, #20]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3718      	adds	r7, #24
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	20002b4c 	.word	0x20002b4c
 800bf6c:	20002b48 	.word	0x20002b48

0800bf70 <prvProcessReceivedCommands>:
=======
 800c87a:	697b      	ldr	r3, [r7, #20]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20002b60 	.word	0x20002b60
 800c888:	20002b5c 	.word	0x20002b5c

0800c88c <prvProcessReceivedCommands>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< Updated upstream
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08e      	sub	sp, #56	@ 0x38
 800bf74:	af02      	add	r7, sp, #8
=======
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08e      	sub	sp, #56	@ 0x38
 800c890:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< Updated upstream
 800bf76:	e0ce      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
=======
 800c892:	e0ce      	b.n	800ca32 <prvProcessReceivedCommands+0x1a6>
>>>>>>> Stashed changes
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< Updated upstream
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	da19      	bge.n	800bfb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf7e:	1d3b      	adds	r3, r7, #4
 800bf80:	3304      	adds	r3, #4
 800bf82:	62fb      	str	r3, [r7, #44]	@ 0x2c
=======
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	da19      	bge.n	800c8ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c89a:	1d3b      	adds	r3, r7, #4
 800c89c:	3304      	adds	r3, #4
 800c89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< Updated upstream
 800bf84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10b      	bne.n	800bfa2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	61fb      	str	r3, [r7, #28]
}
 800bf9c:	bf00      	nop
 800bf9e:	bf00      	nop
 800bfa0:	e7fd      	b.n	800bf9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfa8:	6850      	ldr	r0, [r2, #4]
 800bfaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfac:	6892      	ldr	r2, [r2, #8]
 800bfae:	4611      	mov	r1, r2
 800bfb0:	4798      	blx	r3
=======
 800c8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10b      	bne.n	800c8be <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	61fb      	str	r3, [r7, #28]
}
 800c8b8:	bf00      	nop
 800c8ba:	bf00      	nop
 800c8bc:	e7fd      	b.n	800c8ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8c4:	6850      	ldr	r0, [r2, #4]
 800c8c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8c8:	6892      	ldr	r2, [r2, #8]
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	4798      	blx	r3
>>>>>>> Stashed changes
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< Updated upstream
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f2c0 80ae 	blt.w	800c116 <prvProcessReceivedCommands+0x1a6>
=======
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f2c0 80ae 	blt.w	800ca32 <prvProcessReceivedCommands+0x1a6>
>>>>>>> Stashed changes
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< Updated upstream
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d004      	beq.n	800bfd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe f9a4 	bl	800a318 <uxListRemove>
=======
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d004      	beq.n	800c8ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fd fe78 	bl	800a5dc <uxListRemove>
>>>>>>> Stashed changes
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< Updated upstream
 800bfd0:	463b      	mov	r3, r7
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7ff ff6a 	bl	800beac <prvSampleTimeNow>
 800bfd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	f200 8097 	bhi.w	800c110 <prvProcessReceivedCommands+0x1a0>
 800bfe2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe8 <prvProcessReceivedCommands+0x78>)
 800bfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe8:	0800c011 	.word	0x0800c011
 800bfec:	0800c011 	.word	0x0800c011
 800bff0:	0800c011 	.word	0x0800c011
 800bff4:	0800c087 	.word	0x0800c087
 800bff8:	0800c09b 	.word	0x0800c09b
 800bffc:	0800c0e7 	.word	0x0800c0e7
 800c000:	0800c011 	.word	0x0800c011
 800c004:	0800c011 	.word	0x0800c011
 800c008:	0800c087 	.word	0x0800c087
 800c00c:	0800c09b 	.word	0x0800c09b
=======
 800c8ec:	463b      	mov	r3, r7
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7ff ff6a 	bl	800c7c8 <prvSampleTimeNow>
 800c8f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b09      	cmp	r3, #9
 800c8fa:	f200 8097 	bhi.w	800ca2c <prvProcessReceivedCommands+0x1a0>
 800c8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c904 <prvProcessReceivedCommands+0x78>)
 800c900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c904:	0800c92d 	.word	0x0800c92d
 800c908:	0800c92d 	.word	0x0800c92d
 800c90c:	0800c92d 	.word	0x0800c92d
 800c910:	0800c9a3 	.word	0x0800c9a3
 800c914:	0800c9b7 	.word	0x0800c9b7
 800c918:	0800ca03 	.word	0x0800ca03
 800c91c:	0800c92d 	.word	0x0800c92d
 800c920:	0800c92d 	.word	0x0800c92d
 800c924:	0800c9a3 	.word	0x0800c9a3
 800c928:	0800c9b7 	.word	0x0800c9b7
>>>>>>> Stashed changes
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800c010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c016:	f043 0301 	orr.w	r3, r3, #1
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	18d1      	adds	r1, r2, r3
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c030:	f7ff ff5c 	bl	800beec <prvInsertTimerInActiveList>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d06c      	beq.n	800c114 <prvProcessReceivedCommands+0x1a4>
=======
 800c92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c932:	f043 0301 	orr.w	r3, r3, #1
 800c936:	b2da      	uxtb	r2, r3
 800c938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	18d1      	adds	r1, r2, r3
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c94a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c94c:	f7ff ff5c 	bl	800c808 <prvInsertTimerInActiveList>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d06c      	beq.n	800ca30 <prvProcessReceivedCommands+0x1a4>
>>>>>>> Stashed changes
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	6a1b      	ldr	r3, [r3, #32]
 800c03e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c048:	f003 0304 	and.w	r3, r3, #4
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d061      	beq.n	800c114 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	441a      	add	r2, r3
 800c058:	2300      	movs	r3, #0
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	2300      	movs	r3, #0
 800c05e:	2100      	movs	r1, #0
 800c060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c062:	f7ff fe01 	bl	800bc68 <xTimerGenericCommand>
 800c066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d152      	bne.n	800c114 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	61bb      	str	r3, [r7, #24]
}
 800c080:	bf00      	nop
 800c082:	bf00      	nop
 800c084:	e7fd      	b.n	800c082 <prvProcessReceivedCommands+0x112>
=======
 800c956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c958:	6a1b      	ldr	r3, [r3, #32]
 800c95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c95c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c964:	f003 0304 	and.w	r3, r3, #4
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d061      	beq.n	800ca30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	441a      	add	r2, r3
 800c974:	2300      	movs	r3, #0
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	2300      	movs	r3, #0
 800c97a:	2100      	movs	r1, #0
 800c97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c97e:	f7ff fe01 	bl	800c584 <xTimerGenericCommand>
 800c982:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d152      	bne.n	800ca30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	61bb      	str	r3, [r7, #24]
}
 800c99c:	bf00      	nop
 800c99e:	bf00      	nop
 800c9a0:	e7fd      	b.n	800c99e <prvProcessReceivedCommands+0x112>
>>>>>>> Stashed changes
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800c086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c08c:	f023 0301 	bic.w	r3, r3, #1
 800c090:	b2da      	uxtb	r2, r3
 800c092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c094:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c098:	e03d      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
=======
 800c9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9a8:	f023 0301 	bic.w	r3, r3, #1
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c9b4:	e03d      	b.n	800ca32 <prvProcessReceivedCommands+0x1a6>
>>>>>>> Stashed changes

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< Updated upstream
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0a0:	f043 0301 	orr.w	r3, r3, #1
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10b      	bne.n	800c0d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	617b      	str	r3, [r7, #20]
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	e7fd      	b.n	800c0ce <prvProcessReceivedCommands+0x15e>
=======
 800c9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9bc:	f043 0301 	orr.w	r3, r3, #1
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10b      	bne.n	800c9ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	617b      	str	r3, [r7, #20]
}
 800c9e8:	bf00      	nop
 800c9ea:	bf00      	nop
 800c9ec:	e7fd      	b.n	800c9ea <prvProcessReceivedCommands+0x15e>
>>>>>>> Stashed changes
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< Updated upstream
 800c0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	18d1      	adds	r1, r2, r3
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0e0:	f7ff ff04 	bl	800beec <prvInsertTimerInActiveList>
					break;
 800c0e4:	e017      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
=======
 800c9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f0:	699a      	ldr	r2, [r3, #24]
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	18d1      	adds	r1, r2, r3
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9fc:	f7ff ff04 	bl	800c808 <prvInsertTimerInActiveList>
					break;
 800ca00:	e017      	b.n	800ca32 <prvProcessReceivedCommands+0x1a6>
>>>>>>> Stashed changes
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< Updated upstream
 800c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ec:	f003 0302 	and.w	r3, r3, #2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c0f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0f6:	f000 fbe7 	bl	800c8c8 <vPortFree>
=======
 800ca02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca08:	f003 0302 	and.w	r3, r3, #2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d103      	bne.n	800ca18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ca10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca12:	f000 fbe9 	bl	800d1e8 <vPortFree>
>>>>>>> Stashed changes
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< Updated upstream
 800c0fa:	e00c      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c102:	f023 0301 	bic.w	r3, r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c10e:	e002      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
=======
 800ca16:	e00c      	b.n	800ca32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca1e:	f023 0301 	bic.w	r3, r3, #1
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca2a:	e002      	b.n	800ca32 <prvProcessReceivedCommands+0x1a6>
>>>>>>> Stashed changes

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< Updated upstream
 800c110:	bf00      	nop
 800c112:	e000      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
					break;
 800c114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c116:	4b08      	ldr	r3, [pc, #32]	@ (800c138 <prvProcessReceivedCommands+0x1c8>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	1d39      	adds	r1, r7, #4
 800c11c:	2200      	movs	r2, #0
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe fbce 	bl	800a8c0 <xQueueReceive>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	f47f af26 	bne.w	800bf78 <prvProcessReceivedCommands+0x8>
=======
 800ca2c:	bf00      	nop
 800ca2e:	e000      	b.n	800ca32 <prvProcessReceivedCommands+0x1a6>
					break;
 800ca30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca32:	4b08      	ldr	r3, [pc, #32]	@ (800ca54 <prvProcessReceivedCommands+0x1c8>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	1d39      	adds	r1, r7, #4
 800ca38:	2200      	movs	r2, #0
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fe f996 	bl	800ad6c <xQueueReceive>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f47f af26 	bne.w	800c894 <prvProcessReceivedCommands+0x8>
>>>>>>> Stashed changes
			}
		}
	}
}
<<<<<<< Updated upstream
 800c12c:	bf00      	nop
 800c12e:	bf00      	nop
 800c130:	3730      	adds	r7, #48	@ 0x30
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20002b50 	.word	0x20002b50

0800c13c <prvSwitchTimerLists>:
=======
 800ca48:	bf00      	nop
 800ca4a:	bf00      	nop
 800ca4c:	3730      	adds	r7, #48	@ 0x30
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20002b64 	.word	0x20002b64

0800ca58 <prvSwitchTimerLists>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< Updated upstream
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af02      	add	r7, sp, #8
=======
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b088      	sub	sp, #32
 800ca5c:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< Updated upstream
 800c142:	e049      	b.n	800c1d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c144:	4b2e      	ldr	r3, [pc, #184]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14e:	4b2c      	ldr	r3, [pc, #176]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3304      	adds	r3, #4
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fe f8db 	bl	800a318 <uxListRemove>
=======
 800ca5e:	e049      	b.n	800caf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca60:	4b2e      	ldr	r3, [pc, #184]	@ (800cb1c <prvSwitchTimerLists+0xc4>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca6a:	4b2c      	ldr	r3, [pc, #176]	@ (800cb1c <prvSwitchTimerLists+0xc4>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3304      	adds	r3, #4
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fd fdaf 	bl	800a5dc <uxListRemove>
>>>>>>> Stashed changes
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< Updated upstream
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a1b      	ldr	r3, [r3, #32]
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c170:	f003 0304 	and.w	r3, r3, #4
 800c174:	2b00      	cmp	r3, #0
 800c176:	d02f      	beq.n	800c1d8 <prvSwitchTimerLists+0x9c>
=======
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d02f      	beq.n	800caf4 <prvSwitchTimerLists+0x9c>
>>>>>>> Stashed changes
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< Updated upstream
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	693a      	ldr	r2, [r7, #16]
 800c17e:	4413      	add	r3, r2
 800c180:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	429a      	cmp	r2, r3
 800c188:	d90e      	bls.n	800c1a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c196:	4b1a      	ldr	r3, [pc, #104]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3304      	adds	r3, #4
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f7fe f880 	bl	800a2a6 <vListInsert>
 800c1a6:	e017      	b.n	800c1d8 <prvSwitchTimerLists+0x9c>
=======
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	699b      	ldr	r3, [r3, #24]
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d90e      	bls.n	800cac4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cab2:	4b1a      	ldr	r3, [pc, #104]	@ (800cb1c <prvSwitchTimerLists+0xc4>)
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3304      	adds	r3, #4
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7fd fd54 	bl	800a56a <vListInsert>
 800cac2:	e017      	b.n	800caf4 <prvSwitchTimerLists+0x9c>
>>>>>>> Stashed changes
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< Updated upstream
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f7ff fd58 	bl	800bc68 <xTimerGenericCommand>
 800c1b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10b      	bne.n	800c1d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	603b      	str	r3, [r7, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	bf00      	nop
 800c1d6:	e7fd      	b.n	800c1d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d8:	4b09      	ldr	r3, [pc, #36]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1b0      	bne.n	800c144 <prvSwitchTimerLists+0x8>
=======
 800cac4:	2300      	movs	r3, #0
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	2300      	movs	r3, #0
 800caca:	693a      	ldr	r2, [r7, #16]
 800cacc:	2100      	movs	r1, #0
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7ff fd58 	bl	800c584 <xTimerGenericCommand>
 800cad4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10b      	bne.n	800caf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	603b      	str	r3, [r7, #0]
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	e7fd      	b.n	800caf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800caf4:	4b09      	ldr	r3, [pc, #36]	@ (800cb1c <prvSwitchTimerLists+0xc4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1b0      	bne.n	800ca60 <prvSwitchTimerLists+0x8>
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< Updated upstream
 800c1e2:	4b07      	ldr	r3, [pc, #28]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1e8:	4b06      	ldr	r3, [pc, #24]	@ (800c204 <prvSwitchTimerLists+0xc8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a04      	ldr	r2, [pc, #16]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c1ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1f0:	4a04      	ldr	r2, [pc, #16]	@ (800c204 <prvSwitchTimerLists+0xc8>)
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	6013      	str	r3, [r2, #0]
}
 800c1f6:	bf00      	nop
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20002b48 	.word	0x20002b48
 800c204:	20002b4c 	.word	0x20002b4c

0800c208 <prvCheckForValidListAndQueue>:
=======
 800cafe:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <prvSwitchTimerLists+0xc4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb04:	4b06      	ldr	r3, [pc, #24]	@ (800cb20 <prvSwitchTimerLists+0xc8>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a04      	ldr	r2, [pc, #16]	@ (800cb1c <prvSwitchTimerLists+0xc4>)
 800cb0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb0c:	4a04      	ldr	r2, [pc, #16]	@ (800cb20 <prvSwitchTimerLists+0xc8>)
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	6013      	str	r3, [r2, #0]
}
 800cb12:	bf00      	nop
 800cb14:	3718      	adds	r7, #24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20002b5c 	.word	0x20002b5c
 800cb20:	20002b60 	.word	0x20002b60

0800cb24 <prvCheckForValidListAndQueue>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< Updated upstream
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af02      	add	r7, sp, #8
=======
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800c20e:	f000 f96b 	bl	800c4e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c212:	4b15      	ldr	r3, [pc, #84]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d120      	bne.n	800c25c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c21a:	4814      	ldr	r0, [pc, #80]	@ (800c26c <prvCheckForValidListAndQueue+0x64>)
 800c21c:	f7fd fff2 	bl	800a204 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c220:	4813      	ldr	r0, [pc, #76]	@ (800c270 <prvCheckForValidListAndQueue+0x68>)
 800c222:	f7fd ffef 	bl	800a204 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c226:	4b13      	ldr	r3, [pc, #76]	@ (800c274 <prvCheckForValidListAndQueue+0x6c>)
 800c228:	4a10      	ldr	r2, [pc, #64]	@ (800c26c <prvCheckForValidListAndQueue+0x64>)
 800c22a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c22c:	4b12      	ldr	r3, [pc, #72]	@ (800c278 <prvCheckForValidListAndQueue+0x70>)
 800c22e:	4a10      	ldr	r2, [pc, #64]	@ (800c270 <prvCheckForValidListAndQueue+0x68>)
 800c230:	601a      	str	r2, [r3, #0]
=======
 800cb2a:	f000 f96d 	bl	800ce08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb2e:	4b15      	ldr	r3, [pc, #84]	@ (800cb84 <prvCheckForValidListAndQueue+0x60>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d120      	bne.n	800cb78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb36:	4814      	ldr	r0, [pc, #80]	@ (800cb88 <prvCheckForValidListAndQueue+0x64>)
 800cb38:	f7fd fcc6 	bl	800a4c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb3c:	4813      	ldr	r0, [pc, #76]	@ (800cb8c <prvCheckForValidListAndQueue+0x68>)
 800cb3e:	f7fd fcc3 	bl	800a4c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb42:	4b13      	ldr	r3, [pc, #76]	@ (800cb90 <prvCheckForValidListAndQueue+0x6c>)
 800cb44:	4a10      	ldr	r2, [pc, #64]	@ (800cb88 <prvCheckForValidListAndQueue+0x64>)
 800cb46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb48:	4b12      	ldr	r3, [pc, #72]	@ (800cb94 <prvCheckForValidListAndQueue+0x70>)
 800cb4a:	4a10      	ldr	r2, [pc, #64]	@ (800cb8c <prvCheckForValidListAndQueue+0x68>)
 800cb4c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< Updated upstream
 800c232:	2300      	movs	r3, #0
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	4b11      	ldr	r3, [pc, #68]	@ (800c27c <prvCheckForValidListAndQueue+0x74>)
 800c238:	4a11      	ldr	r2, [pc, #68]	@ (800c280 <prvCheckForValidListAndQueue+0x78>)
 800c23a:	2110      	movs	r1, #16
 800c23c:	200a      	movs	r0, #10
 800c23e:	f7fe f8ff 	bl	800a440 <xQueueGenericCreateStatic>
 800c242:	4603      	mov	r3, r0
 800c244:	4a08      	ldr	r2, [pc, #32]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c246:	6013      	str	r3, [r2, #0]
=======
 800cb4e:	2300      	movs	r3, #0
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	4b11      	ldr	r3, [pc, #68]	@ (800cb98 <prvCheckForValidListAndQueue+0x74>)
 800cb54:	4a11      	ldr	r2, [pc, #68]	@ (800cb9c <prvCheckForValidListAndQueue+0x78>)
 800cb56:	2110      	movs	r1, #16
 800cb58:	200a      	movs	r0, #10
 800cb5a:	f7fd fdd3 	bl	800a704 <xQueueGenericCreateStatic>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4a08      	ldr	r2, [pc, #32]	@ (800cb84 <prvCheckForValidListAndQueue+0x60>)
 800cb62:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< Updated upstream
 800c248:	4b07      	ldr	r3, [pc, #28]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d005      	beq.n	800c25c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c250:	4b05      	ldr	r3, [pc, #20]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	490b      	ldr	r1, [pc, #44]	@ (800c284 <prvCheckForValidListAndQueue+0x7c>)
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fd24 	bl	800aca4 <vQueueAddToRegistry>
=======
 800cb64:	4b07      	ldr	r3, [pc, #28]	@ (800cb84 <prvCheckForValidListAndQueue+0x60>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d005      	beq.n	800cb78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb6c:	4b05      	ldr	r3, [pc, #20]	@ (800cb84 <prvCheckForValidListAndQueue+0x60>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	490b      	ldr	r1, [pc, #44]	@ (800cba0 <prvCheckForValidListAndQueue+0x7c>)
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe fc14 	bl	800b3a0 <vQueueAddToRegistry>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800c25c:	f000 f976 	bl	800c54c <vPortExitCritical>
}
 800c260:	bf00      	nop
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20002b50 	.word	0x20002b50
 800c26c:	20002b20 	.word	0x20002b20
 800c270:	20002b34 	.word	0x20002b34
 800c274:	20002b48 	.word	0x20002b48
 800c278:	20002b4c 	.word	0x20002b4c
 800c27c:	20002bfc 	.word	0x20002bfc
 800c280:	20002b5c 	.word	0x20002b5c
 800c284:	0800e1e0 	.word	0x0800e1e0

0800c288 <pxPortInitialiseStack>:
=======
 800cb78:	f000 f978 	bl	800ce6c <vPortExitCritical>
}
 800cb7c:	bf00      	nop
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	20002b64 	.word	0x20002b64
 800cb88:	20002b34 	.word	0x20002b34
 800cb8c:	20002b48 	.word	0x20002b48
 800cb90:	20002b5c 	.word	0x20002b5c
 800cb94:	20002b60 	.word	0x20002b60
 800cb98:	20002c10 	.word	0x20002c10
 800cb9c:	20002b70 	.word	0x20002b70
 800cba0:	0800eb54 	.word	0x0800eb54

0800cba4 <pxPortInitialiseStack>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< Updated upstream
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
=======
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3b04      	subs	r3, #4
 800c298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c2a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3b04      	subs	r3, #4
 800c2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f023 0201 	bic.w	r2, r3, #1
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3b04      	subs	r3, #4
 800c2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2b8:	4a0c      	ldr	r2, [pc, #48]	@ (800c2ec <pxPortInitialiseStack+0x64>)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3b14      	subs	r3, #20
 800c2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	601a      	str	r2, [r3, #0]
=======
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3b04      	subs	r3, #4
 800cbb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cbbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f023 0201 	bic.w	r2, r3, #1
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3b04      	subs	r3, #4
 800cbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbd4:	4a0c      	ldr	r2, [pc, #48]	@ (800cc08 <pxPortInitialiseStack+0x64>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3b14      	subs	r3, #20
 800cbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3b04      	subs	r3, #4
 800c2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f06f 0202 	mvn.w	r2, #2
 800c2d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	3b20      	subs	r3, #32
 800c2dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2de:	68fb      	ldr	r3, [r7, #12]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3714      	adds	r7, #20
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	0800c2f1 	.word	0x0800c2f1

0800c2f0 <prvTaskExitError>:
=======
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3b04      	subs	r3, #4
 800cbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f06f 0202 	mvn.w	r2, #2
 800cbf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3b20      	subs	r3, #32
 800cbf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr
 800cc08:	0800cc0d 	.word	0x0800cc0d

0800cc0c <prvTaskExitError>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< Updated upstream
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	607b      	str	r3, [r7, #4]
=======
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< Updated upstream
 800c2fa:	4b13      	ldr	r3, [pc, #76]	@ (800c348 <prvTaskExitError+0x58>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c302:	d00b      	beq.n	800c31c <prvTaskExitError+0x2c>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	60fb      	str	r3, [r7, #12]
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	e7fd      	b.n	800c318 <prvTaskExitError+0x28>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	60bb      	str	r3, [r7, #8]
}
 800c32e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c330:	bf00      	nop
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d0fc      	beq.n	800c332 <prvTaskExitError+0x42>
=======
 800cc16:	4b13      	ldr	r3, [pc, #76]	@ (800cc64 <prvTaskExitError+0x58>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1e:	d00b      	beq.n	800cc38 <prvTaskExitError+0x2c>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	60fb      	str	r3, [r7, #12]
}
 800cc32:	bf00      	nop
 800cc34:	bf00      	nop
 800cc36:	e7fd      	b.n	800cc34 <prvTaskExitError+0x28>
	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	60bb      	str	r3, [r7, #8]
}
 800cc4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc4c:	bf00      	nop
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d0fc      	beq.n	800cc4e <prvTaskExitError+0x42>
>>>>>>> Stashed changes
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< Updated upstream
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	2000011c 	.word	0x2000011c
 800c34c:	00000000 	.word	0x00000000

0800c350 <SVC_Handler>:
=======
 800cc54:	bf00      	nop
 800cc56:	bf00      	nop
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	2000011c 	.word	0x2000011c
	...

0800cc70 <SVC_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< Updated upstream
 800c350:	4b07      	ldr	r3, [pc, #28]	@ (800c370 <pxCurrentTCBConst2>)
 800c352:	6819      	ldr	r1, [r3, #0]
 800c354:	6808      	ldr	r0, [r1, #0]
 800c356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35a:	f380 8809 	msr	PSP, r0
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f04f 0000 	mov.w	r0, #0
 800c366:	f380 8811 	msr	BASEPRI, r0
 800c36a:	4770      	bx	lr
 800c36c:	f3af 8000 	nop.w

0800c370 <pxCurrentTCBConst2>:
 800c370:	20002620 	.word	0x20002620
=======
 800cc70:	4b07      	ldr	r3, [pc, #28]	@ (800cc90 <pxCurrentTCBConst2>)
 800cc72:	6819      	ldr	r1, [r3, #0]
 800cc74:	6808      	ldr	r0, [r1, #0]
 800cc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7a:	f380 8809 	msr	PSP, r0
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f04f 0000 	mov.w	r0, #0
 800cc86:	f380 8811 	msr	BASEPRI, r0
 800cc8a:	4770      	bx	lr
 800cc8c:	f3af 8000 	nop.w

0800cc90 <pxCurrentTCBConst2>:
 800cc90:	20002634 	.word	0x20002634
>>>>>>> Stashed changes
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< Updated upstream
 800c374:	bf00      	nop
 800c376:	bf00      	nop

0800c378 <prvPortStartFirstTask>:
=======
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop

0800cc98 <prvPortStartFirstTask>:
>>>>>>> Stashed changes
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< Updated upstream
 800c378:	4808      	ldr	r0, [pc, #32]	@ (800c39c <prvPortStartFirstTask+0x24>)
 800c37a:	6800      	ldr	r0, [r0, #0]
 800c37c:	6800      	ldr	r0, [r0, #0]
 800c37e:	f380 8808 	msr	MSP, r0
 800c382:	f04f 0000 	mov.w	r0, #0
 800c386:	f380 8814 	msr	CONTROL, r0
 800c38a:	b662      	cpsie	i
 800c38c:	b661      	cpsie	f
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	df00      	svc	0
 800c398:	bf00      	nop
=======
 800cc98:	4808      	ldr	r0, [pc, #32]	@ (800ccbc <prvPortStartFirstTask+0x24>)
 800cc9a:	6800      	ldr	r0, [r0, #0]
 800cc9c:	6800      	ldr	r0, [r0, #0]
 800cc9e:	f380 8808 	msr	MSP, r0
 800cca2:	f04f 0000 	mov.w	r0, #0
 800cca6:	f380 8814 	msr	CONTROL, r0
 800ccaa:	b662      	cpsie	i
 800ccac:	b661      	cpsie	f
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	df00      	svc	0
 800ccb8:	bf00      	nop
>>>>>>> Stashed changes
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< Updated upstream
 800c39a:	bf00      	nop
 800c39c:	e000ed08 	.word	0xe000ed08

0800c3a0 <xPortStartScheduler>:
=======
 800ccba:	bf00      	nop
 800ccbc:	e000ed08 	.word	0xe000ed08

0800ccc0 <xPortStartScheduler>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< Updated upstream
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
=======
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< Updated upstream
 800c3a6:	4b47      	ldr	r3, [pc, #284]	@ (800c4c4 <xPortStartScheduler+0x124>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a47      	ldr	r2, [pc, #284]	@ (800c4c8 <xPortStartScheduler+0x128>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d10b      	bne.n	800c3c8 <xPortStartScheduler+0x28>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	60fb      	str	r3, [r7, #12]
}
 800c3c2:	bf00      	nop
 800c3c4:	bf00      	nop
 800c3c6:	e7fd      	b.n	800c3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4c4 <xPortStartScheduler+0x124>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a3f      	ldr	r2, [pc, #252]	@ (800c4cc <xPortStartScheduler+0x12c>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d10b      	bne.n	800c3ea <xPortStartScheduler+0x4a>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	613b      	str	r3, [r7, #16]
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	e7fd      	b.n	800c3e6 <xPortStartScheduler+0x46>
=======
 800ccc6:	4b47      	ldr	r3, [pc, #284]	@ (800cde4 <xPortStartScheduler+0x124>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a47      	ldr	r2, [pc, #284]	@ (800cde8 <xPortStartScheduler+0x128>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d10b      	bne.n	800cce8 <xPortStartScheduler+0x28>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	60fb      	str	r3, [r7, #12]
}
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	e7fd      	b.n	800cce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cce8:	4b3e      	ldr	r3, [pc, #248]	@ (800cde4 <xPortStartScheduler+0x124>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a3f      	ldr	r2, [pc, #252]	@ (800cdec <xPortStartScheduler+0x12c>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d10b      	bne.n	800cd0a <xPortStartScheduler+0x4a>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	613b      	str	r3, [r7, #16]
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop
 800cd08:	e7fd      	b.n	800cd06 <xPortStartScheduler+0x46>
>>>>>>> Stashed changes

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< Updated upstream
 800c3ea:	4b39      	ldr	r3, [pc, #228]	@ (800c4d0 <xPortStartScheduler+0x130>)
 800c3ec:	617b      	str	r3, [r7, #20]
=======
 800cd0a:	4b39      	ldr	r3, [pc, #228]	@ (800cdf0 <xPortStartScheduler+0x130>)
 800cd0c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< Updated upstream
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	607b      	str	r3, [r7, #4]
=======
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< Updated upstream
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	22ff      	movs	r2, #255	@ 0xff
 800c3fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	b2db      	uxtb	r3, r3
 800c402:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	4b31      	ldr	r3, [pc, #196]	@ (800c4d4 <xPortStartScheduler+0x134>)
 800c410:	701a      	strb	r2, [r3, #0]
=======
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	22ff      	movs	r2, #255	@ 0xff
 800cd1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	4b31      	ldr	r3, [pc, #196]	@ (800cdf4 <xPortStartScheduler+0x134>)
 800cd30:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< Updated upstream
 800c412:	4b31      	ldr	r3, [pc, #196]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c414:	2207      	movs	r2, #7
 800c416:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c418:	e009      	b.n	800c42e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c41a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3b01      	subs	r3, #1
 800c420:	4a2d      	ldr	r2, [pc, #180]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c42e:	78fb      	ldrb	r3, [r7, #3]
 800c430:	b2db      	uxtb	r3, r3
 800c432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c436:	2b80      	cmp	r3, #128	@ 0x80
 800c438:	d0ef      	beq.n	800c41a <xPortStartScheduler+0x7a>
=======
 800cd32:	4b31      	ldr	r3, [pc, #196]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd34:	2207      	movs	r2, #7
 800cd36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd38:	e009      	b.n	800cd4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	4a2d      	ldr	r2, [pc, #180]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd4e:	78fb      	ldrb	r3, [r7, #3]
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd56:	2b80      	cmp	r3, #128	@ 0x80
 800cd58:	d0ef      	beq.n	800cd3a <xPortStartScheduler+0x7a>
>>>>>>> Stashed changes
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< Updated upstream
 800c43a:	4b27      	ldr	r3, [pc, #156]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f1c3 0307 	rsb	r3, r3, #7
 800c442:	2b04      	cmp	r3, #4
 800c444:	d00b      	beq.n	800c45e <xPortStartScheduler+0xbe>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	60bb      	str	r3, [r7, #8]
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	e7fd      	b.n	800c45a <xPortStartScheduler+0xba>
=======
 800cd5a:	4b27      	ldr	r3, [pc, #156]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f1c3 0307 	rsb	r3, r3, #7
 800cd62:	2b04      	cmp	r3, #4
 800cd64:	d00b      	beq.n	800cd7e <xPortStartScheduler+0xbe>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	60bb      	str	r3, [r7, #8]
}
 800cd78:	bf00      	nop
 800cd7a:	bf00      	nop
 800cd7c:	e7fd      	b.n	800cd7a <xPortStartScheduler+0xba>
>>>>>>> Stashed changes
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< Updated upstream
 800c45e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	021b      	lsls	r3, r3, #8
 800c464:	4a1c      	ldr	r2, [pc, #112]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c468:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c470:	4a19      	ldr	r2, [pc, #100]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c472:	6013      	str	r3, [r2, #0]
=======
 800cd7e:	4b1e      	ldr	r3, [pc, #120]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	021b      	lsls	r3, r3, #8
 800cd84:	4a1c      	ldr	r2, [pc, #112]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd88:	4b1b      	ldr	r3, [pc, #108]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd90:	4a19      	ldr	r2, [pc, #100]	@ (800cdf8 <xPortStartScheduler+0x138>)
 800cd92:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< Updated upstream
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	b2da      	uxtb	r2, r3
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	701a      	strb	r2, [r3, #0]
=======
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< Updated upstream
 800c47c:	4b17      	ldr	r3, [pc, #92]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a16      	ldr	r2, [pc, #88]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c488:	4b14      	ldr	r3, [pc, #80]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a13      	ldr	r2, [pc, #76]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c48e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c492:	6013      	str	r3, [r2, #0]
=======
 800cd9c:	4b17      	ldr	r3, [pc, #92]	@ (800cdfc <xPortStartScheduler+0x13c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a16      	ldr	r2, [pc, #88]	@ (800cdfc <xPortStartScheduler+0x13c>)
 800cda2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cda6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cda8:	4b14      	ldr	r3, [pc, #80]	@ (800cdfc <xPortStartScheduler+0x13c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a13      	ldr	r2, [pc, #76]	@ (800cdfc <xPortStartScheduler+0x13c>)
 800cdae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cdb2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< Updated upstream
 800c494:	f000 f8da 	bl	800c64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c498:	4b11      	ldr	r3, [pc, #68]	@ (800c4e0 <xPortStartScheduler+0x140>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c49e:	f000 f8f9 	bl	800c694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4a2:	4b10      	ldr	r3, [pc, #64]	@ (800c4e4 <xPortStartScheduler+0x144>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e4 <xPortStartScheduler+0x144>)
 800c4a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c4ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4ae:	f7ff ff63 	bl	800c378 <prvPortStartFirstTask>
=======
 800cdb4:	f000 f8da 	bl	800cf6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cdb8:	4b11      	ldr	r3, [pc, #68]	@ (800ce00 <xPortStartScheduler+0x140>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cdbe:	f000 f8f9 	bl	800cfb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cdc2:	4b10      	ldr	r3, [pc, #64]	@ (800ce04 <xPortStartScheduler+0x144>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a0f      	ldr	r2, [pc, #60]	@ (800ce04 <xPortStartScheduler+0x144>)
 800cdc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cdcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cdce:	f7ff ff63 	bl	800cc98 <prvPortStartFirstTask>
>>>>>>> Stashed changes
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< Updated upstream
 800c4b2:	f7ff f82f 	bl	800b514 <vTaskSwitchContext>
	prvTaskExitError();
 800c4b6:	f7ff ff1b 	bl	800c2f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	e000ed00 	.word	0xe000ed00
 800c4c8:	410fc271 	.word	0x410fc271
 800c4cc:	410fc270 	.word	0x410fc270
 800c4d0:	e000e400 	.word	0xe000e400
 800c4d4:	20002c4c 	.word	0x20002c4c
 800c4d8:	20002c50 	.word	0x20002c50
 800c4dc:	e000ed20 	.word	0xe000ed20
 800c4e0:	2000011c 	.word	0x2000011c
 800c4e4:	e000ef34 	.word	0xe000ef34

0800c4e8 <vPortEnterCritical>:
=======
 800cdd2:	f7fe ff1d 	bl	800bc10 <vTaskSwitchContext>
	prvTaskExitError();
 800cdd6:	f7ff ff19 	bl	800cc0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3718      	adds	r7, #24
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	e000ed00 	.word	0xe000ed00
 800cde8:	410fc271 	.word	0x410fc271
 800cdec:	410fc270 	.word	0x410fc270
 800cdf0:	e000e400 	.word	0xe000e400
 800cdf4:	20002c60 	.word	0x20002c60
 800cdf8:	20002c64 	.word	0x20002c64
 800cdfc:	e000ed20 	.word	0xe000ed20
 800ce00:	2000011c 	.word	0x2000011c
 800ce04:	e000ef34 	.word	0xe000ef34

0800ce08 <vPortEnterCritical>:
>>>>>>> Stashed changes
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< Updated upstream
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	607b      	str	r3, [r7, #4]
}
 800c500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c502:	4b10      	ldr	r3, [pc, #64]	@ (800c544 <vPortEnterCritical+0x5c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3301      	adds	r3, #1
 800c508:	4a0e      	ldr	r2, [pc, #56]	@ (800c544 <vPortEnterCritical+0x5c>)
 800c50a:	6013      	str	r3, [r2, #0]
=======
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	607b      	str	r3, [r7, #4]
}
 800ce20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce22:	4b10      	ldr	r3, [pc, #64]	@ (800ce64 <vPortEnterCritical+0x5c>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3301      	adds	r3, #1
 800ce28:	4a0e      	ldr	r2, [pc, #56]	@ (800ce64 <vPortEnterCritical+0x5c>)
 800ce2a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< Updated upstream
 800c50c:	4b0d      	ldr	r3, [pc, #52]	@ (800c544 <vPortEnterCritical+0x5c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d110      	bne.n	800c536 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c514:	4b0c      	ldr	r3, [pc, #48]	@ (800c548 <vPortEnterCritical+0x60>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00b      	beq.n	800c536 <vPortEnterCritical+0x4e>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	603b      	str	r3, [r7, #0]
}
 800c530:	bf00      	nop
 800c532:	bf00      	nop
 800c534:	e7fd      	b.n	800c532 <vPortEnterCritical+0x4a>
	}
}
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	2000011c 	.word	0x2000011c
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <vPortExitCritical>:
=======
 800ce2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce64 <vPortEnterCritical+0x5c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d110      	bne.n	800ce56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce34:	4b0c      	ldr	r3, [pc, #48]	@ (800ce68 <vPortEnterCritical+0x60>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00b      	beq.n	800ce56 <vPortEnterCritical+0x4e>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	603b      	str	r3, [r7, #0]
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	e7fd      	b.n	800ce52 <vPortEnterCritical+0x4a>
	}
}
 800ce56:	bf00      	nop
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	2000011c 	.word	0x2000011c
 800ce68:	e000ed04 	.word	0xe000ed04

0800ce6c <vPortExitCritical>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< Updated upstream
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c552:	4b12      	ldr	r3, [pc, #72]	@ (800c59c <vPortExitCritical+0x50>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10b      	bne.n	800c572 <vPortExitCritical+0x26>
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	607b      	str	r3, [r7, #4]
}
 800c56c:	bf00      	nop
 800c56e:	bf00      	nop
 800c570:	e7fd      	b.n	800c56e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c572:	4b0a      	ldr	r3, [pc, #40]	@ (800c59c <vPortExitCritical+0x50>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3b01      	subs	r3, #1
 800c578:	4a08      	ldr	r2, [pc, #32]	@ (800c59c <vPortExitCritical+0x50>)
 800c57a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c57c:	4b07      	ldr	r3, [pc, #28]	@ (800c59c <vPortExitCritical+0x50>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d105      	bne.n	800c590 <vPortExitCritical+0x44>
 800c584:	2300      	movs	r3, #0
 800c586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	f383 8811 	msr	BASEPRI, r3
}
 800c58e:	bf00      	nop
=======
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce72:	4b12      	ldr	r3, [pc, #72]	@ (800cebc <vPortExitCritical+0x50>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10b      	bne.n	800ce92 <vPortExitCritical+0x26>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	607b      	str	r3, [r7, #4]
}
 800ce8c:	bf00      	nop
 800ce8e:	bf00      	nop
 800ce90:	e7fd      	b.n	800ce8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce92:	4b0a      	ldr	r3, [pc, #40]	@ (800cebc <vPortExitCritical+0x50>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	4a08      	ldr	r2, [pc, #32]	@ (800cebc <vPortExitCritical+0x50>)
 800ce9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce9c:	4b07      	ldr	r3, [pc, #28]	@ (800cebc <vPortExitCritical+0x50>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d105      	bne.n	800ceb0 <vPortExitCritical+0x44>
 800cea4:	2300      	movs	r3, #0
 800cea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	f383 8811 	msr	BASEPRI, r3
}
 800ceae:	bf00      	nop
>>>>>>> Stashed changes
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< Updated upstream
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	2000011c 	.word	0x2000011c

0800c5a0 <PendSV_Handler>:
=======
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	2000011c 	.word	0x2000011c

0800cec0 <PendSV_Handler>:
>>>>>>> Stashed changes

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< Updated upstream
 800c5a0:	f3ef 8009 	mrs	r0, PSP
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	4b15      	ldr	r3, [pc, #84]	@ (800c600 <pxCurrentTCBConst>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	f01e 0f10 	tst.w	lr, #16
 800c5b0:	bf08      	it	eq
 800c5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ba:	6010      	str	r0, [r2, #0]
 800c5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c5c4:	f380 8811 	msr	BASEPRI, r0
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f7fe ffa0 	bl	800b514 <vTaskSwitchContext>
 800c5d4:	f04f 0000 	mov.w	r0, #0
 800c5d8:	f380 8811 	msr	BASEPRI, r0
 800c5dc:	bc09      	pop	{r0, r3}
 800c5de:	6819      	ldr	r1, [r3, #0]
 800c5e0:	6808      	ldr	r0, [r1, #0]
 800c5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e6:	f01e 0f10 	tst.w	lr, #16
 800c5ea:	bf08      	it	eq
 800c5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5f0:	f380 8809 	msr	PSP, r0
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	f3af 8000 	nop.w

0800c600 <pxCurrentTCBConst>:
 800c600:	20002620 	.word	0x20002620
=======
 800cec0:	f3ef 8009 	mrs	r0, PSP
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	4b15      	ldr	r3, [pc, #84]	@ (800cf20 <pxCurrentTCBConst>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	f01e 0f10 	tst.w	lr, #16
 800ced0:	bf08      	it	eq
 800ced2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ced6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceda:	6010      	str	r0, [r2, #0]
 800cedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cee4:	f380 8811 	msr	BASEPRI, r0
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f7fe fe8e 	bl	800bc10 <vTaskSwitchContext>
 800cef4:	f04f 0000 	mov.w	r0, #0
 800cef8:	f380 8811 	msr	BASEPRI, r0
 800cefc:	bc09      	pop	{r0, r3}
 800cefe:	6819      	ldr	r1, [r3, #0]
 800cf00:	6808      	ldr	r0, [r1, #0]
 800cf02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf06:	f01e 0f10 	tst.w	lr, #16
 800cf0a:	bf08      	it	eq
 800cf0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf10:	f380 8809 	msr	PSP, r0
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	f3af 8000 	nop.w

0800cf20 <pxCurrentTCBConst>:
 800cf20:	20002634 	.word	0x20002634
>>>>>>> Stashed changes
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< Updated upstream
 800c604:	bf00      	nop
 800c606:	bf00      	nop

0800c608 <xPortSysTickHandler>:
=======
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop

0800cf28 <xPortSysTickHandler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< Updated upstream
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	607b      	str	r3, [r7, #4]
}
 800c620:	bf00      	nop
=======
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
>>>>>>> Stashed changes
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 800c622:	f7fe febd 	bl	800b3a0 <xTaskIncrementTick>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <xPortSysTickHandler+0x2c>
=======
 800cf42:	f7fe fdab 	bl	800ba9c <xTaskIncrementTick>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <xPortSysTickHandler+0x2c>
>>>>>>> Stashed changes
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< Updated upstream
 800c62c:	4b06      	ldr	r3, [pc, #24]	@ (800c648 <xPortSysTickHandler+0x40>)
 800c62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	2300      	movs	r3, #0
 800c636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	f383 8811 	msr	BASEPRI, r3
}
 800c63e:	bf00      	nop
=======
 800cf4c:	4b06      	ldr	r3, [pc, #24]	@ (800cf68 <xPortSysTickHandler+0x40>)
 800cf4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	2300      	movs	r3, #0
 800cf56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	f383 8811 	msr	BASEPRI, r3
}
 800cf5e:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< Updated upstream
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <vPortSetupTimerInterrupt>:
=======
 800cf60:	bf00      	nop
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	e000ed04 	.word	0xe000ed04

0800cf6c <vPortSetupTimerInterrupt>:
>>>>>>> Stashed changes
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< Updated upstream
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
=======
 800cf6c:	b480      	push	{r7}
 800cf6e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< Updated upstream
 800c650:	4b0b      	ldr	r3, [pc, #44]	@ (800c680 <vPortSetupTimerInterrupt+0x34>)
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c656:	4b0b      	ldr	r3, [pc, #44]	@ (800c684 <vPortSetupTimerInterrupt+0x38>)
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c65c:	4b0a      	ldr	r3, [pc, #40]	@ (800c688 <vPortSetupTimerInterrupt+0x3c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a0a      	ldr	r2, [pc, #40]	@ (800c68c <vPortSetupTimerInterrupt+0x40>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	099b      	lsrs	r3, r3, #6
 800c668:	4a09      	ldr	r2, [pc, #36]	@ (800c690 <vPortSetupTimerInterrupt+0x44>)
 800c66a:	3b01      	subs	r3, #1
 800c66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c66e:	4b04      	ldr	r3, [pc, #16]	@ (800c680 <vPortSetupTimerInterrupt+0x34>)
 800c670:	2207      	movs	r2, #7
 800c672:	601a      	str	r2, [r3, #0]
}
 800c674:	bf00      	nop
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	e000e010 	.word	0xe000e010
 800c684:	e000e018 	.word	0xe000e018
 800c688:	20000000 	.word	0x20000000
 800c68c:	10624dd3 	.word	0x10624dd3
 800c690:	e000e014 	.word	0xe000e014

0800c694 <vPortEnableVFP>:
=======
 800cf70:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa0 <vPortSetupTimerInterrupt+0x34>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf76:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa4 <vPortSetupTimerInterrupt+0x38>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cfa8 <vPortSetupTimerInterrupt+0x3c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a0a      	ldr	r2, [pc, #40]	@ (800cfac <vPortSetupTimerInterrupt+0x40>)
 800cf82:	fba2 2303 	umull	r2, r3, r2, r3
 800cf86:	099b      	lsrs	r3, r3, #6
 800cf88:	4a09      	ldr	r2, [pc, #36]	@ (800cfb0 <vPortSetupTimerInterrupt+0x44>)
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf8e:	4b04      	ldr	r3, [pc, #16]	@ (800cfa0 <vPortSetupTimerInterrupt+0x34>)
 800cf90:	2207      	movs	r2, #7
 800cf92:	601a      	str	r2, [r3, #0]
}
 800cf94:	bf00      	nop
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	e000e010 	.word	0xe000e010
 800cfa4:	e000e018 	.word	0xe000e018
 800cfa8:	20000000 	.word	0x20000000
 800cfac:	10624dd3 	.word	0x10624dd3
 800cfb0:	e000e014 	.word	0xe000e014

0800cfb4 <vPortEnableVFP>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< Updated upstream
 800c694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c6a4 <vPortEnableVFP+0x10>
 800c698:	6801      	ldr	r1, [r0, #0]
 800c69a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c69e:	6001      	str	r1, [r0, #0]
 800c6a0:	4770      	bx	lr
=======
 800cfb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cfc4 <vPortEnableVFP+0x10>
 800cfb8:	6801      	ldr	r1, [r0, #0]
 800cfba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cfbe:	6001      	str	r1, [r0, #0]
 800cfc0:	4770      	bx	lr
>>>>>>> Stashed changes
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< Updated upstream
 800c6a2:	bf00      	nop
 800c6a4:	e000ed88 	.word	0xe000ed88

0800c6a8 <vPortValidateInterruptPriority>:
=======
 800cfc2:	bf00      	nop
 800cfc4:	e000ed88 	.word	0xe000ed88

0800cfc8 <vPortValidateInterruptPriority>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< Updated upstream
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
=======
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< Updated upstream
 800c6ae:	f3ef 8305 	mrs	r3, IPSR
 800c6b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b0f      	cmp	r3, #15
 800c6b8:	d915      	bls.n	800c6e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6ba:	4a18      	ldr	r2, [pc, #96]	@ (800c71c <vPortValidateInterruptPriority+0x74>)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	4413      	add	r3, r2
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	72fb      	strb	r3, [r7, #11]
=======
 800cfce:	f3ef 8305 	mrs	r3, IPSR
 800cfd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b0f      	cmp	r3, #15
 800cfd8:	d915      	bls.n	800d006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfda:	4a18      	ldr	r2, [pc, #96]	@ (800d03c <vPortValidateInterruptPriority+0x74>)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< Updated upstream
 800c6c4:	4b16      	ldr	r3, [pc, #88]	@ (800c720 <vPortValidateInterruptPriority+0x78>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	7afa      	ldrb	r2, [r7, #11]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d20b      	bcs.n	800c6e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	607b      	str	r3, [r7, #4]
}
 800c6e0:	bf00      	nop
 800c6e2:	bf00      	nop
 800c6e4:	e7fd      	b.n	800c6e2 <vPortValidateInterruptPriority+0x3a>
=======
 800cfe4:	4b16      	ldr	r3, [pc, #88]	@ (800d040 <vPortValidateInterruptPriority+0x78>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	7afa      	ldrb	r2, [r7, #11]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d20b      	bcs.n	800d006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	607b      	str	r3, [r7, #4]
}
 800d000:	bf00      	nop
 800d002:	bf00      	nop
 800d004:	e7fd      	b.n	800d002 <vPortValidateInterruptPriority+0x3a>
>>>>>>> Stashed changes
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< Updated upstream
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c724 <vPortValidateInterruptPriority+0x7c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c728 <vPortValidateInterruptPriority+0x80>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d90b      	bls.n	800c70e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	603b      	str	r3, [r7, #0]
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <vPortValidateInterruptPriority+0x62>
	}
 800c70e:	bf00      	nop
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	e000e3f0 	.word	0xe000e3f0
 800c720:	20002c4c 	.word	0x20002c4c
 800c724:	e000ed0c 	.word	0xe000ed0c
 800c728:	20002c50 	.word	0x20002c50

0800c72c <pvPortMalloc>:
=======
 800d006:	4b0f      	ldr	r3, [pc, #60]	@ (800d044 <vPortValidateInterruptPriority+0x7c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d00e:	4b0e      	ldr	r3, [pc, #56]	@ (800d048 <vPortValidateInterruptPriority+0x80>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	429a      	cmp	r2, r3
 800d014:	d90b      	bls.n	800d02e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	603b      	str	r3, [r7, #0]
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	e7fd      	b.n	800d02a <vPortValidateInterruptPriority+0x62>
	}
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	e000e3f0 	.word	0xe000e3f0
 800d040:	20002c60 	.word	0x20002c60
 800d044:	e000ed0c 	.word	0xe000ed0c
 800d048:	20002c64 	.word	0x20002c64

0800d04c <pvPortMalloc>:
>>>>>>> Stashed changes
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< Updated upstream
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	@ 0x28
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c734:	2300      	movs	r3, #0
 800c736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c738:	f7fe fd76 	bl	800b228 <vTaskSuspendAll>
=======
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08a      	sub	sp, #40	@ 0x28
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d054:	2300      	movs	r3, #0
 800d056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d058:	f7fe fc64 	bl	800b924 <vTaskSuspendAll>
>>>>>>> Stashed changes
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< Updated upstream
 800c73c:	4b5c      	ldr	r3, [pc, #368]	@ (800c8b0 <pvPortMalloc+0x184>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c744:	f000 f924 	bl	800c990 <prvHeapInit>
=======
 800d05c:	4b5c      	ldr	r3, [pc, #368]	@ (800d1d0 <pvPortMalloc+0x184>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d101      	bne.n	800d068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d064:	f000 f924 	bl	800d2b0 <prvHeapInit>
>>>>>>> Stashed changes

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< Updated upstream
 800c748:	4b5a      	ldr	r3, [pc, #360]	@ (800c8b4 <pvPortMalloc+0x188>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4013      	ands	r3, r2
 800c750:	2b00      	cmp	r3, #0
 800c752:	f040 8095 	bne.w	800c880 <pvPortMalloc+0x154>
=======
 800d068:	4b5a      	ldr	r3, [pc, #360]	@ (800d1d4 <pvPortMalloc+0x188>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4013      	ands	r3, r2
 800d070:	2b00      	cmp	r3, #0
 800d072:	f040 8095 	bne.w	800d1a0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< Updated upstream
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01e      	beq.n	800c79a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c75c:	2208      	movs	r2, #8
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4413      	add	r3, r2
 800c762:	607b      	str	r3, [r7, #4]
=======
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d01e      	beq.n	800d0ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d07c:	2208      	movs	r2, #8
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4413      	add	r3, r2
 800d082:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< Updated upstream
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d015      	beq.n	800c79a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f023 0307 	bic.w	r3, r3, #7
 800c774:	3308      	adds	r3, #8
 800c776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f003 0307 	and.w	r3, r3, #7
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00b      	beq.n	800c79a <pvPortMalloc+0x6e>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	617b      	str	r3, [r7, #20]
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	e7fd      	b.n	800c796 <pvPortMalloc+0x6a>
=======
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f003 0307 	and.w	r3, r3, #7
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d015      	beq.n	800d0ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f023 0307 	bic.w	r3, r3, #7
 800d094:	3308      	adds	r3, #8
 800d096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f003 0307 	and.w	r3, r3, #7
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00b      	beq.n	800d0ba <pvPortMalloc+0x6e>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	617b      	str	r3, [r7, #20]
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop
 800d0b8:	e7fd      	b.n	800d0b6 <pvPortMalloc+0x6a>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< Updated upstream
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d06f      	beq.n	800c880 <pvPortMalloc+0x154>
 800c7a0:	4b45      	ldr	r3, [pc, #276]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d86a      	bhi.n	800c880 <pvPortMalloc+0x154>
=======
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d06f      	beq.n	800d1a0 <pvPortMalloc+0x154>
 800d0c0:	4b45      	ldr	r3, [pc, #276]	@ (800d1d8 <pvPortMalloc+0x18c>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d86a      	bhi.n	800d1a0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< Updated upstream
 800c7aa:	4b44      	ldr	r3, [pc, #272]	@ (800c8bc <pvPortMalloc+0x190>)
 800c7ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7ae:	4b43      	ldr	r3, [pc, #268]	@ (800c8bc <pvPortMalloc+0x190>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7b4:	e004      	b.n	800c7c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d903      	bls.n	800c7d2 <pvPortMalloc+0xa6>
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f1      	bne.n	800c7b6 <pvPortMalloc+0x8a>
=======
 800d0ca:	4b44      	ldr	r3, [pc, #272]	@ (800d1dc <pvPortMalloc+0x190>)
 800d0cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0ce:	4b43      	ldr	r3, [pc, #268]	@ (800d1dc <pvPortMalloc+0x190>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0d4:	e004      	b.n	800d0e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d903      	bls.n	800d0f2 <pvPortMalloc+0xa6>
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1f1      	bne.n	800d0d6 <pvPortMalloc+0x8a>
>>>>>>> Stashed changes
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< Updated upstream
 800c7d2:	4b37      	ldr	r3, [pc, #220]	@ (800c8b0 <pvPortMalloc+0x184>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d051      	beq.n	800c880 <pvPortMalloc+0x154>
=======
 800d0f2:	4b37      	ldr	r3, [pc, #220]	@ (800d1d0 <pvPortMalloc+0x184>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d051      	beq.n	800d1a0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< Updated upstream
 800c7dc:	6a3b      	ldr	r3, [r7, #32]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	4413      	add	r3, r2
 800c7e4:	61fb      	str	r3, [r7, #28]
=======
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2208      	movs	r2, #8
 800d102:	4413      	add	r3, r2
 800d104:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< Updated upstream
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	601a      	str	r2, [r3, #0]
=======
 800d106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< Updated upstream
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	1ad2      	subs	r2, r2, r3
 800c7f6:	2308      	movs	r3, #8
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d920      	bls.n	800c840 <pvPortMalloc+0x114>
=======
 800d10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d110:	685a      	ldr	r2, [r3, #4]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	1ad2      	subs	r2, r2, r3
 800d116:	2308      	movs	r3, #8
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d920      	bls.n	800d160 <pvPortMalloc+0x114>
>>>>>>> Stashed changes
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< Updated upstream
 800c7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4413      	add	r3, r2
 800c804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	f003 0307 	and.w	r3, r3, #7
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <pvPortMalloc+0xfc>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	613b      	str	r3, [r7, #16]
}
 800c822:	bf00      	nop
 800c824:	bf00      	nop
 800c826:	e7fd      	b.n	800c824 <pvPortMalloc+0xf8>
=======
 800d11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4413      	add	r3, r2
 800d124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	f003 0307 	and.w	r3, r3, #7
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <pvPortMalloc+0xfc>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	613b      	str	r3, [r7, #16]
}
 800d142:	bf00      	nop
 800d144:	bf00      	nop
 800d146:	e7fd      	b.n	800d144 <pvPortMalloc+0xf8>
>>>>>>> Stashed changes

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< Updated upstream
 800c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c83a:	69b8      	ldr	r0, [r7, #24]
 800c83c:	f000 f90a 	bl	800ca54 <prvInsertBlockIntoFreeList>
=======
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	1ad2      	subs	r2, r2, r3
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d15a:	69b8      	ldr	r0, [r7, #24]
 800d15c:	f000 f90a 	bl	800d374 <prvInsertBlockIntoFreeList>
>>>>>>> Stashed changes
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< Updated upstream
 800c840:	4b1d      	ldr	r3, [pc, #116]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	4a1b      	ldr	r2, [pc, #108]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c84c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c84e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	4b1b      	ldr	r3, [pc, #108]	@ (800c8c0 <pvPortMalloc+0x194>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d203      	bcs.n	800c862 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c85a:	4b17      	ldr	r3, [pc, #92]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a18      	ldr	r2, [pc, #96]	@ (800c8c0 <pvPortMalloc+0x194>)
 800c860:	6013      	str	r3, [r2, #0]
=======
 800d160:	4b1d      	ldr	r3, [pc, #116]	@ (800d1d8 <pvPortMalloc+0x18c>)
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	1ad3      	subs	r3, r2, r3
 800d16a:	4a1b      	ldr	r2, [pc, #108]	@ (800d1d8 <pvPortMalloc+0x18c>)
 800d16c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d16e:	4b1a      	ldr	r3, [pc, #104]	@ (800d1d8 <pvPortMalloc+0x18c>)
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	4b1b      	ldr	r3, [pc, #108]	@ (800d1e0 <pvPortMalloc+0x194>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	429a      	cmp	r2, r3
 800d178:	d203      	bcs.n	800d182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d17a:	4b17      	ldr	r3, [pc, #92]	@ (800d1d8 <pvPortMalloc+0x18c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a18      	ldr	r2, [pc, #96]	@ (800d1e0 <pvPortMalloc+0x194>)
 800d180:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< Updated upstream
 800c862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	4b13      	ldr	r3, [pc, #76]	@ (800c8b4 <pvPortMalloc+0x188>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	431a      	orrs	r2, r3
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c876:	4b13      	ldr	r3, [pc, #76]	@ (800c8c4 <pvPortMalloc+0x198>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3301      	adds	r3, #1
 800c87c:	4a11      	ldr	r2, [pc, #68]	@ (800c8c4 <pvPortMalloc+0x198>)
 800c87e:	6013      	str	r3, [r2, #0]
=======
 800d182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	4b13      	ldr	r3, [pc, #76]	@ (800d1d4 <pvPortMalloc+0x188>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	431a      	orrs	r2, r3
 800d18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d196:	4b13      	ldr	r3, [pc, #76]	@ (800d1e4 <pvPortMalloc+0x198>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	4a11      	ldr	r2, [pc, #68]	@ (800d1e4 <pvPortMalloc+0x198>)
 800d19e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< Updated upstream
 800c880:	f7fe fce0 	bl	800b244 <xTaskResumeAll>
=======
 800d1a0:	f7fe fbce 	bl	800b940 <xTaskResumeAll>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< Updated upstream
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	60fb      	str	r3, [r7, #12]
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	e7fd      	b.n	800c8a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3728      	adds	r7, #40	@ 0x28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20005b3c 	.word	0x20005b3c
 800c8b4:	20005b50 	.word	0x20005b50
 800c8b8:	20005b40 	.word	0x20005b40
 800c8bc:	20005b34 	.word	0x20005b34
 800c8c0:	20005b44 	.word	0x20005b44
 800c8c4:	20005b48 	.word	0x20005b48

0800c8c8 <vPortFree>:
=======
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	f003 0307 	and.w	r3, r3, #7
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00b      	beq.n	800d1c6 <pvPortMalloc+0x17a>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	60fb      	str	r3, [r7, #12]
}
 800d1c0:	bf00      	nop
 800d1c2:	bf00      	nop
 800d1c4:	e7fd      	b.n	800d1c2 <pvPortMalloc+0x176>
	return pvReturn;
 800d1c6:	69fb      	ldr	r3, [r7, #28]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3728      	adds	r7, #40	@ 0x28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20008a30 	.word	0x20008a30
 800d1d4:	20008a44 	.word	0x20008a44
 800d1d8:	20008a34 	.word	0x20008a34
 800d1dc:	20008a28 	.word	0x20008a28
 800d1e0:	20008a38 	.word	0x20008a38
 800d1e4:	20008a3c 	.word	0x20008a3c

0800d1e8 <vPortFree>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< Updated upstream
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d04f      	beq.n	800c97a <vPortFree+0xb2>
=======
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b086      	sub	sp, #24
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d04f      	beq.n	800d29a <vPortFree+0xb2>
>>>>>>> Stashed changes
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< Updated upstream
 800c8da:	2308      	movs	r3, #8
 800c8dc:	425b      	negs	r3, r3
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	4b25      	ldr	r3, [pc, #148]	@ (800c984 <vPortFree+0xbc>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10b      	bne.n	800c90e <vPortFree+0x46>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	60fb      	str	r3, [r7, #12]
}
 800c908:	bf00      	nop
 800c90a:	bf00      	nop
 800c90c:	e7fd      	b.n	800c90a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00b      	beq.n	800c92e <vPortFree+0x66>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	60bb      	str	r3, [r7, #8]
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	4b14      	ldr	r3, [pc, #80]	@ (800c984 <vPortFree+0xbc>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4013      	ands	r3, r2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01e      	beq.n	800c97a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11a      	bne.n	800c97a <vPortFree+0xb2>
=======
 800d1fa:	2308      	movs	r3, #8
 800d1fc:	425b      	negs	r3, r3
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	4413      	add	r3, r2
 800d202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	4b25      	ldr	r3, [pc, #148]	@ (800d2a4 <vPortFree+0xbc>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4013      	ands	r3, r2
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10b      	bne.n	800d22e <vPortFree+0x46>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	60fb      	str	r3, [r7, #12]
}
 800d228:	bf00      	nop
 800d22a:	bf00      	nop
 800d22c:	e7fd      	b.n	800d22a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00b      	beq.n	800d24e <vPortFree+0x66>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	60bb      	str	r3, [r7, #8]
}
 800d248:	bf00      	nop
 800d24a:	bf00      	nop
 800d24c:	e7fd      	b.n	800d24a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	685a      	ldr	r2, [r3, #4]
 800d252:	4b14      	ldr	r3, [pc, #80]	@ (800d2a4 <vPortFree+0xbc>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4013      	ands	r3, r2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d01e      	beq.n	800d29a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d11a      	bne.n	800d29a <vPortFree+0xb2>
>>>>>>> Stashed changes
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< Updated upstream
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	4b0e      	ldr	r3, [pc, #56]	@ (800c984 <vPortFree+0xbc>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	43db      	mvns	r3, r3
 800c94e:	401a      	ands	r2, r3
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c954:	f7fe fc68 	bl	800b228 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	4b0a      	ldr	r3, [pc, #40]	@ (800c988 <vPortFree+0xc0>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4413      	add	r3, r2
 800c962:	4a09      	ldr	r2, [pc, #36]	@ (800c988 <vPortFree+0xc0>)
 800c964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c966:	6938      	ldr	r0, [r7, #16]
 800c968:	f000 f874 	bl	800ca54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c96c:	4b07      	ldr	r3, [pc, #28]	@ (800c98c <vPortFree+0xc4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3301      	adds	r3, #1
 800c972:	4a06      	ldr	r2, [pc, #24]	@ (800c98c <vPortFree+0xc4>)
 800c974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c976:	f7fe fc65 	bl	800b244 <xTaskResumeAll>
=======
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	685a      	ldr	r2, [r3, #4]
 800d268:	4b0e      	ldr	r3, [pc, #56]	@ (800d2a4 <vPortFree+0xbc>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	43db      	mvns	r3, r3
 800d26e:	401a      	ands	r2, r3
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d274:	f7fe fb56 	bl	800b924 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a8 <vPortFree+0xc0>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4413      	add	r3, r2
 800d282:	4a09      	ldr	r2, [pc, #36]	@ (800d2a8 <vPortFree+0xc0>)
 800d284:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d286:	6938      	ldr	r0, [r7, #16]
 800d288:	f000 f874 	bl	800d374 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d28c:	4b07      	ldr	r3, [pc, #28]	@ (800d2ac <vPortFree+0xc4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3301      	adds	r3, #1
 800d292:	4a06      	ldr	r2, [pc, #24]	@ (800d2ac <vPortFree+0xc4>)
 800d294:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d296:	f7fe fb53 	bl	800b940 <xTaskResumeAll>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< Updated upstream
 800c97a:	bf00      	nop
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20005b50 	.word	0x20005b50
 800c988:	20005b40 	.word	0x20005b40
 800c98c:	20005b4c 	.word	0x20005b4c

0800c990 <prvHeapInit>:
=======
 800d29a:	bf00      	nop
 800d29c:	3718      	adds	r7, #24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	20008a44 	.word	0x20008a44
 800d2a8:	20008a34 	.word	0x20008a34
 800d2ac:	20008a40 	.word	0x20008a40

0800d2b0 <prvHeapInit>:
>>>>>>> Stashed changes
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< Updated upstream
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
=======
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< Updated upstream
 800c996:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800c99a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c99c:	4b27      	ldr	r3, [pc, #156]	@ (800ca3c <prvHeapInit+0xac>)
 800c99e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f003 0307 	and.w	r3, r3, #7
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00c      	beq.n	800c9c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3307      	adds	r3, #7
 800c9ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0307 	bic.w	r3, r3, #7
 800c9b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	4a1f      	ldr	r2, [pc, #124]	@ (800ca3c <prvHeapInit+0xac>)
 800c9c0:	4413      	add	r3, r2
 800c9c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	607b      	str	r3, [r7, #4]
=======
 800d2b6:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800d2ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2bc:	4b27      	ldr	r3, [pc, #156]	@ (800d35c <prvHeapInit+0xac>)
 800d2be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f003 0307 	and.w	r3, r3, #7
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00c      	beq.n	800d2e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3307      	adds	r3, #7
 800d2ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f023 0307 	bic.w	r3, r3, #7
 800d2d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	4a1f      	ldr	r2, [pc, #124]	@ (800d35c <prvHeapInit+0xac>)
 800d2e0:	4413      	add	r3, r2
 800d2e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 800c9c8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca40 <prvHeapInit+0xb0>)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9ce:	4b1c      	ldr	r3, [pc, #112]	@ (800ca40 <prvHeapInit+0xb0>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	605a      	str	r2, [r3, #4]
=======
 800d2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d360 <prvHeapInit+0xb0>)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2ee:	4b1c      	ldr	r3, [pc, #112]	@ (800d360 <prvHeapInit+0xb0>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< Updated upstream
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9dc:	2208      	movs	r2, #8
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	1a9b      	subs	r3, r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f023 0307 	bic.w	r3, r3, #7
 800c9ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4a15      	ldr	r2, [pc, #84]	@ (800ca44 <prvHeapInit+0xb4>)
 800c9f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ca44 <prvHeapInit+0xb4>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9fa:	4b12      	ldr	r3, [pc, #72]	@ (800ca44 <prvHeapInit+0xb4>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	601a      	str	r2, [r3, #0]
=======
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2fc:	2208      	movs	r2, #8
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1a9b      	subs	r3, r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f023 0307 	bic.w	r3, r3, #7
 800d30a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	4a15      	ldr	r2, [pc, #84]	@ (800d364 <prvHeapInit+0xb4>)
 800d310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d312:	4b14      	ldr	r3, [pc, #80]	@ (800d364 <prvHeapInit+0xb4>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2200      	movs	r2, #0
 800d318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d31a:	4b12      	ldr	r3, [pc, #72]	@ (800d364 <prvHeapInit+0xb4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2200      	movs	r2, #0
 800d320:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	1ad2      	subs	r2, r2, r3
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca10:	4b0c      	ldr	r3, [pc, #48]	@ (800ca44 <prvHeapInit+0xb4>)
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	4a0a      	ldr	r2, [pc, #40]	@ (800ca48 <prvHeapInit+0xb8>)
 800ca1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	4a09      	ldr	r2, [pc, #36]	@ (800ca4c <prvHeapInit+0xbc>)
 800ca26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca28:	4b09      	ldr	r3, [pc, #36]	@ (800ca50 <prvHeapInit+0xc0>)
 800ca2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca2e:	601a      	str	r2, [r3, #0]
}
 800ca30:	bf00      	nop
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	20002c54 	.word	0x20002c54
 800ca40:	20005b34 	.word	0x20005b34
 800ca44:	20005b3c 	.word	0x20005b3c
 800ca48:	20005b44 	.word	0x20005b44
 800ca4c:	20005b40 	.word	0x20005b40
 800ca50:	20005b50 	.word	0x20005b50

0800ca54 <prvInsertBlockIntoFreeList>:
=======
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	1ad2      	subs	r2, r2, r3
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d330:	4b0c      	ldr	r3, [pc, #48]	@ (800d364 <prvHeapInit+0xb4>)
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	4a0a      	ldr	r2, [pc, #40]	@ (800d368 <prvHeapInit+0xb8>)
 800d33e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	4a09      	ldr	r2, [pc, #36]	@ (800d36c <prvHeapInit+0xbc>)
 800d346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d348:	4b09      	ldr	r3, [pc, #36]	@ (800d370 <prvHeapInit+0xc0>)
 800d34a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d34e:	601a      	str	r2, [r3, #0]
}
 800d350:	bf00      	nop
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20002c68 	.word	0x20002c68
 800d360:	20008a28 	.word	0x20008a28
 800d364:	20008a30 	.word	0x20008a30
 800d368:	20008a38 	.word	0x20008a38
 800d36c:	20008a34 	.word	0x20008a34
 800d370:	20008a44 	.word	0x20008a44

0800d374 <prvInsertBlockIntoFreeList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< Updated upstream
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
=======
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< Updated upstream
 800ca5c:	4b28      	ldr	r3, [pc, #160]	@ (800cb00 <prvInsertBlockIntoFreeList+0xac>)
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	e002      	b.n	800ca68 <prvInsertBlockIntoFreeList+0x14>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d8f7      	bhi.n	800ca62 <prvInsertBlockIntoFreeList+0xe>
=======
 800d37c:	4b28      	ldr	r3, [pc, #160]	@ (800d420 <prvInsertBlockIntoFreeList+0xac>)
 800d37e:	60fb      	str	r3, [r7, #12]
 800d380:	e002      	b.n	800d388 <prvInsertBlockIntoFreeList+0x14>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d8f7      	bhi.n	800d382 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> Stashed changes
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< Updated upstream
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d108      	bne.n	800ca96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	441a      	add	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	607b      	str	r3, [r7, #4]
=======
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	4413      	add	r3, r2
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d108      	bne.n	800d3b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	441a      	add	r2, r3
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< Updated upstream
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	441a      	add	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d118      	bne.n	800cadc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	4b15      	ldr	r3, [pc, #84]	@ (800cb04 <prvInsertBlockIntoFreeList+0xb0>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d00d      	beq.n	800cad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	441a      	add	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	e008      	b.n	800cae4 <prvInsertBlockIntoFreeList+0x90>
=======
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	441a      	add	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d118      	bne.n	800d3fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	4b15      	ldr	r3, [pc, #84]	@ (800d424 <prvInsertBlockIntoFreeList+0xb0>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d00d      	beq.n	800d3f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	685a      	ldr	r2, [r3, #4]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	441a      	add	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	e008      	b.n	800d404 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< Updated upstream
 800cad2:	4b0c      	ldr	r3, [pc, #48]	@ (800cb04 <prvInsertBlockIntoFreeList+0xb0>)
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	e003      	b.n	800cae4 <prvInsertBlockIntoFreeList+0x90>
=======
 800d3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d424 <prvInsertBlockIntoFreeList+0xb0>)
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	601a      	str	r2, [r3, #0]
 800d3fa:	e003      	b.n	800d404 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< Updated upstream
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	601a      	str	r2, [r3, #0]
=======
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< Updated upstream
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d002      	beq.n	800caf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	601a      	str	r2, [r3, #0]
=======
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d002      	beq.n	800d412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800caf2:	bf00      	nop
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20005b34 	.word	0x20005b34
 800cb04:	20005b3c 	.word	0x20005b3c

0800cb08 <MX_USB_Device_Init>:
=======
 800d412:	bf00      	nop
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	20008a28 	.word	0x20008a28
 800d424:	20008a30 	.word	0x20008a30

0800d428 <MX_USB_Device_Init>:
>>>>>>> Stashed changes
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
<<<<<<< Updated upstream
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
=======
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
<<<<<<< Updated upstream
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	4912      	ldr	r1, [pc, #72]	@ (800cb58 <MX_USB_Device_Init+0x50>)
 800cb10:	4812      	ldr	r0, [pc, #72]	@ (800cb5c <MX_USB_Device_Init+0x54>)
 800cb12:	f7fc f8e5 	bl	8008ce0 <USBD_Init>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cb1c:	f7f4 fa7c 	bl	8001018 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cb20:	490f      	ldr	r1, [pc, #60]	@ (800cb60 <MX_USB_Device_Init+0x58>)
 800cb22:	480e      	ldr	r0, [pc, #56]	@ (800cb5c <MX_USB_Device_Init+0x54>)
 800cb24:	f7fc f90c 	bl	8008d40 <USBD_RegisterClass>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d001      	beq.n	800cb32 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cb2e:	f7f4 fa73 	bl	8001018 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cb32:	490c      	ldr	r1, [pc, #48]	@ (800cb64 <MX_USB_Device_Init+0x5c>)
 800cb34:	4809      	ldr	r0, [pc, #36]	@ (800cb5c <MX_USB_Device_Init+0x54>)
 800cb36:	f7fc f82d 	bl	8008b94 <USBD_CDC_RegisterInterface>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cb40:	f7f4 fa6a 	bl	8001018 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cb44:	4805      	ldr	r0, [pc, #20]	@ (800cb5c <MX_USB_Device_Init+0x54>)
 800cb46:	f7fc f922 	bl	8008d8e <USBD_Start>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cb50:	f7f4 fa62 	bl	8001018 <Error_Handler>
=======
 800d42c:	2200      	movs	r2, #0
 800d42e:	4912      	ldr	r1, [pc, #72]	@ (800d478 <MX_USB_Device_Init+0x50>)
 800d430:	4812      	ldr	r0, [pc, #72]	@ (800d47c <MX_USB_Device_Init+0x54>)
 800d432:	f7fb fca9 	bl	8008d88 <USBD_Init>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d43c:	f7f3 fe40 	bl	80010c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d440:	490f      	ldr	r1, [pc, #60]	@ (800d480 <MX_USB_Device_Init+0x58>)
 800d442:	480e      	ldr	r0, [pc, #56]	@ (800d47c <MX_USB_Device_Init+0x54>)
 800d444:	f7fb fcd0 	bl	8008de8 <USBD_RegisterClass>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d44e:	f7f3 fe37 	bl	80010c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d452:	490c      	ldr	r1, [pc, #48]	@ (800d484 <MX_USB_Device_Init+0x5c>)
 800d454:	4809      	ldr	r0, [pc, #36]	@ (800d47c <MX_USB_Device_Init+0x54>)
 800d456:	f7fb fbf1 	bl	8008c3c <USBD_CDC_RegisterInterface>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d460:	f7f3 fe2e 	bl	80010c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d464:	4805      	ldr	r0, [pc, #20]	@ (800d47c <MX_USB_Device_Init+0x54>)
 800d466:	f7fb fce6 	bl	8008e36 <USBD_Start>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d470:	f7f3 fe26 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
<<<<<<< Updated upstream
 800cb54:	bf00      	nop
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	20000134 	.word	0x20000134
 800cb5c:	20005b54 	.word	0x20005b54
 800cb60:	20000018 	.word	0x20000018
 800cb64:	20000120 	.word	0x20000120

0800cb68 <CDC_Init_FS>:
=======
 800d474:	bf00      	nop
 800d476:	bd80      	pop	{r7, pc}
 800d478:	20000134 	.word	0x20000134
 800d47c:	20008a48 	.word	0x20008a48
 800d480:	20000018 	.word	0x20000018
 800d484:	20000120 	.word	0x20000120

0800d488 <CDC_Init_FS>:
>>>>>>> Stashed changes
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< Updated upstream
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	4905      	ldr	r1, [pc, #20]	@ (800cb84 <CDC_Init_FS+0x1c>)
 800cb70:	4805      	ldr	r0, [pc, #20]	@ (800cb88 <CDC_Init_FS+0x20>)
 800cb72:	f7fc f824 	bl	8008bbe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb76:	4905      	ldr	r1, [pc, #20]	@ (800cb8c <CDC_Init_FS+0x24>)
 800cb78:	4803      	ldr	r0, [pc, #12]	@ (800cb88 <CDC_Init_FS+0x20>)
 800cb7a:	f7fc f83e 	bl	8008bfa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	20006624 	.word	0x20006624
 800cb88:	20005b54 	.word	0x20005b54
 800cb8c:	20005e24 	.word	0x20005e24

0800cb90 <CDC_DeInit_FS>:
=======
 800d488:	b580      	push	{r7, lr}
 800d48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d48c:	2200      	movs	r2, #0
 800d48e:	4905      	ldr	r1, [pc, #20]	@ (800d4a4 <CDC_Init_FS+0x1c>)
 800d490:	4805      	ldr	r0, [pc, #20]	@ (800d4a8 <CDC_Init_FS+0x20>)
 800d492:	f7fb fbe8 	bl	8008c66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d496:	4905      	ldr	r1, [pc, #20]	@ (800d4ac <CDC_Init_FS+0x24>)
 800d498:	4803      	ldr	r0, [pc, #12]	@ (800d4a8 <CDC_Init_FS+0x20>)
 800d49a:	f7fb fc02 	bl	8008ca2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d49e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	20009518 	.word	0x20009518
 800d4a8:	20008a48 	.word	0x20008a48
 800d4ac:	20008d18 	.word	0x20008d18

0800d4b0 <CDC_DeInit_FS>:
>>>>>>> Stashed changes
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< Updated upstream
 800cb90:	b480      	push	{r7}
 800cb92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <CDC_Control_FS>:
=======
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <CDC_Control_FS>:
>>>>>>> Stashed changes
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< Updated upstream
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	6039      	str	r1, [r7, #0]
 800cbaa:	71fb      	strb	r3, [r7, #7]
 800cbac:	4613      	mov	r3, r2
 800cbae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	2b23      	cmp	r3, #35	@ 0x23
 800cbb4:	d84a      	bhi.n	800cc4c <CDC_Control_FS+0xac>
 800cbb6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbbc <CDC_Control_FS+0x1c>)
 800cbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbc:	0800cc4d 	.word	0x0800cc4d
 800cbc0:	0800cc4d 	.word	0x0800cc4d
 800cbc4:	0800cc4d 	.word	0x0800cc4d
 800cbc8:	0800cc4d 	.word	0x0800cc4d
 800cbcc:	0800cc4d 	.word	0x0800cc4d
 800cbd0:	0800cc4d 	.word	0x0800cc4d
 800cbd4:	0800cc4d 	.word	0x0800cc4d
 800cbd8:	0800cc4d 	.word	0x0800cc4d
 800cbdc:	0800cc4d 	.word	0x0800cc4d
 800cbe0:	0800cc4d 	.word	0x0800cc4d
 800cbe4:	0800cc4d 	.word	0x0800cc4d
 800cbe8:	0800cc4d 	.word	0x0800cc4d
 800cbec:	0800cc4d 	.word	0x0800cc4d
 800cbf0:	0800cc4d 	.word	0x0800cc4d
 800cbf4:	0800cc4d 	.word	0x0800cc4d
 800cbf8:	0800cc4d 	.word	0x0800cc4d
 800cbfc:	0800cc4d 	.word	0x0800cc4d
 800cc00:	0800cc4d 	.word	0x0800cc4d
 800cc04:	0800cc4d 	.word	0x0800cc4d
 800cc08:	0800cc4d 	.word	0x0800cc4d
 800cc0c:	0800cc4d 	.word	0x0800cc4d
 800cc10:	0800cc4d 	.word	0x0800cc4d
 800cc14:	0800cc4d 	.word	0x0800cc4d
 800cc18:	0800cc4d 	.word	0x0800cc4d
 800cc1c:	0800cc4d 	.word	0x0800cc4d
 800cc20:	0800cc4d 	.word	0x0800cc4d
 800cc24:	0800cc4d 	.word	0x0800cc4d
 800cc28:	0800cc4d 	.word	0x0800cc4d
 800cc2c:	0800cc4d 	.word	0x0800cc4d
 800cc30:	0800cc4d 	.word	0x0800cc4d
 800cc34:	0800cc4d 	.word	0x0800cc4d
 800cc38:	0800cc4d 	.word	0x0800cc4d
 800cc3c:	0800cc4d 	.word	0x0800cc4d
 800cc40:	0800cc4d 	.word	0x0800cc4d
 800cc44:	0800cc4d 	.word	0x0800cc4d
 800cc48:	0800cc4d 	.word	0x0800cc4d
=======
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	6039      	str	r1, [r7, #0]
 800d4ca:	71fb      	strb	r3, [r7, #7]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	2b23      	cmp	r3, #35	@ 0x23
 800d4d4:	d84a      	bhi.n	800d56c <CDC_Control_FS+0xac>
 800d4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4dc <CDC_Control_FS+0x1c>)
 800d4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4dc:	0800d56d 	.word	0x0800d56d
 800d4e0:	0800d56d 	.word	0x0800d56d
 800d4e4:	0800d56d 	.word	0x0800d56d
 800d4e8:	0800d56d 	.word	0x0800d56d
 800d4ec:	0800d56d 	.word	0x0800d56d
 800d4f0:	0800d56d 	.word	0x0800d56d
 800d4f4:	0800d56d 	.word	0x0800d56d
 800d4f8:	0800d56d 	.word	0x0800d56d
 800d4fc:	0800d56d 	.word	0x0800d56d
 800d500:	0800d56d 	.word	0x0800d56d
 800d504:	0800d56d 	.word	0x0800d56d
 800d508:	0800d56d 	.word	0x0800d56d
 800d50c:	0800d56d 	.word	0x0800d56d
 800d510:	0800d56d 	.word	0x0800d56d
 800d514:	0800d56d 	.word	0x0800d56d
 800d518:	0800d56d 	.word	0x0800d56d
 800d51c:	0800d56d 	.word	0x0800d56d
 800d520:	0800d56d 	.word	0x0800d56d
 800d524:	0800d56d 	.word	0x0800d56d
 800d528:	0800d56d 	.word	0x0800d56d
 800d52c:	0800d56d 	.word	0x0800d56d
 800d530:	0800d56d 	.word	0x0800d56d
 800d534:	0800d56d 	.word	0x0800d56d
 800d538:	0800d56d 	.word	0x0800d56d
 800d53c:	0800d56d 	.word	0x0800d56d
 800d540:	0800d56d 	.word	0x0800d56d
 800d544:	0800d56d 	.word	0x0800d56d
 800d548:	0800d56d 	.word	0x0800d56d
 800d54c:	0800d56d 	.word	0x0800d56d
 800d550:	0800d56d 	.word	0x0800d56d
 800d554:	0800d56d 	.word	0x0800d56d
 800d558:	0800d56d 	.word	0x0800d56d
 800d55c:	0800d56d 	.word	0x0800d56d
 800d560:	0800d56d 	.word	0x0800d56d
 800d564:	0800d56d 	.word	0x0800d56d
 800d568:	0800d56d 	.word	0x0800d56d
>>>>>>> Stashed changes
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< Updated upstream
 800cc4c:	bf00      	nop
  }

  return (USBD_OK);
 800cc4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <CDC_Receive_FS>:
=======
 800d56c:	bf00      	nop
  }

  return (USBD_OK);
 800d56e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d570:	4618      	mov	r0, r3
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <CDC_Receive_FS>:
>>>>>>> Stashed changes
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< Updated upstream
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	4805      	ldr	r0, [pc, #20]	@ (800cc80 <CDC_Receive_FS+0x24>)
 800cc6a:	f7fb ffc6 	bl	8008bfa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc6e:	4804      	ldr	r0, [pc, #16]	@ (800cc80 <CDC_Receive_FS+0x24>)
 800cc70:	f7fc f80c 	bl	8008c8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cc74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20005b54 	.word	0x20005b54

0800cc84 <CDC_Transmit_FS>:
=======
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d586:	6879      	ldr	r1, [r7, #4]
 800d588:	4805      	ldr	r0, [pc, #20]	@ (800d5a0 <CDC_Receive_FS+0x24>)
 800d58a:	f7fb fb8a 	bl	8008ca2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d58e:	4804      	ldr	r0, [pc, #16]	@ (800d5a0 <CDC_Receive_FS+0x24>)
 800d590:	f7fb fbd0 	bl	8008d34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d594:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20008a48 	.word	0x20008a48

0800d5a4 <CDC_Transmit_FS>:
>>>>>>> Stashed changes
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
<<<<<<< Updated upstream
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cc94:	4b0d      	ldr	r3, [pc, #52]	@ (800cccc <CDC_Transmit_FS+0x48>)
 800cc96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cc9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e00b      	b.n	800ccc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ccaa:	887b      	ldrh	r3, [r7, #2]
 800ccac:	461a      	mov	r2, r3
 800ccae:	6879      	ldr	r1, [r7, #4]
 800ccb0:	4806      	ldr	r0, [pc, #24]	@ (800cccc <CDC_Transmit_FS+0x48>)
 800ccb2:	f7fb ff84 	bl	8008bbe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ccb6:	4805      	ldr	r0, [pc, #20]	@ (800cccc <CDC_Transmit_FS+0x48>)
 800ccb8:	f7fb ffb8 	bl	8008c2c <USBD_CDC_TransmitPacket>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20005b54 	.word	0x20005b54

0800ccd0 <CDC_TransmitCplt_FS>:
=======
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d5b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d5ec <CDC_Transmit_FS+0x48>)
 800d5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d5ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e00b      	b.n	800d5e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d5ca:	887b      	ldrh	r3, [r7, #2]
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	4806      	ldr	r0, [pc, #24]	@ (800d5ec <CDC_Transmit_FS+0x48>)
 800d5d2:	f7fb fb48 	bl	8008c66 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d5d6:	4805      	ldr	r0, [pc, #20]	@ (800d5ec <CDC_Transmit_FS+0x48>)
 800d5d8:	f7fb fb7c 	bl	8008cd4 <USBD_CDC_TransmitPacket>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	20008a48 	.word	0x20008a48

0800d5f0 <CDC_TransmitCplt_FS>:
>>>>>>> Stashed changes
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
<<<<<<< Updated upstream
 800ccd0:	b480      	push	{r7}
 800ccd2:	b087      	sub	sp, #28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	75fb      	strb	r3, [r7, #23]
=======
 800d5f0:	b480      	push	{r7}
 800d5f2:	b087      	sub	sp, #28
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
<<<<<<< Updated upstream
 800cce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	371c      	adds	r7, #28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
	...

0800ccf4 <USBD_CDC_DeviceDescriptor>:
=======
 800d602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d606:	4618      	mov	r0, r3
 800d608:	371c      	adds	r7, #28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
	...

0800d614 <USBD_CDC_DeviceDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6039      	str	r1, [r7, #0]
 800ccfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2212      	movs	r2, #18
 800cd04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cd06:	4b03      	ldr	r3, [pc, #12]	@ (800cd14 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	20000154 	.word	0x20000154

0800cd18 <USBD_CDC_LangIDStrDescriptor>:
=======
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	4603      	mov	r3, r0
 800d61c:	6039      	str	r1, [r7, #0]
 800d61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2212      	movs	r2, #18
 800d624:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d626:	4b03      	ldr	r3, [pc, #12]	@ (800d634 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d628:	4618      	mov	r0, r3
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	20000154 	.word	0x20000154

0800d638 <USBD_CDC_LangIDStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2204      	movs	r2, #4
 800cd28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd2a:	4b03      	ldr	r3, [pc, #12]	@ (800cd38 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	20000168 	.word	0x20000168

0800cd3c <USBD_CDC_ProductStrDescriptor>:
=======
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	6039      	str	r1, [r7, #0]
 800d642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	2204      	movs	r2, #4
 800d648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d64a:	4b03      	ldr	r3, [pc, #12]	@ (800d658 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	20000168 	.word	0x20000168

0800d65c <USBD_CDC_ProductStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4907      	ldr	r1, [pc, #28]	@ (800cd70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cd52:	4808      	ldr	r0, [pc, #32]	@ (800cd74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cd54:	f7fd f805 	bl	8009d62 <USBD_GetString>
 800cd58:	e004      	b.n	800cd64 <USBD_CDC_ProductStrDescriptor+0x28>
=======
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	4603      	mov	r3, r0
 800d664:	6039      	str	r1, [r7, #0]
 800d666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d668:	79fb      	ldrb	r3, [r7, #7]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d105      	bne.n	800d67a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d66e:	683a      	ldr	r2, [r7, #0]
 800d670:	4907      	ldr	r1, [pc, #28]	@ (800d690 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d672:	4808      	ldr	r0, [pc, #32]	@ (800d694 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d674:	f7fc fbc9 	bl	8009e0a <USBD_GetString>
 800d678:	e004      	b.n	800d684 <USBD_CDC_ProductStrDescriptor+0x28>
>>>>>>> Stashed changes
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
<<<<<<< Updated upstream
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4904      	ldr	r1, [pc, #16]	@ (800cd70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cd5e:	4805      	ldr	r0, [pc, #20]	@ (800cd74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cd60:	f7fc ffff 	bl	8009d62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd64:	4b02      	ldr	r3, [pc, #8]	@ (800cd70 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20006e24 	.word	0x20006e24
 800cd74:	0800e1e8 	.word	0x0800e1e8

0800cd78 <USBD_CDC_ManufacturerStrDescriptor>:
=======
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	4904      	ldr	r1, [pc, #16]	@ (800d690 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d67e:	4805      	ldr	r0, [pc, #20]	@ (800d694 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d680:	f7fc fbc3 	bl	8009e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d684:	4b02      	ldr	r3, [pc, #8]	@ (800d690 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d686:	4618      	mov	r0, r3
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20009d18 	.word	0x20009d18
 800d694:	0800eb5c 	.word	0x0800eb5c

0800d698 <USBD_CDC_ManufacturerStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	4904      	ldr	r1, [pc, #16]	@ (800cd98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cd88:	4804      	ldr	r0, [pc, #16]	@ (800cd9c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800cd8a:	f7fc ffea 	bl	8009d62 <USBD_GetString>
  return USBD_StrDesc;
 800cd8e:	4b02      	ldr	r3, [pc, #8]	@ (800cd98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	20006e24 	.word	0x20006e24
 800cd9c:	0800e200 	.word	0x0800e200

0800cda0 <USBD_CDC_SerialStrDescriptor>:
=======
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	6039      	str	r1, [r7, #0]
 800d6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	4904      	ldr	r1, [pc, #16]	@ (800d6b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d6a8:	4804      	ldr	r0, [pc, #16]	@ (800d6bc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d6aa:	f7fc fbae 	bl	8009e0a <USBD_GetString>
  return USBD_StrDesc;
 800d6ae:	4b02      	ldr	r3, [pc, #8]	@ (800d6b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20009d18 	.word	0x20009d18
 800d6bc:	0800eb74 	.word	0x0800eb74

0800d6c0 <USBD_CDC_SerialStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	221a      	movs	r2, #26
 800cdb0:	801a      	strh	r2, [r3, #0]
=======
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	6039      	str	r1, [r7, #0]
 800d6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	221a      	movs	r2, #26
 800d6d0:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< Updated upstream
 800cdb2:	f000 f843 	bl	800ce3c <Get_SerialNum>
=======
 800d6d2:	f000 f843 	bl	800d75c <Get_SerialNum>
>>>>>>> Stashed changes

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
<<<<<<< Updated upstream
 800cdb6:	4b02      	ldr	r3, [pc, #8]	@ (800cdc0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	2000016c 	.word	0x2000016c

0800cdc4 <USBD_CDC_ConfigStrDescriptor>:
=======
 800d6d6:	4b02      	ldr	r3, [pc, #8]	@ (800d6e0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	2000016c 	.word	0x2000016c

0800d6e4 <USBD_CDC_ConfigStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4907      	ldr	r1, [pc, #28]	@ (800cdf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cdda:	4808      	ldr	r0, [pc, #32]	@ (800cdfc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cddc:	f7fc ffc1 	bl	8009d62 <USBD_GetString>
 800cde0:	e004      	b.n	800cdec <USBD_CDC_ConfigStrDescriptor+0x28>
=======
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	6039      	str	r1, [r7, #0]
 800d6ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d105      	bne.n	800d702 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	4907      	ldr	r1, [pc, #28]	@ (800d718 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d6fa:	4808      	ldr	r0, [pc, #32]	@ (800d71c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d6fc:	f7fc fb85 	bl	8009e0a <USBD_GetString>
 800d700:	e004      	b.n	800d70c <USBD_CDC_ConfigStrDescriptor+0x28>
>>>>>>> Stashed changes
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
<<<<<<< Updated upstream
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	4904      	ldr	r1, [pc, #16]	@ (800cdf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cde6:	4805      	ldr	r0, [pc, #20]	@ (800cdfc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cde8:	f7fc ffbb 	bl	8009d62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdec:	4b02      	ldr	r3, [pc, #8]	@ (800cdf8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20006e24 	.word	0x20006e24
 800cdfc:	0800e214 	.word	0x0800e214

0800ce00 <USBD_CDC_InterfaceStrDescriptor>:
=======
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	4904      	ldr	r1, [pc, #16]	@ (800d718 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d706:	4805      	ldr	r0, [pc, #20]	@ (800d71c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d708:	f7fc fb7f 	bl	8009e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d70c:	4b02      	ldr	r3, [pc, #8]	@ (800d718 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20009d18 	.word	0x20009d18
 800d71c:	0800eb88 	.word	0x0800eb88

0800d720 <USBD_CDC_InterfaceStrDescriptor>:
>>>>>>> Stashed changes
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< Updated upstream
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	4603      	mov	r3, r0
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d105      	bne.n	800ce1e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	4907      	ldr	r1, [pc, #28]	@ (800ce34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ce16:	4808      	ldr	r0, [pc, #32]	@ (800ce38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ce18:	f7fc ffa3 	bl	8009d62 <USBD_GetString>
 800ce1c:	e004      	b.n	800ce28 <USBD_CDC_InterfaceStrDescriptor+0x28>
=======
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	4603      	mov	r3, r0
 800d728:	6039      	str	r1, [r7, #0]
 800d72a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d72c:	79fb      	ldrb	r3, [r7, #7]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d105      	bne.n	800d73e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	4907      	ldr	r1, [pc, #28]	@ (800d754 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d736:	4808      	ldr	r0, [pc, #32]	@ (800d758 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d738:	f7fc fb67 	bl	8009e0a <USBD_GetString>
 800d73c:	e004      	b.n	800d748 <USBD_CDC_InterfaceStrDescriptor+0x28>
>>>>>>> Stashed changes
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
<<<<<<< Updated upstream
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	4904      	ldr	r1, [pc, #16]	@ (800ce34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ce22:	4805      	ldr	r0, [pc, #20]	@ (800ce38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ce24:	f7fc ff9d 	bl	8009d62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce28:	4b02      	ldr	r3, [pc, #8]	@ (800ce34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20006e24 	.word	0x20006e24
 800ce38:	0800e220 	.word	0x0800e220

0800ce3c <Get_SerialNum>:
=======
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	4904      	ldr	r1, [pc, #16]	@ (800d754 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d742:	4805      	ldr	r0, [pc, #20]	@ (800d758 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d744:	f7fc fb61 	bl	8009e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d748:	4b02      	ldr	r3, [pc, #8]	@ (800d754 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	20009d18 	.word	0x20009d18
 800d758:	0800eb94 	.word	0x0800eb94

0800d75c <Get_SerialNum>:
>>>>>>> Stashed changes
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< Updated upstream
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
=======
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
<<<<<<< Updated upstream
 800ce42:	4b0f      	ldr	r3, [pc, #60]	@ (800ce80 <Get_SerialNum+0x44>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce48:	4b0e      	ldr	r3, [pc, #56]	@ (800ce84 <Get_SerialNum+0x48>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ce88 <Get_SerialNum+0x4c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4413      	add	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d009      	beq.n	800ce76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce62:	2208      	movs	r2, #8
 800ce64:	4909      	ldr	r1, [pc, #36]	@ (800ce8c <Get_SerialNum+0x50>)
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f000 f814 	bl	800ce94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce6c:	2204      	movs	r2, #4
 800ce6e:	4908      	ldr	r1, [pc, #32]	@ (800ce90 <Get_SerialNum+0x54>)
 800ce70:	68b8      	ldr	r0, [r7, #8]
 800ce72:	f000 f80f 	bl	800ce94 <IntToUnicode>
  }
}
 800ce76:	bf00      	nop
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	1fff7590 	.word	0x1fff7590
 800ce84:	1fff7594 	.word	0x1fff7594
 800ce88:	1fff7598 	.word	0x1fff7598
 800ce8c:	2000016e 	.word	0x2000016e
 800ce90:	2000017e 	.word	0x2000017e

0800ce94 <IntToUnicode>:
=======
 800d762:	4b0f      	ldr	r3, [pc, #60]	@ (800d7a0 <Get_SerialNum+0x44>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d768:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a4 <Get_SerialNum+0x48>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d76e:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a8 <Get_SerialNum+0x4c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4413      	add	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d009      	beq.n	800d796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d782:	2208      	movs	r2, #8
 800d784:	4909      	ldr	r1, [pc, #36]	@ (800d7ac <Get_SerialNum+0x50>)
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f814 	bl	800d7b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d78c:	2204      	movs	r2, #4
 800d78e:	4908      	ldr	r1, [pc, #32]	@ (800d7b0 <Get_SerialNum+0x54>)
 800d790:	68b8      	ldr	r0, [r7, #8]
 800d792:	f000 f80f 	bl	800d7b4 <IntToUnicode>
  }
}
 800d796:	bf00      	nop
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	1fff7590 	.word	0x1fff7590
 800d7a4:	1fff7594 	.word	0x1fff7594
 800d7a8:	1fff7598 	.word	0x1fff7598
 800d7ac:	2000016e 	.word	0x2000016e
 800d7b0:	2000017e 	.word	0x2000017e

0800d7b4 <IntToUnicode>:
>>>>>>> Stashed changes
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< Updated upstream
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cea6:	2300      	movs	r3, #0
 800cea8:	75fb      	strb	r3, [r7, #23]
 800ceaa:	e027      	b.n	800cefc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	0f1b      	lsrs	r3, r3, #28
 800ceb0:	2b09      	cmp	r3, #9
 800ceb2:	d80b      	bhi.n	800cecc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	0f1b      	lsrs	r3, r3, #28
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	4619      	mov	r1, r3
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	440b      	add	r3, r1
 800cec4:	3230      	adds	r2, #48	@ 0x30
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	e00a      	b.n	800cee2 <IntToUnicode+0x4e>
=======
 800d7b4:	b480      	push	{r7}
 800d7b6:	b087      	sub	sp, #28
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	75fb      	strb	r3, [r7, #23]
 800d7ca:	e027      	b.n	800d81c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	0f1b      	lsrs	r3, r3, #28
 800d7d0:	2b09      	cmp	r3, #9
 800d7d2:	d80b      	bhi.n	800d7ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	0f1b      	lsrs	r3, r3, #28
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	005b      	lsls	r3, r3, #1
 800d7de:	4619      	mov	r1, r3
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	440b      	add	r3, r1
 800d7e4:	3230      	adds	r2, #48	@ 0x30
 800d7e6:	b2d2      	uxtb	r2, r2
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	e00a      	b.n	800d802 <IntToUnicode+0x4e>
>>>>>>> Stashed changes
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< Updated upstream
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	0f1b      	lsrs	r3, r3, #28
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	7dfb      	ldrb	r3, [r7, #23]
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	4619      	mov	r1, r3
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	440b      	add	r3, r1
 800cedc:	3237      	adds	r2, #55	@ 0x37
 800cede:	b2d2      	uxtb	r2, r2
 800cee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	3301      	adds	r3, #1
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	4413      	add	r3, r2
 800cef2:	2200      	movs	r2, #0
 800cef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	3301      	adds	r3, #1
 800cefa:	75fb      	strb	r3, [r7, #23]
 800cefc:	7dfa      	ldrb	r2, [r7, #23]
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d3d3      	bcc.n	800ceac <IntToUnicode+0x18>
  }
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	371c      	adds	r7, #28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
	...

0800cf14 <HAL_PCD_MspInit>:
=======
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	0f1b      	lsrs	r3, r3, #28
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	7dfb      	ldrb	r3, [r7, #23]
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	440b      	add	r3, r1
 800d7fc:	3237      	adds	r2, #55	@ 0x37
 800d7fe:	b2d2      	uxtb	r2, r2
 800d800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	011b      	lsls	r3, r3, #4
 800d806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d808:	7dfb      	ldrb	r3, [r7, #23]
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	3301      	adds	r3, #1
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	4413      	add	r3, r2
 800d812:	2200      	movs	r2, #0
 800d814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d816:	7dfb      	ldrb	r3, [r7, #23]
 800d818:	3301      	adds	r3, #1
 800d81a:	75fb      	strb	r3, [r7, #23]
 800d81c:	7dfa      	ldrb	r2, [r7, #23]
 800d81e:	79fb      	ldrb	r3, [r7, #7]
 800d820:	429a      	cmp	r2, r3
 800d822:	d3d3      	bcc.n	800d7cc <IntToUnicode+0x18>
  }
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
	...

0800d834 <HAL_PCD_MspInit>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b098      	sub	sp, #96	@ 0x60
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cf1c:	f107 0310 	add.w	r3, r7, #16
 800cf20:	2250      	movs	r2, #80	@ 0x50
 800cf22:	2100      	movs	r1, #0
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 fb3b 	bl	800d5a0 <memset>
  if(pcdHandle->Instance==USB)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a15      	ldr	r2, [pc, #84]	@ (800cf84 <HAL_PCD_MspInit+0x70>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d122      	bne.n	800cf7a <HAL_PCD_MspInit+0x66>
=======
 800d834:	b580      	push	{r7, lr}
 800d836:	b098      	sub	sp, #96	@ 0x60
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d83c:	f107 0310 	add.w	r3, r7, #16
 800d840:	2250      	movs	r2, #80	@ 0x50
 800d842:	2100      	movs	r1, #0
 800d844:	4618      	mov	r0, r3
 800d846:	f000 fb3b 	bl	800dec0 <memset>
  if(pcdHandle->Instance==USB)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a15      	ldr	r2, [pc, #84]	@ (800d8a4 <HAL_PCD_MspInit+0x70>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d122      	bne.n	800d89a <HAL_PCD_MspInit+0x66>
>>>>>>> Stashed changes

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
<<<<<<< Updated upstream
 800cf34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cf38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cf3e:	f107 0310 	add.w	r3, r7, #16
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7f8 f92c 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800cf4e:	f7f4 f863 	bl	8001018 <Error_Handler>
=======
 800d854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d858:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d85a:	2300      	movs	r3, #0
 800d85c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d85e:	f107 0310 	add.w	r3, r7, #16
 800d862:	4618      	mov	r0, r3
 800d864:	f7f7 fcf0 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d86e:	f7f3 fc27 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
<<<<<<< Updated upstream
 800cf52:	4b0d      	ldr	r3, [pc, #52]	@ (800cf88 <HAL_PCD_MspInit+0x74>)
 800cf54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf56:	4a0c      	ldr	r2, [pc, #48]	@ (800cf88 <HAL_PCD_MspInit+0x74>)
 800cf58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cf5c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf5e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf88 <HAL_PCD_MspInit+0x74>)
 800cf60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2105      	movs	r1, #5
 800cf6e:	2014      	movs	r0, #20
 800cf70:	f7f4 fbac 	bl	80016cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cf74:	2014      	movs	r0, #20
 800cf76:	f7f4 fbc3 	bl	8001700 <HAL_NVIC_EnableIRQ>
=======
 800d872:	4b0d      	ldr	r3, [pc, #52]	@ (800d8a8 <HAL_PCD_MspInit+0x74>)
 800d874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d876:	4a0c      	ldr	r2, [pc, #48]	@ (800d8a8 <HAL_PCD_MspInit+0x74>)
 800d878:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d87c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d87e:	4b0a      	ldr	r3, [pc, #40]	@ (800d8a8 <HAL_PCD_MspInit+0x74>)
 800d880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d886:	60fb      	str	r3, [r7, #12]
 800d888:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800d88a:	2200      	movs	r2, #0
 800d88c:	2105      	movs	r1, #5
 800d88e:	2014      	movs	r0, #20
 800d890:	f7f3 ff70 	bl	8001774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d894:	2014      	movs	r0, #20
 800d896:	f7f3 ff87 	bl	80017a8 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 800cf7a:	bf00      	nop
 800cf7c:	3760      	adds	r7, #96	@ 0x60
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	40005c00 	.word	0x40005c00
 800cf88:	40021000 	.word	0x40021000

0800cf8c <HAL_PCD_SetupStageCallback>:
=======
 800d89a:	bf00      	nop
 800d89c:	3760      	adds	r7, #96	@ 0x60
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	40005c00 	.word	0x40005c00
 800d8a8:	40021000 	.word	0x40021000

0800d8ac <HAL_PCD_SetupStageCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
=======
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
<<<<<<< Updated upstream
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	f7fb ff3e 	bl	8008e24 <USBD_LL_SetupStage>
=======
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	f7fb fb02 	bl	8008ecc <USBD_LL_SetupStage>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800cfa8:	bf00      	nop
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <HAL_PCD_DataOutStageCallback>:
=======
 800d8c8:	bf00      	nop
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <HAL_PCD_DataOutStageCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
=======
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
<<<<<<< Updated upstream
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	440b      	add	r3, r1
 800cfd0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	78fb      	ldrb	r3, [r7, #3]
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f7fb ff78 	bl	8008ece <USBD_LL_DataOutStage>
=======
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d8e2:	78fa      	ldrb	r2, [r7, #3]
 800d8e4:	6879      	ldr	r1, [r7, #4]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	4413      	add	r3, r2
 800d8ec:	00db      	lsls	r3, r3, #3
 800d8ee:	440b      	add	r3, r1
 800d8f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	78fb      	ldrb	r3, [r7, #3]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	f7fb fb3c 	bl	8008f76 <USBD_LL_DataOutStage>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800cfde:	bf00      	nop
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <HAL_PCD_DataInStageCallback>:
=======
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <HAL_PCD_DataInStageCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	460b      	mov	r3, r1
 800cff0:	70fb      	strb	r3, [r7, #3]
=======
 800d906:	b580      	push	{r7, lr}
 800d908:	b082      	sub	sp, #8
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	460b      	mov	r3, r1
 800d910:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
<<<<<<< Updated upstream
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cff8:	78fa      	ldrb	r2, [r7, #3]
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	440b      	add	r3, r1
 800d006:	3324      	adds	r3, #36	@ 0x24
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	78fb      	ldrb	r3, [r7, #3]
 800d00c:	4619      	mov	r1, r3
 800d00e:	f7fb ffc1 	bl	8008f94 <USBD_LL_DataInStage>
=======
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d918:	78fa      	ldrb	r2, [r7, #3]
 800d91a:	6879      	ldr	r1, [r7, #4]
 800d91c:	4613      	mov	r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4413      	add	r3, r2
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	440b      	add	r3, r1
 800d926:	3324      	adds	r3, #36	@ 0x24
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	78fb      	ldrb	r3, [r7, #3]
 800d92c:	4619      	mov	r1, r3
 800d92e:	f7fb fb85 	bl	800903c <USBD_LL_DataInStage>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <HAL_PCD_SOFCallback>:
=======
 800d932:	bf00      	nop
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <HAL_PCD_SOFCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b082      	sub	sp, #8
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
=======
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b082      	sub	sp, #8
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< Updated upstream
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d028:	4618      	mov	r0, r3
 800d02a:	f7fc f8d5 	bl	80091d8 <USBD_LL_SOF>
=======
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fb fc99 	bl	8009280 <USBD_LL_SOF>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <HAL_PCD_ResetCallback>:
=======
 800d94e:	bf00      	nop
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <HAL_PCD_ResetCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800d036:	b580      	push	{r7, lr}
 800d038:	b084      	sub	sp, #16
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
=======
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
<<<<<<< Updated upstream
 800d03e:	2301      	movs	r3, #1
 800d040:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	795b      	ldrb	r3, [r3, #5]
 800d046:	2b02      	cmp	r3, #2
 800d048:	d001      	beq.n	800d04e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d04a:	f7f3 ffe5 	bl	8001018 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d054:	7bfa      	ldrb	r2, [r7, #15]
 800d056:	4611      	mov	r1, r2
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fc f87f 	bl	800915c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d064:	4618      	mov	r0, r3
 800d066:	f7fc f82b 	bl	80090c0 <USBD_LL_Reset>
=======
 800d95e:	2301      	movs	r3, #1
 800d960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	795b      	ldrb	r3, [r3, #5]
 800d966:	2b02      	cmp	r3, #2
 800d968:	d001      	beq.n	800d96e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d96a:	f7f3 fba9 	bl	80010c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d974:	7bfa      	ldrb	r2, [r7, #15]
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fb fc43 	bl	8009204 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d984:	4618      	mov	r0, r3
 800d986:	f7fb fbef 	bl	8009168 <USBD_LL_Reset>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800d06a:	bf00      	nop
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <HAL_PCD_SuspendCallback>:
=======
 800d98a:	bf00      	nop
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <HAL_PCD_SuspendCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
=======
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< Updated upstream
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d082:	4618      	mov	r0, r3
 800d084:	f7fc f87a 	bl	800917c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	7a5b      	ldrb	r3, [r3, #9]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d090:	4b04      	ldr	r3, [pc, #16]	@ (800d0a4 <HAL_PCD_SuspendCallback+0x30>)
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	4a03      	ldr	r2, [pc, #12]	@ (800d0a4 <HAL_PCD_SuspendCallback+0x30>)
 800d096:	f043 0306 	orr.w	r3, r3, #6
 800d09a:	6113      	str	r3, [r2, #16]
=======
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fb fc3e 	bl	8009224 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7a5b      	ldrb	r3, [r3, #9]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d005      	beq.n	800d9bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9b0:	4b04      	ldr	r3, [pc, #16]	@ (800d9c4 <HAL_PCD_SuspendCallback+0x30>)
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	4a03      	ldr	r2, [pc, #12]	@ (800d9c4 <HAL_PCD_SuspendCallback+0x30>)
 800d9b6:	f043 0306 	orr.w	r3, r3, #6
 800d9ba:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800d09c:	bf00      	nop
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	e000ed00 	.word	0xe000ed00

0800d0a8 <HAL_PCD_ResumeCallback>:
=======
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	e000ed00 	.word	0xe000ed00

0800d9c8 <HAL_PCD_ResumeCallback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
=======
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
<<<<<<< Updated upstream
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	7a5b      	ldrb	r3, [r3, #9]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d007      	beq.n	800d0c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0b8:	4b08      	ldr	r3, [pc, #32]	@ (800d0dc <HAL_PCD_ResumeCallback+0x34>)
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	4a07      	ldr	r2, [pc, #28]	@ (800d0dc <HAL_PCD_ResumeCallback+0x34>)
 800d0be:	f023 0306 	bic.w	r3, r3, #6
 800d0c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d0c4:	f000 f9f8 	bl	800d4b8 <SystemClockConfig_Resume>
=======
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	7a5b      	ldrb	r3, [r3, #9]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d007      	beq.n	800d9e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9d8:	4b08      	ldr	r3, [pc, #32]	@ (800d9fc <HAL_PCD_ResumeCallback+0x34>)
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	4a07      	ldr	r2, [pc, #28]	@ (800d9fc <HAL_PCD_ResumeCallback+0x34>)
 800d9de:	f023 0306 	bic.w	r3, r3, #6
 800d9e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d9e4:	f000 f9f8 	bl	800ddd8 <SystemClockConfig_Resume>
>>>>>>> Stashed changes
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< Updated upstream
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fc f86a 	bl	80091a8 <USBD_LL_Resume>
=======
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fb fc2e 	bl	8009250 <USBD_LL_Resume>
>>>>>>> Stashed changes
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
<<<<<<< Updated upstream
 800d0d4:	bf00      	nop
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	e000ed00 	.word	0xe000ed00

0800d0e0 <USBD_LL_Init>:
=======
 800d9f4:	bf00      	nop
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	e000ed00 	.word	0xe000ed00

0800da00 <USBD_LL_Init>:
>>>>>>> Stashed changes
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d0e8:	4a2b      	ldr	r2, [pc, #172]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4a29      	ldr	r2, [pc, #164]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d0f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d0f8:	4b27      	ldr	r3, [pc, #156]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d0fa:	4a28      	ldr	r2, [pc, #160]	@ (800d19c <USBD_LL_Init+0xbc>)
 800d0fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d0fe:	4b26      	ldr	r3, [pc, #152]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d100:	2208      	movs	r2, #8
 800d102:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d104:	4b24      	ldr	r3, [pc, #144]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d106:	2202      	movs	r2, #2
 800d108:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d10a:	4b23      	ldr	r3, [pc, #140]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d10c:	2202      	movs	r2, #2
 800d10e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d110:	4b21      	ldr	r3, [pc, #132]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d112:	2200      	movs	r2, #0
 800d114:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d116:	4b20      	ldr	r3, [pc, #128]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d118:	2200      	movs	r2, #0
 800d11a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d11c:	4b1e      	ldr	r3, [pc, #120]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d11e:	2200      	movs	r2, #0
 800d120:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d122:	4b1d      	ldr	r3, [pc, #116]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d124:	2200      	movs	r2, #0
 800d126:	72da      	strb	r2, [r3, #11]
=======
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800da08:	4a2b      	ldr	r2, [pc, #172]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a29      	ldr	r2, [pc, #164]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800da18:	4b27      	ldr	r3, [pc, #156]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da1a:	4a28      	ldr	r2, [pc, #160]	@ (800dabc <USBD_LL_Init+0xbc>)
 800da1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800da1e:	4b26      	ldr	r3, [pc, #152]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da20:	2208      	movs	r2, #8
 800da22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da24:	4b24      	ldr	r3, [pc, #144]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da26:	2202      	movs	r2, #2
 800da28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da2a:	4b23      	ldr	r3, [pc, #140]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da2c:	2202      	movs	r2, #2
 800da2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800da30:	4b21      	ldr	r3, [pc, #132]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da32:	2200      	movs	r2, #0
 800da34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da36:	4b20      	ldr	r3, [pc, #128]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da38:	2200      	movs	r2, #0
 800da3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da3c:	4b1e      	ldr	r3, [pc, #120]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da3e:	2200      	movs	r2, #0
 800da40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da42:	4b1d      	ldr	r3, [pc, #116]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da44:	2200      	movs	r2, #0
 800da46:	72da      	strb	r2, [r3, #11]
>>>>>>> Stashed changes
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
<<<<<<< Updated upstream
 800d128:	481b      	ldr	r0, [pc, #108]	@ (800d198 <USBD_LL_Init+0xb8>)
 800d12a:	f7f5 fd24 	bl	8002b76 <HAL_PCD_Init>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d134:	f7f3 ff70 	bl	8001018 <Error_Handler>
=======
 800da48:	481b      	ldr	r0, [pc, #108]	@ (800dab8 <USBD_LL_Init+0xb8>)
 800da4a:	f7f5 f8e8 	bl	8002c1e <HAL_PCD_Init>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d001      	beq.n	800da58 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800da54:	f7f3 fb34 	bl	80010c0 <Error_Handler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
<<<<<<< Updated upstream
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d13e:	2318      	movs	r3, #24
 800d140:	2200      	movs	r2, #0
 800d142:	2100      	movs	r1, #0
 800d144:	f7f7 f9ab 	bl	800449e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d14e:	2358      	movs	r3, #88	@ 0x58
 800d150:	2200      	movs	r2, #0
 800d152:	2180      	movs	r1, #128	@ 0x80
 800d154:	f7f7 f9a3 	bl	800449e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d15e:	23c0      	movs	r3, #192	@ 0xc0
 800d160:	2200      	movs	r2, #0
 800d162:	2181      	movs	r1, #129	@ 0x81
 800d164:	f7f7 f99b 	bl	800449e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d16e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d172:	2200      	movs	r2, #0
 800d174:	2101      	movs	r1, #1
 800d176:	f7f7 f992 	bl	800449e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d184:	2200      	movs	r2, #0
 800d186:	2182      	movs	r1, #130	@ 0x82
 800d188:	f7f7 f989 	bl	800449e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	20007024 	.word	0x20007024
 800d19c:	40005c00 	.word	0x40005c00

0800d1a0 <USBD_LL_Start>:
=======
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800da5e:	2318      	movs	r3, #24
 800da60:	2200      	movs	r2, #0
 800da62:	2100      	movs	r1, #0
 800da64:	f7f6 fd6f 	bl	8004546 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800da6e:	2358      	movs	r3, #88	@ 0x58
 800da70:	2200      	movs	r2, #0
 800da72:	2180      	movs	r1, #128	@ 0x80
 800da74:	f7f6 fd67 	bl	8004546 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800da7e:	23c0      	movs	r3, #192	@ 0xc0
 800da80:	2200      	movs	r2, #0
 800da82:	2181      	movs	r1, #129	@ 0x81
 800da84:	f7f6 fd5f 	bl	8004546 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800da8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800da92:	2200      	movs	r2, #0
 800da94:	2101      	movs	r1, #1
 800da96:	f7f6 fd56 	bl	8004546 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800daa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800daa4:	2200      	movs	r2, #0
 800daa6:	2182      	movs	r1, #130	@ 0x82
 800daa8:	f7f6 fd4d 	bl	8004546 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20009f18 	.word	0x20009f18
 800dabc:	40005c00 	.word	0x40005c00

0800dac0 <USBD_LL_Start>:
>>>>>>> Stashed changes
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< Updated upstream
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f5 fdab 	bl	8002d12 <HAL_PCD_Start>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 f97e 	bl	800d4c4 <USBD_Get_USB_Status>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <USBD_LL_OpenEP>:
=======
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7f5 f96f 	bl	8002dba <HAL_PCD_Start>
 800dadc:	4603      	mov	r3, r0
 800dade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae0:	7bfb      	ldrb	r3, [r7, #15]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 f97e 	bl	800dde4 <USBD_Get_USB_Status>
 800dae8:	4603      	mov	r3, r0
 800daea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daec:	7bbb      	ldrb	r3, [r7, #14]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <USBD_LL_OpenEP>:
>>>>>>> Stashed changes
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< Updated upstream
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	4608      	mov	r0, r1
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	70fb      	strb	r3, [r7, #3]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	70bb      	strb	r3, [r7, #2]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d1fe:	78bb      	ldrb	r3, [r7, #2]
 800d200:	883a      	ldrh	r2, [r7, #0]
 800d202:	78f9      	ldrb	r1, [r7, #3]
 800d204:	f7f5 fef2 	bl	8002fec <HAL_PCD_EP_Open>
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 f958 	bl	800d4c4 <USBD_Get_USB_Status>
 800d214:	4603      	mov	r3, r0
 800d216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d218:	7bbb      	ldrb	r3, [r7, #14]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <USBD_LL_CloseEP>:
=======
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	4608      	mov	r0, r1
 800db00:	4611      	mov	r1, r2
 800db02:	461a      	mov	r2, r3
 800db04:	4603      	mov	r3, r0
 800db06:	70fb      	strb	r3, [r7, #3]
 800db08:	460b      	mov	r3, r1
 800db0a:	70bb      	strb	r3, [r7, #2]
 800db0c:	4613      	mov	r3, r2
 800db0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800db1e:	78bb      	ldrb	r3, [r7, #2]
 800db20:	883a      	ldrh	r2, [r7, #0]
 800db22:	78f9      	ldrb	r1, [r7, #3]
 800db24:	f7f5 fab6 	bl	8003094 <HAL_PCD_EP_Open>
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db2c:	7bfb      	ldrb	r3, [r7, #15]
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 f958 	bl	800dde4 <USBD_Get_USB_Status>
 800db34:	4603      	mov	r3, r0
 800db36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db38:	7bbb      	ldrb	r3, [r7, #14]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <USBD_LL_CloseEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 800d222:	b580      	push	{r7, lr}
 800d224:	b084      	sub	sp, #16
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	460b      	mov	r3, r1
 800d22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d23c:	78fa      	ldrb	r2, [r7, #3]
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f7f5 ff32 	bl	80030aa <HAL_PCD_EP_Close>
 800d246:	4603      	mov	r3, r0
 800d248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f000 f939 	bl	800d4c4 <USBD_Get_USB_Status>
 800d252:	4603      	mov	r3, r0
 800d254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d256:	7bbb      	ldrb	r3, [r7, #14]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <USBD_LL_StallEP>:
=======
 800db42:	b580      	push	{r7, lr}
 800db44:	b084      	sub	sp, #16
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
 800db4a:	460b      	mov	r3, r1
 800db4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db52:	2300      	movs	r3, #0
 800db54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800db5c:	78fa      	ldrb	r2, [r7, #3]
 800db5e:	4611      	mov	r1, r2
 800db60:	4618      	mov	r0, r3
 800db62:	f7f5 faf6 	bl	8003152 <HAL_PCD_EP_Close>
 800db66:	4603      	mov	r3, r0
 800db68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 f939 	bl	800dde4 <USBD_Get_USB_Status>
 800db72:	4603      	mov	r3, r0
 800db74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db76:	7bbb      	ldrb	r3, [r7, #14]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <USBD_LL_StallEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d27a:	78fa      	ldrb	r2, [r7, #3]
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f5 ffdb 	bl	800323a <HAL_PCD_EP_SetStall>
 800d284:	4603      	mov	r3, r0
 800d286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d288:	7bfb      	ldrb	r3, [r7, #15]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 f91a 	bl	800d4c4 <USBD_Get_USB_Status>
 800d290:	4603      	mov	r3, r0
 800d292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d294:	7bbb      	ldrb	r3, [r7, #14]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <USBD_LL_ClearStallEP>:
=======
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	460b      	mov	r3, r1
 800db8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db90:	2300      	movs	r3, #0
 800db92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800db9a:	78fa      	ldrb	r2, [r7, #3]
 800db9c:	4611      	mov	r1, r2
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f5 fb9f 	bl	80032e2 <HAL_PCD_EP_SetStall>
 800dba4:	4603      	mov	r3, r0
 800dba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f000 f91a 	bl	800dde4 <USBD_Get_USB_Status>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <USBD_LL_ClearStallEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d2b8:	78fa      	ldrb	r2, [r7, #3]
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7f6 f80e 	bl	80032de <HAL_PCD_EP_ClrStall>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f000 f8fb 	bl	800d4c4 <USBD_Get_USB_Status>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBD_LL_IsStallEP>:
=======
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dbd8:	78fa      	ldrb	r2, [r7, #3]
 800dbda:	4611      	mov	r1, r2
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7f5 fbd2 	bl	8003386 <HAL_PCD_EP_ClrStall>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f000 f8fb 	bl	800dde4 <USBD_Get_USB_Status>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <USBD_LL_IsStallEP>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d2ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d2f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	da0b      	bge.n	800d310 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2f8:	78fb      	ldrb	r3, [r7, #3]
 800d2fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2fe:	68f9      	ldr	r1, [r7, #12]
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	440b      	add	r3, r1
 800d30a:	3312      	adds	r3, #18
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	e00b      	b.n	800d328 <USBD_LL_IsStallEP+0x4c>
=======
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dc0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	da0b      	bge.n	800dc30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc1e:	68f9      	ldr	r1, [r7, #12]
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	00db      	lsls	r3, r3, #3
 800dc28:	440b      	add	r3, r1
 800dc2a:	3312      	adds	r3, #18
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	e00b      	b.n	800dc48 <USBD_LL_IsStallEP+0x4c>
>>>>>>> Stashed changes
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< Updated upstream
 800d310:	78fb      	ldrb	r3, [r7, #3]
 800d312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d316:	68f9      	ldr	r1, [r7, #12]
 800d318:	4613      	mov	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	440b      	add	r3, r1
 800d322:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d326:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <USBD_LL_SetUSBAddress>:
=======
 800dc30:	78fb      	ldrb	r3, [r7, #3]
 800dc32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc36:	68f9      	ldr	r1, [r7, #12]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	00db      	lsls	r3, r3, #3
 800dc40:	440b      	add	r3, r1
 800dc42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800dc46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <USBD_LL_SetUSBAddress>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< Updated upstream
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	460b      	mov	r3, r1
 800d33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d34e:	78fa      	ldrb	r2, [r7, #3]
 800d350:	4611      	mov	r1, r2
 800d352:	4618      	mov	r0, r3
 800d354:	f7f5 fe26 	bl	8002fa4 <HAL_PCD_SetAddress>
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d35c:	7bfb      	ldrb	r3, [r7, #15]
 800d35e:	4618      	mov	r0, r3
 800d360:	f000 f8b0 	bl	800d4c4 <USBD_Get_USB_Status>
 800d364:	4603      	mov	r3, r0
 800d366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d368:	7bbb      	ldrb	r3, [r7, #14]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <USBD_LL_Transmit>:
=======
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dc6e:	78fa      	ldrb	r2, [r7, #3]
 800dc70:	4611      	mov	r1, r2
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7f5 f9ea 	bl	800304c <HAL_PCD_SetAddress>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 f8b0 	bl	800dde4 <USBD_Get_USB_Status>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <USBD_LL_Transmit>:
>>>>>>> Stashed changes
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< Updated upstream
 800d372:	b580      	push	{r7, lr}
 800d374:	b086      	sub	sp, #24
 800d376:	af00      	add	r7, sp, #0
 800d378:	60f8      	str	r0, [r7, #12]
 800d37a:	607a      	str	r2, [r7, #4]
 800d37c:	603b      	str	r3, [r7, #0]
 800d37e:	460b      	mov	r3, r1
 800d380:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d390:	7af9      	ldrb	r1, [r7, #11]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	f7f5 ff19 	bl	80031cc <HAL_PCD_EP_Transmit>
 800d39a:	4603      	mov	r3, r0
 800d39c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 f88f 	bl	800d4c4 <USBD_Get_USB_Status>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3718      	adds	r7, #24
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_LL_PrepareReceive>:
=======
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b086      	sub	sp, #24
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	60f8      	str	r0, [r7, #12]
 800dc9a:	607a      	str	r2, [r7, #4]
 800dc9c:	603b      	str	r3, [r7, #0]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca6:	2300      	movs	r3, #0
 800dca8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dcb0:	7af9      	ldrb	r1, [r7, #11]
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	f7f5 fadd 	bl	8003274 <HAL_PCD_EP_Transmit>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 f88f 	bl	800dde4 <USBD_Get_USB_Status>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcca:	7dbb      	ldrb	r3, [r7, #22]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <USBD_LL_PrepareReceive>:
>>>>>>> Stashed changes
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< Updated upstream
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	607a      	str	r2, [r7, #4]
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d3d2:	7af9      	ldrb	r1, [r7, #11]
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	f7f5 feaf 	bl	800313a <HAL_PCD_EP_Receive>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 f86e 	bl	800d4c4 <USBD_Get_USB_Status>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3718      	adds	r7, #24
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <USBD_LL_GetRxDataSize>:
=======
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	607a      	str	r2, [r7, #4]
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	460b      	mov	r3, r1
 800dce2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dcf2:	7af9      	ldrb	r1, [r7, #11]
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	f7f5 fa73 	bl	80031e2 <HAL_PCD_EP_Receive>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 f86e 	bl	800dde4 <USBD_Get_USB_Status>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <USBD_LL_GetRxDataSize>:
>>>>>>> Stashed changes
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< Updated upstream
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d408:	78fa      	ldrb	r2, [r7, #3]
 800d40a:	4611      	mov	r1, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7f5 fec5 	bl	800319c <HAL_PCD_EP_GetRxCount>
 800d412:	4603      	mov	r3, r0
}
 800d414:	4618      	mov	r0, r3
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <HAL_PCDEx_LPM_Callback>:
=======
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b082      	sub	sp, #8
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	460b      	mov	r3, r1
 800dd20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dd28:	78fa      	ldrb	r2, [r7, #3]
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7f5 fa89 	bl	8003244 <HAL_PCD_EP_GetRxCount>
 800dd32:	4603      	mov	r3, r0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <HAL_PCDEx_LPM_Callback>:
>>>>>>> Stashed changes
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< Updated upstream
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d428:	78fb      	ldrb	r3, [r7, #3]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <HAL_PCDEx_LPM_Callback+0x18>
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d013      	beq.n	800d45a <HAL_PCDEx_LPM_Callback+0x3e>
=======
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	460b      	mov	r3, r1
 800dd46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dd48:	78fb      	ldrb	r3, [r7, #3]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <HAL_PCDEx_LPM_Callback+0x18>
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d013      	beq.n	800dd7a <HAL_PCDEx_LPM_Callback+0x3e>
>>>>>>> Stashed changes
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
<<<<<<< Updated upstream
 800d432:	e023      	b.n	800d47c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7a5b      	ldrb	r3, [r3, #9]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d007      	beq.n	800d44c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d43c:	f000 f83c 	bl	800d4b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d440:	4b10      	ldr	r3, [pc, #64]	@ (800d484 <HAL_PCDEx_LPM_Callback+0x68>)
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	4a0f      	ldr	r2, [pc, #60]	@ (800d484 <HAL_PCDEx_LPM_Callback+0x68>)
 800d446:	f023 0306 	bic.w	r3, r3, #6
 800d44a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d452:	4618      	mov	r0, r3
 800d454:	f7fb fea8 	bl	80091a8 <USBD_LL_Resume>
    break;
 800d458:	e010      	b.n	800d47c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d460:	4618      	mov	r0, r3
 800d462:	f7fb fe8b 	bl	800917c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	7a5b      	ldrb	r3, [r3, #9]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d005      	beq.n	800d47a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d46e:	4b05      	ldr	r3, [pc, #20]	@ (800d484 <HAL_PCDEx_LPM_Callback+0x68>)
 800d470:	691b      	ldr	r3, [r3, #16]
 800d472:	4a04      	ldr	r2, [pc, #16]	@ (800d484 <HAL_PCDEx_LPM_Callback+0x68>)
 800d474:	f043 0306 	orr.w	r3, r3, #6
 800d478:	6113      	str	r3, [r2, #16]
    break;
 800d47a:	bf00      	nop
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	e000ed00 	.word	0xe000ed00

0800d488 <USBD_static_malloc>:
=======
 800dd52:	e023      	b.n	800dd9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	7a5b      	ldrb	r3, [r3, #9]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d007      	beq.n	800dd6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dd5c:	f000 f83c 	bl	800ddd8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd60:	4b10      	ldr	r3, [pc, #64]	@ (800dda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	4a0f      	ldr	r2, [pc, #60]	@ (800dda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd66:	f023 0306 	bic.w	r3, r3, #6
 800dd6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fb fa6c 	bl	8009250 <USBD_LL_Resume>
    break;
 800dd78:	e010      	b.n	800dd9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fb fa4f 	bl	8009224 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	7a5b      	ldrb	r3, [r3, #9]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d005      	beq.n	800dd9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd8e:	4b05      	ldr	r3, [pc, #20]	@ (800dda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	4a04      	ldr	r2, [pc, #16]	@ (800dda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd94:	f043 0306 	orr.w	r3, r3, #6
 800dd98:	6113      	str	r3, [r2, #16]
    break;
 800dd9a:	bf00      	nop
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	e000ed00 	.word	0xe000ed00

0800dda8 <USBD_static_malloc>:
>>>>>>> Stashed changes
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< Updated upstream
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d490:	4b03      	ldr	r3, [pc, #12]	@ (800d4a0 <USBD_static_malloc+0x18>)
}
 800d492:	4618      	mov	r0, r3
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	20007300 	.word	0x20007300

0800d4a4 <USBD_static_free>:
=======
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ddb0:	4b03      	ldr	r3, [pc, #12]	@ (800ddc0 <USBD_static_malloc+0x18>)
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	2000a1f4 	.word	0x2000a1f4

0800ddc4 <USBD_static_free>:
>>>>>>> Stashed changes
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< Updated upstream
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]

}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <SystemClockConfig_Resume>:
=======
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]

}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <SystemClockConfig_Resume>:
>>>>>>> Stashed changes
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
<<<<<<< Updated upstream
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d4bc:	f7f3 fbf4 	bl	8000ca8 <SystemClock_Config>
}
 800d4c0:	bf00      	nop
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <USBD_Get_USB_Status>:
=======
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dddc:	f7f2 ff4c 	bl	8000c78 <SystemClock_Config>
}
 800dde0:	bf00      	nop
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBD_Get_USB_Status>:
>>>>>>> Stashed changes
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< Updated upstream
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4d2:	79fb      	ldrb	r3, [r7, #7]
 800d4d4:	2b03      	cmp	r3, #3
 800d4d6:	d817      	bhi.n	800d508 <USBD_Get_USB_Status+0x44>
 800d4d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d4e0 <USBD_Get_USB_Status+0x1c>)
 800d4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4de:	bf00      	nop
 800d4e0:	0800d4f1 	.word	0x0800d4f1
 800d4e4:	0800d4f7 	.word	0x0800d4f7
 800d4e8:	0800d4fd 	.word	0x0800d4fd
 800d4ec:	0800d503 	.word	0x0800d503
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f4:	e00b      	b.n	800d50e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4fa:	e008      	b.n	800d50e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d500:	e005      	b.n	800d50e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d502:	2303      	movs	r3, #3
 800d504:	73fb      	strb	r3, [r7, #15]
    break;
 800d506:	e002      	b.n	800d50e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d508:	2303      	movs	r3, #3
 800d50a:	73fb      	strb	r3, [r7, #15]
    break;
 800d50c:	bf00      	nop
  }
  return usb_status;
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3714      	adds	r7, #20
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <siprintf>:
 800d51c:	b40e      	push	{r1, r2, r3}
 800d51e:	b510      	push	{r4, lr}
 800d520:	b09d      	sub	sp, #116	@ 0x74
 800d522:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d524:	9002      	str	r0, [sp, #8]
 800d526:	9006      	str	r0, [sp, #24]
 800d528:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d52c:	480a      	ldr	r0, [pc, #40]	@ (800d558 <siprintf+0x3c>)
 800d52e:	9107      	str	r1, [sp, #28]
 800d530:	9104      	str	r1, [sp, #16]
 800d532:	490a      	ldr	r1, [pc, #40]	@ (800d55c <siprintf+0x40>)
 800d534:	f853 2b04 	ldr.w	r2, [r3], #4
 800d538:	9105      	str	r1, [sp, #20]
 800d53a:	2400      	movs	r4, #0
 800d53c:	a902      	add	r1, sp, #8
 800d53e:	6800      	ldr	r0, [r0, #0]
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d544:	f000 fa20 	bl	800d988 <_svfiprintf_r>
 800d548:	9b02      	ldr	r3, [sp, #8]
 800d54a:	701c      	strb	r4, [r3, #0]
 800d54c:	b01d      	add	sp, #116	@ 0x74
 800d54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d552:	b003      	add	sp, #12
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	20000188 	.word	0x20000188
 800d55c:	ffff0208 	.word	0xffff0208

0800d560 <_vsiprintf_r>:
 800d560:	b510      	push	{r4, lr}
 800d562:	b09a      	sub	sp, #104	@ 0x68
 800d564:	2400      	movs	r4, #0
 800d566:	9100      	str	r1, [sp, #0]
 800d568:	9104      	str	r1, [sp, #16]
 800d56a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d56e:	9105      	str	r1, [sp, #20]
 800d570:	9102      	str	r1, [sp, #8]
 800d572:	4905      	ldr	r1, [pc, #20]	@ (800d588 <_vsiprintf_r+0x28>)
 800d574:	9103      	str	r1, [sp, #12]
 800d576:	4669      	mov	r1, sp
 800d578:	9419      	str	r4, [sp, #100]	@ 0x64
 800d57a:	f000 fa05 	bl	800d988 <_svfiprintf_r>
 800d57e:	9b00      	ldr	r3, [sp, #0]
 800d580:	701c      	strb	r4, [r3, #0]
 800d582:	b01a      	add	sp, #104	@ 0x68
 800d584:	bd10      	pop	{r4, pc}
 800d586:	bf00      	nop
 800d588:	ffff0208 	.word	0xffff0208

0800d58c <vsiprintf>:
 800d58c:	4613      	mov	r3, r2
 800d58e:	460a      	mov	r2, r1
 800d590:	4601      	mov	r1, r0
 800d592:	4802      	ldr	r0, [pc, #8]	@ (800d59c <vsiprintf+0x10>)
 800d594:	6800      	ldr	r0, [r0, #0]
 800d596:	f7ff bfe3 	b.w	800d560 <_vsiprintf_r>
 800d59a:	bf00      	nop
 800d59c:	20000188 	.word	0x20000188

0800d5a0 <memset>:
 800d5a0:	4402      	add	r2, r0
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d100      	bne.n	800d5aa <memset+0xa>
 800d5a8:	4770      	bx	lr
 800d5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d5ae:	e7f9      	b.n	800d5a4 <memset+0x4>

0800d5b0 <_reclaim_reent>:
 800d5b0:	4b2d      	ldr	r3, [pc, #180]	@ (800d668 <_reclaim_reent+0xb8>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4283      	cmp	r3, r0
 800d5b6:	b570      	push	{r4, r5, r6, lr}
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	d053      	beq.n	800d664 <_reclaim_reent+0xb4>
 800d5bc:	69c3      	ldr	r3, [r0, #28]
 800d5be:	b31b      	cbz	r3, 800d608 <_reclaim_reent+0x58>
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	b163      	cbz	r3, 800d5de <_reclaim_reent+0x2e>
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	69e3      	ldr	r3, [r4, #28]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	5959      	ldr	r1, [r3, r5]
 800d5cc:	b9b1      	cbnz	r1, 800d5fc <_reclaim_reent+0x4c>
 800d5ce:	3504      	adds	r5, #4
 800d5d0:	2d80      	cmp	r5, #128	@ 0x80
 800d5d2:	d1f8      	bne.n	800d5c6 <_reclaim_reent+0x16>
 800d5d4:	69e3      	ldr	r3, [r4, #28]
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	68d9      	ldr	r1, [r3, #12]
 800d5da:	f000 f881 	bl	800d6e0 <_free_r>
 800d5de:	69e3      	ldr	r3, [r4, #28]
 800d5e0:	6819      	ldr	r1, [r3, #0]
 800d5e2:	b111      	cbz	r1, 800d5ea <_reclaim_reent+0x3a>
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 f87b 	bl	800d6e0 <_free_r>
 800d5ea:	69e3      	ldr	r3, [r4, #28]
 800d5ec:	689d      	ldr	r5, [r3, #8]
 800d5ee:	b15d      	cbz	r5, 800d608 <_reclaim_reent+0x58>
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	682d      	ldr	r5, [r5, #0]
 800d5f6:	f000 f873 	bl	800d6e0 <_free_r>
 800d5fa:	e7f8      	b.n	800d5ee <_reclaim_reent+0x3e>
 800d5fc:	680e      	ldr	r6, [r1, #0]
 800d5fe:	4620      	mov	r0, r4
 800d600:	f000 f86e 	bl	800d6e0 <_free_r>
 800d604:	4631      	mov	r1, r6
 800d606:	e7e1      	b.n	800d5cc <_reclaim_reent+0x1c>
 800d608:	6961      	ldr	r1, [r4, #20]
 800d60a:	b111      	cbz	r1, 800d612 <_reclaim_reent+0x62>
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 f867 	bl	800d6e0 <_free_r>
 800d612:	69e1      	ldr	r1, [r4, #28]
 800d614:	b111      	cbz	r1, 800d61c <_reclaim_reent+0x6c>
 800d616:	4620      	mov	r0, r4
 800d618:	f000 f862 	bl	800d6e0 <_free_r>
 800d61c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d61e:	b111      	cbz	r1, 800d626 <_reclaim_reent+0x76>
 800d620:	4620      	mov	r0, r4
 800d622:	f000 f85d 	bl	800d6e0 <_free_r>
 800d626:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d628:	b111      	cbz	r1, 800d630 <_reclaim_reent+0x80>
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 f858 	bl	800d6e0 <_free_r>
 800d630:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d632:	b111      	cbz	r1, 800d63a <_reclaim_reent+0x8a>
 800d634:	4620      	mov	r0, r4
 800d636:	f000 f853 	bl	800d6e0 <_free_r>
 800d63a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d63c:	b111      	cbz	r1, 800d644 <_reclaim_reent+0x94>
 800d63e:	4620      	mov	r0, r4
 800d640:	f000 f84e 	bl	800d6e0 <_free_r>
 800d644:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d646:	b111      	cbz	r1, 800d64e <_reclaim_reent+0x9e>
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 f849 	bl	800d6e0 <_free_r>
 800d64e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d650:	b111      	cbz	r1, 800d658 <_reclaim_reent+0xa8>
 800d652:	4620      	mov	r0, r4
 800d654:	f000 f844 	bl	800d6e0 <_free_r>
 800d658:	6a23      	ldr	r3, [r4, #32]
 800d65a:	b11b      	cbz	r3, 800d664 <_reclaim_reent+0xb4>
 800d65c:	4620      	mov	r0, r4
 800d65e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d662:	4718      	bx	r3
 800d664:	bd70      	pop	{r4, r5, r6, pc}
 800d666:	bf00      	nop
 800d668:	20000188 	.word	0x20000188

0800d66c <__errno>:
 800d66c:	4b01      	ldr	r3, [pc, #4]	@ (800d674 <__errno+0x8>)
 800d66e:	6818      	ldr	r0, [r3, #0]
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	20000188 	.word	0x20000188

0800d678 <__libc_init_array>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	4d0d      	ldr	r5, [pc, #52]	@ (800d6b0 <__libc_init_array+0x38>)
 800d67c:	4c0d      	ldr	r4, [pc, #52]	@ (800d6b4 <__libc_init_array+0x3c>)
 800d67e:	1b64      	subs	r4, r4, r5
 800d680:	10a4      	asrs	r4, r4, #2
 800d682:	2600      	movs	r6, #0
 800d684:	42a6      	cmp	r6, r4
 800d686:	d109      	bne.n	800d69c <__libc_init_array+0x24>
 800d688:	4d0b      	ldr	r5, [pc, #44]	@ (800d6b8 <__libc_init_array+0x40>)
 800d68a:	4c0c      	ldr	r4, [pc, #48]	@ (800d6bc <__libc_init_array+0x44>)
 800d68c:	f000 fc64 	bl	800df58 <_init>
 800d690:	1b64      	subs	r4, r4, r5
 800d692:	10a4      	asrs	r4, r4, #2
 800d694:	2600      	movs	r6, #0
 800d696:	42a6      	cmp	r6, r4
 800d698:	d105      	bne.n	800d6a6 <__libc_init_array+0x2e>
 800d69a:	bd70      	pop	{r4, r5, r6, pc}
 800d69c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6a0:	4798      	blx	r3
 800d6a2:	3601      	adds	r6, #1
 800d6a4:	e7ee      	b.n	800d684 <__libc_init_array+0xc>
 800d6a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6aa:	4798      	blx	r3
 800d6ac:	3601      	adds	r6, #1
 800d6ae:	e7f2      	b.n	800d696 <__libc_init_array+0x1e>
 800d6b0:	0800e318 	.word	0x0800e318
 800d6b4:	0800e318 	.word	0x0800e318
 800d6b8:	0800e318 	.word	0x0800e318
 800d6bc:	0800e31c 	.word	0x0800e31c

0800d6c0 <__retarget_lock_acquire_recursive>:
 800d6c0:	4770      	bx	lr

0800d6c2 <__retarget_lock_release_recursive>:
 800d6c2:	4770      	bx	lr

0800d6c4 <memcpy>:
 800d6c4:	440a      	add	r2, r1
 800d6c6:	4291      	cmp	r1, r2
 800d6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6cc:	d100      	bne.n	800d6d0 <memcpy+0xc>
 800d6ce:	4770      	bx	lr
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6da:	4291      	cmp	r1, r2
 800d6dc:	d1f9      	bne.n	800d6d2 <memcpy+0xe>
 800d6de:	bd10      	pop	{r4, pc}

0800d6e0 <_free_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	4605      	mov	r5, r0
 800d6e4:	2900      	cmp	r1, #0
 800d6e6:	d041      	beq.n	800d76c <_free_r+0x8c>
 800d6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ec:	1f0c      	subs	r4, r1, #4
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	bfb8      	it	lt
 800d6f2:	18e4      	addlt	r4, r4, r3
 800d6f4:	f000 f8e0 	bl	800d8b8 <__malloc_lock>
 800d6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d770 <_free_r+0x90>)
 800d6fa:	6813      	ldr	r3, [r2, #0]
 800d6fc:	b933      	cbnz	r3, 800d70c <_free_r+0x2c>
 800d6fe:	6063      	str	r3, [r4, #4]
 800d700:	6014      	str	r4, [r2, #0]
 800d702:	4628      	mov	r0, r5
 800d704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d708:	f000 b8dc 	b.w	800d8c4 <__malloc_unlock>
 800d70c:	42a3      	cmp	r3, r4
 800d70e:	d908      	bls.n	800d722 <_free_r+0x42>
 800d710:	6820      	ldr	r0, [r4, #0]
 800d712:	1821      	adds	r1, r4, r0
 800d714:	428b      	cmp	r3, r1
 800d716:	bf01      	itttt	eq
 800d718:	6819      	ldreq	r1, [r3, #0]
 800d71a:	685b      	ldreq	r3, [r3, #4]
 800d71c:	1809      	addeq	r1, r1, r0
 800d71e:	6021      	streq	r1, [r4, #0]
 800d720:	e7ed      	b.n	800d6fe <_free_r+0x1e>
 800d722:	461a      	mov	r2, r3
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	b10b      	cbz	r3, 800d72c <_free_r+0x4c>
 800d728:	42a3      	cmp	r3, r4
 800d72a:	d9fa      	bls.n	800d722 <_free_r+0x42>
 800d72c:	6811      	ldr	r1, [r2, #0]
 800d72e:	1850      	adds	r0, r2, r1
 800d730:	42a0      	cmp	r0, r4
 800d732:	d10b      	bne.n	800d74c <_free_r+0x6c>
 800d734:	6820      	ldr	r0, [r4, #0]
 800d736:	4401      	add	r1, r0
 800d738:	1850      	adds	r0, r2, r1
 800d73a:	4283      	cmp	r3, r0
 800d73c:	6011      	str	r1, [r2, #0]
 800d73e:	d1e0      	bne.n	800d702 <_free_r+0x22>
 800d740:	6818      	ldr	r0, [r3, #0]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	6053      	str	r3, [r2, #4]
 800d746:	4408      	add	r0, r1
 800d748:	6010      	str	r0, [r2, #0]
 800d74a:	e7da      	b.n	800d702 <_free_r+0x22>
 800d74c:	d902      	bls.n	800d754 <_free_r+0x74>
 800d74e:	230c      	movs	r3, #12
 800d750:	602b      	str	r3, [r5, #0]
 800d752:	e7d6      	b.n	800d702 <_free_r+0x22>
 800d754:	6820      	ldr	r0, [r4, #0]
 800d756:	1821      	adds	r1, r4, r0
 800d758:	428b      	cmp	r3, r1
 800d75a:	bf04      	itt	eq
 800d75c:	6819      	ldreq	r1, [r3, #0]
 800d75e:	685b      	ldreq	r3, [r3, #4]
 800d760:	6063      	str	r3, [r4, #4]
 800d762:	bf04      	itt	eq
 800d764:	1809      	addeq	r1, r1, r0
 800d766:	6021      	streq	r1, [r4, #0]
 800d768:	6054      	str	r4, [r2, #4]
 800d76a:	e7ca      	b.n	800d702 <_free_r+0x22>
 800d76c:	bd38      	pop	{r3, r4, r5, pc}
 800d76e:	bf00      	nop
 800d770:	20007664 	.word	0x20007664

0800d774 <sbrk_aligned>:
 800d774:	b570      	push	{r4, r5, r6, lr}
 800d776:	4e0f      	ldr	r6, [pc, #60]	@ (800d7b4 <sbrk_aligned+0x40>)
 800d778:	460c      	mov	r4, r1
 800d77a:	6831      	ldr	r1, [r6, #0]
 800d77c:	4605      	mov	r5, r0
 800d77e:	b911      	cbnz	r1, 800d786 <sbrk_aligned+0x12>
 800d780:	f000 fba4 	bl	800decc <_sbrk_r>
 800d784:	6030      	str	r0, [r6, #0]
 800d786:	4621      	mov	r1, r4
 800d788:	4628      	mov	r0, r5
 800d78a:	f000 fb9f 	bl	800decc <_sbrk_r>
 800d78e:	1c43      	adds	r3, r0, #1
 800d790:	d103      	bne.n	800d79a <sbrk_aligned+0x26>
 800d792:	f04f 34ff 	mov.w	r4, #4294967295
 800d796:	4620      	mov	r0, r4
 800d798:	bd70      	pop	{r4, r5, r6, pc}
 800d79a:	1cc4      	adds	r4, r0, #3
 800d79c:	f024 0403 	bic.w	r4, r4, #3
 800d7a0:	42a0      	cmp	r0, r4
 800d7a2:	d0f8      	beq.n	800d796 <sbrk_aligned+0x22>
 800d7a4:	1a21      	subs	r1, r4, r0
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f000 fb90 	bl	800decc <_sbrk_r>
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	d1f2      	bne.n	800d796 <sbrk_aligned+0x22>
 800d7b0:	e7ef      	b.n	800d792 <sbrk_aligned+0x1e>
 800d7b2:	bf00      	nop
 800d7b4:	20007660 	.word	0x20007660

0800d7b8 <_malloc_r>:
 800d7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7bc:	1ccd      	adds	r5, r1, #3
 800d7be:	f025 0503 	bic.w	r5, r5, #3
 800d7c2:	3508      	adds	r5, #8
 800d7c4:	2d0c      	cmp	r5, #12
 800d7c6:	bf38      	it	cc
 800d7c8:	250c      	movcc	r5, #12
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	4606      	mov	r6, r0
 800d7ce:	db01      	blt.n	800d7d4 <_malloc_r+0x1c>
 800d7d0:	42a9      	cmp	r1, r5
 800d7d2:	d904      	bls.n	800d7de <_malloc_r+0x26>
 800d7d4:	230c      	movs	r3, #12
 800d7d6:	6033      	str	r3, [r6, #0]
 800d7d8:	2000      	movs	r0, #0
 800d7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d8b4 <_malloc_r+0xfc>
 800d7e2:	f000 f869 	bl	800d8b8 <__malloc_lock>
 800d7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	bb44      	cbnz	r4, 800d840 <_malloc_r+0x88>
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7ff ffbf 	bl	800d774 <sbrk_aligned>
 800d7f6:	1c43      	adds	r3, r0, #1
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	d158      	bne.n	800d8ae <_malloc_r+0xf6>
 800d7fc:	f8d8 4000 	ldr.w	r4, [r8]
 800d800:	4627      	mov	r7, r4
 800d802:	2f00      	cmp	r7, #0
 800d804:	d143      	bne.n	800d88e <_malloc_r+0xd6>
 800d806:	2c00      	cmp	r4, #0
 800d808:	d04b      	beq.n	800d8a2 <_malloc_r+0xea>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	4639      	mov	r1, r7
 800d80e:	4630      	mov	r0, r6
 800d810:	eb04 0903 	add.w	r9, r4, r3
 800d814:	f000 fb5a 	bl	800decc <_sbrk_r>
 800d818:	4581      	cmp	r9, r0
 800d81a:	d142      	bne.n	800d8a2 <_malloc_r+0xea>
 800d81c:	6821      	ldr	r1, [r4, #0]
 800d81e:	1a6d      	subs	r5, r5, r1
 800d820:	4629      	mov	r1, r5
 800d822:	4630      	mov	r0, r6
 800d824:	f7ff ffa6 	bl	800d774 <sbrk_aligned>
 800d828:	3001      	adds	r0, #1
 800d82a:	d03a      	beq.n	800d8a2 <_malloc_r+0xea>
 800d82c:	6823      	ldr	r3, [r4, #0]
 800d82e:	442b      	add	r3, r5
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	f8d8 3000 	ldr.w	r3, [r8]
 800d836:	685a      	ldr	r2, [r3, #4]
 800d838:	bb62      	cbnz	r2, 800d894 <_malloc_r+0xdc>
 800d83a:	f8c8 7000 	str.w	r7, [r8]
 800d83e:	e00f      	b.n	800d860 <_malloc_r+0xa8>
 800d840:	6822      	ldr	r2, [r4, #0]
 800d842:	1b52      	subs	r2, r2, r5
 800d844:	d420      	bmi.n	800d888 <_malloc_r+0xd0>
 800d846:	2a0b      	cmp	r2, #11
 800d848:	d917      	bls.n	800d87a <_malloc_r+0xc2>
 800d84a:	1961      	adds	r1, r4, r5
 800d84c:	42a3      	cmp	r3, r4
 800d84e:	6025      	str	r5, [r4, #0]
 800d850:	bf18      	it	ne
 800d852:	6059      	strne	r1, [r3, #4]
 800d854:	6863      	ldr	r3, [r4, #4]
 800d856:	bf08      	it	eq
 800d858:	f8c8 1000 	streq.w	r1, [r8]
 800d85c:	5162      	str	r2, [r4, r5]
 800d85e:	604b      	str	r3, [r1, #4]
 800d860:	4630      	mov	r0, r6
 800d862:	f000 f82f 	bl	800d8c4 <__malloc_unlock>
 800d866:	f104 000b 	add.w	r0, r4, #11
 800d86a:	1d23      	adds	r3, r4, #4
 800d86c:	f020 0007 	bic.w	r0, r0, #7
 800d870:	1ac2      	subs	r2, r0, r3
 800d872:	bf1c      	itt	ne
 800d874:	1a1b      	subne	r3, r3, r0
 800d876:	50a3      	strne	r3, [r4, r2]
 800d878:	e7af      	b.n	800d7da <_malloc_r+0x22>
 800d87a:	6862      	ldr	r2, [r4, #4]
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	bf0c      	ite	eq
 800d880:	f8c8 2000 	streq.w	r2, [r8]
 800d884:	605a      	strne	r2, [r3, #4]
 800d886:	e7eb      	b.n	800d860 <_malloc_r+0xa8>
 800d888:	4623      	mov	r3, r4
 800d88a:	6864      	ldr	r4, [r4, #4]
 800d88c:	e7ae      	b.n	800d7ec <_malloc_r+0x34>
 800d88e:	463c      	mov	r4, r7
 800d890:	687f      	ldr	r7, [r7, #4]
 800d892:	e7b6      	b.n	800d802 <_malloc_r+0x4a>
 800d894:	461a      	mov	r2, r3
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	42a3      	cmp	r3, r4
 800d89a:	d1fb      	bne.n	800d894 <_malloc_r+0xdc>
 800d89c:	2300      	movs	r3, #0
 800d89e:	6053      	str	r3, [r2, #4]
 800d8a0:	e7de      	b.n	800d860 <_malloc_r+0xa8>
 800d8a2:	230c      	movs	r3, #12
 800d8a4:	6033      	str	r3, [r6, #0]
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f000 f80c 	bl	800d8c4 <__malloc_unlock>
 800d8ac:	e794      	b.n	800d7d8 <_malloc_r+0x20>
 800d8ae:	6005      	str	r5, [r0, #0]
 800d8b0:	e7d6      	b.n	800d860 <_malloc_r+0xa8>
 800d8b2:	bf00      	nop
 800d8b4:	20007664 	.word	0x20007664

0800d8b8 <__malloc_lock>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	@ (800d8c0 <__malloc_lock+0x8>)
 800d8ba:	f7ff bf01 	b.w	800d6c0 <__retarget_lock_acquire_recursive>
 800d8be:	bf00      	nop
 800d8c0:	2000765c 	.word	0x2000765c

0800d8c4 <__malloc_unlock>:
 800d8c4:	4801      	ldr	r0, [pc, #4]	@ (800d8cc <__malloc_unlock+0x8>)
 800d8c6:	f7ff befc 	b.w	800d6c2 <__retarget_lock_release_recursive>
 800d8ca:	bf00      	nop
 800d8cc:	2000765c 	.word	0x2000765c

0800d8d0 <__ssputs_r>:
 800d8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d4:	688e      	ldr	r6, [r1, #8]
 800d8d6:	461f      	mov	r7, r3
 800d8d8:	42be      	cmp	r6, r7
 800d8da:	680b      	ldr	r3, [r1, #0]
 800d8dc:	4682      	mov	sl, r0
 800d8de:	460c      	mov	r4, r1
 800d8e0:	4690      	mov	r8, r2
 800d8e2:	d82d      	bhi.n	800d940 <__ssputs_r+0x70>
 800d8e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d8ec:	d026      	beq.n	800d93c <__ssputs_r+0x6c>
 800d8ee:	6965      	ldr	r5, [r4, #20]
 800d8f0:	6909      	ldr	r1, [r1, #16]
 800d8f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8f6:	eba3 0901 	sub.w	r9, r3, r1
 800d8fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8fe:	1c7b      	adds	r3, r7, #1
 800d900:	444b      	add	r3, r9
 800d902:	106d      	asrs	r5, r5, #1
 800d904:	429d      	cmp	r5, r3
 800d906:	bf38      	it	cc
 800d908:	461d      	movcc	r5, r3
 800d90a:	0553      	lsls	r3, r2, #21
 800d90c:	d527      	bpl.n	800d95e <__ssputs_r+0x8e>
 800d90e:	4629      	mov	r1, r5
 800d910:	f7ff ff52 	bl	800d7b8 <_malloc_r>
 800d914:	4606      	mov	r6, r0
 800d916:	b360      	cbz	r0, 800d972 <__ssputs_r+0xa2>
 800d918:	6921      	ldr	r1, [r4, #16]
 800d91a:	464a      	mov	r2, r9
 800d91c:	f7ff fed2 	bl	800d6c4 <memcpy>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	6126      	str	r6, [r4, #16]
 800d92e:	6165      	str	r5, [r4, #20]
 800d930:	444e      	add	r6, r9
 800d932:	eba5 0509 	sub.w	r5, r5, r9
 800d936:	6026      	str	r6, [r4, #0]
 800d938:	60a5      	str	r5, [r4, #8]
 800d93a:	463e      	mov	r6, r7
 800d93c:	42be      	cmp	r6, r7
 800d93e:	d900      	bls.n	800d942 <__ssputs_r+0x72>
 800d940:	463e      	mov	r6, r7
 800d942:	6820      	ldr	r0, [r4, #0]
 800d944:	4632      	mov	r2, r6
 800d946:	4641      	mov	r1, r8
 800d948:	f000 faa6 	bl	800de98 <memmove>
 800d94c:	68a3      	ldr	r3, [r4, #8]
 800d94e:	1b9b      	subs	r3, r3, r6
 800d950:	60a3      	str	r3, [r4, #8]
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	4433      	add	r3, r6
 800d956:	6023      	str	r3, [r4, #0]
 800d958:	2000      	movs	r0, #0
 800d95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d95e:	462a      	mov	r2, r5
 800d960:	f000 fac4 	bl	800deec <_realloc_r>
 800d964:	4606      	mov	r6, r0
 800d966:	2800      	cmp	r0, #0
 800d968:	d1e0      	bne.n	800d92c <__ssputs_r+0x5c>
 800d96a:	6921      	ldr	r1, [r4, #16]
 800d96c:	4650      	mov	r0, sl
 800d96e:	f7ff feb7 	bl	800d6e0 <_free_r>
 800d972:	230c      	movs	r3, #12
 800d974:	f8ca 3000 	str.w	r3, [sl]
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d97e:	81a3      	strh	r3, [r4, #12]
 800d980:	f04f 30ff 	mov.w	r0, #4294967295
 800d984:	e7e9      	b.n	800d95a <__ssputs_r+0x8a>
	...

0800d988 <_svfiprintf_r>:
 800d988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	4698      	mov	r8, r3
 800d98e:	898b      	ldrh	r3, [r1, #12]
 800d990:	061b      	lsls	r3, r3, #24
 800d992:	b09d      	sub	sp, #116	@ 0x74
 800d994:	4607      	mov	r7, r0
 800d996:	460d      	mov	r5, r1
 800d998:	4614      	mov	r4, r2
 800d99a:	d510      	bpl.n	800d9be <_svfiprintf_r+0x36>
 800d99c:	690b      	ldr	r3, [r1, #16]
 800d99e:	b973      	cbnz	r3, 800d9be <_svfiprintf_r+0x36>
 800d9a0:	2140      	movs	r1, #64	@ 0x40
 800d9a2:	f7ff ff09 	bl	800d7b8 <_malloc_r>
 800d9a6:	6028      	str	r0, [r5, #0]
 800d9a8:	6128      	str	r0, [r5, #16]
 800d9aa:	b930      	cbnz	r0, 800d9ba <_svfiprintf_r+0x32>
 800d9ac:	230c      	movs	r3, #12
 800d9ae:	603b      	str	r3, [r7, #0]
 800d9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b4:	b01d      	add	sp, #116	@ 0x74
 800d9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ba:	2340      	movs	r3, #64	@ 0x40
 800d9bc:	616b      	str	r3, [r5, #20]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9c2:	2320      	movs	r3, #32
 800d9c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9cc:	2330      	movs	r3, #48	@ 0x30
 800d9ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db6c <_svfiprintf_r+0x1e4>
 800d9d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9d6:	f04f 0901 	mov.w	r9, #1
 800d9da:	4623      	mov	r3, r4
 800d9dc:	469a      	mov	sl, r3
 800d9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9e2:	b10a      	cbz	r2, 800d9e8 <_svfiprintf_r+0x60>
 800d9e4:	2a25      	cmp	r2, #37	@ 0x25
 800d9e6:	d1f9      	bne.n	800d9dc <_svfiprintf_r+0x54>
 800d9e8:	ebba 0b04 	subs.w	fp, sl, r4
 800d9ec:	d00b      	beq.n	800da06 <_svfiprintf_r+0x7e>
 800d9ee:	465b      	mov	r3, fp
 800d9f0:	4622      	mov	r2, r4
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	f7ff ff6b 	bl	800d8d0 <__ssputs_r>
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	f000 80a7 	beq.w	800db4e <_svfiprintf_r+0x1c6>
 800da00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da02:	445a      	add	r2, fp
 800da04:	9209      	str	r2, [sp, #36]	@ 0x24
 800da06:	f89a 3000 	ldrb.w	r3, [sl]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 809f 	beq.w	800db4e <_svfiprintf_r+0x1c6>
 800da10:	2300      	movs	r3, #0
 800da12:	f04f 32ff 	mov.w	r2, #4294967295
 800da16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da1a:	f10a 0a01 	add.w	sl, sl, #1
 800da1e:	9304      	str	r3, [sp, #16]
 800da20:	9307      	str	r3, [sp, #28]
 800da22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da26:	931a      	str	r3, [sp, #104]	@ 0x68
 800da28:	4654      	mov	r4, sl
 800da2a:	2205      	movs	r2, #5
 800da2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da30:	484e      	ldr	r0, [pc, #312]	@ (800db6c <_svfiprintf_r+0x1e4>)
 800da32:	f7f2 fbf5 	bl	8000220 <memchr>
 800da36:	9a04      	ldr	r2, [sp, #16]
 800da38:	b9d8      	cbnz	r0, 800da72 <_svfiprintf_r+0xea>
 800da3a:	06d0      	lsls	r0, r2, #27
 800da3c:	bf44      	itt	mi
 800da3e:	2320      	movmi	r3, #32
 800da40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da44:	0711      	lsls	r1, r2, #28
 800da46:	bf44      	itt	mi
 800da48:	232b      	movmi	r3, #43	@ 0x2b
 800da4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da4e:	f89a 3000 	ldrb.w	r3, [sl]
 800da52:	2b2a      	cmp	r3, #42	@ 0x2a
 800da54:	d015      	beq.n	800da82 <_svfiprintf_r+0xfa>
 800da56:	9a07      	ldr	r2, [sp, #28]
 800da58:	4654      	mov	r4, sl
 800da5a:	2000      	movs	r0, #0
 800da5c:	f04f 0c0a 	mov.w	ip, #10
 800da60:	4621      	mov	r1, r4
 800da62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da66:	3b30      	subs	r3, #48	@ 0x30
 800da68:	2b09      	cmp	r3, #9
 800da6a:	d94b      	bls.n	800db04 <_svfiprintf_r+0x17c>
 800da6c:	b1b0      	cbz	r0, 800da9c <_svfiprintf_r+0x114>
 800da6e:	9207      	str	r2, [sp, #28]
 800da70:	e014      	b.n	800da9c <_svfiprintf_r+0x114>
 800da72:	eba0 0308 	sub.w	r3, r0, r8
 800da76:	fa09 f303 	lsl.w	r3, r9, r3
 800da7a:	4313      	orrs	r3, r2
 800da7c:	9304      	str	r3, [sp, #16]
 800da7e:	46a2      	mov	sl, r4
 800da80:	e7d2      	b.n	800da28 <_svfiprintf_r+0xa0>
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	1d19      	adds	r1, r3, #4
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	9103      	str	r1, [sp, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bfbb      	ittet	lt
 800da8e:	425b      	neglt	r3, r3
 800da90:	f042 0202 	orrlt.w	r2, r2, #2
 800da94:	9307      	strge	r3, [sp, #28]
 800da96:	9307      	strlt	r3, [sp, #28]
 800da98:	bfb8      	it	lt
 800da9a:	9204      	strlt	r2, [sp, #16]
 800da9c:	7823      	ldrb	r3, [r4, #0]
 800da9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800daa0:	d10a      	bne.n	800dab8 <_svfiprintf_r+0x130>
 800daa2:	7863      	ldrb	r3, [r4, #1]
 800daa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800daa6:	d132      	bne.n	800db0e <_svfiprintf_r+0x186>
 800daa8:	9b03      	ldr	r3, [sp, #12]
 800daaa:	1d1a      	adds	r2, r3, #4
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	9203      	str	r2, [sp, #12]
 800dab0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dab4:	3402      	adds	r4, #2
 800dab6:	9305      	str	r3, [sp, #20]
 800dab8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db7c <_svfiprintf_r+0x1f4>
 800dabc:	7821      	ldrb	r1, [r4, #0]
 800dabe:	2203      	movs	r2, #3
 800dac0:	4650      	mov	r0, sl
 800dac2:	f7f2 fbad 	bl	8000220 <memchr>
 800dac6:	b138      	cbz	r0, 800dad8 <_svfiprintf_r+0x150>
 800dac8:	9b04      	ldr	r3, [sp, #16]
 800daca:	eba0 000a 	sub.w	r0, r0, sl
 800dace:	2240      	movs	r2, #64	@ 0x40
 800dad0:	4082      	lsls	r2, r0
 800dad2:	4313      	orrs	r3, r2
 800dad4:	3401      	adds	r4, #1
 800dad6:	9304      	str	r3, [sp, #16]
 800dad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dadc:	4824      	ldr	r0, [pc, #144]	@ (800db70 <_svfiprintf_r+0x1e8>)
 800dade:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dae2:	2206      	movs	r2, #6
 800dae4:	f7f2 fb9c 	bl	8000220 <memchr>
 800dae8:	2800      	cmp	r0, #0
 800daea:	d036      	beq.n	800db5a <_svfiprintf_r+0x1d2>
 800daec:	4b21      	ldr	r3, [pc, #132]	@ (800db74 <_svfiprintf_r+0x1ec>)
 800daee:	bb1b      	cbnz	r3, 800db38 <_svfiprintf_r+0x1b0>
 800daf0:	9b03      	ldr	r3, [sp, #12]
 800daf2:	3307      	adds	r3, #7
 800daf4:	f023 0307 	bic.w	r3, r3, #7
 800daf8:	3308      	adds	r3, #8
 800dafa:	9303      	str	r3, [sp, #12]
 800dafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dafe:	4433      	add	r3, r6
 800db00:	9309      	str	r3, [sp, #36]	@ 0x24
 800db02:	e76a      	b.n	800d9da <_svfiprintf_r+0x52>
 800db04:	fb0c 3202 	mla	r2, ip, r2, r3
 800db08:	460c      	mov	r4, r1
 800db0a:	2001      	movs	r0, #1
 800db0c:	e7a8      	b.n	800da60 <_svfiprintf_r+0xd8>
 800db0e:	2300      	movs	r3, #0
 800db10:	3401      	adds	r4, #1
 800db12:	9305      	str	r3, [sp, #20]
 800db14:	4619      	mov	r1, r3
 800db16:	f04f 0c0a 	mov.w	ip, #10
 800db1a:	4620      	mov	r0, r4
 800db1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db20:	3a30      	subs	r2, #48	@ 0x30
 800db22:	2a09      	cmp	r2, #9
 800db24:	d903      	bls.n	800db2e <_svfiprintf_r+0x1a6>
 800db26:	2b00      	cmp	r3, #0
 800db28:	d0c6      	beq.n	800dab8 <_svfiprintf_r+0x130>
 800db2a:	9105      	str	r1, [sp, #20]
 800db2c:	e7c4      	b.n	800dab8 <_svfiprintf_r+0x130>
 800db2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800db32:	4604      	mov	r4, r0
 800db34:	2301      	movs	r3, #1
 800db36:	e7f0      	b.n	800db1a <_svfiprintf_r+0x192>
 800db38:	ab03      	add	r3, sp, #12
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	462a      	mov	r2, r5
 800db3e:	4b0e      	ldr	r3, [pc, #56]	@ (800db78 <_svfiprintf_r+0x1f0>)
 800db40:	a904      	add	r1, sp, #16
 800db42:	4638      	mov	r0, r7
 800db44:	f3af 8000 	nop.w
 800db48:	1c42      	adds	r2, r0, #1
 800db4a:	4606      	mov	r6, r0
 800db4c:	d1d6      	bne.n	800dafc <_svfiprintf_r+0x174>
 800db4e:	89ab      	ldrh	r3, [r5, #12]
 800db50:	065b      	lsls	r3, r3, #25
 800db52:	f53f af2d 	bmi.w	800d9b0 <_svfiprintf_r+0x28>
 800db56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db58:	e72c      	b.n	800d9b4 <_svfiprintf_r+0x2c>
 800db5a:	ab03      	add	r3, sp, #12
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	462a      	mov	r2, r5
 800db60:	4b05      	ldr	r3, [pc, #20]	@ (800db78 <_svfiprintf_r+0x1f0>)
 800db62:	a904      	add	r1, sp, #16
 800db64:	4638      	mov	r0, r7
 800db66:	f000 f879 	bl	800dc5c <_printf_i>
 800db6a:	e7ed      	b.n	800db48 <_svfiprintf_r+0x1c0>
 800db6c:	0800e2dc 	.word	0x0800e2dc
 800db70:	0800e2e6 	.word	0x0800e2e6
 800db74:	00000000 	.word	0x00000000
 800db78:	0800d8d1 	.word	0x0800d8d1
 800db7c:	0800e2e2 	.word	0x0800e2e2

0800db80 <_printf_common>:
 800db80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db84:	4616      	mov	r6, r2
 800db86:	4698      	mov	r8, r3
 800db88:	688a      	ldr	r2, [r1, #8]
 800db8a:	690b      	ldr	r3, [r1, #16]
 800db8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db90:	4293      	cmp	r3, r2
 800db92:	bfb8      	it	lt
 800db94:	4613      	movlt	r3, r2
 800db96:	6033      	str	r3, [r6, #0]
 800db98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db9c:	4607      	mov	r7, r0
 800db9e:	460c      	mov	r4, r1
 800dba0:	b10a      	cbz	r2, 800dba6 <_printf_common+0x26>
 800dba2:	3301      	adds	r3, #1
 800dba4:	6033      	str	r3, [r6, #0]
 800dba6:	6823      	ldr	r3, [r4, #0]
 800dba8:	0699      	lsls	r1, r3, #26
 800dbaa:	bf42      	ittt	mi
 800dbac:	6833      	ldrmi	r3, [r6, #0]
 800dbae:	3302      	addmi	r3, #2
 800dbb0:	6033      	strmi	r3, [r6, #0]
 800dbb2:	6825      	ldr	r5, [r4, #0]
 800dbb4:	f015 0506 	ands.w	r5, r5, #6
 800dbb8:	d106      	bne.n	800dbc8 <_printf_common+0x48>
 800dbba:	f104 0a19 	add.w	sl, r4, #25
 800dbbe:	68e3      	ldr	r3, [r4, #12]
 800dbc0:	6832      	ldr	r2, [r6, #0]
 800dbc2:	1a9b      	subs	r3, r3, r2
 800dbc4:	42ab      	cmp	r3, r5
 800dbc6:	dc26      	bgt.n	800dc16 <_printf_common+0x96>
 800dbc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dbcc:	6822      	ldr	r2, [r4, #0]
 800dbce:	3b00      	subs	r3, #0
 800dbd0:	bf18      	it	ne
 800dbd2:	2301      	movne	r3, #1
 800dbd4:	0692      	lsls	r2, r2, #26
 800dbd6:	d42b      	bmi.n	800dc30 <_printf_common+0xb0>
 800dbd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dbdc:	4641      	mov	r1, r8
 800dbde:	4638      	mov	r0, r7
 800dbe0:	47c8      	blx	r9
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	d01e      	beq.n	800dc24 <_printf_common+0xa4>
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	6922      	ldr	r2, [r4, #16]
 800dbea:	f003 0306 	and.w	r3, r3, #6
 800dbee:	2b04      	cmp	r3, #4
 800dbf0:	bf02      	ittt	eq
 800dbf2:	68e5      	ldreq	r5, [r4, #12]
 800dbf4:	6833      	ldreq	r3, [r6, #0]
 800dbf6:	1aed      	subeq	r5, r5, r3
 800dbf8:	68a3      	ldr	r3, [r4, #8]
 800dbfa:	bf0c      	ite	eq
 800dbfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc00:	2500      	movne	r5, #0
 800dc02:	4293      	cmp	r3, r2
 800dc04:	bfc4      	itt	gt
 800dc06:	1a9b      	subgt	r3, r3, r2
 800dc08:	18ed      	addgt	r5, r5, r3
 800dc0a:	2600      	movs	r6, #0
 800dc0c:	341a      	adds	r4, #26
 800dc0e:	42b5      	cmp	r5, r6
 800dc10:	d11a      	bne.n	800dc48 <_printf_common+0xc8>
 800dc12:	2000      	movs	r0, #0
 800dc14:	e008      	b.n	800dc28 <_printf_common+0xa8>
 800dc16:	2301      	movs	r3, #1
 800dc18:	4652      	mov	r2, sl
 800dc1a:	4641      	mov	r1, r8
 800dc1c:	4638      	mov	r0, r7
 800dc1e:	47c8      	blx	r9
 800dc20:	3001      	adds	r0, #1
 800dc22:	d103      	bne.n	800dc2c <_printf_common+0xac>
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295
 800dc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2c:	3501      	adds	r5, #1
 800dc2e:	e7c6      	b.n	800dbbe <_printf_common+0x3e>
 800dc30:	18e1      	adds	r1, r4, r3
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	2030      	movs	r0, #48	@ 0x30
 800dc36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc3a:	4422      	add	r2, r4
 800dc3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc44:	3302      	adds	r3, #2
 800dc46:	e7c7      	b.n	800dbd8 <_printf_common+0x58>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	4641      	mov	r1, r8
 800dc4e:	4638      	mov	r0, r7
 800dc50:	47c8      	blx	r9
 800dc52:	3001      	adds	r0, #1
 800dc54:	d0e6      	beq.n	800dc24 <_printf_common+0xa4>
 800dc56:	3601      	adds	r6, #1
 800dc58:	e7d9      	b.n	800dc0e <_printf_common+0x8e>
	...

0800dc5c <_printf_i>:
 800dc5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc60:	7e0f      	ldrb	r7, [r1, #24]
 800dc62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc64:	2f78      	cmp	r7, #120	@ 0x78
 800dc66:	4691      	mov	r9, r2
 800dc68:	4680      	mov	r8, r0
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	469a      	mov	sl, r3
 800dc6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc72:	d807      	bhi.n	800dc84 <_printf_i+0x28>
 800dc74:	2f62      	cmp	r7, #98	@ 0x62
 800dc76:	d80a      	bhi.n	800dc8e <_printf_i+0x32>
 800dc78:	2f00      	cmp	r7, #0
 800dc7a:	f000 80d1 	beq.w	800de20 <_printf_i+0x1c4>
 800dc7e:	2f58      	cmp	r7, #88	@ 0x58
 800dc80:	f000 80b8 	beq.w	800ddf4 <_printf_i+0x198>
 800dc84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc8c:	e03a      	b.n	800dd04 <_printf_i+0xa8>
 800dc8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc92:	2b15      	cmp	r3, #21
 800dc94:	d8f6      	bhi.n	800dc84 <_printf_i+0x28>
 800dc96:	a101      	add	r1, pc, #4	@ (adr r1, 800dc9c <_printf_i+0x40>)
 800dc98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc9c:	0800dcf5 	.word	0x0800dcf5
 800dca0:	0800dd09 	.word	0x0800dd09
 800dca4:	0800dc85 	.word	0x0800dc85
 800dca8:	0800dc85 	.word	0x0800dc85
 800dcac:	0800dc85 	.word	0x0800dc85
 800dcb0:	0800dc85 	.word	0x0800dc85
 800dcb4:	0800dd09 	.word	0x0800dd09
 800dcb8:	0800dc85 	.word	0x0800dc85
 800dcbc:	0800dc85 	.word	0x0800dc85
 800dcc0:	0800dc85 	.word	0x0800dc85
 800dcc4:	0800dc85 	.word	0x0800dc85
 800dcc8:	0800de07 	.word	0x0800de07
 800dccc:	0800dd33 	.word	0x0800dd33
 800dcd0:	0800ddc1 	.word	0x0800ddc1
 800dcd4:	0800dc85 	.word	0x0800dc85
 800dcd8:	0800dc85 	.word	0x0800dc85
 800dcdc:	0800de29 	.word	0x0800de29
 800dce0:	0800dc85 	.word	0x0800dc85
 800dce4:	0800dd33 	.word	0x0800dd33
 800dce8:	0800dc85 	.word	0x0800dc85
 800dcec:	0800dc85 	.word	0x0800dc85
 800dcf0:	0800ddc9 	.word	0x0800ddc9
 800dcf4:	6833      	ldr	r3, [r6, #0]
 800dcf6:	1d1a      	adds	r2, r3, #4
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6032      	str	r2, [r6, #0]
 800dcfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd04:	2301      	movs	r3, #1
 800dd06:	e09c      	b.n	800de42 <_printf_i+0x1e6>
 800dd08:	6833      	ldr	r3, [r6, #0]
 800dd0a:	6820      	ldr	r0, [r4, #0]
 800dd0c:	1d19      	adds	r1, r3, #4
 800dd0e:	6031      	str	r1, [r6, #0]
 800dd10:	0606      	lsls	r6, r0, #24
 800dd12:	d501      	bpl.n	800dd18 <_printf_i+0xbc>
 800dd14:	681d      	ldr	r5, [r3, #0]
 800dd16:	e003      	b.n	800dd20 <_printf_i+0xc4>
 800dd18:	0645      	lsls	r5, r0, #25
 800dd1a:	d5fb      	bpl.n	800dd14 <_printf_i+0xb8>
 800dd1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd20:	2d00      	cmp	r5, #0
 800dd22:	da03      	bge.n	800dd2c <_printf_i+0xd0>
 800dd24:	232d      	movs	r3, #45	@ 0x2d
 800dd26:	426d      	negs	r5, r5
 800dd28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd2c:	4858      	ldr	r0, [pc, #352]	@ (800de90 <_printf_i+0x234>)
 800dd2e:	230a      	movs	r3, #10
 800dd30:	e011      	b.n	800dd56 <_printf_i+0xfa>
 800dd32:	6821      	ldr	r1, [r4, #0]
 800dd34:	6833      	ldr	r3, [r6, #0]
 800dd36:	0608      	lsls	r0, r1, #24
 800dd38:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd3c:	d402      	bmi.n	800dd44 <_printf_i+0xe8>
 800dd3e:	0649      	lsls	r1, r1, #25
 800dd40:	bf48      	it	mi
 800dd42:	b2ad      	uxthmi	r5, r5
 800dd44:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd46:	4852      	ldr	r0, [pc, #328]	@ (800de90 <_printf_i+0x234>)
 800dd48:	6033      	str	r3, [r6, #0]
 800dd4a:	bf14      	ite	ne
 800dd4c:	230a      	movne	r3, #10
 800dd4e:	2308      	moveq	r3, #8
 800dd50:	2100      	movs	r1, #0
 800dd52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd56:	6866      	ldr	r6, [r4, #4]
 800dd58:	60a6      	str	r6, [r4, #8]
 800dd5a:	2e00      	cmp	r6, #0
 800dd5c:	db05      	blt.n	800dd6a <_printf_i+0x10e>
 800dd5e:	6821      	ldr	r1, [r4, #0]
 800dd60:	432e      	orrs	r6, r5
 800dd62:	f021 0104 	bic.w	r1, r1, #4
 800dd66:	6021      	str	r1, [r4, #0]
 800dd68:	d04b      	beq.n	800de02 <_printf_i+0x1a6>
 800dd6a:	4616      	mov	r6, r2
 800dd6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd70:	fb03 5711 	mls	r7, r3, r1, r5
 800dd74:	5dc7      	ldrb	r7, [r0, r7]
 800dd76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd7a:	462f      	mov	r7, r5
 800dd7c:	42bb      	cmp	r3, r7
 800dd7e:	460d      	mov	r5, r1
 800dd80:	d9f4      	bls.n	800dd6c <_printf_i+0x110>
 800dd82:	2b08      	cmp	r3, #8
 800dd84:	d10b      	bne.n	800dd9e <_printf_i+0x142>
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	07df      	lsls	r7, r3, #31
 800dd8a:	d508      	bpl.n	800dd9e <_printf_i+0x142>
 800dd8c:	6923      	ldr	r3, [r4, #16]
 800dd8e:	6861      	ldr	r1, [r4, #4]
 800dd90:	4299      	cmp	r1, r3
 800dd92:	bfde      	ittt	le
 800dd94:	2330      	movle	r3, #48	@ 0x30
 800dd96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd9e:	1b92      	subs	r2, r2, r6
 800dda0:	6122      	str	r2, [r4, #16]
 800dda2:	f8cd a000 	str.w	sl, [sp]
 800dda6:	464b      	mov	r3, r9
 800dda8:	aa03      	add	r2, sp, #12
 800ddaa:	4621      	mov	r1, r4
 800ddac:	4640      	mov	r0, r8
 800ddae:	f7ff fee7 	bl	800db80 <_printf_common>
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	d14a      	bne.n	800de4c <_printf_i+0x1f0>
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddba:	b004      	add	sp, #16
 800ddbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	f043 0320 	orr.w	r3, r3, #32
 800ddc6:	6023      	str	r3, [r4, #0]
 800ddc8:	4832      	ldr	r0, [pc, #200]	@ (800de94 <_printf_i+0x238>)
 800ddca:	2778      	movs	r7, #120	@ 0x78
 800ddcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	6831      	ldr	r1, [r6, #0]
 800ddd4:	061f      	lsls	r7, r3, #24
 800ddd6:	f851 5b04 	ldr.w	r5, [r1], #4
 800ddda:	d402      	bmi.n	800dde2 <_printf_i+0x186>
 800dddc:	065f      	lsls	r7, r3, #25
 800ddde:	bf48      	it	mi
 800dde0:	b2ad      	uxthmi	r5, r5
 800dde2:	6031      	str	r1, [r6, #0]
 800dde4:	07d9      	lsls	r1, r3, #31
 800dde6:	bf44      	itt	mi
 800dde8:	f043 0320 	orrmi.w	r3, r3, #32
 800ddec:	6023      	strmi	r3, [r4, #0]
 800ddee:	b11d      	cbz	r5, 800ddf8 <_printf_i+0x19c>
 800ddf0:	2310      	movs	r3, #16
 800ddf2:	e7ad      	b.n	800dd50 <_printf_i+0xf4>
 800ddf4:	4826      	ldr	r0, [pc, #152]	@ (800de90 <_printf_i+0x234>)
 800ddf6:	e7e9      	b.n	800ddcc <_printf_i+0x170>
 800ddf8:	6823      	ldr	r3, [r4, #0]
 800ddfa:	f023 0320 	bic.w	r3, r3, #32
 800ddfe:	6023      	str	r3, [r4, #0]
 800de00:	e7f6      	b.n	800ddf0 <_printf_i+0x194>
 800de02:	4616      	mov	r6, r2
 800de04:	e7bd      	b.n	800dd82 <_printf_i+0x126>
 800de06:	6833      	ldr	r3, [r6, #0]
 800de08:	6825      	ldr	r5, [r4, #0]
 800de0a:	6961      	ldr	r1, [r4, #20]
 800de0c:	1d18      	adds	r0, r3, #4
 800de0e:	6030      	str	r0, [r6, #0]
 800de10:	062e      	lsls	r6, r5, #24
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	d501      	bpl.n	800de1a <_printf_i+0x1be>
 800de16:	6019      	str	r1, [r3, #0]
 800de18:	e002      	b.n	800de20 <_printf_i+0x1c4>
 800de1a:	0668      	lsls	r0, r5, #25
 800de1c:	d5fb      	bpl.n	800de16 <_printf_i+0x1ba>
 800de1e:	8019      	strh	r1, [r3, #0]
 800de20:	2300      	movs	r3, #0
 800de22:	6123      	str	r3, [r4, #16]
 800de24:	4616      	mov	r6, r2
 800de26:	e7bc      	b.n	800dda2 <_printf_i+0x146>
 800de28:	6833      	ldr	r3, [r6, #0]
 800de2a:	1d1a      	adds	r2, r3, #4
 800de2c:	6032      	str	r2, [r6, #0]
 800de2e:	681e      	ldr	r6, [r3, #0]
 800de30:	6862      	ldr	r2, [r4, #4]
 800de32:	2100      	movs	r1, #0
 800de34:	4630      	mov	r0, r6
 800de36:	f7f2 f9f3 	bl	8000220 <memchr>
 800de3a:	b108      	cbz	r0, 800de40 <_printf_i+0x1e4>
 800de3c:	1b80      	subs	r0, r0, r6
 800de3e:	6060      	str	r0, [r4, #4]
 800de40:	6863      	ldr	r3, [r4, #4]
 800de42:	6123      	str	r3, [r4, #16]
 800de44:	2300      	movs	r3, #0
 800de46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de4a:	e7aa      	b.n	800dda2 <_printf_i+0x146>
 800de4c:	6923      	ldr	r3, [r4, #16]
 800de4e:	4632      	mov	r2, r6
 800de50:	4649      	mov	r1, r9
 800de52:	4640      	mov	r0, r8
 800de54:	47d0      	blx	sl
 800de56:	3001      	adds	r0, #1
 800de58:	d0ad      	beq.n	800ddb6 <_printf_i+0x15a>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	079b      	lsls	r3, r3, #30
 800de5e:	d413      	bmi.n	800de88 <_printf_i+0x22c>
 800de60:	68e0      	ldr	r0, [r4, #12]
 800de62:	9b03      	ldr	r3, [sp, #12]
 800de64:	4298      	cmp	r0, r3
 800de66:	bfb8      	it	lt
 800de68:	4618      	movlt	r0, r3
 800de6a:	e7a6      	b.n	800ddba <_printf_i+0x15e>
 800de6c:	2301      	movs	r3, #1
 800de6e:	4632      	mov	r2, r6
 800de70:	4649      	mov	r1, r9
 800de72:	4640      	mov	r0, r8
 800de74:	47d0      	blx	sl
 800de76:	3001      	adds	r0, #1
 800de78:	d09d      	beq.n	800ddb6 <_printf_i+0x15a>
 800de7a:	3501      	adds	r5, #1
 800de7c:	68e3      	ldr	r3, [r4, #12]
 800de7e:	9903      	ldr	r1, [sp, #12]
 800de80:	1a5b      	subs	r3, r3, r1
 800de82:	42ab      	cmp	r3, r5
 800de84:	dcf2      	bgt.n	800de6c <_printf_i+0x210>
 800de86:	e7eb      	b.n	800de60 <_printf_i+0x204>
 800de88:	2500      	movs	r5, #0
 800de8a:	f104 0619 	add.w	r6, r4, #25
 800de8e:	e7f5      	b.n	800de7c <_printf_i+0x220>
 800de90:	0800e2ed 	.word	0x0800e2ed
 800de94:	0800e2fe 	.word	0x0800e2fe

0800de98 <memmove>:
 800de98:	4288      	cmp	r0, r1
 800de9a:	b510      	push	{r4, lr}
 800de9c:	eb01 0402 	add.w	r4, r1, r2
 800dea0:	d902      	bls.n	800dea8 <memmove+0x10>
 800dea2:	4284      	cmp	r4, r0
 800dea4:	4623      	mov	r3, r4
 800dea6:	d807      	bhi.n	800deb8 <memmove+0x20>
 800dea8:	1e43      	subs	r3, r0, #1
 800deaa:	42a1      	cmp	r1, r4
 800deac:	d008      	beq.n	800dec0 <memmove+0x28>
 800deae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800deb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deb6:	e7f8      	b.n	800deaa <memmove+0x12>
 800deb8:	4402      	add	r2, r0
 800deba:	4601      	mov	r1, r0
 800debc:	428a      	cmp	r2, r1
 800debe:	d100      	bne.n	800dec2 <memmove+0x2a>
 800dec0:	bd10      	pop	{r4, pc}
 800dec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800deca:	e7f7      	b.n	800debc <memmove+0x24>

0800decc <_sbrk_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4d06      	ldr	r5, [pc, #24]	@ (800dee8 <_sbrk_r+0x1c>)
 800ded0:	2300      	movs	r3, #0
 800ded2:	4604      	mov	r4, r0
 800ded4:	4608      	mov	r0, r1
 800ded6:	602b      	str	r3, [r5, #0]
 800ded8:	f7f3 fa76 	bl	80013c8 <_sbrk>
 800dedc:	1c43      	adds	r3, r0, #1
 800dede:	d102      	bne.n	800dee6 <_sbrk_r+0x1a>
 800dee0:	682b      	ldr	r3, [r5, #0]
 800dee2:	b103      	cbz	r3, 800dee6 <_sbrk_r+0x1a>
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	bd38      	pop	{r3, r4, r5, pc}
 800dee8:	20007658 	.word	0x20007658

0800deec <_realloc_r>:
 800deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def0:	4607      	mov	r7, r0
 800def2:	4614      	mov	r4, r2
 800def4:	460d      	mov	r5, r1
 800def6:	b921      	cbnz	r1, 800df02 <_realloc_r+0x16>
 800def8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800defc:	4611      	mov	r1, r2
 800defe:	f7ff bc5b 	b.w	800d7b8 <_malloc_r>
 800df02:	b92a      	cbnz	r2, 800df10 <_realloc_r+0x24>
 800df04:	f7ff fbec 	bl	800d6e0 <_free_r>
 800df08:	4625      	mov	r5, r4
 800df0a:	4628      	mov	r0, r5
 800df0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df10:	f000 f81a 	bl	800df48 <_malloc_usable_size_r>
 800df14:	4284      	cmp	r4, r0
 800df16:	4606      	mov	r6, r0
 800df18:	d802      	bhi.n	800df20 <_realloc_r+0x34>
 800df1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df1e:	d8f4      	bhi.n	800df0a <_realloc_r+0x1e>
 800df20:	4621      	mov	r1, r4
 800df22:	4638      	mov	r0, r7
 800df24:	f7ff fc48 	bl	800d7b8 <_malloc_r>
 800df28:	4680      	mov	r8, r0
 800df2a:	b908      	cbnz	r0, 800df30 <_realloc_r+0x44>
 800df2c:	4645      	mov	r5, r8
 800df2e:	e7ec      	b.n	800df0a <_realloc_r+0x1e>
 800df30:	42b4      	cmp	r4, r6
 800df32:	4622      	mov	r2, r4
 800df34:	4629      	mov	r1, r5
 800df36:	bf28      	it	cs
 800df38:	4632      	movcs	r2, r6
 800df3a:	f7ff fbc3 	bl	800d6c4 <memcpy>
 800df3e:	4629      	mov	r1, r5
 800df40:	4638      	mov	r0, r7
 800df42:	f7ff fbcd 	bl	800d6e0 <_free_r>
 800df46:	e7f1      	b.n	800df2c <_realloc_r+0x40>

0800df48 <_malloc_usable_size_r>:
 800df48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df4c:	1f18      	subs	r0, r3, #4
 800df4e:	2b00      	cmp	r3, #0
 800df50:	bfbc      	itt	lt
 800df52:	580b      	ldrlt	r3, [r1, r0]
 800df54:	18c0      	addlt	r0, r0, r3
 800df56:	4770      	bx	lr

0800df58 <_init>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	bf00      	nop
 800df5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df5e:	bc08      	pop	{r3}
 800df60:	469e      	mov	lr, r3
 800df62:	4770      	bx	lr

0800df64 <_fini>:
 800df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df66:	bf00      	nop
 800df68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df6a:	bc08      	pop	{r3}
 800df6c:	469e      	mov	lr, r3
 800df6e:	4770      	bx	lr
=======
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddf2:	79fb      	ldrb	r3, [r7, #7]
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d817      	bhi.n	800de28 <USBD_Get_USB_Status+0x44>
 800ddf8:	a201      	add	r2, pc, #4	@ (adr r2, 800de00 <USBD_Get_USB_Status+0x1c>)
 800ddfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfe:	bf00      	nop
 800de00:	0800de11 	.word	0x0800de11
 800de04:	0800de17 	.word	0x0800de17
 800de08:	0800de1d 	.word	0x0800de1d
 800de0c:	0800de23 	.word	0x0800de23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	73fb      	strb	r3, [r7, #15]
    break;
 800de14:	e00b      	b.n	800de2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de16:	2303      	movs	r3, #3
 800de18:	73fb      	strb	r3, [r7, #15]
    break;
 800de1a:	e008      	b.n	800de2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de1c:	2301      	movs	r3, #1
 800de1e:	73fb      	strb	r3, [r7, #15]
    break;
 800de20:	e005      	b.n	800de2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de22:	2303      	movs	r3, #3
 800de24:	73fb      	strb	r3, [r7, #15]
    break;
 800de26:	e002      	b.n	800de2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de28:	2303      	movs	r3, #3
 800de2a:	73fb      	strb	r3, [r7, #15]
    break;
 800de2c:	bf00      	nop
  }
  return usb_status;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <siprintf>:
 800de3c:	b40e      	push	{r1, r2, r3}
 800de3e:	b510      	push	{r4, lr}
 800de40:	b09d      	sub	sp, #116	@ 0x74
 800de42:	ab1f      	add	r3, sp, #124	@ 0x7c
 800de44:	9002      	str	r0, [sp, #8]
 800de46:	9006      	str	r0, [sp, #24]
 800de48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de4c:	480a      	ldr	r0, [pc, #40]	@ (800de78 <siprintf+0x3c>)
 800de4e:	9107      	str	r1, [sp, #28]
 800de50:	9104      	str	r1, [sp, #16]
 800de52:	490a      	ldr	r1, [pc, #40]	@ (800de7c <siprintf+0x40>)
 800de54:	f853 2b04 	ldr.w	r2, [r3], #4
 800de58:	9105      	str	r1, [sp, #20]
 800de5a:	2400      	movs	r4, #0
 800de5c:	a902      	add	r1, sp, #8
 800de5e:	6800      	ldr	r0, [r0, #0]
 800de60:	9301      	str	r3, [sp, #4]
 800de62:	941b      	str	r4, [sp, #108]	@ 0x6c
 800de64:	f000 fa20 	bl	800e2a8 <_svfiprintf_r>
 800de68:	9b02      	ldr	r3, [sp, #8]
 800de6a:	701c      	strb	r4, [r3, #0]
 800de6c:	b01d      	add	sp, #116	@ 0x74
 800de6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de72:	b003      	add	sp, #12
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	20000188 	.word	0x20000188
 800de7c:	ffff0208 	.word	0xffff0208

0800de80 <_vsiprintf_r>:
 800de80:	b510      	push	{r4, lr}
 800de82:	b09a      	sub	sp, #104	@ 0x68
 800de84:	2400      	movs	r4, #0
 800de86:	9100      	str	r1, [sp, #0]
 800de88:	9104      	str	r1, [sp, #16]
 800de8a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de8e:	9105      	str	r1, [sp, #20]
 800de90:	9102      	str	r1, [sp, #8]
 800de92:	4905      	ldr	r1, [pc, #20]	@ (800dea8 <_vsiprintf_r+0x28>)
 800de94:	9103      	str	r1, [sp, #12]
 800de96:	4669      	mov	r1, sp
 800de98:	9419      	str	r4, [sp, #100]	@ 0x64
 800de9a:	f000 fa05 	bl	800e2a8 <_svfiprintf_r>
 800de9e:	9b00      	ldr	r3, [sp, #0]
 800dea0:	701c      	strb	r4, [r3, #0]
 800dea2:	b01a      	add	sp, #104	@ 0x68
 800dea4:	bd10      	pop	{r4, pc}
 800dea6:	bf00      	nop
 800dea8:	ffff0208 	.word	0xffff0208

0800deac <vsiprintf>:
 800deac:	4613      	mov	r3, r2
 800deae:	460a      	mov	r2, r1
 800deb0:	4601      	mov	r1, r0
 800deb2:	4802      	ldr	r0, [pc, #8]	@ (800debc <vsiprintf+0x10>)
 800deb4:	6800      	ldr	r0, [r0, #0]
 800deb6:	f7ff bfe3 	b.w	800de80 <_vsiprintf_r>
 800deba:	bf00      	nop
 800debc:	20000188 	.word	0x20000188

0800dec0 <memset>:
 800dec0:	4402      	add	r2, r0
 800dec2:	4603      	mov	r3, r0
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d100      	bne.n	800deca <memset+0xa>
 800dec8:	4770      	bx	lr
 800deca:	f803 1b01 	strb.w	r1, [r3], #1
 800dece:	e7f9      	b.n	800dec4 <memset+0x4>

0800ded0 <_reclaim_reent>:
 800ded0:	4b2d      	ldr	r3, [pc, #180]	@ (800df88 <_reclaim_reent+0xb8>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4283      	cmp	r3, r0
 800ded6:	b570      	push	{r4, r5, r6, lr}
 800ded8:	4604      	mov	r4, r0
 800deda:	d053      	beq.n	800df84 <_reclaim_reent+0xb4>
 800dedc:	69c3      	ldr	r3, [r0, #28]
 800dede:	b31b      	cbz	r3, 800df28 <_reclaim_reent+0x58>
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	b163      	cbz	r3, 800defe <_reclaim_reent+0x2e>
 800dee4:	2500      	movs	r5, #0
 800dee6:	69e3      	ldr	r3, [r4, #28]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	5959      	ldr	r1, [r3, r5]
 800deec:	b9b1      	cbnz	r1, 800df1c <_reclaim_reent+0x4c>
 800deee:	3504      	adds	r5, #4
 800def0:	2d80      	cmp	r5, #128	@ 0x80
 800def2:	d1f8      	bne.n	800dee6 <_reclaim_reent+0x16>
 800def4:	69e3      	ldr	r3, [r4, #28]
 800def6:	4620      	mov	r0, r4
 800def8:	68d9      	ldr	r1, [r3, #12]
 800defa:	f000 f881 	bl	800e000 <_free_r>
 800defe:	69e3      	ldr	r3, [r4, #28]
 800df00:	6819      	ldr	r1, [r3, #0]
 800df02:	b111      	cbz	r1, 800df0a <_reclaim_reent+0x3a>
 800df04:	4620      	mov	r0, r4
 800df06:	f000 f87b 	bl	800e000 <_free_r>
 800df0a:	69e3      	ldr	r3, [r4, #28]
 800df0c:	689d      	ldr	r5, [r3, #8]
 800df0e:	b15d      	cbz	r5, 800df28 <_reclaim_reent+0x58>
 800df10:	4629      	mov	r1, r5
 800df12:	4620      	mov	r0, r4
 800df14:	682d      	ldr	r5, [r5, #0]
 800df16:	f000 f873 	bl	800e000 <_free_r>
 800df1a:	e7f8      	b.n	800df0e <_reclaim_reent+0x3e>
 800df1c:	680e      	ldr	r6, [r1, #0]
 800df1e:	4620      	mov	r0, r4
 800df20:	f000 f86e 	bl	800e000 <_free_r>
 800df24:	4631      	mov	r1, r6
 800df26:	e7e1      	b.n	800deec <_reclaim_reent+0x1c>
 800df28:	6961      	ldr	r1, [r4, #20]
 800df2a:	b111      	cbz	r1, 800df32 <_reclaim_reent+0x62>
 800df2c:	4620      	mov	r0, r4
 800df2e:	f000 f867 	bl	800e000 <_free_r>
 800df32:	69e1      	ldr	r1, [r4, #28]
 800df34:	b111      	cbz	r1, 800df3c <_reclaim_reent+0x6c>
 800df36:	4620      	mov	r0, r4
 800df38:	f000 f862 	bl	800e000 <_free_r>
 800df3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800df3e:	b111      	cbz	r1, 800df46 <_reclaim_reent+0x76>
 800df40:	4620      	mov	r0, r4
 800df42:	f000 f85d 	bl	800e000 <_free_r>
 800df46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df48:	b111      	cbz	r1, 800df50 <_reclaim_reent+0x80>
 800df4a:	4620      	mov	r0, r4
 800df4c:	f000 f858 	bl	800e000 <_free_r>
 800df50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800df52:	b111      	cbz	r1, 800df5a <_reclaim_reent+0x8a>
 800df54:	4620      	mov	r0, r4
 800df56:	f000 f853 	bl	800e000 <_free_r>
 800df5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800df5c:	b111      	cbz	r1, 800df64 <_reclaim_reent+0x94>
 800df5e:	4620      	mov	r0, r4
 800df60:	f000 f84e 	bl	800e000 <_free_r>
 800df64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800df66:	b111      	cbz	r1, 800df6e <_reclaim_reent+0x9e>
 800df68:	4620      	mov	r0, r4
 800df6a:	f000 f849 	bl	800e000 <_free_r>
 800df6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800df70:	b111      	cbz	r1, 800df78 <_reclaim_reent+0xa8>
 800df72:	4620      	mov	r0, r4
 800df74:	f000 f844 	bl	800e000 <_free_r>
 800df78:	6a23      	ldr	r3, [r4, #32]
 800df7a:	b11b      	cbz	r3, 800df84 <_reclaim_reent+0xb4>
 800df7c:	4620      	mov	r0, r4
 800df7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df82:	4718      	bx	r3
 800df84:	bd70      	pop	{r4, r5, r6, pc}
 800df86:	bf00      	nop
 800df88:	20000188 	.word	0x20000188

0800df8c <__errno>:
 800df8c:	4b01      	ldr	r3, [pc, #4]	@ (800df94 <__errno+0x8>)
 800df8e:	6818      	ldr	r0, [r3, #0]
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	20000188 	.word	0x20000188

0800df98 <__libc_init_array>:
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	4d0d      	ldr	r5, [pc, #52]	@ (800dfd0 <__libc_init_array+0x38>)
 800df9c:	4c0d      	ldr	r4, [pc, #52]	@ (800dfd4 <__libc_init_array+0x3c>)
 800df9e:	1b64      	subs	r4, r4, r5
 800dfa0:	10a4      	asrs	r4, r4, #2
 800dfa2:	2600      	movs	r6, #0
 800dfa4:	42a6      	cmp	r6, r4
 800dfa6:	d109      	bne.n	800dfbc <__libc_init_array+0x24>
 800dfa8:	4d0b      	ldr	r5, [pc, #44]	@ (800dfd8 <__libc_init_array+0x40>)
 800dfaa:	4c0c      	ldr	r4, [pc, #48]	@ (800dfdc <__libc_init_array+0x44>)
 800dfac:	f000 fc64 	bl	800e878 <_init>
 800dfb0:	1b64      	subs	r4, r4, r5
 800dfb2:	10a4      	asrs	r4, r4, #2
 800dfb4:	2600      	movs	r6, #0
 800dfb6:	42a6      	cmp	r6, r4
 800dfb8:	d105      	bne.n	800dfc6 <__libc_init_array+0x2e>
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfc0:	4798      	blx	r3
 800dfc2:	3601      	adds	r6, #1
 800dfc4:	e7ee      	b.n	800dfa4 <__libc_init_array+0xc>
 800dfc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfca:	4798      	blx	r3
 800dfcc:	3601      	adds	r6, #1
 800dfce:	e7f2      	b.n	800dfb6 <__libc_init_array+0x1e>
 800dfd0:	0800ed18 	.word	0x0800ed18
 800dfd4:	0800ed18 	.word	0x0800ed18
 800dfd8:	0800ed18 	.word	0x0800ed18
 800dfdc:	0800ed1c 	.word	0x0800ed1c

0800dfe0 <__retarget_lock_acquire_recursive>:
 800dfe0:	4770      	bx	lr

0800dfe2 <__retarget_lock_release_recursive>:
 800dfe2:	4770      	bx	lr

0800dfe4 <memcpy>:
 800dfe4:	440a      	add	r2, r1
 800dfe6:	4291      	cmp	r1, r2
 800dfe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfec:	d100      	bne.n	800dff0 <memcpy+0xc>
 800dfee:	4770      	bx	lr
 800dff0:	b510      	push	{r4, lr}
 800dff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dffa:	4291      	cmp	r1, r2
 800dffc:	d1f9      	bne.n	800dff2 <memcpy+0xe>
 800dffe:	bd10      	pop	{r4, pc}

0800e000 <_free_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4605      	mov	r5, r0
 800e004:	2900      	cmp	r1, #0
 800e006:	d041      	beq.n	800e08c <_free_r+0x8c>
 800e008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e00c:	1f0c      	subs	r4, r1, #4
 800e00e:	2b00      	cmp	r3, #0
 800e010:	bfb8      	it	lt
 800e012:	18e4      	addlt	r4, r4, r3
 800e014:	f000 f8e0 	bl	800e1d8 <__malloc_lock>
 800e018:	4a1d      	ldr	r2, [pc, #116]	@ (800e090 <_free_r+0x90>)
 800e01a:	6813      	ldr	r3, [r2, #0]
 800e01c:	b933      	cbnz	r3, 800e02c <_free_r+0x2c>
 800e01e:	6063      	str	r3, [r4, #4]
 800e020:	6014      	str	r4, [r2, #0]
 800e022:	4628      	mov	r0, r5
 800e024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e028:	f000 b8dc 	b.w	800e1e4 <__malloc_unlock>
 800e02c:	42a3      	cmp	r3, r4
 800e02e:	d908      	bls.n	800e042 <_free_r+0x42>
 800e030:	6820      	ldr	r0, [r4, #0]
 800e032:	1821      	adds	r1, r4, r0
 800e034:	428b      	cmp	r3, r1
 800e036:	bf01      	itttt	eq
 800e038:	6819      	ldreq	r1, [r3, #0]
 800e03a:	685b      	ldreq	r3, [r3, #4]
 800e03c:	1809      	addeq	r1, r1, r0
 800e03e:	6021      	streq	r1, [r4, #0]
 800e040:	e7ed      	b.n	800e01e <_free_r+0x1e>
 800e042:	461a      	mov	r2, r3
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	b10b      	cbz	r3, 800e04c <_free_r+0x4c>
 800e048:	42a3      	cmp	r3, r4
 800e04a:	d9fa      	bls.n	800e042 <_free_r+0x42>
 800e04c:	6811      	ldr	r1, [r2, #0]
 800e04e:	1850      	adds	r0, r2, r1
 800e050:	42a0      	cmp	r0, r4
 800e052:	d10b      	bne.n	800e06c <_free_r+0x6c>
 800e054:	6820      	ldr	r0, [r4, #0]
 800e056:	4401      	add	r1, r0
 800e058:	1850      	adds	r0, r2, r1
 800e05a:	4283      	cmp	r3, r0
 800e05c:	6011      	str	r1, [r2, #0]
 800e05e:	d1e0      	bne.n	800e022 <_free_r+0x22>
 800e060:	6818      	ldr	r0, [r3, #0]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	6053      	str	r3, [r2, #4]
 800e066:	4408      	add	r0, r1
 800e068:	6010      	str	r0, [r2, #0]
 800e06a:	e7da      	b.n	800e022 <_free_r+0x22>
 800e06c:	d902      	bls.n	800e074 <_free_r+0x74>
 800e06e:	230c      	movs	r3, #12
 800e070:	602b      	str	r3, [r5, #0]
 800e072:	e7d6      	b.n	800e022 <_free_r+0x22>
 800e074:	6820      	ldr	r0, [r4, #0]
 800e076:	1821      	adds	r1, r4, r0
 800e078:	428b      	cmp	r3, r1
 800e07a:	bf04      	itt	eq
 800e07c:	6819      	ldreq	r1, [r3, #0]
 800e07e:	685b      	ldreq	r3, [r3, #4]
 800e080:	6063      	str	r3, [r4, #4]
 800e082:	bf04      	itt	eq
 800e084:	1809      	addeq	r1, r1, r0
 800e086:	6021      	streq	r1, [r4, #0]
 800e088:	6054      	str	r4, [r2, #4]
 800e08a:	e7ca      	b.n	800e022 <_free_r+0x22>
 800e08c:	bd38      	pop	{r3, r4, r5, pc}
 800e08e:	bf00      	nop
 800e090:	2000a558 	.word	0x2000a558

0800e094 <sbrk_aligned>:
 800e094:	b570      	push	{r4, r5, r6, lr}
 800e096:	4e0f      	ldr	r6, [pc, #60]	@ (800e0d4 <sbrk_aligned+0x40>)
 800e098:	460c      	mov	r4, r1
 800e09a:	6831      	ldr	r1, [r6, #0]
 800e09c:	4605      	mov	r5, r0
 800e09e:	b911      	cbnz	r1, 800e0a6 <sbrk_aligned+0x12>
 800e0a0:	f000 fba4 	bl	800e7ec <_sbrk_r>
 800e0a4:	6030      	str	r0, [r6, #0]
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f000 fb9f 	bl	800e7ec <_sbrk_r>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	d103      	bne.n	800e0ba <sbrk_aligned+0x26>
 800e0b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ba:	1cc4      	adds	r4, r0, #3
 800e0bc:	f024 0403 	bic.w	r4, r4, #3
 800e0c0:	42a0      	cmp	r0, r4
 800e0c2:	d0f8      	beq.n	800e0b6 <sbrk_aligned+0x22>
 800e0c4:	1a21      	subs	r1, r4, r0
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f000 fb90 	bl	800e7ec <_sbrk_r>
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	d1f2      	bne.n	800e0b6 <sbrk_aligned+0x22>
 800e0d0:	e7ef      	b.n	800e0b2 <sbrk_aligned+0x1e>
 800e0d2:	bf00      	nop
 800e0d4:	2000a554 	.word	0x2000a554

0800e0d8 <_malloc_r>:
 800e0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0dc:	1ccd      	adds	r5, r1, #3
 800e0de:	f025 0503 	bic.w	r5, r5, #3
 800e0e2:	3508      	adds	r5, #8
 800e0e4:	2d0c      	cmp	r5, #12
 800e0e6:	bf38      	it	cc
 800e0e8:	250c      	movcc	r5, #12
 800e0ea:	2d00      	cmp	r5, #0
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	db01      	blt.n	800e0f4 <_malloc_r+0x1c>
 800e0f0:	42a9      	cmp	r1, r5
 800e0f2:	d904      	bls.n	800e0fe <_malloc_r+0x26>
 800e0f4:	230c      	movs	r3, #12
 800e0f6:	6033      	str	r3, [r6, #0]
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1d4 <_malloc_r+0xfc>
 800e102:	f000 f869 	bl	800e1d8 <__malloc_lock>
 800e106:	f8d8 3000 	ldr.w	r3, [r8]
 800e10a:	461c      	mov	r4, r3
 800e10c:	bb44      	cbnz	r4, 800e160 <_malloc_r+0x88>
 800e10e:	4629      	mov	r1, r5
 800e110:	4630      	mov	r0, r6
 800e112:	f7ff ffbf 	bl	800e094 <sbrk_aligned>
 800e116:	1c43      	adds	r3, r0, #1
 800e118:	4604      	mov	r4, r0
 800e11a:	d158      	bne.n	800e1ce <_malloc_r+0xf6>
 800e11c:	f8d8 4000 	ldr.w	r4, [r8]
 800e120:	4627      	mov	r7, r4
 800e122:	2f00      	cmp	r7, #0
 800e124:	d143      	bne.n	800e1ae <_malloc_r+0xd6>
 800e126:	2c00      	cmp	r4, #0
 800e128:	d04b      	beq.n	800e1c2 <_malloc_r+0xea>
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	4639      	mov	r1, r7
 800e12e:	4630      	mov	r0, r6
 800e130:	eb04 0903 	add.w	r9, r4, r3
 800e134:	f000 fb5a 	bl	800e7ec <_sbrk_r>
 800e138:	4581      	cmp	r9, r0
 800e13a:	d142      	bne.n	800e1c2 <_malloc_r+0xea>
 800e13c:	6821      	ldr	r1, [r4, #0]
 800e13e:	1a6d      	subs	r5, r5, r1
 800e140:	4629      	mov	r1, r5
 800e142:	4630      	mov	r0, r6
 800e144:	f7ff ffa6 	bl	800e094 <sbrk_aligned>
 800e148:	3001      	adds	r0, #1
 800e14a:	d03a      	beq.n	800e1c2 <_malloc_r+0xea>
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	442b      	add	r3, r5
 800e150:	6023      	str	r3, [r4, #0]
 800e152:	f8d8 3000 	ldr.w	r3, [r8]
 800e156:	685a      	ldr	r2, [r3, #4]
 800e158:	bb62      	cbnz	r2, 800e1b4 <_malloc_r+0xdc>
 800e15a:	f8c8 7000 	str.w	r7, [r8]
 800e15e:	e00f      	b.n	800e180 <_malloc_r+0xa8>
 800e160:	6822      	ldr	r2, [r4, #0]
 800e162:	1b52      	subs	r2, r2, r5
 800e164:	d420      	bmi.n	800e1a8 <_malloc_r+0xd0>
 800e166:	2a0b      	cmp	r2, #11
 800e168:	d917      	bls.n	800e19a <_malloc_r+0xc2>
 800e16a:	1961      	adds	r1, r4, r5
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	6025      	str	r5, [r4, #0]
 800e170:	bf18      	it	ne
 800e172:	6059      	strne	r1, [r3, #4]
 800e174:	6863      	ldr	r3, [r4, #4]
 800e176:	bf08      	it	eq
 800e178:	f8c8 1000 	streq.w	r1, [r8]
 800e17c:	5162      	str	r2, [r4, r5]
 800e17e:	604b      	str	r3, [r1, #4]
 800e180:	4630      	mov	r0, r6
 800e182:	f000 f82f 	bl	800e1e4 <__malloc_unlock>
 800e186:	f104 000b 	add.w	r0, r4, #11
 800e18a:	1d23      	adds	r3, r4, #4
 800e18c:	f020 0007 	bic.w	r0, r0, #7
 800e190:	1ac2      	subs	r2, r0, r3
 800e192:	bf1c      	itt	ne
 800e194:	1a1b      	subne	r3, r3, r0
 800e196:	50a3      	strne	r3, [r4, r2]
 800e198:	e7af      	b.n	800e0fa <_malloc_r+0x22>
 800e19a:	6862      	ldr	r2, [r4, #4]
 800e19c:	42a3      	cmp	r3, r4
 800e19e:	bf0c      	ite	eq
 800e1a0:	f8c8 2000 	streq.w	r2, [r8]
 800e1a4:	605a      	strne	r2, [r3, #4]
 800e1a6:	e7eb      	b.n	800e180 <_malloc_r+0xa8>
 800e1a8:	4623      	mov	r3, r4
 800e1aa:	6864      	ldr	r4, [r4, #4]
 800e1ac:	e7ae      	b.n	800e10c <_malloc_r+0x34>
 800e1ae:	463c      	mov	r4, r7
 800e1b0:	687f      	ldr	r7, [r7, #4]
 800e1b2:	e7b6      	b.n	800e122 <_malloc_r+0x4a>
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	d1fb      	bne.n	800e1b4 <_malloc_r+0xdc>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	6053      	str	r3, [r2, #4]
 800e1c0:	e7de      	b.n	800e180 <_malloc_r+0xa8>
 800e1c2:	230c      	movs	r3, #12
 800e1c4:	6033      	str	r3, [r6, #0]
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f000 f80c 	bl	800e1e4 <__malloc_unlock>
 800e1cc:	e794      	b.n	800e0f8 <_malloc_r+0x20>
 800e1ce:	6005      	str	r5, [r0, #0]
 800e1d0:	e7d6      	b.n	800e180 <_malloc_r+0xa8>
 800e1d2:	bf00      	nop
 800e1d4:	2000a558 	.word	0x2000a558

0800e1d8 <__malloc_lock>:
 800e1d8:	4801      	ldr	r0, [pc, #4]	@ (800e1e0 <__malloc_lock+0x8>)
 800e1da:	f7ff bf01 	b.w	800dfe0 <__retarget_lock_acquire_recursive>
 800e1de:	bf00      	nop
 800e1e0:	2000a550 	.word	0x2000a550

0800e1e4 <__malloc_unlock>:
 800e1e4:	4801      	ldr	r0, [pc, #4]	@ (800e1ec <__malloc_unlock+0x8>)
 800e1e6:	f7ff befc 	b.w	800dfe2 <__retarget_lock_release_recursive>
 800e1ea:	bf00      	nop
 800e1ec:	2000a550 	.word	0x2000a550

0800e1f0 <__ssputs_r>:
 800e1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1f4:	688e      	ldr	r6, [r1, #8]
 800e1f6:	461f      	mov	r7, r3
 800e1f8:	42be      	cmp	r6, r7
 800e1fa:	680b      	ldr	r3, [r1, #0]
 800e1fc:	4682      	mov	sl, r0
 800e1fe:	460c      	mov	r4, r1
 800e200:	4690      	mov	r8, r2
 800e202:	d82d      	bhi.n	800e260 <__ssputs_r+0x70>
 800e204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e208:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e20c:	d026      	beq.n	800e25c <__ssputs_r+0x6c>
 800e20e:	6965      	ldr	r5, [r4, #20]
 800e210:	6909      	ldr	r1, [r1, #16]
 800e212:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e216:	eba3 0901 	sub.w	r9, r3, r1
 800e21a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e21e:	1c7b      	adds	r3, r7, #1
 800e220:	444b      	add	r3, r9
 800e222:	106d      	asrs	r5, r5, #1
 800e224:	429d      	cmp	r5, r3
 800e226:	bf38      	it	cc
 800e228:	461d      	movcc	r5, r3
 800e22a:	0553      	lsls	r3, r2, #21
 800e22c:	d527      	bpl.n	800e27e <__ssputs_r+0x8e>
 800e22e:	4629      	mov	r1, r5
 800e230:	f7ff ff52 	bl	800e0d8 <_malloc_r>
 800e234:	4606      	mov	r6, r0
 800e236:	b360      	cbz	r0, 800e292 <__ssputs_r+0xa2>
 800e238:	6921      	ldr	r1, [r4, #16]
 800e23a:	464a      	mov	r2, r9
 800e23c:	f7ff fed2 	bl	800dfe4 <memcpy>
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e24a:	81a3      	strh	r3, [r4, #12]
 800e24c:	6126      	str	r6, [r4, #16]
 800e24e:	6165      	str	r5, [r4, #20]
 800e250:	444e      	add	r6, r9
 800e252:	eba5 0509 	sub.w	r5, r5, r9
 800e256:	6026      	str	r6, [r4, #0]
 800e258:	60a5      	str	r5, [r4, #8]
 800e25a:	463e      	mov	r6, r7
 800e25c:	42be      	cmp	r6, r7
 800e25e:	d900      	bls.n	800e262 <__ssputs_r+0x72>
 800e260:	463e      	mov	r6, r7
 800e262:	6820      	ldr	r0, [r4, #0]
 800e264:	4632      	mov	r2, r6
 800e266:	4641      	mov	r1, r8
 800e268:	f000 faa6 	bl	800e7b8 <memmove>
 800e26c:	68a3      	ldr	r3, [r4, #8]
 800e26e:	1b9b      	subs	r3, r3, r6
 800e270:	60a3      	str	r3, [r4, #8]
 800e272:	6823      	ldr	r3, [r4, #0]
 800e274:	4433      	add	r3, r6
 800e276:	6023      	str	r3, [r4, #0]
 800e278:	2000      	movs	r0, #0
 800e27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e27e:	462a      	mov	r2, r5
 800e280:	f000 fac4 	bl	800e80c <_realloc_r>
 800e284:	4606      	mov	r6, r0
 800e286:	2800      	cmp	r0, #0
 800e288:	d1e0      	bne.n	800e24c <__ssputs_r+0x5c>
 800e28a:	6921      	ldr	r1, [r4, #16]
 800e28c:	4650      	mov	r0, sl
 800e28e:	f7ff feb7 	bl	800e000 <_free_r>
 800e292:	230c      	movs	r3, #12
 800e294:	f8ca 3000 	str.w	r3, [sl]
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e29e:	81a3      	strh	r3, [r4, #12]
 800e2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a4:	e7e9      	b.n	800e27a <__ssputs_r+0x8a>
	...

0800e2a8 <_svfiprintf_r>:
 800e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	4698      	mov	r8, r3
 800e2ae:	898b      	ldrh	r3, [r1, #12]
 800e2b0:	061b      	lsls	r3, r3, #24
 800e2b2:	b09d      	sub	sp, #116	@ 0x74
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	d510      	bpl.n	800e2de <_svfiprintf_r+0x36>
 800e2bc:	690b      	ldr	r3, [r1, #16]
 800e2be:	b973      	cbnz	r3, 800e2de <_svfiprintf_r+0x36>
 800e2c0:	2140      	movs	r1, #64	@ 0x40
 800e2c2:	f7ff ff09 	bl	800e0d8 <_malloc_r>
 800e2c6:	6028      	str	r0, [r5, #0]
 800e2c8:	6128      	str	r0, [r5, #16]
 800e2ca:	b930      	cbnz	r0, 800e2da <_svfiprintf_r+0x32>
 800e2cc:	230c      	movs	r3, #12
 800e2ce:	603b      	str	r3, [r7, #0]
 800e2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d4:	b01d      	add	sp, #116	@ 0x74
 800e2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2da:	2340      	movs	r3, #64	@ 0x40
 800e2dc:	616b      	str	r3, [r5, #20]
 800e2de:	2300      	movs	r3, #0
 800e2e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e2:	2320      	movs	r3, #32
 800e2e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e2e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2ec:	2330      	movs	r3, #48	@ 0x30
 800e2ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e48c <_svfiprintf_r+0x1e4>
 800e2f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2f6:	f04f 0901 	mov.w	r9, #1
 800e2fa:	4623      	mov	r3, r4
 800e2fc:	469a      	mov	sl, r3
 800e2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e302:	b10a      	cbz	r2, 800e308 <_svfiprintf_r+0x60>
 800e304:	2a25      	cmp	r2, #37	@ 0x25
 800e306:	d1f9      	bne.n	800e2fc <_svfiprintf_r+0x54>
 800e308:	ebba 0b04 	subs.w	fp, sl, r4
 800e30c:	d00b      	beq.n	800e326 <_svfiprintf_r+0x7e>
 800e30e:	465b      	mov	r3, fp
 800e310:	4622      	mov	r2, r4
 800e312:	4629      	mov	r1, r5
 800e314:	4638      	mov	r0, r7
 800e316:	f7ff ff6b 	bl	800e1f0 <__ssputs_r>
 800e31a:	3001      	adds	r0, #1
 800e31c:	f000 80a7 	beq.w	800e46e <_svfiprintf_r+0x1c6>
 800e320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e322:	445a      	add	r2, fp
 800e324:	9209      	str	r2, [sp, #36]	@ 0x24
 800e326:	f89a 3000 	ldrb.w	r3, [sl]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 809f 	beq.w	800e46e <_svfiprintf_r+0x1c6>
 800e330:	2300      	movs	r3, #0
 800e332:	f04f 32ff 	mov.w	r2, #4294967295
 800e336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e33a:	f10a 0a01 	add.w	sl, sl, #1
 800e33e:	9304      	str	r3, [sp, #16]
 800e340:	9307      	str	r3, [sp, #28]
 800e342:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e346:	931a      	str	r3, [sp, #104]	@ 0x68
 800e348:	4654      	mov	r4, sl
 800e34a:	2205      	movs	r2, #5
 800e34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e350:	484e      	ldr	r0, [pc, #312]	@ (800e48c <_svfiprintf_r+0x1e4>)
 800e352:	f7f1 ff65 	bl	8000220 <memchr>
 800e356:	9a04      	ldr	r2, [sp, #16]
 800e358:	b9d8      	cbnz	r0, 800e392 <_svfiprintf_r+0xea>
 800e35a:	06d0      	lsls	r0, r2, #27
 800e35c:	bf44      	itt	mi
 800e35e:	2320      	movmi	r3, #32
 800e360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e364:	0711      	lsls	r1, r2, #28
 800e366:	bf44      	itt	mi
 800e368:	232b      	movmi	r3, #43	@ 0x2b
 800e36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e36e:	f89a 3000 	ldrb.w	r3, [sl]
 800e372:	2b2a      	cmp	r3, #42	@ 0x2a
 800e374:	d015      	beq.n	800e3a2 <_svfiprintf_r+0xfa>
 800e376:	9a07      	ldr	r2, [sp, #28]
 800e378:	4654      	mov	r4, sl
 800e37a:	2000      	movs	r0, #0
 800e37c:	f04f 0c0a 	mov.w	ip, #10
 800e380:	4621      	mov	r1, r4
 800e382:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e386:	3b30      	subs	r3, #48	@ 0x30
 800e388:	2b09      	cmp	r3, #9
 800e38a:	d94b      	bls.n	800e424 <_svfiprintf_r+0x17c>
 800e38c:	b1b0      	cbz	r0, 800e3bc <_svfiprintf_r+0x114>
 800e38e:	9207      	str	r2, [sp, #28]
 800e390:	e014      	b.n	800e3bc <_svfiprintf_r+0x114>
 800e392:	eba0 0308 	sub.w	r3, r0, r8
 800e396:	fa09 f303 	lsl.w	r3, r9, r3
 800e39a:	4313      	orrs	r3, r2
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	46a2      	mov	sl, r4
 800e3a0:	e7d2      	b.n	800e348 <_svfiprintf_r+0xa0>
 800e3a2:	9b03      	ldr	r3, [sp, #12]
 800e3a4:	1d19      	adds	r1, r3, #4
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	9103      	str	r1, [sp, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	bfbb      	ittet	lt
 800e3ae:	425b      	neglt	r3, r3
 800e3b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e3b4:	9307      	strge	r3, [sp, #28]
 800e3b6:	9307      	strlt	r3, [sp, #28]
 800e3b8:	bfb8      	it	lt
 800e3ba:	9204      	strlt	r2, [sp, #16]
 800e3bc:	7823      	ldrb	r3, [r4, #0]
 800e3be:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3c0:	d10a      	bne.n	800e3d8 <_svfiprintf_r+0x130>
 800e3c2:	7863      	ldrb	r3, [r4, #1]
 800e3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3c6:	d132      	bne.n	800e42e <_svfiprintf_r+0x186>
 800e3c8:	9b03      	ldr	r3, [sp, #12]
 800e3ca:	1d1a      	adds	r2, r3, #4
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	9203      	str	r2, [sp, #12]
 800e3d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3d4:	3402      	adds	r4, #2
 800e3d6:	9305      	str	r3, [sp, #20]
 800e3d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e49c <_svfiprintf_r+0x1f4>
 800e3dc:	7821      	ldrb	r1, [r4, #0]
 800e3de:	2203      	movs	r2, #3
 800e3e0:	4650      	mov	r0, sl
 800e3e2:	f7f1 ff1d 	bl	8000220 <memchr>
 800e3e6:	b138      	cbz	r0, 800e3f8 <_svfiprintf_r+0x150>
 800e3e8:	9b04      	ldr	r3, [sp, #16]
 800e3ea:	eba0 000a 	sub.w	r0, r0, sl
 800e3ee:	2240      	movs	r2, #64	@ 0x40
 800e3f0:	4082      	lsls	r2, r0
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	3401      	adds	r4, #1
 800e3f6:	9304      	str	r3, [sp, #16]
 800e3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fc:	4824      	ldr	r0, [pc, #144]	@ (800e490 <_svfiprintf_r+0x1e8>)
 800e3fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e402:	2206      	movs	r2, #6
 800e404:	f7f1 ff0c 	bl	8000220 <memchr>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d036      	beq.n	800e47a <_svfiprintf_r+0x1d2>
 800e40c:	4b21      	ldr	r3, [pc, #132]	@ (800e494 <_svfiprintf_r+0x1ec>)
 800e40e:	bb1b      	cbnz	r3, 800e458 <_svfiprintf_r+0x1b0>
 800e410:	9b03      	ldr	r3, [sp, #12]
 800e412:	3307      	adds	r3, #7
 800e414:	f023 0307 	bic.w	r3, r3, #7
 800e418:	3308      	adds	r3, #8
 800e41a:	9303      	str	r3, [sp, #12]
 800e41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e41e:	4433      	add	r3, r6
 800e420:	9309      	str	r3, [sp, #36]	@ 0x24
 800e422:	e76a      	b.n	800e2fa <_svfiprintf_r+0x52>
 800e424:	fb0c 3202 	mla	r2, ip, r2, r3
 800e428:	460c      	mov	r4, r1
 800e42a:	2001      	movs	r0, #1
 800e42c:	e7a8      	b.n	800e380 <_svfiprintf_r+0xd8>
 800e42e:	2300      	movs	r3, #0
 800e430:	3401      	adds	r4, #1
 800e432:	9305      	str	r3, [sp, #20]
 800e434:	4619      	mov	r1, r3
 800e436:	f04f 0c0a 	mov.w	ip, #10
 800e43a:	4620      	mov	r0, r4
 800e43c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e440:	3a30      	subs	r2, #48	@ 0x30
 800e442:	2a09      	cmp	r2, #9
 800e444:	d903      	bls.n	800e44e <_svfiprintf_r+0x1a6>
 800e446:	2b00      	cmp	r3, #0
 800e448:	d0c6      	beq.n	800e3d8 <_svfiprintf_r+0x130>
 800e44a:	9105      	str	r1, [sp, #20]
 800e44c:	e7c4      	b.n	800e3d8 <_svfiprintf_r+0x130>
 800e44e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e452:	4604      	mov	r4, r0
 800e454:	2301      	movs	r3, #1
 800e456:	e7f0      	b.n	800e43a <_svfiprintf_r+0x192>
 800e458:	ab03      	add	r3, sp, #12
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	462a      	mov	r2, r5
 800e45e:	4b0e      	ldr	r3, [pc, #56]	@ (800e498 <_svfiprintf_r+0x1f0>)
 800e460:	a904      	add	r1, sp, #16
 800e462:	4638      	mov	r0, r7
 800e464:	f3af 8000 	nop.w
 800e468:	1c42      	adds	r2, r0, #1
 800e46a:	4606      	mov	r6, r0
 800e46c:	d1d6      	bne.n	800e41c <_svfiprintf_r+0x174>
 800e46e:	89ab      	ldrh	r3, [r5, #12]
 800e470:	065b      	lsls	r3, r3, #25
 800e472:	f53f af2d 	bmi.w	800e2d0 <_svfiprintf_r+0x28>
 800e476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e478:	e72c      	b.n	800e2d4 <_svfiprintf_r+0x2c>
 800e47a:	ab03      	add	r3, sp, #12
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	462a      	mov	r2, r5
 800e480:	4b05      	ldr	r3, [pc, #20]	@ (800e498 <_svfiprintf_r+0x1f0>)
 800e482:	a904      	add	r1, sp, #16
 800e484:	4638      	mov	r0, r7
 800e486:	f000 f879 	bl	800e57c <_printf_i>
 800e48a:	e7ed      	b.n	800e468 <_svfiprintf_r+0x1c0>
 800e48c:	0800ecdc 	.word	0x0800ecdc
 800e490:	0800ece6 	.word	0x0800ece6
 800e494:	00000000 	.word	0x00000000
 800e498:	0800e1f1 	.word	0x0800e1f1
 800e49c:	0800ece2 	.word	0x0800ece2

0800e4a0 <_printf_common>:
 800e4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	4698      	mov	r8, r3
 800e4a8:	688a      	ldr	r2, [r1, #8]
 800e4aa:	690b      	ldr	r3, [r1, #16]
 800e4ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	bfb8      	it	lt
 800e4b4:	4613      	movlt	r3, r2
 800e4b6:	6033      	str	r3, [r6, #0]
 800e4b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4bc:	4607      	mov	r7, r0
 800e4be:	460c      	mov	r4, r1
 800e4c0:	b10a      	cbz	r2, 800e4c6 <_printf_common+0x26>
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	6033      	str	r3, [r6, #0]
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	0699      	lsls	r1, r3, #26
 800e4ca:	bf42      	ittt	mi
 800e4cc:	6833      	ldrmi	r3, [r6, #0]
 800e4ce:	3302      	addmi	r3, #2
 800e4d0:	6033      	strmi	r3, [r6, #0]
 800e4d2:	6825      	ldr	r5, [r4, #0]
 800e4d4:	f015 0506 	ands.w	r5, r5, #6
 800e4d8:	d106      	bne.n	800e4e8 <_printf_common+0x48>
 800e4da:	f104 0a19 	add.w	sl, r4, #25
 800e4de:	68e3      	ldr	r3, [r4, #12]
 800e4e0:	6832      	ldr	r2, [r6, #0]
 800e4e2:	1a9b      	subs	r3, r3, r2
 800e4e4:	42ab      	cmp	r3, r5
 800e4e6:	dc26      	bgt.n	800e536 <_printf_common+0x96>
 800e4e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e4ec:	6822      	ldr	r2, [r4, #0]
 800e4ee:	3b00      	subs	r3, #0
 800e4f0:	bf18      	it	ne
 800e4f2:	2301      	movne	r3, #1
 800e4f4:	0692      	lsls	r2, r2, #26
 800e4f6:	d42b      	bmi.n	800e550 <_printf_common+0xb0>
 800e4f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e4fc:	4641      	mov	r1, r8
 800e4fe:	4638      	mov	r0, r7
 800e500:	47c8      	blx	r9
 800e502:	3001      	adds	r0, #1
 800e504:	d01e      	beq.n	800e544 <_printf_common+0xa4>
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	6922      	ldr	r2, [r4, #16]
 800e50a:	f003 0306 	and.w	r3, r3, #6
 800e50e:	2b04      	cmp	r3, #4
 800e510:	bf02      	ittt	eq
 800e512:	68e5      	ldreq	r5, [r4, #12]
 800e514:	6833      	ldreq	r3, [r6, #0]
 800e516:	1aed      	subeq	r5, r5, r3
 800e518:	68a3      	ldr	r3, [r4, #8]
 800e51a:	bf0c      	ite	eq
 800e51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e520:	2500      	movne	r5, #0
 800e522:	4293      	cmp	r3, r2
 800e524:	bfc4      	itt	gt
 800e526:	1a9b      	subgt	r3, r3, r2
 800e528:	18ed      	addgt	r5, r5, r3
 800e52a:	2600      	movs	r6, #0
 800e52c:	341a      	adds	r4, #26
 800e52e:	42b5      	cmp	r5, r6
 800e530:	d11a      	bne.n	800e568 <_printf_common+0xc8>
 800e532:	2000      	movs	r0, #0
 800e534:	e008      	b.n	800e548 <_printf_common+0xa8>
 800e536:	2301      	movs	r3, #1
 800e538:	4652      	mov	r2, sl
 800e53a:	4641      	mov	r1, r8
 800e53c:	4638      	mov	r0, r7
 800e53e:	47c8      	blx	r9
 800e540:	3001      	adds	r0, #1
 800e542:	d103      	bne.n	800e54c <_printf_common+0xac>
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e54c:	3501      	adds	r5, #1
 800e54e:	e7c6      	b.n	800e4de <_printf_common+0x3e>
 800e550:	18e1      	adds	r1, r4, r3
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	2030      	movs	r0, #48	@ 0x30
 800e556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e55a:	4422      	add	r2, r4
 800e55c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e564:	3302      	adds	r3, #2
 800e566:	e7c7      	b.n	800e4f8 <_printf_common+0x58>
 800e568:	2301      	movs	r3, #1
 800e56a:	4622      	mov	r2, r4
 800e56c:	4641      	mov	r1, r8
 800e56e:	4638      	mov	r0, r7
 800e570:	47c8      	blx	r9
 800e572:	3001      	adds	r0, #1
 800e574:	d0e6      	beq.n	800e544 <_printf_common+0xa4>
 800e576:	3601      	adds	r6, #1
 800e578:	e7d9      	b.n	800e52e <_printf_common+0x8e>
	...

0800e57c <_printf_i>:
 800e57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e580:	7e0f      	ldrb	r7, [r1, #24]
 800e582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e584:	2f78      	cmp	r7, #120	@ 0x78
 800e586:	4691      	mov	r9, r2
 800e588:	4680      	mov	r8, r0
 800e58a:	460c      	mov	r4, r1
 800e58c:	469a      	mov	sl, r3
 800e58e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e592:	d807      	bhi.n	800e5a4 <_printf_i+0x28>
 800e594:	2f62      	cmp	r7, #98	@ 0x62
 800e596:	d80a      	bhi.n	800e5ae <_printf_i+0x32>
 800e598:	2f00      	cmp	r7, #0
 800e59a:	f000 80d1 	beq.w	800e740 <_printf_i+0x1c4>
 800e59e:	2f58      	cmp	r7, #88	@ 0x58
 800e5a0:	f000 80b8 	beq.w	800e714 <_printf_i+0x198>
 800e5a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5ac:	e03a      	b.n	800e624 <_printf_i+0xa8>
 800e5ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5b2:	2b15      	cmp	r3, #21
 800e5b4:	d8f6      	bhi.n	800e5a4 <_printf_i+0x28>
 800e5b6:	a101      	add	r1, pc, #4	@ (adr r1, 800e5bc <_printf_i+0x40>)
 800e5b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5bc:	0800e615 	.word	0x0800e615
 800e5c0:	0800e629 	.word	0x0800e629
 800e5c4:	0800e5a5 	.word	0x0800e5a5
 800e5c8:	0800e5a5 	.word	0x0800e5a5
 800e5cc:	0800e5a5 	.word	0x0800e5a5
 800e5d0:	0800e5a5 	.word	0x0800e5a5
 800e5d4:	0800e629 	.word	0x0800e629
 800e5d8:	0800e5a5 	.word	0x0800e5a5
 800e5dc:	0800e5a5 	.word	0x0800e5a5
 800e5e0:	0800e5a5 	.word	0x0800e5a5
 800e5e4:	0800e5a5 	.word	0x0800e5a5
 800e5e8:	0800e727 	.word	0x0800e727
 800e5ec:	0800e653 	.word	0x0800e653
 800e5f0:	0800e6e1 	.word	0x0800e6e1
 800e5f4:	0800e5a5 	.word	0x0800e5a5
 800e5f8:	0800e5a5 	.word	0x0800e5a5
 800e5fc:	0800e749 	.word	0x0800e749
 800e600:	0800e5a5 	.word	0x0800e5a5
 800e604:	0800e653 	.word	0x0800e653
 800e608:	0800e5a5 	.word	0x0800e5a5
 800e60c:	0800e5a5 	.word	0x0800e5a5
 800e610:	0800e6e9 	.word	0x0800e6e9
 800e614:	6833      	ldr	r3, [r6, #0]
 800e616:	1d1a      	adds	r2, r3, #4
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	6032      	str	r2, [r6, #0]
 800e61c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e624:	2301      	movs	r3, #1
 800e626:	e09c      	b.n	800e762 <_printf_i+0x1e6>
 800e628:	6833      	ldr	r3, [r6, #0]
 800e62a:	6820      	ldr	r0, [r4, #0]
 800e62c:	1d19      	adds	r1, r3, #4
 800e62e:	6031      	str	r1, [r6, #0]
 800e630:	0606      	lsls	r6, r0, #24
 800e632:	d501      	bpl.n	800e638 <_printf_i+0xbc>
 800e634:	681d      	ldr	r5, [r3, #0]
 800e636:	e003      	b.n	800e640 <_printf_i+0xc4>
 800e638:	0645      	lsls	r5, r0, #25
 800e63a:	d5fb      	bpl.n	800e634 <_printf_i+0xb8>
 800e63c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e640:	2d00      	cmp	r5, #0
 800e642:	da03      	bge.n	800e64c <_printf_i+0xd0>
 800e644:	232d      	movs	r3, #45	@ 0x2d
 800e646:	426d      	negs	r5, r5
 800e648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e64c:	4858      	ldr	r0, [pc, #352]	@ (800e7b0 <_printf_i+0x234>)
 800e64e:	230a      	movs	r3, #10
 800e650:	e011      	b.n	800e676 <_printf_i+0xfa>
 800e652:	6821      	ldr	r1, [r4, #0]
 800e654:	6833      	ldr	r3, [r6, #0]
 800e656:	0608      	lsls	r0, r1, #24
 800e658:	f853 5b04 	ldr.w	r5, [r3], #4
 800e65c:	d402      	bmi.n	800e664 <_printf_i+0xe8>
 800e65e:	0649      	lsls	r1, r1, #25
 800e660:	bf48      	it	mi
 800e662:	b2ad      	uxthmi	r5, r5
 800e664:	2f6f      	cmp	r7, #111	@ 0x6f
 800e666:	4852      	ldr	r0, [pc, #328]	@ (800e7b0 <_printf_i+0x234>)
 800e668:	6033      	str	r3, [r6, #0]
 800e66a:	bf14      	ite	ne
 800e66c:	230a      	movne	r3, #10
 800e66e:	2308      	moveq	r3, #8
 800e670:	2100      	movs	r1, #0
 800e672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e676:	6866      	ldr	r6, [r4, #4]
 800e678:	60a6      	str	r6, [r4, #8]
 800e67a:	2e00      	cmp	r6, #0
 800e67c:	db05      	blt.n	800e68a <_printf_i+0x10e>
 800e67e:	6821      	ldr	r1, [r4, #0]
 800e680:	432e      	orrs	r6, r5
 800e682:	f021 0104 	bic.w	r1, r1, #4
 800e686:	6021      	str	r1, [r4, #0]
 800e688:	d04b      	beq.n	800e722 <_printf_i+0x1a6>
 800e68a:	4616      	mov	r6, r2
 800e68c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e690:	fb03 5711 	mls	r7, r3, r1, r5
 800e694:	5dc7      	ldrb	r7, [r0, r7]
 800e696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e69a:	462f      	mov	r7, r5
 800e69c:	42bb      	cmp	r3, r7
 800e69e:	460d      	mov	r5, r1
 800e6a0:	d9f4      	bls.n	800e68c <_printf_i+0x110>
 800e6a2:	2b08      	cmp	r3, #8
 800e6a4:	d10b      	bne.n	800e6be <_printf_i+0x142>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	07df      	lsls	r7, r3, #31
 800e6aa:	d508      	bpl.n	800e6be <_printf_i+0x142>
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	6861      	ldr	r1, [r4, #4]
 800e6b0:	4299      	cmp	r1, r3
 800e6b2:	bfde      	ittt	le
 800e6b4:	2330      	movle	r3, #48	@ 0x30
 800e6b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6be:	1b92      	subs	r2, r2, r6
 800e6c0:	6122      	str	r2, [r4, #16]
 800e6c2:	f8cd a000 	str.w	sl, [sp]
 800e6c6:	464b      	mov	r3, r9
 800e6c8:	aa03      	add	r2, sp, #12
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	f7ff fee7 	bl	800e4a0 <_printf_common>
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d14a      	bne.n	800e76c <_printf_i+0x1f0>
 800e6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6da:	b004      	add	sp, #16
 800e6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e0:	6823      	ldr	r3, [r4, #0]
 800e6e2:	f043 0320 	orr.w	r3, r3, #32
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	4832      	ldr	r0, [pc, #200]	@ (800e7b4 <_printf_i+0x238>)
 800e6ea:	2778      	movs	r7, #120	@ 0x78
 800e6ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e6f0:	6823      	ldr	r3, [r4, #0]
 800e6f2:	6831      	ldr	r1, [r6, #0]
 800e6f4:	061f      	lsls	r7, r3, #24
 800e6f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e6fa:	d402      	bmi.n	800e702 <_printf_i+0x186>
 800e6fc:	065f      	lsls	r7, r3, #25
 800e6fe:	bf48      	it	mi
 800e700:	b2ad      	uxthmi	r5, r5
 800e702:	6031      	str	r1, [r6, #0]
 800e704:	07d9      	lsls	r1, r3, #31
 800e706:	bf44      	itt	mi
 800e708:	f043 0320 	orrmi.w	r3, r3, #32
 800e70c:	6023      	strmi	r3, [r4, #0]
 800e70e:	b11d      	cbz	r5, 800e718 <_printf_i+0x19c>
 800e710:	2310      	movs	r3, #16
 800e712:	e7ad      	b.n	800e670 <_printf_i+0xf4>
 800e714:	4826      	ldr	r0, [pc, #152]	@ (800e7b0 <_printf_i+0x234>)
 800e716:	e7e9      	b.n	800e6ec <_printf_i+0x170>
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	f023 0320 	bic.w	r3, r3, #32
 800e71e:	6023      	str	r3, [r4, #0]
 800e720:	e7f6      	b.n	800e710 <_printf_i+0x194>
 800e722:	4616      	mov	r6, r2
 800e724:	e7bd      	b.n	800e6a2 <_printf_i+0x126>
 800e726:	6833      	ldr	r3, [r6, #0]
 800e728:	6825      	ldr	r5, [r4, #0]
 800e72a:	6961      	ldr	r1, [r4, #20]
 800e72c:	1d18      	adds	r0, r3, #4
 800e72e:	6030      	str	r0, [r6, #0]
 800e730:	062e      	lsls	r6, r5, #24
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	d501      	bpl.n	800e73a <_printf_i+0x1be>
 800e736:	6019      	str	r1, [r3, #0]
 800e738:	e002      	b.n	800e740 <_printf_i+0x1c4>
 800e73a:	0668      	lsls	r0, r5, #25
 800e73c:	d5fb      	bpl.n	800e736 <_printf_i+0x1ba>
 800e73e:	8019      	strh	r1, [r3, #0]
 800e740:	2300      	movs	r3, #0
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	4616      	mov	r6, r2
 800e746:	e7bc      	b.n	800e6c2 <_printf_i+0x146>
 800e748:	6833      	ldr	r3, [r6, #0]
 800e74a:	1d1a      	adds	r2, r3, #4
 800e74c:	6032      	str	r2, [r6, #0]
 800e74e:	681e      	ldr	r6, [r3, #0]
 800e750:	6862      	ldr	r2, [r4, #4]
 800e752:	2100      	movs	r1, #0
 800e754:	4630      	mov	r0, r6
 800e756:	f7f1 fd63 	bl	8000220 <memchr>
 800e75a:	b108      	cbz	r0, 800e760 <_printf_i+0x1e4>
 800e75c:	1b80      	subs	r0, r0, r6
 800e75e:	6060      	str	r0, [r4, #4]
 800e760:	6863      	ldr	r3, [r4, #4]
 800e762:	6123      	str	r3, [r4, #16]
 800e764:	2300      	movs	r3, #0
 800e766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e76a:	e7aa      	b.n	800e6c2 <_printf_i+0x146>
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	4632      	mov	r2, r6
 800e770:	4649      	mov	r1, r9
 800e772:	4640      	mov	r0, r8
 800e774:	47d0      	blx	sl
 800e776:	3001      	adds	r0, #1
 800e778:	d0ad      	beq.n	800e6d6 <_printf_i+0x15a>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	079b      	lsls	r3, r3, #30
 800e77e:	d413      	bmi.n	800e7a8 <_printf_i+0x22c>
 800e780:	68e0      	ldr	r0, [r4, #12]
 800e782:	9b03      	ldr	r3, [sp, #12]
 800e784:	4298      	cmp	r0, r3
 800e786:	bfb8      	it	lt
 800e788:	4618      	movlt	r0, r3
 800e78a:	e7a6      	b.n	800e6da <_printf_i+0x15e>
 800e78c:	2301      	movs	r3, #1
 800e78e:	4632      	mov	r2, r6
 800e790:	4649      	mov	r1, r9
 800e792:	4640      	mov	r0, r8
 800e794:	47d0      	blx	sl
 800e796:	3001      	adds	r0, #1
 800e798:	d09d      	beq.n	800e6d6 <_printf_i+0x15a>
 800e79a:	3501      	adds	r5, #1
 800e79c:	68e3      	ldr	r3, [r4, #12]
 800e79e:	9903      	ldr	r1, [sp, #12]
 800e7a0:	1a5b      	subs	r3, r3, r1
 800e7a2:	42ab      	cmp	r3, r5
 800e7a4:	dcf2      	bgt.n	800e78c <_printf_i+0x210>
 800e7a6:	e7eb      	b.n	800e780 <_printf_i+0x204>
 800e7a8:	2500      	movs	r5, #0
 800e7aa:	f104 0619 	add.w	r6, r4, #25
 800e7ae:	e7f5      	b.n	800e79c <_printf_i+0x220>
 800e7b0:	0800eced 	.word	0x0800eced
 800e7b4:	0800ecfe 	.word	0x0800ecfe

0800e7b8 <memmove>:
 800e7b8:	4288      	cmp	r0, r1
 800e7ba:	b510      	push	{r4, lr}
 800e7bc:	eb01 0402 	add.w	r4, r1, r2
 800e7c0:	d902      	bls.n	800e7c8 <memmove+0x10>
 800e7c2:	4284      	cmp	r4, r0
 800e7c4:	4623      	mov	r3, r4
 800e7c6:	d807      	bhi.n	800e7d8 <memmove+0x20>
 800e7c8:	1e43      	subs	r3, r0, #1
 800e7ca:	42a1      	cmp	r1, r4
 800e7cc:	d008      	beq.n	800e7e0 <memmove+0x28>
 800e7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7d6:	e7f8      	b.n	800e7ca <memmove+0x12>
 800e7d8:	4402      	add	r2, r0
 800e7da:	4601      	mov	r1, r0
 800e7dc:	428a      	cmp	r2, r1
 800e7de:	d100      	bne.n	800e7e2 <memmove+0x2a>
 800e7e0:	bd10      	pop	{r4, pc}
 800e7e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7ea:	e7f7      	b.n	800e7dc <memmove+0x24>

0800e7ec <_sbrk_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	@ (800e808 <_sbrk_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f2 fe3a 	bl	8001470 <_sbrk>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_sbrk_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_sbrk_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	2000a54c 	.word	0x2000a54c

0800e80c <_realloc_r>:
 800e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e810:	4607      	mov	r7, r0
 800e812:	4614      	mov	r4, r2
 800e814:	460d      	mov	r5, r1
 800e816:	b921      	cbnz	r1, 800e822 <_realloc_r+0x16>
 800e818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e81c:	4611      	mov	r1, r2
 800e81e:	f7ff bc5b 	b.w	800e0d8 <_malloc_r>
 800e822:	b92a      	cbnz	r2, 800e830 <_realloc_r+0x24>
 800e824:	f7ff fbec 	bl	800e000 <_free_r>
 800e828:	4625      	mov	r5, r4
 800e82a:	4628      	mov	r0, r5
 800e82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e830:	f000 f81a 	bl	800e868 <_malloc_usable_size_r>
 800e834:	4284      	cmp	r4, r0
 800e836:	4606      	mov	r6, r0
 800e838:	d802      	bhi.n	800e840 <_realloc_r+0x34>
 800e83a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e83e:	d8f4      	bhi.n	800e82a <_realloc_r+0x1e>
 800e840:	4621      	mov	r1, r4
 800e842:	4638      	mov	r0, r7
 800e844:	f7ff fc48 	bl	800e0d8 <_malloc_r>
 800e848:	4680      	mov	r8, r0
 800e84a:	b908      	cbnz	r0, 800e850 <_realloc_r+0x44>
 800e84c:	4645      	mov	r5, r8
 800e84e:	e7ec      	b.n	800e82a <_realloc_r+0x1e>
 800e850:	42b4      	cmp	r4, r6
 800e852:	4622      	mov	r2, r4
 800e854:	4629      	mov	r1, r5
 800e856:	bf28      	it	cs
 800e858:	4632      	movcs	r2, r6
 800e85a:	f7ff fbc3 	bl	800dfe4 <memcpy>
 800e85e:	4629      	mov	r1, r5
 800e860:	4638      	mov	r0, r7
 800e862:	f7ff fbcd 	bl	800e000 <_free_r>
 800e866:	e7f1      	b.n	800e84c <_realloc_r+0x40>

0800e868 <_malloc_usable_size_r>:
 800e868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e86c:	1f18      	subs	r0, r3, #4
 800e86e:	2b00      	cmp	r3, #0
 800e870:	bfbc      	itt	lt
 800e872:	580b      	ldrlt	r3, [r1, r0]
 800e874:	18c0      	addlt	r0, r0, r3
 800e876:	4770      	bx	lr

0800e878 <_init>:
 800e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87a:	bf00      	nop
 800e87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e87e:	bc08      	pop	{r3}
 800e880:	469e      	mov	lr, r3
 800e882:	4770      	bx	lr

0800e884 <_fini>:
 800e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e886:	bf00      	nop
 800e888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e88a:	bc08      	pop	{r3}
 800e88c:	469e      	mov	lr, r3
 800e88e:	4770      	bx	lr
>>>>>>> Stashed changes
