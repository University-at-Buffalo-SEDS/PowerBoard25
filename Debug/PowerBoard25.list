
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08010cf8  08010cf8  00011cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011444  08011444  00013350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011444  08011444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801144c  0801144c  00013350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801144c  0801144c  0001244c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011450  08011450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08011454  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a384  20000350  080117a4  00013350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a6d4  080117a4  000136d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d7e0  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f8d  00000000  00000000  00040b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024b8  00000000  00000000  00046af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c55  00000000  00000000  00048fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000838d  00000000  00000000  0004abfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb5b  00000000  00000000  00052f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7bd6  00000000  00000000  0007eae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001666bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad34  00000000  00000000  00166700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00171434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010cdc 	.word	0x08010cdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08010cdc 	.word	0x08010cdc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <LTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int LTC2990_Init(LTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	int8_t ack;

	handle->hi2c = hi2c;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	601a      	str	r2, [r3, #0]

	//Initialize voltages to NAN
	//Can this be changed so that it is in the struct
	//i.e. last_voltages = {NAN, NAN, NAN, NAN}
	for (int i = 0; i < 4; i++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e009      	b.n	8000f4e <LTC2990_Init+0x2a>
		handle->last_voltages[i] = NAN;
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <LTC2990_Init+0x94>)
 8000f46:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	ddf2      	ble.n	8000f3a <LTC2990_Init+0x16>
	}

	handle->i2c_address = LTC2990_I2C_ADDRESS;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	224d      	movs	r2, #77	@ 0x4d
 8000f58:	711a      	strb	r2, [r3, #4]

	ack = LTC2990_Set_Mode(handle, V1_V2_V3_V4, VOLTAGE_MODE_MASK);
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f8cc 	bl	80010fc <LTC2990_Set_Mode>
 8000f64:	4603      	mov	r3, r0
 8000f66:	72fb      	strb	r3, [r7, #11]

	if(ack != 0) {
 8000f68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <LTC2990_Init+0x56>
		CDC_Transmit_Print("Failed to set in Single Voltage Mode \n");
 8000f70:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <LTC2990_Init+0x98>)
 8000f72:	f000 fa2f 	bl	80013d4 <CDC_Transmit_Print>
		while(1);
 8000f76:	bf00      	nop
 8000f78:	e7fd      	b.n	8000f76 <LTC2990_Init+0x52>
	}


	// Enable all voltage channels
	ack = LTC2990_Enable_All_Voltages(handle);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f8b0 	bl	80010e0 <LTC2990_Enable_All_Voltages>
 8000f80:	4603      	mov	r3, r0
 8000f82:	72fb      	strb	r3, [r7, #11]
	if(ack != 0) {
 8000f84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <LTC2990_Init+0x78>
		HAL_Delay(50);
 8000f8c:	2032      	movs	r0, #50	@ 0x32
 8000f8e:	f000 ffd9 	bl	8001f44 <HAL_Delay>
		CDC_Transmit_Print("Failed to enable voltage channels. \n");
 8000f92:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <LTC2990_Init+0x9c>)
 8000f94:	f000 fa1e 	bl	80013d4 <CDC_Transmit_Print>
		while(1);
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <LTC2990_Init+0x74>
	}

	HAL_Delay(100);
 8000f9c:	2064      	movs	r0, #100	@ 0x64
 8000f9e:	f000 ffd1 	bl	8001f44 <HAL_Delay>
	CDC_Transmit_Print("LTC2990 configured for Single-Ended Voltage Monitoring. \n");
 8000fa2:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <LTC2990_Init+0xa0>)
 8000fa4:	f000 fa16 	bl	80013d4 <CDC_Transmit_Print>

	//Initial data reading
	LTC2990_Step(handle);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f80d 	bl	8000fc8 <LTC2990_Step>

	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	7fc00000 	.word	0x7fc00000
 8000fbc:	08010cf8 	.word	0x08010cf8
 8000fc0:	08010d20 	.word	0x08010d20
 8000fc4:	08010d48 	.word	0x08010d48

08000fc8 <LTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void LTC2990_Step(LTC2990_Handle_t *handle) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	int8_t ack;
	int16_t adc_code;
	int8_t data_valid;
	//Trigger Conversion
	ack = LTC2990_Trigger_Conversion(handle);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f8d7 	bl	8001184 <LTC2990_Trigger_Conversion>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 8000fda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <LTC2990_Step+0x22>
		CDC_Transmit_Print("Failed to trigger conversion.");
 8000fe2:	4829      	ldr	r0, [pc, #164]	@ (8001088 <LTC2990_Step+0xc0>)
 8000fe4:	f000 f9f6 	bl	80013d4 <CDC_Transmit_Print>
 8000fe8:	e04b      	b.n	8001082 <LTC2990_Step+0xba>
		return;
	}

	// Allow time for conversion
	HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 ffaa 	bl	8001f44 <HAL_Delay>

	// Read voltages V1 to V4
	uint8_t msb_registers[4] = {V1_MSB_REG, V2_MSB_REG, V3_MSB_REG, V4_MSB_REG};
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <LTC2990_Step+0xc4>)
 8000ff2:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 4; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e040      	b.n	800107c <LTC2990_Step+0xb4>
		ack = LTC2990_ADC_Read_New_Data(handle, msb_registers[i], &adc_code, &data_valid);
 8000ffa:	f107 0208 	add.w	r2, r7, #8
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	4413      	add	r3, r2
 8001002:	7819      	ldrb	r1, [r3, #0]
 8001004:	f107 030f 	add.w	r3, r7, #15
 8001008:	f107 0210 	add.w	r2, r7, #16
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f8c7 	bl	80011a0 <LTC2990_ADC_Read_New_Data>
 8001012:	4603      	mov	r3, r0
 8001014:	74fb      	strb	r3, [r7, #19]
		if(ack != 0 || data_valid != 1) {
 8001016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <LTC2990_Step+0x5e>
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d017      	beq.n	8001056 <LTC2990_Step+0x8e>
			CDC_Transmit_Print("Error reading Voltage %d \n", i);
 8001026:	6979      	ldr	r1, [r7, #20]
 8001028:	4819      	ldr	r0, [pc, #100]	@ (8001090 <LTC2990_Step+0xc8>)
 800102a:	f000 f9d3 	bl	80013d4 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the ack: %d \n", ack);
 800102e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <LTC2990_Step+0xcc>)
 8001036:	f000 f9cd 	bl	80013d4 <CDC_Transmit_Print>
			CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4619      	mov	r1, r3
 8001040:	4815      	ldr	r0, [pc, #84]	@ (8001098 <LTC2990_Step+0xd0>)
 8001042:	f000 f9c7 	bl	80013d4 <CDC_Transmit_Print>
			handle->last_voltages[i] = NAN;
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3302      	adds	r3, #2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	4a12      	ldr	r2, [pc, #72]	@ (800109c <LTC2990_Step+0xd4>)
 8001052:	601a      	str	r2, [r3, #0]
			continue;
 8001054:	e00f      	b.n	8001076 <LTC2990_Step+0xae>
		}
		handle->last_voltages[i] = LTC2990_Code_To_Single_Ended_Voltage(handle, adc_code);
 8001056:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f922 	bl	80012a8 <LTC2990_Code_To_Single_Ended_Voltage>
 8001064:	eef0 7a40 	vmov.f32	s15, s0
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3302      	adds	r3, #2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 4; i++) {
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b03      	cmp	r3, #3
 8001080:	ddbb      	ble.n	8000ffa <LTC2990_Step+0x32>
		//CDC_Transmit_Print("Just Read Voltages, got: %x \n", handle->last_voltages[i]);
	}

}
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	08010d84 	.word	0x08010d84
 800108c:	0c0a0806 	.word	0x0c0a0806
 8001090:	08010da4 	.word	0x08010da4
 8001094:	08010dc0 	.word	0x08010dc0
 8001098:	08010dd8 	.word	0x08010dd8
 800109c:	7fc00000 	.word	0x7fc00000

080010a0 <LTC2990_Get_Voltage>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
void LTC2990_Get_Voltage(LTC2990_Handle_t* handle, float* voltages) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e00d      	b.n	80010cc <LTC2990_Get_Voltage+0x2c>
		voltages[i] = handle->last_voltages[i];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	3202      	adds	r2, #2
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	440a      	add	r2, r1
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	ddee      	ble.n	80010b0 <LTC2990_Get_Voltage+0x10>
	}
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LTC2990_Enable_All_Voltages>:


inline int8_t LTC2990_Enable_All_Voltages(LTC2990_Handle_t *handle) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	return LTC2990_Set_Mode(handle, ENABLE_ALL, TEMP_MEAS_MODE_MASK);
 80010e8:	2218      	movs	r2, #24
 80010ea:	2118      	movs	r1, #24
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f805 	bl	80010fc <LTC2990_Set_Mode>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LTC2990_Set_Mode>:


int8_t LTC2990_Set_Mode(LTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = LTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 800110c:	f107 030e 	add.w	r3, r7, #14
 8001110:	461a      	mov	r2, r3
 8001112:	2101      	movs	r1, #1
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f903 	bl	8001320 <LTC2990_Read_Register>
 800111a:	4603      	mov	r3, r0
 800111c:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <LTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 8001126:	4815      	ldr	r0, [pc, #84]	@ (800117c <LTC2990_Set_Mode+0x80>)
 8001128:	f000 f954 	bl	80013d4 <CDC_Transmit_Print>
		return ack;
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	e01f      	b.n	8001172 <LTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 8001132:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001136:	43db      	mvns	r3, r3
 8001138:	b25a      	sxtb	r2, r3
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	4013      	ands	r3, r2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 8001146:	7bba      	ldrb	r2, [r7, #14]
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	4313      	orrs	r3, r2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = LTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	461a      	mov	r2, r3
 8001154:	2101      	movs	r1, #1
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f90e 	bl	8001378 <LTC2990_Write_Register>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <LTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <LTC2990_Set_Mode+0x84>)
 800116a:	f000 f933 	bl	80013d4 <CDC_Transmit_Print>
	}
	return ack;
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	08010df8 	.word	0x08010df8
 8001180:	08010e20 	.word	0x08010e20

08001184 <LTC2990_Trigger_Conversion>:

int8_t LTC2990_Trigger_Conversion(LTC2990_Handle_t *handle) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	return LTC2990_Write_Register(handle, TRIGGER_REG, 0x00);
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f8f1 	bl	8001378 <LTC2990_Write_Register>
 8001196:	4603      	mov	r3, r0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <LTC2990_ADC_Read_New_Data>:


uint8_t LTC2990_ADC_Read_New_Data(LTC2990_Handle_t *handle, uint8_t msb_register_address, int16_t* adc_code, int8_t* data_valid) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	3b01      	subs	r3, #1
 80011be:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 80011c0:	e01a      	b.n	80011f8 <LTC2990_ADC_Read_New_Data+0x58>
		ack = LTC2990_Read_Register(handle, STATUS_REG, &status);
 80011c2:	f107 0319 	add.w	r3, r7, #25
 80011c6:	461a      	mov	r2, r3
 80011c8:	2100      	movs	r1, #0
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 f8a8 	bl	8001320 <LTC2990_Read_Register>
 80011d0:	4603      	mov	r3, r0
 80011d2:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 80011d4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <LTC2990_ADC_Read_New_Data+0x40>
			return ack;
 80011dc:	7f3b      	ldrb	r3, [r7, #28]
 80011de:	e05c      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 80011e0:	7e7b      	ldrb	r3, [r7, #25]
 80011e2:	461a      	mov	r2, r3
 80011e4:	7f7b      	ldrb	r3, [r7, #29]
 80011e6:	fa42 f303 	asr.w	r3, r2, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <LTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 fea6 	bl	8001f44 <HAL_Delay>
	while (--timeout) {
 80011f8:	8bfb      	ldrh	r3, [r7, #30]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	83fb      	strh	r3, [r7, #30]
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1de      	bne.n	80011c2 <LTC2990_ADC_Read_New_Data+0x22>
 8001204:	e000      	b.n	8001208 <LTC2990_ADC_Read_New_Data+0x68>
			break;
 8001206:	bf00      	nop
	}


	if (timeout == 0) {
 8001208:	8bfb      	ldrh	r3, [r7, #30]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d104      	bne.n	8001218 <LTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 800120e:	4825      	ldr	r0, [pc, #148]	@ (80012a4 <LTC2990_ADC_Read_New_Data+0x104>)
 8001210:	f000 f8e0 	bl	80013d4 <CDC_Transmit_Print>
		return 1;
 8001214:	2301      	movs	r3, #1
 8001216:	e040      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = LTC2990_Read_Register(handle, msb_register_address, &msb);
 8001218:	f107 0218 	add.w	r2, r7, #24
 800121c:	7afb      	ldrb	r3, [r7, #11]
 800121e:	4619      	mov	r1, r3
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f87d 	bl	8001320 <LTC2990_Read_Register>
 8001226:	4603      	mov	r3, r0
 8001228:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 800122a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <LTC2990_ADC_Read_New_Data+0x96>
		return ack;
 8001232:	7f3b      	ldrb	r3, [r7, #28]
 8001234:	e031      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
	}

	ack = LTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	3301      	adds	r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f107 0217 	add.w	r2, r7, #23
 8001240:	4619      	mov	r1, r3
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f86c 	bl	8001320 <LTC2990_Read_Register>
 8001248:	4603      	mov	r3, r0
 800124a:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 800124c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <LTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 8001254:	7f3b      	ldrb	r3, [r7, #28]
 8001256:	e020      	b.n	800129a <LTC2990_ADC_Read_New_Data+0xfa>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8001258:	7e3b      	ldrb	r3, [r7, #24]
 800125a:	b21b      	sxth	r3, r3
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 800126a:	8b7b      	ldrh	r3, [r7, #26]
 800126c:	0bdb      	lsrs	r3, r3, #15
 800126e:	b29b      	uxth	r3, r3
 8001270:	b25b      	sxtb	r3, r3
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	b25a      	sxtb	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x3FFF;
 800127c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001280:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	801a      	strh	r2, [r3, #0]

	return (*data_valid == 1) ? 0 : 1;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f993 3000 	ldrsb.w	r3, [r3]
 8001290:	2b01      	cmp	r3, #1
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08010e48 	.word	0x08010e48

080012a8 <LTC2990_Code_To_Single_Ended_Voltage>:

float LTC2990_Code_To_Single_Ended_Voltage(LTC2990_Handle_t *handle, uint16_t adc_code) {
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
	float voltage;
	int16_t sign = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	81fb      	strh	r3, [r7, #14]

	if(adc_code & 0x4000) { //If the code is negative
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00a      	beq.n	80012d8 <LTC2990_Code_To_Single_Ended_Voltage+0x30>
		adc_code = (adc_code ^ 0x7FFF) + 1;// Two's compliment
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	f483 43ff 	eor.w	r3, r3, #32640	@ 0x7f80
 80012c8:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	807b      	strh	r3, [r7, #2]
		sign = -1;
 80012d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d6:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012de:	807b      	strh	r3, [r7, #2]
	voltage = ((float)adc_code) * SINGLE_ENDED_LSB * sign;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800131c <LTC2990_Code_To_Single_Ended_Voltage+0x74>
 80012ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001302:	edc7 7a02 	vstr	s15, [r7, #8]

	return voltage;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	ee07 3a90 	vmov	s15, r3
}
 800130c:	eeb0 0a67 	vmov.f32	s0, s15
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	39a00000 	.word	0x39a00000

08001320 <LTC2990_Read_Register>:

int8_t LTC2990_Read_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af04      	add	r7, sp, #16
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	460b      	mov	r3, r1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	b299      	uxth	r1, r3
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	b29a      	uxth	r2, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	f001 fc29 	bl	8002ba4 <HAL_I2C_Mem_Read>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <LTC2990_Read_Register+0x40>
		return 0;
 800135c:	2300      	movs	r3, #0
 800135e:	e005      	b.n	800136c <LTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	4619      	mov	r1, r3
 8001364:	4803      	ldr	r0, [pc, #12]	@ (8001374 <LTC2990_Read_Register+0x54>)
 8001366:	f000 f835 	bl	80013d4 <CDC_Transmit_Print>
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08010e5c 	.word	0x08010e5c

08001378 <LTC2990_Write_Register>:
//	}
//	return 0;
//}


int8_t LTC2990_Write_Register(LTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af04      	add	r7, sp, #16
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
 8001384:	4613      	mov	r3, r2
 8001386:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b299      	uxth	r1, r3
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	b29a      	uxth	r2, r3
 8001398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	f001 fae8 	bl	800297c <HAL_I2C_Mem_Write>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <LTC2990_Write_Register+0x42>
		return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e005      	b.n	80013c6 <LTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <LTC2990_Write_Register+0x58>)
 80013c0:	f000 f808 	bl	80013d4 <CDC_Transmit_Print>

	return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	08010e84 	.word	0x08010e84

080013d4 <CDC_Transmit_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char *format, ...)
{
 80013d4:	b40f      	push	{r0, r1, r2, r3}
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b09c      	sub	sp, #112	@ 0x70
 80013da:	af00      	add	r7, sp, #0
  char buf[PRINT_BUFFER_SIZE];
  va_list args;
  va_start(args, format);
 80013dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013e0:	607b      	str	r3, [r7, #4]
  int n = vsprintf(buf, format, args);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00d fb40 	bl	800ea70 <vsiprintf>
 80013f0:	66f8      	str	r0, [r7, #108]	@ 0x6c
  va_end(args);
  CDC_Transmit_FS(buf, n);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00c f97b 	bl	800d6f4 <CDC_Transmit_FS>
}
 80013fe:	bf00      	nop
 8001400:	3770      	adds	r7, #112	@ 0x70
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001408:	b004      	add	sp, #16
 800140a:	4770      	bx	lr

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f000 fd61 	bl	8001ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f874 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 f988 	bl	800172c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800141c:	f000 f8b2 	bl	8001584 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8001420:	f000 f8f8 	bl	8001614 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001424:	f000 f936 	bl	8001694 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 8001428:	4820      	ldr	r0, [pc, #128]	@ (80014ac <main+0xa0>)
 800142a:	f000 ffe7 	bl	80023fc <HAL_FDCAN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800142e:	f009 fa47 	bl	800a8c0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &sensorQueue_attributes);
 8001432:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <main+0xa4>)
 8001434:	2102      	movs	r1, #2
 8001436:	2010      	movs	r0, #16
 8001438:	f009 fb3a 	bl	800aab0 <osMessageQueueNew>
 800143c:	4603      	mov	r3, r0
 800143e:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <main+0xa8>)
 8001440:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(StartBlink, NULL, &blinkLED_attributes);
 8001442:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <main+0xac>)
 8001444:	2100      	movs	r1, #0
 8001446:	481d      	ldr	r0, [pc, #116]	@ (80014bc <main+0xb0>)
 8001448:	f009 fa84 	bl	800a954 <osThreadNew>
 800144c:	4603      	mov	r3, r0
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <main+0xb4>)
 8001450:	6013      	str	r3, [r2, #0]

  /* creation of readData */
  readDataHandle = osThreadNew(startReadData, NULL, &readData_attributes);
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <main+0xb8>)
 8001454:	2100      	movs	r1, #0
 8001456:	481c      	ldr	r0, [pc, #112]	@ (80014c8 <main+0xbc>)
 8001458:	f009 fa7c 	bl	800a954 <osThreadNew>
 800145c:	4603      	mov	r3, r0
 800145e:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <main+0xc0>)
 8001460:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <main+0xc4>)
 8001464:	2100      	movs	r1, #0
 8001466:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <main+0xc8>)
 8001468:	f009 fa74 	bl	800a954 <osThreadNew>
 800146c:	4603      	mov	r3, r0
 800146e:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <main+0xcc>)
 8001470:	6013      	str	r3, [r2, #0]

  /* creation of readCurrentTask */
  readCurrentTaskHandle = osThreadNew(startReadCurrentTask, NULL, &readCurrentTask_attributes);
 8001472:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <main+0xd0>)
 8001474:	2100      	movs	r1, #0
 8001476:	481a      	ldr	r0, [pc, #104]	@ (80014e0 <main+0xd4>)
 8001478:	f009 fa6c 	bl	800a954 <osThreadNew>
 800147c:	4603      	mov	r3, r0
 800147e:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <main+0xd8>)
 8001480:	6013      	str	r3, [r2, #0]

  /* creation of printCurrent */
  printCurrentHandle = osThreadNew(startPrintCurrent, NULL, &printCurrent_attributes);
 8001482:	4a19      	ldr	r2, [pc, #100]	@ (80014e8 <main+0xdc>)
 8001484:	2100      	movs	r1, #0
 8001486:	4819      	ldr	r0, [pc, #100]	@ (80014ec <main+0xe0>)
 8001488:	f009 fa64 	bl	800a954 <osThreadNew>
 800148c:	4603      	mov	r3, r0
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <main+0xe4>)
 8001490:	6013      	str	r3, [r2, #0]

  /* creation of printVoltage */
  printVoltageHandle = osThreadNew(startPrintVoltage, NULL, &printVoltage_attributes);
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <main+0xe8>)
 8001494:	2100      	movs	r1, #0
 8001496:	4818      	ldr	r0, [pc, #96]	@ (80014f8 <main+0xec>)
 8001498:	f009 fa5c 	bl	800a954 <osThreadNew>
 800149c:	4603      	mov	r3, r0
 800149e:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <main+0xf0>)
 80014a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014a2:	f009 fa31 	bl	800a908 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <main+0x9a>
 80014aa:	bf00      	nop
 80014ac:	2000036c 	.word	0x2000036c
 80014b0:	08011068 	.word	0x08011068
 80014b4:	200004d0 	.word	0x200004d0
 80014b8:	08010f90 	.word	0x08010f90
 80014bc:	080017ed 	.word	0x080017ed
 80014c0:	200004b8 	.word	0x200004b8
 80014c4:	08010fb4 	.word	0x08010fb4
 80014c8:	08001811 	.word	0x08001811
 80014cc:	200004bc 	.word	0x200004bc
 80014d0:	08010fd8 	.word	0x08010fd8
 80014d4:	08001821 	.word	0x08001821
 80014d8:	200004c0 	.word	0x200004c0
 80014dc:	08010ffc 	.word	0x08010ffc
 80014e0:	08001831 	.word	0x08001831
 80014e4:	200004c4 	.word	0x200004c4
 80014e8:	08011020 	.word	0x08011020
 80014ec:	08001841 	.word	0x08001841
 80014f0:	200004c8 	.word	0x200004c8
 80014f4:	08011044 	.word	0x08011044
 80014f8:	08001851 	.word	0x08001851
 80014fc:	200004cc 	.word	0x200004cc

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	@ 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	2238      	movs	r2, #56	@ 0x38
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00d fab8 	bl	800ea84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001526:	f003 fcb1 	bl	8004e8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800152a:	2322      	movs	r3, #34	@ 0x22
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2340      	movs	r3, #64	@ 0x40
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fd55 	bl	8004ff4 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001550:	f000 f9e8 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001558:	2301      	movs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f853 	bl	8005618 <HAL_RCC_ClockConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001578:	f000 f9d4 	bl	8001924 <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	@ 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001588:	4b20      	ldr	r3, [pc, #128]	@ (800160c <MX_FDCAN2_Init+0x88>)
 800158a:	4a21      	ldr	r2, [pc, #132]	@ (8001610 <MX_FDCAN2_Init+0x8c>)
 800158c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800158e:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_FDCAN2_Init+0x88>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <MX_FDCAN2_Init+0x88>)
 8001596:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800159a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_FDCAN2_Init+0x88>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015bc:	2210      	movs	r2, #16
 80015be:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015c2:	223f      	movs	r2, #63	@ 0x3f
 80015c4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015c8:	2210      	movs	r2, #16
 80015ca:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015d4:	2204      	movs	r2, #4
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015da:	220d      	movs	r2, #13
 80015dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_FDCAN2_Init+0x88>)
 80015f8:	f000 fda6 	bl	8002148 <HAL_FDCAN_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8001602:	f000 f98f 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000036c 	.word	0x2000036c
 8001610:	40006800 	.word	0x40006800

08001614 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <MX_I2C2_Init+0x74>)
 800161a:	4a1c      	ldr	r2, [pc, #112]	@ (800168c <MX_I2C2_Init+0x78>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <MX_I2C2_Init+0x7c>)
 8001622:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162a:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <MX_I2C2_Init+0x74>)
 800162c:	2201      	movs	r2, #1
 800162e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_I2C2_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_I2C2_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800164e:	480e      	ldr	r0, [pc, #56]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001650:	f001 f8f8 	bl	8002844 <HAL_I2C_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800165a:	f000 f963 	bl	8001924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165e:	2100      	movs	r1, #0
 8001660:	4809      	ldr	r0, [pc, #36]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001662:	f001 fe7b 	bl	800335c <HAL_I2CEx_ConfigAnalogFilter>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800166c:	f000 f95a 	bl	8001924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001670:	2100      	movs	r1, #0
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_I2C2_Init+0x74>)
 8001674:	f001 febd 	bl	80033f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800167e:	f000 f951 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200003d0 	.word	0x200003d0
 800168c:	40005800 	.word	0x40005800
 8001690:	00503d58 	.word	0x00503d58

08001694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <MX_USART2_UART_Init+0x94>)
 800169c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016dc:	4811      	ldr	r0, [pc, #68]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016de:	f004 ff5f 	bl	80065a0 <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016e8:	f000 f91c 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	480d      	ldr	r0, [pc, #52]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016f0:	f005 fcfa 	bl	80070e8 <HAL_UARTEx_SetTxFifoThreshold>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016fa:	f000 f913 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4808      	ldr	r0, [pc, #32]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 8001702:	f005 fd2f 	bl	8007164 <HAL_UARTEx_SetRxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800170c:	f000 f90a 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 8001712:	f005 fcb0 	bl	8007076 <HAL_UARTEx_DisableFifoMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800171c:	f000 f902 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000424 	.word	0x20000424
 8001728:	40004400 	.word	0x40004400

0800172c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_GPIO_Init+0xb4>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin|BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <MX_GPIO_Init+0xb8>)
 80017aa:	f001 f833 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin|BACKLIGHT_LEDS_Pin;
 80017ae:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <MX_GPIO_Init+0xb8>)
 80017c8:	f000 fea2 	bl	8002510 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_GPIO_Init+0xbc>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <MX_GPIO_Init+0xbc>)
 80017d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017d6:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	@ 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	40010000 	.word	0x40010000

080017ec <StartBlink>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80017f4:	f00b fec0 	bl	800d578 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(GPIOB, BACKLIGHT_LEDS_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017fe:	4803      	ldr	r0, [pc, #12]	@ (800180c <StartBlink+0x20>)
 8001800:	f001 f808 	bl	8002814 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for (;;)
  {

    //HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
    osDelay(100);
 8001804:	2064      	movs	r0, #100	@ 0x64
 8001806:	f009 f938 	bl	800aa7a <osDelay>
 800180a:	e7fb      	b.n	8001804 <StartBlink+0x18>
 800180c:	48000400 	.word	0x48000400

08001810 <startReadData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadData */
void startReadData(void *argument)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
//
//	  CLTC2990_Step(&CLTC2990_Handle);
//	  payload.current = CLTC2990_Get_Current(&CLTC2990_Handle);
//	  CDC_Transmit_Print("Current: %f \r\n", payload.current);
	  //osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
	  osDelay(100);
 8001818:	2064      	movs	r0, #100	@ 0x64
 800181a:	f009 f92e 	bl	800aa7a <osDelay>
 800181e:	e7fb      	b.n	8001818 <startReadData+0x8>

08001820 <StartSendMessage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
//    memcpy(txBuf, &payload, sizeof(payload));
//    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf) != HAL_OK)
//    {
//      CDC_Transmit_Print("Error!\r\n");
//    }
    osDelay(100);
 8001828:	2064      	movs	r0, #100	@ 0x64
 800182a:	f009 f926 	bl	800aa7a <osDelay>
 800182e:	e7fb      	b.n	8001828 <StartSendMessage+0x8>

08001830 <startReadCurrentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadCurrentTask */
void startReadCurrentTask(void *argument)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
//	  instrumentationPayload_t payload;
//	  CLTC2990_Step(&CLTC2990_Handle);
//	  payload.current = CLTC2990_Get_Current(&CLTC2990_Handle);
//	  CDC_Transmit_Print("Current is: %f \n", payload.current/*CLTC2990_Get_Current(&CLTC2990_Handle)*/);
//	  osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
	  osDelay(250);
 8001838:	20fa      	movs	r0, #250	@ 0xfa
 800183a:	f009 f91e 	bl	800aa7a <osDelay>
 800183e:	e7fb      	b.n	8001838 <startReadCurrentTask+0x8>

08001840 <startPrintCurrent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintCurrent */
void startPrintCurrent(void *argument)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	//MX_USB_Device_Init();
  for(;;)
  {
//	CDC_Transmit_Print("Current is: %f \n", CLTC2990_Get_Current(&CLTC2990_Handle));
    osDelay(100);
 8001848:	2064      	movs	r0, #100	@ 0x64
 800184a:	f009 f916 	bl	800aa7a <osDelay>
 800184e:	e7fb      	b.n	8001848 <startPrintCurrent+0x8>

08001850 <startPrintVoltage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintVoltage */
void startPrintVoltage(void *argument)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b089      	sub	sp, #36	@ 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPrintVoltage */
  /* Infinite loop */
//	MX_USB_Device_Init();
	//static const float multipliers[4] = {28.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f, 25.0f / 10.0f};
	static const float multipliers[4] = {1.0f, 1.0f, 1.0f, 1.0f};
	LTC2990_Init(&LTC2990_Handle, &hi2c2);
 8001858:	4923      	ldr	r1, [pc, #140]	@ (80018e8 <startPrintVoltage+0x98>)
 800185a:	4824      	ldr	r0, [pc, #144]	@ (80018ec <startPrintVoltage+0x9c>)
 800185c:	f7ff fb62 	bl	8000f24 <LTC2990_Init>
	//static const float multipliers[4] = {1, 1, 1, 1};
  for(;;)
  {
	  LTC2990_Step(&LTC2990_Handle);
 8001860:	4822      	ldr	r0, [pc, #136]	@ (80018ec <startPrintVoltage+0x9c>)
 8001862:	f7ff fbb1 	bl	8000fc8 <LTC2990_Step>
	  float voltages[4];
	  LTC2990_Get_Voltage(&LTC2990_Handle, voltages);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	481f      	ldr	r0, [pc, #124]	@ (80018ec <startPrintVoltage+0x9c>)
 800186e:	f7ff fc17 	bl	80010a0 <LTC2990_Get_Voltage>
	  for (int i = 0; i < 4; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e01d      	b.n	80018b4 <startPrintVoltage+0x64>
		CDC_Transmit_Print("Voltage %d: %f \r\n", i + 1, voltages[i] * multipliers[i]);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	1c5c      	adds	r4, r3, #1
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	3320      	adds	r3, #32
 8001882:	443b      	add	r3, r7
 8001884:	3b14      	subs	r3, #20
 8001886:	ed93 7a00 	vldr	s14, [r3]
 800188a:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <startPrintVoltage+0xa0>)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189a:	ee17 0a90 	vmov	r0, s15
 800189e:	f7fe fe7b 	bl	8000598 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4621      	mov	r1, r4
 80018a8:	4812      	ldr	r0, [pc, #72]	@ (80018f4 <startPrintVoltage+0xa4>)
 80018aa:	f7ff fd93 	bl	80013d4 <CDC_Transmit_Print>
	  for (int i = 0; i < 4; i++) {
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	ddde      	ble.n	8001878 <startPrintVoltage+0x28>
	  }
	  CDC_Transmit_Print("Current: %f \r\n", (voltages[0] - voltages[1]) / 0.005f);
 80018ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80018be:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80018f8 <startPrintVoltage+0xa8>
 80018ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018ce:	ee16 0a90 	vmov	r0, s13
 80018d2:	f7fe fe61 	bl	8000598 <__aeabi_f2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4808      	ldr	r0, [pc, #32]	@ (80018fc <startPrintVoltage+0xac>)
 80018dc:	f7ff fd7a 	bl	80013d4 <CDC_Transmit_Print>
    osDelay(200);
 80018e0:	20c8      	movs	r0, #200	@ 0xc8
 80018e2:	f009 f8ca 	bl	800aa7a <osDelay>
  {
 80018e6:	e7bb      	b.n	8001860 <startPrintVoltage+0x10>
 80018e8:	200003d0 	.word	0x200003d0
 80018ec:	200004d4 	.word	0x200004d4
 80018f0:	08011080 	.word	0x08011080
 80018f4:	08010f0c 	.word	0x08010f0c
 80018f8:	3ba3d70a 	.word	0x3ba3d70a
 80018fc:	08010f20 	.word	0x08010f20

08001900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001912:	f000 faf9 	bl	8001f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40012c00 	.word	0x40012c00

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <Error_Handler+0x8>

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_MspInit+0x50>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800193a:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <HAL_MspInit+0x50>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6613      	str	r3, [r2, #96]	@ 0x60
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <HAL_MspInit+0x50>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <HAL_MspInit+0x50>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001952:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <HAL_MspInit+0x50>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6593      	str	r3, [r2, #88]	@ 0x58
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_MspInit+0x50>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f000 fbc3 	bl	80020f8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001972:	f003 fb2f 	bl	8004fd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09e      	sub	sp, #120	@ 0x78
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2250      	movs	r2, #80	@ 0x50
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00d f86d 	bl	800ea84 <memset>
  if(hfdcan->Instance==FDCAN2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a20      	ldr	r2, [pc, #128]	@ (8001a30 <HAL_FDCAN_MspInit+0xac>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d138      	bne.n	8001a26 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80019ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019be:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 f875 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80019d0:	f7ff ffa8 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_FDCAN_MspInit+0xb0>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <HAL_FDCAN_MspInit+0xb0>)
 80019da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019de:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_FDCAN_MspInit+0xb0>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_FDCAN_MspInit+0xb0>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <HAL_FDCAN_MspInit+0xb0>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_FDCAN_MspInit+0xb0>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a04:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001a16:	2309      	movs	r3, #9
 8001a18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <HAL_FDCAN_MspInit+0xb4>)
 8001a22:	f000 fd75 	bl	8002510 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001a26:	bf00      	nop
 8001a28:	3778      	adds	r7, #120	@ 0x78
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40006800 	.word	0x40006800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400

08001a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b09e      	sub	sp, #120	@ 0x78
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2250      	movs	r2, #80	@ 0x50
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00d f811 	bl	800ea84 <memset>
  if(hi2c->Instance==I2C2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae4 <HAL_I2C_MspInit+0xa8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d137      	bne.n	8001adc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 f81b 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a84:	f7ff ff4e 	bl	8001924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <HAL_I2C_MspInit+0xac>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_I2C_MspInit+0xac>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <HAL_I2C_MspInit+0xac>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aa0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa6:	2312      	movs	r3, #18
 8001aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac0:	f000 fd26 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_I2C_MspInit+0xac>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <HAL_I2C_MspInit+0xac>)
 8001aca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_I2C_MspInit+0xac>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001adc:	bf00      	nop
 8001ade:	3778      	adds	r7, #120	@ 0x78
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40005800 	.word	0x40005800
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09e      	sub	sp, #120	@ 0x78
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2250      	movs	r2, #80	@ 0x50
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f00c ffb9 	bl	800ea84 <memset>
  if(huart->Instance==USART2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1f      	ldr	r2, [pc, #124]	@ (8001b94 <HAL_UART_MspInit+0xa8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d136      	bne.n	8001b8a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 ffc3 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b34:	f7ff fef6 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <HAL_UART_MspInit+0xac>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3c:	4a16      	ldr	r2, [pc, #88]	@ (8001b98 <HAL_UART_MspInit+0xac>)
 8001b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b44:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <HAL_UART_MspInit+0xac>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <HAL_UART_MspInit+0xac>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b54:	4a10      	ldr	r2, [pc, #64]	@ (8001b98 <HAL_UART_MspInit+0xac>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <HAL_UART_MspInit+0xac>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b68:	230c      	movs	r3, #12
 8001b6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b86:	f000 fcc3 	bl	8002510 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3778      	adds	r7, #120	@ 0x78
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40004400 	.word	0x40004400
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	@ 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bac:	4b2c      	ldr	r3, [pc, #176]	@ (8001c60 <HAL_InitTick+0xc4>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c60 <HAL_InitTick+0xc4>)
 8001bb2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb8:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <HAL_InitTick+0xc4>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bc4:	f107 020c 	add.w	r2, r7, #12
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fef8 	bl	80059c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bd4:	f003 fee0 	bl	8005998 <HAL_RCC_GetPCLK2Freq>
 8001bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bdc:	4a21      	ldr	r2, [pc, #132]	@ (8001c64 <HAL_InitTick+0xc8>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9b      	lsrs	r3, r3, #18
 8001be4:	3b01      	subs	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001be8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <HAL_InitTick+0xcc>)
 8001bea:	4a20      	ldr	r2, [pc, #128]	@ (8001c6c <HAL_InitTick+0xd0>)
 8001bec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_InitTick+0xcc>)
 8001bf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c68 <HAL_InitTick+0xcc>)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_InitTick+0xcc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <HAL_InitTick+0xcc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001c08:	4817      	ldr	r0, [pc, #92]	@ (8001c68 <HAL_InitTick+0xcc>)
 8001c0a:	f004 f98f 	bl	8005f2c <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11b      	bne.n	8001c54 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c1c:	4812      	ldr	r0, [pc, #72]	@ (8001c68 <HAL_InitTick+0xcc>)
 8001c1e:	f004 f9e7 	bl	8005ff0 <HAL_TIM_Base_Start_IT>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d111      	bne.n	8001c54 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c30:	2019      	movs	r0, #25
 8001c32:	f000 fa7b 	bl	800212c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d808      	bhi.n	8001c4e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	2019      	movs	r0, #25
 8001c42:	f000 fa59 	bl	80020f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_InitTick+0xd4>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e002      	b.n	8001c54 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3730      	adds	r7, #48	@ 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	200004ec 	.word	0x200004ec
 8001c6c:	40012c00 	.word	0x40012c00
 8001c70:	20000004 	.word	0x20000004

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <NMI_Handler+0x4>

08001c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <USB_LP_IRQHandler+0x10>)
 8001cb2:	f001 fcda 	bl	800366a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000a08c 	.word	0x2000a08c

08001cc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cc6:	f004 fa03 	bl	80060d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200004ec 	.word	0x200004ec

08001cd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return 1;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_kill>:

int _kill(int pid, int sig)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cee:	f00c ff79 	bl	800ebe4 <__errno>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2216      	movs	r2, #22
 8001cf6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_exit>:

void _exit (int status)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ffe7 	bl	8001ce4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d16:	bf00      	nop
 8001d18:	e7fd      	b.n	8001d16 <_exit+0x12>

08001d1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e00a      	b.n	8001d42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d2c:	f3af 8000 	nop.w
 8001d30:	4601      	mov	r1, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	60ba      	str	r2, [r7, #8]
 8001d38:	b2ca      	uxtb	r2, r1
 8001d3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	dbf0      	blt.n	8001d2c <_read+0x12>
  }

  return len;
 8001d4a:	687b      	ldr	r3, [r7, #4]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e009      	b.n	8001d7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	60ba      	str	r2, [r7, #8]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dbf1      	blt.n	8001d66 <_write+0x12>
  }
  return len;
 8001d82:	687b      	ldr	r3, [r7, #4]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_close>:

int _close(int file)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001db4:	605a      	str	r2, [r3, #4]
  return 0;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_isatty>:

int _isatty(int file)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dcc:	2301      	movs	r3, #1
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <_sbrk+0x5c>)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <_sbrk+0x60>)
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e08:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <_sbrk+0x64>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	@ (8001e5c <_sbrk+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d207      	bcs.n	8001e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e24:	f00c fede 	bl	800ebe4 <__errno>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e009      	b.n	8001e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a05      	ldr	r2, [pc, #20]	@ (8001e58 <_sbrk+0x64>)
 8001e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e46:	68fb      	ldr	r3, [r7, #12]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2001c000 	.word	0x2001c000
 8001e54:	00000400 	.word	0x00000400
 8001e58:	20000538 	.word	0x20000538
 8001e5c:	2000a6d8 	.word	0x2000a6d8

08001e60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <SystemInit+0x20>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6a:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <SystemInit+0x20>)
 8001e6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e84:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e88:	f7ff ffea 	bl	8001e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e8c:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8e:	490d      	ldr	r1, [pc, #52]	@ (8001ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <LoopForever+0xe>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed0 <LoopForever+0x16>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f00c fe9d 	bl	800ebf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eb6:	f7ff faa9 	bl	800140c <main>

08001eba <LoopForever>:

LoopForever:
    b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   r0, =_estack
 8001ebc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001ec8:	08011454 	.word	0x08011454
  ldr r2, =_sbss
 8001ecc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001ed0:	2000a6d4 	.word	0x2000a6d4

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>

08001ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f8fe 	bl	80020e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f7ff fe58 	bl	8001b9c <HAL_InitTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	e001      	b.n	8001efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ef8:	f7ff fd1a 	bl	8001930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001efc:	79fb      	ldrb	r3, [r7, #7]

}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_IncTick+0x1c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_IncTick+0x20>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a03      	ldr	r2, [pc, #12]	@ (8001f24 <HAL_IncTick+0x1c>)
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	2000053c 	.word	0x2000053c
 8001f28:	20000008 	.word	0x20000008

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000053c 	.word	0x2000053c

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d004      	beq.n	8001f68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_Delay+0x40>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f68:	bf00      	nop
 8001f6a:	f7ff ffdf 	bl	8001f2c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d8f7      	bhi.n	8001f6a <HAL_Delay+0x26>
  {
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000008 	.word	0x20000008

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	@ (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	@ (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	@ (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff4c 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002106:	f7ff ff63 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 800210a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f7ff ffb3 	bl	800207c <NVIC_EncodePriority>
 8002116:	4602      	mov	r2, r0
 8002118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff82 	bl	8002028 <__NVIC_SetPriority>
}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff56 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e147      	b.n	80023ea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fc08 	bl	8001984 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0210 	bic.w	r2, r2, #16
 8002182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002184:	f7ff fed2 	bl	8001f2c <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800218a:	e012      	b.n	80021b2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800218c:	f7ff fece 	bl	8001f2c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b0a      	cmp	r3, #10
 8002198:	d90b      	bls.n	80021b2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e11b      	b.n	80023ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d0e5      	beq.n	800218c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d0:	f7ff feac 	bl	8001f2c <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80021d6:	e012      	b.n	80021fe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80021d8:	f7ff fea8 	bl	8001f2c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b0a      	cmp	r3, #10
 80021e4:	d90b      	bls.n	80021fe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0f5      	b.n	80023ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0e5      	beq.n	80021d8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0202 	orr.w	r2, r2, #2
 800221a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a74      	ldr	r2, [pc, #464]	@ (80023f4 <HAL_FDCAN_Init+0x2ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d103      	bne.n	800222e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002226:	4a74      	ldr	r2, [pc, #464]	@ (80023f8 <HAL_FDCAN_Init+0x2b0>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7c1b      	ldrb	r3, [r3, #16]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002244:	619a      	str	r2, [r3, #24]
 8002246:	e007      	b.n	8002258 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002256:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7c5b      	ldrb	r3, [r3, #17]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d108      	bne.n	8002272 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	e007      	b.n	8002282 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002280:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7c9b      	ldrb	r3, [r3, #18]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d108      	bne.n	800229c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002298:	619a      	str	r2, [r3, #24]
 800229a:	e007      	b.n	80022ac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022aa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80022d0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0210 	bic.w	r2, r2, #16
 80022e0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	619a      	str	r2, [r3, #24]
 80022fa:	e02c      	b.n	8002356 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d028      	beq.n	8002356 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d01c      	beq.n	8002346 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800231a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0210 	orr.w	r2, r2, #16
 800232a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d110      	bne.n	8002356 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0220 	orr.w	r2, r2, #32
 8002342:	619a      	str	r2, [r3, #24]
 8002344:	e007      	b.n	8002356 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	3b01      	subs	r3, #1
 800235c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	3b01      	subs	r3, #1
 8002364:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002366:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800236e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	3b01      	subs	r3, #1
 8002378:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800237e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002380:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800238a:	d115      	bne.n	80023b8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	3b01      	subs	r3, #1
 8002398:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800239a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	3b01      	subs	r3, #1
 80023a2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80023a4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	3b01      	subs	r3, #1
 80023ae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80023b4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80023b6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f83c 	bl	800244c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40006400 	.word	0x40006400
 80023f8:	40006500 	.word	0x40006500

080023fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d110      	bne.n	8002432 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e006      	b.n	8002440 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
  }
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002454:	4b2c      	ldr	r3, [pc, #176]	@ (8002508 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8002456:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2b      	ldr	r2, [pc, #172]	@ (800250c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d103      	bne.n	800246a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002468:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002478:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800249e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a6:	061a      	lsls	r2, r3, #24
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e005      	b.n	80024ec <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d3f3      	bcc.n	80024e0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	4000a400 	.word	0x4000a400
 800250c:	40006800 	.word	0x40006800

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800251e:	e15a      	b.n	80027d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2101      	movs	r1, #1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 814c 	beq.w	80027d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d005      	beq.n	8002550 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800254c:	2b02      	cmp	r3, #2
 800254e:	d130      	bne.n	80025b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002586:	2201      	movs	r2, #1
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f003 0201 	and.w	r2, r3, #1
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d017      	beq.n	80025ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d123      	bne.n	8002642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	6939      	ldr	r1, [r7, #16]
 800263e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0203 	and.w	r2, r3, #3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a6 	beq.w	80027d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002684:	4b5b      	ldr	r3, [pc, #364]	@ (80027f4 <HAL_GPIO_Init+0x2e4>)
 8002686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002688:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_GPIO_Init+0x2e4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002690:	4b58      	ldr	r3, [pc, #352]	@ (80027f4 <HAL_GPIO_Init+0x2e4>)
 8002692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269c:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	220f      	movs	r2, #15
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026c6:	d01f      	beq.n	8002708 <HAL_GPIO_Init+0x1f8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a4c      	ldr	r2, [pc, #304]	@ (80027fc <HAL_GPIO_Init+0x2ec>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d019      	beq.n	8002704 <HAL_GPIO_Init+0x1f4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002800 <HAL_GPIO_Init+0x2f0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_GPIO_Init+0x1f0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a4a      	ldr	r2, [pc, #296]	@ (8002804 <HAL_GPIO_Init+0x2f4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00d      	beq.n	80026fc <HAL_GPIO_Init+0x1ec>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a49      	ldr	r2, [pc, #292]	@ (8002808 <HAL_GPIO_Init+0x2f8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <HAL_GPIO_Init+0x1e8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a48      	ldr	r2, [pc, #288]	@ (800280c <HAL_GPIO_Init+0x2fc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_GPIO_Init+0x1e4>
 80026f0:	2305      	movs	r3, #5
 80026f2:	e00a      	b.n	800270a <HAL_GPIO_Init+0x1fa>
 80026f4:	2306      	movs	r3, #6
 80026f6:	e008      	b.n	800270a <HAL_GPIO_Init+0x1fa>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e006      	b.n	800270a <HAL_GPIO_Init+0x1fa>
 80026fc:	2303      	movs	r3, #3
 80026fe:	e004      	b.n	800270a <HAL_GPIO_Init+0x1fa>
 8002700:	2302      	movs	r3, #2
 8002702:	e002      	b.n	800270a <HAL_GPIO_Init+0x1fa>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_GPIO_Init+0x1fa>
 8002708:	2300      	movs	r3, #0
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	f002 0203 	and.w	r2, r2, #3
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	4093      	lsls	r3, r2
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271a:	4937      	ldr	r1, [pc, #220]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002728:	4b39      	ldr	r3, [pc, #228]	@ (8002810 <HAL_GPIO_Init+0x300>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800274c:	4a30      	ldr	r2, [pc, #192]	@ (8002810 <HAL_GPIO_Init+0x300>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002752:	4b2f      	ldr	r3, [pc, #188]	@ (8002810 <HAL_GPIO_Init+0x300>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002776:	4a26      	ldr	r2, [pc, #152]	@ (8002810 <HAL_GPIO_Init+0x300>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <HAL_GPIO_Init+0x300>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_GPIO_Init+0x300>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002810 <HAL_GPIO_Init+0x300>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ca:	4a11      	ldr	r2, [pc, #68]	@ (8002810 <HAL_GPIO_Init+0x300>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f47f ae9d 	bne.w	8002520 <HAL_GPIO_Init+0x10>
  }
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010000 	.word	0x40010000
 80027fc:	48000400 	.word	0x48000400
 8002800:	48000800 	.word	0x48000800
 8002804:	48000c00 	.word	0x48000c00
 8002808:	48001000 	.word	0x48001000
 800280c:	48001400 	.word	0x48001400
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002830:	e002      	b.n	8002838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e08d      	b.n	8002972 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff f8e6 	bl	8001a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	@ 0x24
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002894:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	e006      	b.n	80028cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d108      	bne.n	80028e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	e007      	b.n	80028f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69d9      	ldr	r1, [r3, #28]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1a      	ldr	r2, [r3, #32]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b20      	cmp	r3, #32
 80029a0:	f040 80f9 	bne.w	8002b96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x34>
 80029aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0ed      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_I2C_Mem_Write+0x4e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0e6      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029d2:	f7ff faab 	bl	8001f2c <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2319      	movs	r3, #25
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fac3 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0d1      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2221      	movs	r2, #33	@ 0x21
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a1c:	88f8      	ldrh	r0, [r7, #6]
 8002a1e:	893a      	ldrh	r2, [r7, #8]
 8002a20:	8979      	ldrh	r1, [r7, #10]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f9d3 	bl	8002dd8 <I2C_RequestMemoryWrite>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0a9      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2bff      	cmp	r3, #255	@ 0xff
 8002a4c:	d90e      	bls.n	8002a6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22ff      	movs	r2, #255	@ 0xff
 8002a52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fc47 	bl	80032f8 <I2C_TransferConfig>
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fc36 	bl	80032f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fac6 	bl	8003022 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e07b      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d034      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x1c8>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d130      	bne.n	8002b44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fa3f 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04d      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2bff      	cmp	r3, #255	@ 0xff
 8002b04:	d90e      	bls.n	8002b24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22ff      	movs	r2, #255	@ 0xff
 8002b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	8979      	ldrh	r1, [r7, #10]
 8002b14:	2300      	movs	r3, #0
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fbeb 	bl	80032f8 <I2C_TransferConfig>
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	8979      	ldrh	r1, [r7, #10]
 8002b36:	2300      	movs	r3, #0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fbda 	bl	80032f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d19e      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 faac 	bl	80030b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e01a      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2220      	movs	r2, #32
 8002b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_I2C_Mem_Write+0x224>)
 8002b76:	400b      	ands	r3, r1
 8002b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
  }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	fe00e800 	.word	0xfe00e800

08002ba4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	817b      	strh	r3, [r7, #10]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	813b      	strh	r3, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	f040 80fd 	bne.w	8002dc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x34>
 8002bd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0f1      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2C_Mem_Read+0x4e>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0ea      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bfa:	f7ff f997 	bl	8001f2c <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2319      	movs	r3, #25
 8002c06:	2201      	movs	r2, #1
 8002c08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f9af 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0d5      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2222      	movs	r2, #34	@ 0x22
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2240      	movs	r2, #64	@ 0x40
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c44:	88f8      	ldrh	r0, [r7, #6]
 8002c46:	893a      	ldrh	r2, [r7, #8]
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	4603      	mov	r3, r0
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f913 	bl	8002e80 <I2C_RequestMemoryRead>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0ad      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2bff      	cmp	r3, #255	@ 0xff
 8002c74:	d90e      	bls.n	8002c94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	22ff      	movs	r2, #255	@ 0xff
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	4b52      	ldr	r3, [pc, #328]	@ (8002dd0 <HAL_I2C_Mem_Read+0x22c>)
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fb33 	bl	80032f8 <I2C_TransferConfig>
 8002c92:	e00f      	b.n	8002cb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	8979      	ldrh	r1, [r7, #10]
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <HAL_I2C_Mem_Read+0x22c>)
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fb22 	bl	80032f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f956 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07c      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d034      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x1d0>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d130      	bne.n	8002d74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	@ 0x80
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f927 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e04d      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2bff      	cmp	r3, #255	@ 0xff
 8002d34:	d90e      	bls.n	8002d54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	22ff      	movs	r2, #255	@ 0xff
 8002d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	8979      	ldrh	r1, [r7, #10]
 8002d44:	2300      	movs	r3, #0
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fad3 	bl	80032f8 <I2C_TransferConfig>
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fac2 	bl	80032f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d19a      	bne.n	8002cb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f994 	bl	80030b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e01a      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2220      	movs	r2, #32
 8002d98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_I2C_Mem_Read+0x230>)
 8002da6:	400b      	ands	r3, r1
 8002da8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	80002400 	.word	0x80002400
 8002dd4:	fe00e800 	.word	0xfe00e800

08002dd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	460b      	mov	r3, r1
 8002dec:	813b      	strh	r3, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	4b20      	ldr	r3, [pc, #128]	@ (8002e7c <I2C_RequestMemoryWrite+0xa4>)
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fa79 	bl	80032f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f909 	bl	8003022 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e02c      	b.n	8002e74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e20:	893b      	ldrh	r3, [r7, #8]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e2a:	e015      	b.n	8002e58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	69b9      	ldr	r1, [r7, #24]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f8ef 	bl	8003022 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e012      	b.n	8002e74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4e:	893b      	ldrh	r3, [r7, #8]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f884 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	80002000 	.word	0x80002000

08002e80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	460b      	mov	r3, r1
 8002e94:	813b      	strh	r3, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	8979      	ldrh	r1, [r7, #10]
 8002ea0:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <I2C_RequestMemoryRead+0xa4>)
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fa26 	bl	80032f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f8b6 	bl	8003022 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e02c      	b.n	8002f1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ed0:	e015      	b.n	8002efe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed2:	893b      	ldrh	r3, [r7, #8]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f89c 	bl	8003022 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e012      	b.n	8002f1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2140      	movs	r1, #64	@ 0x40
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f831 	bl	8002f70 <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	80002000 	.word	0x80002000

08002f28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d103      	bne.n	8002f46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d007      	beq.n	8002f64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	619a      	str	r2, [r3, #24]
  }
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f80:	e03b      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8d6 	bl	8003138 <I2C_IsErrorOccurred>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e041      	b.n	800301a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d02d      	beq.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe ffc5 	bl	8001f2c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d122      	bne.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d113      	bne.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4013      	ands	r3, r2
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	429a      	cmp	r2, r3
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	429a      	cmp	r2, r3
 8003016:	d0b4      	beq.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800302e:	e033      	b.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f87f 	bl	8003138 <I2C_IsErrorOccurred>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e031      	b.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d025      	beq.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fe ff6e 	bl	8001f2c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11a      	bne.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d013      	beq.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e007      	b.n	80030a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d1c4      	bne.n	8003030 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030bc:	e02f      	b.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f838 	bl	8003138 <I2C_IsErrorOccurred>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e02d      	b.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d2:	f7fe ff2b 	bl	8001f2c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11a      	bne.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d013      	beq.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f043 0220 	orr.w	r2, r3, #32
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e007      	b.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b20      	cmp	r3, #32
 800312a:	d1c8      	bne.n	80030be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d068      	beq.n	8003236 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2210      	movs	r2, #16
 800316a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800316c:	e049      	b.n	8003202 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d045      	beq.n	8003202 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fe fed9 	bl	8001f2c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_IsErrorOccurred+0x54>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d13a      	bne.n	8003202 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003196:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800319e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ae:	d121      	bne.n	80031f4 <I2C_IsErrorOccurred+0xbc>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031b6:	d01d      	beq.n	80031f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d01a      	beq.n	80031f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031ce:	f7fe fead 	bl	8001f2c <HAL_GetTick>
 80031d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d4:	e00e      	b.n	80031f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031d6:	f7fe fea9 	bl	8001f2c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b19      	cmp	r3, #25
 80031e2:	d907      	bls.n	80031f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	f043 0320 	orr.w	r3, r3, #32
 80031ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80031f2:	e006      	b.n	8003202 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b20      	cmp	r3, #32
 8003200:	d1e9      	bne.n	80031d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b20      	cmp	r3, #32
 800320e:	d003      	beq.n	8003218 <I2C_IsErrorOccurred+0xe0>
 8003210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0aa      	beq.n	800316e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2220      	movs	r2, #32
 8003226:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800327a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800329c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01c      	beq.n	80032e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff fe3b 	bl	8002f28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <I2C_IsErrorOccurred+0x1bc>)
 80032be:	400b      	ands	r3, r1
 80032c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3728      	adds	r7, #40	@ 0x28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	fe00e800 	.word	0xfe00e800

080032f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	817b      	strh	r3, [r7, #10]
 8003306:	4613      	mov	r3, r2
 8003308:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003310:	7a7b      	ldrb	r3, [r7, #9]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003318:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	4313      	orrs	r3, r2
 8003322:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003326:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	0d5b      	lsrs	r3, r3, #21
 8003332:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003336:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <I2C_TransferConfig+0x60>)
 8003338:	430b      	orrs	r3, r1
 800333a:	43db      	mvns	r3, r3
 800333c:	ea02 0103 	and.w	r1, r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	03ff63ff 	.word	0x03ff63ff

0800335c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	d138      	bne.n	80033e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800337c:	2302      	movs	r3, #2
 800337e:	e032      	b.n	80033e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	@ 0x24
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	d139      	bne.n	800347c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003412:	2302      	movs	r3, #2
 8003414:	e033      	b.n	800347e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2224      	movs	r2, #36	@ 0x24
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0c0      	b.n	800361e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f00a fa67 	bl	800d984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2203      	movs	r2, #3
 80034ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f003 fef1 	bl	80072aa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e03e      	b.n	800354c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	3311      	adds	r3, #17
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	3310      	adds	r3, #16
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	3313      	adds	r3, #19
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	3320      	adds	r3, #32
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	3324      	adds	r3, #36	@ 0x24
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	3301      	adds	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	791b      	ldrb	r3, [r3, #4]
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	429a      	cmp	r2, r3
 8003554:	d3bb      	bcc.n	80034ce <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e044      	b.n	80035e6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	3301      	adds	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	791b      	ldrb	r3, [r3, #4]
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3b5      	bcc.n	800355c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035fc:	f003 fe70 	bl	80072e0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7a9b      	ldrb	r3, [r3, #10]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f001 fc0e 	bl	8004e38 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_PCD_Start+0x16>
 8003638:	2302      	movs	r3, #2
 800363a:	e012      	b.n	8003662 <HAL_PCD_Start+0x3c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fe17 	bl	800727c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f005 fbf4 	bl	8008e40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f005 fbf9 	bl	8008e6e <USB_ReadInterrupts>
 800367c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fb06 	bl	8003c9a <PCD_EP_ISR_Handler>

    return;
 800368e:	e110      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003696:	2b00      	cmp	r3, #0
 8003698:	d013      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ac:	b292      	uxth	r2, r2
 80036ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f00a f9f7 	bl	800daa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036b8:	2100      	movs	r1, #0
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8fc 	bl	80038b8 <HAL_PCD_SetAddress>

    return;
 80036c0:	e0f7      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036de:	b292      	uxth	r2, r2
 80036e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036e4:	e0e5      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00c      	beq.n	800370a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003702:	b292      	uxth	r2, r2
 8003704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003708:	e0d3      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d034      	beq.n	800377e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800371c:	b29a      	uxth	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0204 	bic.w	r2, r2, #4
 8003726:	b292      	uxth	r2, r2
 8003728:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0208 	bic.w	r2, r2, #8
 800373e:	b292      	uxth	r2, r2
 8003740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003756:	2100      	movs	r1, #0
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f00a fb97 	bl	800de8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f00a f9da 	bl	800db18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003776:	b292      	uxth	r2, r2
 8003778:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800377c:	e099      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	d027      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	b292      	uxth	r2, r2
 800379c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0204 	orr.w	r2, r2, #4
 80037ca:	b292      	uxth	r2, r2
 80037cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f00a f987 	bl	800dae4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037d6:	e06c      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d040      	beq.n	8003864 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f4:	b292      	uxth	r2, r2
 80037f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d12b      	bne.n	800385c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0204 	orr.w	r2, r2, #4
 8003816:	b292      	uxth	r2, r2
 8003818:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0208 	orr.w	r2, r2, #8
 800382e:	b292      	uxth	r2, r2
 8003830:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003844:	b29b      	uxth	r3, r3
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003852:	2101      	movs	r1, #1
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f00a fb19 	bl	800de8c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800385a:	e02a      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f00a f941 	bl	800dae4 <HAL_PCD_SuspendCallback>
    return;
 8003862:	e026      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00f      	beq.n	800388e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003880:	b292      	uxth	r2, r2
 8003882:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f00a f8ff 	bl	800da8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800388c:	e011      	b.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038aa:	b292      	uxth	r2, r2
 80038ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038b0:	bf00      	nop
  }
}
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_PCD_SetAddress+0x1a>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e012      	b.n	80038f8 <HAL_PCD_SetAddress+0x40>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f005 fa95 	bl	8008e18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	70fb      	strb	r3, [r7, #3]
 8003912:	460b      	mov	r3, r1
 8003914:	803b      	strh	r3, [r7, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800391e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003922:	2b00      	cmp	r3, #0
 8003924:	da0e      	bge.n	8003944 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	f003 0207 	and.w	r2, r3, #7
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	3310      	adds	r3, #16
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	705a      	strb	r2, [r3, #1]
 8003942:	e00e      	b.n	8003962 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 0207 	and.w	r2, r3, #7
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800396e:	883b      	ldrh	r3, [r7, #0]
 8003970:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	78ba      	ldrb	r2, [r7, #2]
 800397c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800397e:	78bb      	ldrb	r3, [r7, #2]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d102      	bne.n	800398a <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_PCD_EP_Open+0x98>
 8003994:	2302      	movs	r3, #2
 8003996:	e00e      	b.n	80039b6 <HAL_PCD_EP_Open+0xb6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fcb8 	bl	800731c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039b4:	7afb      	ldrb	r3, [r7, #11]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da0e      	bge.n	80039f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 0207 	and.w	r2, r3, #7
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	3310      	adds	r3, #16
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	705a      	strb	r2, [r3, #1]
 80039ee:	e00e      	b.n	8003a0e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 0207 	and.w	r2, r3, #7
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_PCD_EP_Close+0x6a>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e00e      	b.n	8003a46 <HAL_PCD_EP_Close+0x88>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68f9      	ldr	r1, [r7, #12]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f004 f958 	bl	8007cec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	f003 0207 	and.w	r2, r3, #7
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6979      	ldr	r1, [r7, #20]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 fb10 	bl	80080c6 <USB_EPStartXfer>

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 0207 	and.w	r2, r3, #7
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	460b      	mov	r3, r1
 8003aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	f003 0207 	and.w	r2, r3, #7
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	3310      	adds	r3, #16
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6979      	ldr	r1, [r7, #20]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 fac1 	bl	80080c6 <USB_EPStartXfer>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	7912      	ldrb	r2, [r2, #4]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e03e      	b.n	8003bea <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da0e      	bge.n	8003b92 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 0207 	and.w	r2, r3, #7
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	3310      	adds	r3, #16
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	705a      	strb	r2, [r3, #1]
 8003b90:	e00c      	b.n	8003bac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_PCD_EP_SetStall+0x7e>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e00e      	b.n	8003bea <HAL_PCD_EP_SetStall+0x9c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68f9      	ldr	r1, [r7, #12]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f005 f822 	bl	8008c24 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	7912      	ldrb	r2, [r2, #4]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e040      	b.n	8003c92 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	da0e      	bge.n	8003c36 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	3310      	adds	r3, #16
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	705a      	strb	r2, [r3, #1]
 8003c34:	e00e      	b.n	8003c54 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 0207 	and.w	r2, r3, #7
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_PCD_EP_ClrStall+0x82>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e00e      	b.n	8003c92 <HAL_PCD_EP_ClrStall+0xa0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f005 f81f 	bl	8008cc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b092      	sub	sp, #72	@ 0x48
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ca2:	e333      	b.n	800430c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cac:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003cae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003cba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 8108 	bne.w	8003ed4 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d14c      	bne.n	8003d68 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cde:	813b      	strh	r3, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	893b      	ldrh	r3, [r7, #8]
 8003ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3310      	adds	r3, #16
 8003cf6:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	441a      	add	r2, r3
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f009 fe90 	bl	800da56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7b1b      	ldrb	r3, [r3, #12]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 82e5 	beq.w	800430c <PCD_EP_ISR_Handler+0x672>
 8003d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 82e0 	bne.w	800430c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	7b1b      	ldrb	r3, [r3, #12]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	731a      	strb	r2, [r3, #12]
 8003d66:	e2d1      	b.n	800430c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d6e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d032      	beq.n	8003de8 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003db6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f005 f8a9 	bl	8008f14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003dce:	4013      	ands	r3, r2
 8003dd0:	817b      	strh	r3, [r7, #10]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	897a      	ldrh	r2, [r7, #10]
 8003dd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f009 fe0b 	bl	800d9fc <HAL_PCD_SetupStageCallback>
 8003de6:	e291      	b.n	800430c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003de8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f280 828d 	bge.w	800430c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003dfe:	4013      	ands	r3, r2
 8003e00:	81fb      	strh	r3, [r7, #14]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	89fa      	ldrh	r2, [r7, #14]
 8003e08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e0c:	b292      	uxth	r2, r2
 8003e0e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e36:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d019      	beq.n	8003e74 <PCD_EP_ISR_Handler+0x1da>
 8003e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4e:	6959      	ldr	r1, [r3, #20]
 8003e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e52:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e56:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f005 f85b 	bl	8008f14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	441a      	add	r2, r3
 8003e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f009 fdd6 	bl	800da20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 8242 	bne.w	800430c <PCD_EP_ISR_Handler+0x672>
 8003e88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e8a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e92:	f000 823b 	beq.w	800430c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea6:	81bb      	strh	r3, [r7, #12]
 8003ea8:	89bb      	ldrh	r3, [r7, #12]
 8003eaa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003eae:	81bb      	strh	r3, [r7, #12]
 8003eb0:	89bb      	ldrh	r3, [r7, #12]
 8003eb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003eb6:	81bb      	strh	r3, [r7, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	89bb      	ldrh	r3, [r7, #12]
 8003ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	8013      	strh	r3, [r2, #0]
 8003ed2:	e21b      	b.n	800430c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ee6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f280 80f1 	bge.w	80040d2 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f06:	4013      	ands	r3, r2
 8003f08:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f22:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f3a:	7b1b      	ldrb	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d123      	bne.n	8003f88 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003f68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 808b 	beq.w	8004088 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f78:	6959      	ldr	r1, [r3, #20]
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7c:	88da      	ldrh	r2, [r3, #6]
 8003f7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003f82:	f004 ffc7 	bl	8008f14 <USB_ReadPMA>
 8003f86:	e07f      	b.n	8004088 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8a:	78db      	ldrb	r3, [r3, #3]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d109      	bne.n	8003fa4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f92:	461a      	mov	r2, r3
 8003f94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9c6 	bl	8004328 <HAL_PCD_EP_DB_Receive>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003fa2:	e071      	b.n	8004088 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fbe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d022      	beq.n	8004044 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	4413      	add	r3, r2
 8004018:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004022:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004026:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02c      	beq.n	8004088 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004034:	6959      	ldr	r1, [r3, #20]
 8004036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004038:	891a      	ldrh	r2, [r3, #8]
 800403a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800403e:	f004 ff69 	bl	8008f14 <USB_ReadPMA>
 8004042:	e021      	b.n	8004088 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	4413      	add	r3, r2
 800405e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004068:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800406c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407a:	6959      	ldr	r1, [r3, #20]
 800407c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407e:	895a      	ldrh	r2, [r3, #10]
 8004080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004084:	f004 ff46 	bl	8008f14 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004090:	441a      	add	r2, r3
 8004092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004094:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800409e:	441a      	add	r2, r3
 80040a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <PCD_EP_ISR_Handler+0x41e>
 80040ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80040b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d206      	bcs.n	80040c6 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80040b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f009 fcae 	bl	800da20 <HAL_PCD_DataOutStageCallback>
 80040c4:	e005      	b.n	80040d2 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040cc:	4618      	mov	r0, r3
 80040ce:	f003 fffa 	bl	80080c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80040d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8117 	beq.w	800430c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80040de:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	3310      	adds	r3, #16
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	441a      	add	r2, r3
 800411c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800411e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800412a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800412c:	78db      	ldrb	r3, [r3, #3]
 800412e:	2b01      	cmp	r3, #1
 8004130:	f040 80a1 	bne.w	8004276 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004136:	2200      	movs	r2, #0
 8004138:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800413a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800413c:	7b1b      	ldrb	r3, [r3, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8092 	beq.w	8004268 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004144:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d046      	beq.n	80041dc <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d126      	bne.n	80041a4 <PCD_EP_ISR_Handler+0x50a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	4413      	add	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00da      	lsls	r2, r3, #3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	4413      	add	r3, r2
 8004178:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004188:	b29a      	uxth	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419c:	b29a      	uxth	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	e061      	b.n	8004268 <PCD_EP_ISR_Handler+0x5ce>
 80041a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d15d      	bne.n	8004268 <PCD_EP_ISR_Handler+0x5ce>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	00da      	lsls	r2, r3, #3
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2200      	movs	r2, #0
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	e045      	b.n	8004268 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d126      	bne.n	8004238 <PCD_EP_ISR_Handler+0x59e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	4413      	add	r3, r2
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
 8004202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	00da      	lsls	r2, r3, #3
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	4413      	add	r3, r2
 800420c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004210:	623b      	str	r3, [r7, #32]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421c:	b29a      	uxth	r2, r3
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	801a      	strh	r2, [r3, #0]
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004230:	b29a      	uxth	r2, r3
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	e017      	b.n	8004268 <PCD_EP_ISR_Handler+0x5ce>
 8004238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d113      	bne.n	8004268 <PCD_EP_ISR_Handler+0x5ce>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424e:	4413      	add	r3, r2
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	00da      	lsls	r2, r3, #3
 8004258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425a:	4413      	add	r3, r2
 800425c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f009 fbf1 	bl	800da56 <HAL_PCD_DataInStageCallback>
 8004274:	e04a      	b.n	800430c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004276:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d13f      	bne.n	8004300 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	4413      	add	r3, r2
 800429a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80042a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d906      	bls.n	80042be <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80042b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80042b6:	1ad2      	subs	r2, r2, r3
 80042b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ba:	619a      	str	r2, [r3, #24]
 80042bc:	e002      	b.n	80042c4 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80042be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c0:	2200      	movs	r2, #0
 80042c2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80042c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f009 fbbf 	bl	800da56 <HAL_PCD_DataInStageCallback>
 80042d8:	e018      	b.n	800430c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80042da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80042e0:	441a      	add	r2, r3
 80042e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80042ec:	441a      	add	r2, r3
 80042ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042f8:	4618      	mov	r0, r3
 80042fa:	f003 fee4 	bl	80080c6 <USB_EPStartXfer>
 80042fe:	e005      	b.n	800430c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004300:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004302:	461a      	mov	r2, r3
 8004304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f917 	bl	800453a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004314:	b29b      	uxth	r3, r3
 8004316:	b21b      	sxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f6ff acc3 	blt.w	8003ca4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3748      	adds	r7, #72	@ 0x48
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d07c      	beq.n	800443a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	4413      	add	r3, r2
 800435a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004364:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	8b7b      	ldrh	r3, [r7, #26]
 800436c:	429a      	cmp	r2, r3
 800436e:	d306      	bcc.n	800437e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	8b7b      	ldrh	r3, [r7, #26]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	619a      	str	r2, [r3, #24]
 800437c:	e002      	b.n	8004384 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2200      	movs	r2, #0
 8004382:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d123      	bne.n	80043d4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	833b      	strh	r3, [r7, #24]
 80043a8:	8b3b      	ldrh	r3, [r7, #24]
 80043aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043ae:	833b      	strh	r3, [r7, #24]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	8b3b      	ldrh	r3, [r7, #24]
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01f      	beq.n	800441e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f8:	82fb      	strh	r3, [r7, #22]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	8afb      	ldrh	r3, [r7, #22]
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004416:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800441e:	8b7b      	ldrh	r3, [r7, #26]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8085 	beq.w	8004530 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6959      	ldr	r1, [r3, #20]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	891a      	ldrh	r2, [r3, #8]
 8004432:	8b7b      	ldrh	r3, [r7, #26]
 8004434:	f004 fd6e 	bl	8008f14 <USB_ReadPMA>
 8004438:	e07a      	b.n	8004530 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004442:	b29b      	uxth	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	4413      	add	r3, r2
 8004454:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	8b7b      	ldrh	r3, [r7, #26]
 8004466:	429a      	cmp	r2, r3
 8004468:	d306      	bcc.n	8004478 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	8b7b      	ldrh	r3, [r7, #26]
 8004470:	1ad2      	subs	r2, r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	619a      	str	r2, [r3, #24]
 8004476:	e002      	b.n	800447e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d123      	bne.n	80044ce <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800449c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a0:	83fb      	strh	r3, [r7, #30]
 80044a2:	8bfb      	ldrh	r3, [r7, #30]
 80044a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044a8:	83fb      	strh	r3, [r7, #30]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	8bfb      	ldrh	r3, [r7, #30]
 80044ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d11f      	bne.n	8004518 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f2:	83bb      	strh	r3, [r7, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	8bbb      	ldrh	r3, [r7, #28]
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004510:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004518:	8b7b      	ldrh	r3, [r7, #26]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6959      	ldr	r1, [r3, #20]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	895a      	ldrh	r2, [r3, #10]
 800452a:	8b7b      	ldrh	r3, [r7, #26]
 800452c:	f004 fcf2 	bl	8008f14 <USB_ReadPMA>
    }
  }

  return count;
 8004530:	8b7b      	ldrh	r3, [r7, #26]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b0a6      	sub	sp, #152	@ 0x98
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 81f7 	beq.w	8004942 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	4413      	add	r3, r2
 800456e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004578:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004584:	429a      	cmp	r2, r3
 8004586:	d907      	bls.n	8004598 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004590:	1ad2      	subs	r2, r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	619a      	str	r2, [r3, #24]
 8004596:	e002      	b.n	800459e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f040 80e1 	bne.w	800476a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d126      	bne.n	80045fe <HAL_PCD_EP_DB_Transmit+0xc4>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	4413      	add	r3, r2
 80045c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	00da      	lsls	r2, r3, #3
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	4413      	add	r3, r2
 80045d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fa:	801a      	strh	r2, [r3, #0]
 80045fc:	e01a      	b.n	8004634 <HAL_PCD_EP_DB_Transmit+0xfa>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d116      	bne.n	8004634 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004614:	b29b      	uxth	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	4413      	add	r3, r2
 800461c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	00da      	lsls	r2, r3, #3
 8004624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004626:	4413      	add	r3, r2
 8004628:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
 800462e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004630:	2200      	movs	r2, #0
 8004632:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d126      	bne.n	8004690 <HAL_PCD_EP_DB_Transmit+0x156>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	4413      	add	r3, r2
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	00da      	lsls	r2, r3, #3
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	4413      	add	r3, r2
 8004664:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004674:	b29a      	uxth	r2, r3
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004688:	b29a      	uxth	r2, r3
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	e017      	b.n	80046c0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d113      	bne.n	80046c0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	4413      	add	r3, r2
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	00da      	lsls	r2, r3, #3
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	4413      	add	r3, r2
 80046b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	2200      	movs	r2, #0
 80046be:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	78db      	ldrb	r3, [r3, #3]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d123      	bne.n	8004710 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e2:	837b      	strh	r3, [r7, #26]
 80046e4:	8b7b      	ldrh	r3, [r7, #26]
 80046e6:	f083 0320 	eor.w	r3, r3, #32
 80046ea:	837b      	strh	r3, [r7, #26]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	8b7b      	ldrh	r3, [r7, #26]
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f009 f99d 	bl	800da56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01f      	beq.n	8004766 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800473c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004740:	833b      	strh	r3, [r7, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	8b3b      	ldrh	r3, [r7, #24]
 8004752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800475a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800475e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e31f      	b.n	8004daa <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d021      	beq.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800478a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f040 82ca 	bne.w	8004d58 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047cc:	441a      	add	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047da:	441a      	add	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d309      	bcc.n	8004800 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047f8:	1ad2      	subs	r2, r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	621a      	str	r2, [r3, #32]
 80047fe:	e015      	b.n	800482c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004808:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800480c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004816:	e009      	b.n	800482c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d15f      	bne.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	643b      	str	r3, [r7, #64]	@ 0x40
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004842:	b29b      	uxth	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004848:	4413      	add	r3, r2
 800484a:	643b      	str	r3, [r7, #64]	@ 0x40
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	00da      	lsls	r2, r3, #3
 8004852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004854:	4413      	add	r3, r2
 8004856:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800485a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800485c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004866:	b29a      	uxth	r2, r3
 8004868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_PCD_EP_DB_Transmit+0x34e>
 8004872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004880:	b29a      	uxth	r2, r3
 8004882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	e051      	b.n	800492c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004888:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800488a:	2b3e      	cmp	r3, #62	@ 0x3e
 800488c:	d816      	bhi.n	80048bc <HAL_PCD_EP_DB_Transmit+0x382>
 800488e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	653b      	str	r3, [r7, #80]	@ 0x50
 8004894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x36a>
 800489e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a0:	3301      	adds	r3, #1
 80048a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e037      	b.n	800492c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80048bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x398>
 80048cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ce:	3b01      	subs	r3, #1
 80048d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048da:	b29b      	uxth	r3, r3
 80048dc:	029b      	lsls	r3, r3, #10
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4313      	orrs	r3, r2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	e01b      	b.n	800492c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d117      	bne.n	800492c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490a:	b29b      	uxth	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004910:	4413      	add	r3, r2
 8004912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	00da      	lsls	r2, r3, #3
 800491a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800491c:	4413      	add	r3, r2
 800491e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004922:	647b      	str	r3, [r7, #68]	@ 0x44
 8004924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004926:	b29a      	uxth	r2, r3
 8004928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800492a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6959      	ldr	r1, [r3, #20]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	891a      	ldrh	r2, [r3, #8]
 8004938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800493a:	b29b      	uxth	r3, r3
 800493c:	f004 faa7 	bl	8008e8e <USB_WritePMA>
 8004940:	e20a      	b.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	4413      	add	r3, r2
 800495c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004966:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004972:	429a      	cmp	r2, r3
 8004974:	d307      	bcc.n	8004986 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	619a      	str	r2, [r3, #24]
 8004984:	e002      	b.n	800498c <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 80f6 	bne.w	8004b82 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d126      	bne.n	80049ec <HAL_PCD_EP_DB_Transmit+0x4b2>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b2:	4413      	add	r3, r2
 80049b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	00da      	lsls	r2, r3, #3
 80049bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049be:	4413      	add	r3, r2
 80049c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	e01a      	b.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d116      	bne.n	8004a22 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a08:	4413      	add	r3, r2
 8004a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	00da      	lsls	r2, r3, #3
 8004a12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a14:	4413      	add	r3, r2
 8004a16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a1e:	2200      	movs	r2, #0
 8004a20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d12f      	bne.n	8004a92 <HAL_PCD_EP_DB_Transmit+0x558>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	00da      	lsls	r2, r3, #3
 8004a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	e01c      	b.n	8004acc <HAL_PCD_EP_DB_Transmit+0x592>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d118      	bne.n	8004acc <HAL_PCD_EP_DB_Transmit+0x592>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aaa:	4413      	add	r3, r2
 8004aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	00da      	lsls	r2, r3, #3
 8004ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aba:	4413      	add	r3, r2
 8004abc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ac8:	2200      	movs	r2, #0
 8004aca:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	78db      	ldrb	r3, [r3, #3]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d127      	bne.n	8004b24 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004af2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004af6:	f083 0320 	eor.w	r3, r3, #32
 8004afa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f008 ff93 	bl	800da56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d121      	bne.n	8004b7e <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b54:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e113      	b.n	8004daa <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d121      	bne.n	8004bd0 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	f040 80be 	bne.w	8004d58 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004be4:	441a      	add	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004bf2:	441a      	add	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d309      	bcc.n	8004c18 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c10:	1ad2      	subs	r2, r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	621a      	str	r2, [r3, #32]
 8004c16:	e015      	b.n	8004c44 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d107      	bne.n	8004c30 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004c20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c24:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c2e:	e009      	b.n	8004c44 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d15f      	bne.n	8004d12 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c66:	4413      	add	r3, r2
 8004c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	00da      	lsls	r2, r3, #3
 8004c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c78:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c88:	801a      	strh	r2, [r3, #0]
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	e04e      	b.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004ca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ca8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004caa:	d816      	bhi.n	8004cda <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004cac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_PCD_EP_DB_Transmit+0x788>
 8004cbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	e034      	b.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cec:	3b01      	subs	r3, #1
 8004cee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	e018      	b.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d114      	bne.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d28:	4413      	add	r3, r2
 8004d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	00da      	lsls	r2, r3, #3
 8004d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d34:	4413      	add	r3, r2
 8004d36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6959      	ldr	r1, [r3, #20]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	895a      	ldrh	r2, [r3, #10]
 8004d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f004 f89b 	bl	8008e8e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d72:	82fb      	strh	r3, [r7, #22]
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	f083 0310 	eor.w	r3, r3, #16
 8004d7a:	82fb      	strh	r3, [r7, #22]
 8004d7c:	8afb      	ldrh	r3, [r7, #22]
 8004d7e:	f083 0320 	eor.w	r3, r3, #32
 8004d82:	82fb      	strh	r3, [r7, #22]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3798      	adds	r7, #152	@ 0x98
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b087      	sub	sp, #28
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	817b      	strh	r3, [r7, #10]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004dc4:	897b      	ldrh	r3, [r7, #10]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dd0:	897b      	ldrh	r3, [r7, #10]
 8004dd2:	f003 0207 	and.w	r2, r3, #7
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	3310      	adds	r3, #16
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e009      	b.n	8004dfc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004de8:	897a      	ldrh	r2, [r7, #10]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004dfc:	893b      	ldrh	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d107      	bne.n	8004e12 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	80da      	strh	r2, [r3, #6]
 8004e10:	e00b      	b.n	8004e2a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2201      	movs	r2, #1
 8004e16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0c1b      	lsrs	r3, r3, #16
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f043 0302 	orr.w	r3, r3, #2
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d141      	bne.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea6:	d131      	bne.n	8004f0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea8:	4b47      	ldr	r3, [pc, #284]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eae:	4a46      	ldr	r2, [pc, #280]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ec0:	4a41      	ldr	r2, [pc, #260]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ec8:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2232      	movs	r2, #50	@ 0x32
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0c9b      	lsrs	r3, r3, #18
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ede:	e002      	b.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ee6:	4b38      	ldr	r3, [pc, #224]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef2:	d102      	bne.n	8004efa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f2      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004efa:	4b33      	ldr	r3, [pc, #204]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f06:	d158      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e057      	b.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f12:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f1c:	e04d      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f24:	d141      	bne.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f26:	4b28      	ldr	r3, [pc, #160]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f32:	d131      	bne.n	8004f98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f34:	4b24      	ldr	r3, [pc, #144]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3a:	4a23      	ldr	r2, [pc, #140]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f44:	4b20      	ldr	r3, [pc, #128]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2232      	movs	r2, #50	@ 0x32
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	0c9b      	lsrs	r3, r3, #18
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6a:	e002      	b.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f72:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7e:	d102      	bne.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f2      	bne.n	8004f6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f92:	d112      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e011      	b.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f98:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fa8:	e007      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fb2:	4a05      	ldr	r2, [pc, #20]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	431bde83 	.word	0x431bde83

08004fd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	@ (8004ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fe2:	6093      	str	r3, [r2, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40007000 	.word	0x40007000

08004ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e2fe      	b.n	8005604 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d075      	beq.n	80050fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005012:	4b97      	ldr	r3, [pc, #604]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
 800501a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800501c:	4b94      	ldr	r3, [pc, #592]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b0c      	cmp	r3, #12
 800502a:	d102      	bne.n	8005032 <HAL_RCC_OscConfig+0x3e>
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d002      	beq.n	8005038 <HAL_RCC_OscConfig+0x44>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d10b      	bne.n	8005050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005038:	4b8d      	ldr	r3, [pc, #564]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05b      	beq.n	80050fc <HAL_RCC_OscConfig+0x108>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d157      	bne.n	80050fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e2d9      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005058:	d106      	bne.n	8005068 <HAL_RCC_OscConfig+0x74>
 800505a:	4b85      	ldr	r3, [pc, #532]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a84      	ldr	r2, [pc, #528]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e01d      	b.n	80050a4 <HAL_RCC_OscConfig+0xb0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0x98>
 8005072:	4b7f      	ldr	r3, [pc, #508]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7e      	ldr	r2, [pc, #504]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b7c      	ldr	r3, [pc, #496]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a7b      	ldr	r2, [pc, #492]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0xb0>
 800508c:	4b78      	ldr	r3, [pc, #480]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a77      	ldr	r2, [pc, #476]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	4b75      	ldr	r3, [pc, #468]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a74      	ldr	r2, [pc, #464]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800509e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d013      	beq.n	80050d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc ff3e 	bl	8001f2c <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fc ff3a 	bl	8001f2c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	@ 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e29e      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0xc0>
 80050d2:	e014      	b.n	80050fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fc ff2a 	bl	8001f2c <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fc ff26 	bl	8001f2c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	@ 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e28a      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ee:	4b60      	ldr	r3, [pc, #384]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0xe8>
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d075      	beq.n	80051f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800510a:	4b59      	ldr	r3, [pc, #356]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005114:	4b56      	ldr	r3, [pc, #344]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b0c      	cmp	r3, #12
 8005122:	d102      	bne.n	800512a <HAL_RCC_OscConfig+0x136>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d002      	beq.n	8005130 <HAL_RCC_OscConfig+0x13c>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d11f      	bne.n	8005170 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005130:	4b4f      	ldr	r3, [pc, #316]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_OscConfig+0x154>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e25d      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b49      	ldr	r3, [pc, #292]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	4946      	ldr	r1, [pc, #280]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800515c:	4b45      	ldr	r3, [pc, #276]	@ (8005274 <HAL_RCC_OscConfig+0x280>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fc fd1b 	bl	8001b9c <HAL_InitTick>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d043      	beq.n	80051f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e249      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d023      	beq.n	80051c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005178:	4b3d      	ldr	r3, [pc, #244]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3c      	ldr	r2, [pc, #240]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800517e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fc fed2 	bl	8001f2c <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518c:	f7fc fece 	bl	8001f2c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e232      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519e:	4b34      	ldr	r3, [pc, #208]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	4b31      	ldr	r3, [pc, #196]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	492d      	ldr	r1, [pc, #180]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
 80051be:	e01a      	b.n	80051f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fc feae 	bl	8001f2c <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d4:	f7fc feaa 	bl	8001f2c <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e20e      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051e6:	4b22      	ldr	r3, [pc, #136]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x1e0>
 80051f2:	e000      	b.n	80051f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d041      	beq.n	8005286 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01c      	beq.n	8005244 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520a:	4b19      	ldr	r3, [pc, #100]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800520c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005210:	4a17      	ldr	r2, [pc, #92]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7fc fe87 	bl	8001f2c <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005222:	f7fc fe83 	bl	8001f2c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e1e7      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005234:	4b0e      	ldr	r3, [pc, #56]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0ef      	beq.n	8005222 <HAL_RCC_OscConfig+0x22e>
 8005242:	e020      	b.n	8005286 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005244:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800524a:	4a09      	ldr	r2, [pc, #36]	@ (8005270 <HAL_RCC_OscConfig+0x27c>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fc fe6a 	bl	8001f2c <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800525a:	e00d      	b.n	8005278 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525c:	f7fc fe66 	bl	8001f2c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d906      	bls.n	8005278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e1ca      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005278:	4b8c      	ldr	r3, [pc, #560]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ea      	bne.n	800525c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80a6 	beq.w	80053e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005294:	2300      	movs	r3, #0
 8005296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005298:	4b84      	ldr	r3, [pc, #528]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_OscConfig+0x2b4>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <HAL_RCC_OscConfig+0x2b6>
 80052a8:	2300      	movs	r3, #0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	4b7f      	ldr	r3, [pc, #508]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b2:	4a7e      	ldr	r2, [pc, #504]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ba:	4b7c      	ldr	r3, [pc, #496]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052c6:	2301      	movs	r3, #1
 80052c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ca:	4b79      	ldr	r3, [pc, #484]	@ (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d118      	bne.n	8005308 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052d6:	4b76      	ldr	r3, [pc, #472]	@ (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a75      	ldr	r2, [pc, #468]	@ (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e2:	f7fc fe23 	bl	8001f2c <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ea:	f7fc fe1f 	bl	8001f2c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e183      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fc:	4b6c      	ldr	r3, [pc, #432]	@ (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d108      	bne.n	8005322 <HAL_RCC_OscConfig+0x32e>
 8005310:	4b66      	ldr	r3, [pc, #408]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005316:	4a65      	ldr	r2, [pc, #404]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005320:	e024      	b.n	800536c <HAL_RCC_OscConfig+0x378>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b05      	cmp	r3, #5
 8005328:	d110      	bne.n	800534c <HAL_RCC_OscConfig+0x358>
 800532a:	4b60      	ldr	r3, [pc, #384]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005330:	4a5e      	ldr	r2, [pc, #376]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800533a:	4b5c      	ldr	r3, [pc, #368]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005340:	4a5a      	ldr	r2, [pc, #360]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800534a:	e00f      	b.n	800536c <HAL_RCC_OscConfig+0x378>
 800534c:	4b57      	ldr	r3, [pc, #348]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	4a56      	ldr	r2, [pc, #344]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005362:	4a52      	ldr	r2, [pc, #328]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d016      	beq.n	80053a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005374:	f7fc fdda 	bl	8001f2c <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fc fdd6 	bl	8001f2c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e138      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005392:	4b46      	ldr	r3, [pc, #280]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0ed      	beq.n	800537c <HAL_RCC_OscConfig+0x388>
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a2:	f7fc fdc3 	bl	8001f2c <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fc fdbf 	bl	8001f2c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e121      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c0:	4b3a      	ldr	r3, [pc, #232]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ed      	bne.n	80053aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d4:	4b35      	ldr	r3, [pc, #212]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	4a34      	ldr	r2, [pc, #208]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d03c      	beq.n	8005466 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01c      	beq.n	800542e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053f4:	4b2d      	ldr	r3, [pc, #180]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053fa:	4a2c      	ldr	r2, [pc, #176]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fc fd92 	bl	8001f2c <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540c:	f7fc fd8e 	bl	8001f2c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0f2      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800541e:	4b23      	ldr	r3, [pc, #140]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ef      	beq.n	800540c <HAL_RCC_OscConfig+0x418>
 800542c:	e01b      	b.n	8005466 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800542e:	4b1f      	ldr	r3, [pc, #124]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005434:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543e:	f7fc fd75 	bl	8001f2c <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005446:	f7fc fd71 	bl	8001f2c <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e0d5      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005458:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1ef      	bne.n	8005446 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80c9 	beq.w	8005602 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005470:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b0c      	cmp	r3, #12
 800547a:	f000 8083 	beq.w	8005584 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d15e      	bne.n	8005544 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b09      	ldr	r3, [pc, #36]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a08      	ldr	r2, [pc, #32]	@ (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800548c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fc fd4b 	bl	8001f2c <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005498:	e00c      	b.n	80054b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549a:	f7fc fd47 	bl	8001f2c <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d905      	bls.n	80054b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e0ab      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b4:	4b55      	ldr	r3, [pc, #340]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ec      	bne.n	800549a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c0:	4b52      	ldr	r3, [pc, #328]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	4b52      	ldr	r3, [pc, #328]	@ (8005610 <HAL_RCC_OscConfig+0x61c>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6a11      	ldr	r1, [r2, #32]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054d0:	3a01      	subs	r2, #1
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	4311      	orrs	r1, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80054da:	0212      	lsls	r2, r2, #8
 80054dc:	4311      	orrs	r1, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054e2:	0852      	lsrs	r2, r2, #1
 80054e4:	3a01      	subs	r2, #1
 80054e6:	0552      	lsls	r2, r2, #21
 80054e8:	4311      	orrs	r1, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054ee:	0852      	lsrs	r2, r2, #1
 80054f0:	3a01      	subs	r2, #1
 80054f2:	0652      	lsls	r2, r2, #25
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054fa:	06d2      	lsls	r2, r2, #27
 80054fc:	430a      	orrs	r2, r1
 80054fe:	4943      	ldr	r1, [pc, #268]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005504:	4b41      	ldr	r3, [pc, #260]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a40      	ldr	r2, [pc, #256]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 800550a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800550e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005510:	4b3e      	ldr	r3, [pc, #248]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a3d      	ldr	r2, [pc, #244]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800551a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fc fd06 	bl	8001f2c <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fc fd02 	bl	8001f2c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e066      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005536:	4b35      	ldr	r3, [pc, #212]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x530>
 8005542:	e05e      	b.n	8005602 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005544:	4b31      	ldr	r3, [pc, #196]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a30      	ldr	r2, [pc, #192]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800554e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fc fcec 	bl	8001f2c <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005558:	f7fc fce8 	bl	8001f2c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e04c      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800556a:	4b28      	ldr	r3, [pc, #160]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005576:	4b25      	ldr	r3, [pc, #148]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	4924      	ldr	r1, [pc, #144]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 800557c:	4b25      	ldr	r3, [pc, #148]	@ (8005614 <HAL_RCC_OscConfig+0x620>)
 800557e:	4013      	ands	r3, r2
 8005580:	60cb      	str	r3, [r1, #12]
 8005582:	e03e      	b.n	8005602 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e039      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005590:	4b1e      	ldr	r3, [pc, #120]	@ (800560c <HAL_RCC_OscConfig+0x618>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f003 0203 	and.w	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d12c      	bne.n	80055fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	3b01      	subs	r3, #1
 80055b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d123      	bne.n	80055fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d11b      	bne.n	80055fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d113      	bne.n	80055fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	3b01      	subs	r3, #1
 80055e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d109      	bne.n	80055fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	3b01      	subs	r3, #1
 80055f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000
 8005610:	019f800c 	.word	0x019f800c
 8005614:	feeefffc 	.word	0xfeeefffc

08005618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e11e      	b.n	800586e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b91      	ldr	r3, [pc, #580]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d910      	bls.n	8005660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b8e      	ldr	r3, [pc, #568]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 020f 	bic.w	r2, r3, #15
 8005646:	498c      	ldr	r1, [pc, #560]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b8a      	ldr	r3, [pc, #552]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e106      	b.n	800586e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d073      	beq.n	8005754 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d129      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005674:	4b81      	ldr	r3, [pc, #516]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0f4      	b.n	800586e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005684:	f000 f9d0 	bl	8005a28 <RCC_GetSysClockFreqFromPLLSource>
 8005688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4a7c      	ldr	r2, [pc, #496]	@ (8005880 <HAL_RCC_ClockConfig+0x268>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d93f      	bls.n	8005712 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005692:	4b7a      	ldr	r3, [pc, #488]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d033      	beq.n	8005712 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d12f      	bne.n	8005712 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056b2:	4b72      	ldr	r3, [pc, #456]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ba:	4a70      	ldr	r2, [pc, #448]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 80056bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e024      	b.n	8005712 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d107      	bne.n	80056e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056d0:	4b6a      	ldr	r3, [pc, #424]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0c6      	b.n	800586e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e0:	4b66      	ldr	r3, [pc, #408]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0be      	b.n	800586e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056f0:	f000 f8ce 	bl	8005890 <HAL_RCC_GetSysClockFreq>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4a61      	ldr	r2, [pc, #388]	@ (8005880 <HAL_RCC_ClockConfig+0x268>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d909      	bls.n	8005712 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056fe:	4b5f      	ldr	r3, [pc, #380]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005706:	4a5d      	ldr	r2, [pc, #372]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800570c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005712:	4b5a      	ldr	r3, [pc, #360]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f023 0203 	bic.w	r2, r3, #3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4957      	ldr	r1, [pc, #348]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005720:	4313      	orrs	r3, r2
 8005722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005724:	f7fc fc02 	bl	8001f2c <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572a:	e00a      	b.n	8005742 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800572c:	f7fc fbfe 	bl	8001f2c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e095      	b.n	800586e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005742:	4b4e      	ldr	r3, [pc, #312]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 020c 	and.w	r2, r3, #12
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	429a      	cmp	r2, r3
 8005752:	d1eb      	bne.n	800572c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d023      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800576c:	4b43      	ldr	r3, [pc, #268]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4a42      	ldr	r2, [pc, #264]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005772:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005776:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005784:	4b3d      	ldr	r3, [pc, #244]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800578c:	4a3b      	ldr	r2, [pc, #236]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 800578e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005794:	4b39      	ldr	r3, [pc, #228]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4936      	ldr	r1, [pc, #216]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
 80057a6:	e008      	b.n	80057ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b80      	cmp	r3, #128	@ 0x80
 80057ac:	d105      	bne.n	80057ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057ae:	4b33      	ldr	r3, [pc, #204]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4a32      	ldr	r2, [pc, #200]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 80057b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d21d      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 020f 	bic.w	r2, r3, #15
 80057d0:	4929      	ldr	r1, [pc, #164]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057d8:	f7fc fba8 	bl	8001f2c <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e0:	f7fc fba4 	bl	8001f2c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e03b      	b.n	800586e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f6:	4b20      	ldr	r3, [pc, #128]	@ (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d1ed      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005810:	4b1a      	ldr	r3, [pc, #104]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4917      	ldr	r1, [pc, #92]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800582e:	4b13      	ldr	r3, [pc, #76]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	490f      	ldr	r1, [pc, #60]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005842:	f000 f825 	bl	8005890 <HAL_RCC_GetSysClockFreq>
 8005846:	4602      	mov	r2, r0
 8005848:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <HAL_RCC_ClockConfig+0x264>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	490c      	ldr	r1, [pc, #48]	@ (8005884 <HAL_RCC_ClockConfig+0x26c>)
 8005854:	5ccb      	ldrb	r3, [r1, r3]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	fa22 f303 	lsr.w	r3, r2, r3
 800585e:	4a0a      	ldr	r2, [pc, #40]	@ (8005888 <HAL_RCC_ClockConfig+0x270>)
 8005860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005862:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <HAL_RCC_ClockConfig+0x274>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fc f998 	bl	8001b9c <HAL_InitTick>
 800586c:	4603      	mov	r3, r0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40022000 	.word	0x40022000
 800587c:	40021000 	.word	0x40021000
 8005880:	04c4b400 	.word	0x04c4b400
 8005884:	08011090 	.word	0x08011090
 8005888:	20000000 	.word	0x20000000
 800588c:	20000004 	.word	0x20000004

08005890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005896:	4b2c      	ldr	r3, [pc, #176]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d102      	bne.n	80058a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058a2:	4b2a      	ldr	r3, [pc, #168]	@ (800594c <HAL_RCC_GetSysClockFreq+0xbc>)
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e047      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058a8:	4b27      	ldr	r3, [pc, #156]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 030c 	and.w	r3, r3, #12
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d102      	bne.n	80058ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058b4:	4b26      	ldr	r3, [pc, #152]	@ (8005950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e03e      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058ba:	4b23      	ldr	r3, [pc, #140]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b0c      	cmp	r3, #12
 80058c4:	d136      	bne.n	8005934 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058c6:	4b20      	ldr	r3, [pc, #128]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	3301      	adds	r3, #1
 80058dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d10c      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	4a16      	ldr	r2, [pc, #88]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ee:	68d2      	ldr	r2, [r2, #12]
 80058f0:	0a12      	lsrs	r2, r2, #8
 80058f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	617b      	str	r3, [r7, #20]
      break;
 80058fc:	e00c      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058fe:	4a13      	ldr	r2, [pc, #76]	@ (800594c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	4a10      	ldr	r2, [pc, #64]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005908:	68d2      	ldr	r2, [r2, #12]
 800590a:	0a12      	lsrs	r2, r2, #8
 800590c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005910:	fb02 f303 	mul.w	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
      break;
 8005916:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005918:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	0e5b      	lsrs	r3, r3, #25
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	3301      	adds	r3, #1
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	e001      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005938:	693b      	ldr	r3, [r7, #16]
}
 800593a:	4618      	mov	r0, r3
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
 800594c:	00f42400 	.word	0x00f42400
 8005950:	007a1200 	.word	0x007a1200

08005954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005958:	4b03      	ldr	r3, [pc, #12]	@ (8005968 <HAL_RCC_GetHCLKFreq+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	20000000 	.word	0x20000000

0800596c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005970:	f7ff fff0 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4904      	ldr	r1, [pc, #16]	@ (8005994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000
 8005994:	080110a0 	.word	0x080110a0

08005998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800599c:	f7ff ffda 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0adb      	lsrs	r3, r3, #11
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4904      	ldr	r1, [pc, #16]	@ (80059c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40021000 	.word	0x40021000
 80059c0:	080110a0 	.word	0x080110a0

080059c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	220f      	movs	r2, #15
 80059d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <HAL_RCC_GetClockConfig+0x5c>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0203 	and.w	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80059e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a20 <HAL_RCC_GetClockConfig+0x5c>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80059ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <HAL_RCC_GetClockConfig+0x5c>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059f8:	4b09      	ldr	r3, [pc, #36]	@ (8005a20 <HAL_RCC_GetClockConfig+0x5c>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	08db      	lsrs	r3, r3, #3
 80059fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a06:	4b07      	ldr	r3, [pc, #28]	@ (8005a24 <HAL_RCC_GetClockConfig+0x60>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 020f 	and.w	r2, r3, #15
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	601a      	str	r2, [r3, #0]
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40022000 	.word	0x40022000

08005a28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a38:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	3301      	adds	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d10c      	bne.n	8005a66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a4c:	4a17      	ldr	r2, [pc, #92]	@ (8005aac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	4a14      	ldr	r2, [pc, #80]	@ (8005aa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a56:	68d2      	ldr	r2, [r2, #12]
 8005a58:	0a12      	lsrs	r2, r2, #8
 8005a5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	617b      	str	r3, [r7, #20]
    break;
 8005a64:	e00c      	b.n	8005a80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a66:	4a12      	ldr	r2, [pc, #72]	@ (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8005aa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a70:	68d2      	ldr	r2, [r2, #12]
 8005a72:	0a12      	lsrs	r2, r2, #8
 8005a74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
    break;
 8005a7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a80:	4b09      	ldr	r3, [pc, #36]	@ (8005aa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	0e5b      	lsrs	r3, r3, #25
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a9a:	687b      	ldr	r3, [r7, #4]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	007a1200 	.word	0x007a1200
 8005ab0:	00f42400 	.word	0x00f42400

08005ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005abc:	2300      	movs	r3, #0
 8005abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8098 	beq.w	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b43      	ldr	r3, [pc, #268]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10d      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	4b40      	ldr	r3, [pc, #256]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aee:	4b3d      	ldr	r3, [pc, #244]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afa:	2301      	movs	r3, #1
 8005afc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005afe:	4b3a      	ldr	r3, [pc, #232]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a39      	ldr	r2, [pc, #228]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b0a:	f7fc fa0f 	bl	8001f2c <HAL_GetTick>
 8005b0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b10:	e009      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fc fa0b 	bl	8001f2c <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d902      	bls.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	74fb      	strb	r3, [r7, #19]
        break;
 8005b24:	e005      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b26:	4b30      	ldr	r3, [pc, #192]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0ef      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d159      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b38:	4b2a      	ldr	r3, [pc, #168]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01e      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d019      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b54:	4b23      	ldr	r3, [pc, #140]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b60:	4b20      	ldr	r3, [pc, #128]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b66:	4a1f      	ldr	r2, [pc, #124]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b70:	4b1c      	ldr	r3, [pc, #112]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b76:	4a1b      	ldr	r2, [pc, #108]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b80:	4a18      	ldr	r2, [pc, #96]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fc f9cb 	bl	8001f2c <HAL_GetTick>
 8005b96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b98:	e00b      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fc f9c7 	bl	8001f2c <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d902      	bls.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	74fb      	strb	r3, [r7, #19]
            break;
 8005bb0:	e006      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0ec      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc6:	4b07      	ldr	r3, [pc, #28]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd4:	4903      	ldr	r1, [pc, #12]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	74bb      	strb	r3, [r7, #18]
 8005be2:	e005      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bf0:	7c7b      	ldrb	r3, [r7, #17]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d105      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4ba7      	ldr	r3, [pc, #668]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	4aa6      	ldr	r2, [pc, #664]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c0e:	4ba1      	ldr	r3, [pc, #644]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c14:	f023 0203 	bic.w	r2, r3, #3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	499d      	ldr	r1, [pc, #628]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c30:	4b98      	ldr	r3, [pc, #608]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c36:	f023 020c 	bic.w	r2, r3, #12
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4995      	ldr	r1, [pc, #596]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c52:	4b90      	ldr	r3, [pc, #576]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	498c      	ldr	r1, [pc, #560]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c74:	4b87      	ldr	r3, [pc, #540]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4984      	ldr	r1, [pc, #528]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c96:	4b7f      	ldr	r3, [pc, #508]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	497b      	ldr	r1, [pc, #492]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cb8:	4b76      	ldr	r3, [pc, #472]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	4973      	ldr	r1, [pc, #460]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cda:	4b6e      	ldr	r3, [pc, #440]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	496a      	ldr	r1, [pc, #424]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cfc:	4b65      	ldr	r3, [pc, #404]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	4962      	ldr	r1, [pc, #392]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	4959      	ldr	r1, [pc, #356]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d40:	4b54      	ldr	r3, [pc, #336]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d46:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	4951      	ldr	r1, [pc, #324]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d015      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d62:	4b4c      	ldr	r3, [pc, #304]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	4948      	ldr	r1, [pc, #288]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d80:	d105      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d82:	4b44      	ldr	r3, [pc, #272]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	4a43      	ldr	r2, [pc, #268]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d8c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d015      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	493a      	ldr	r1, [pc, #232]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005db8:	d105      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dba:	4b36      	ldr	r3, [pc, #216]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4a35      	ldr	r2, [pc, #212]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dc4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d015      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dd2:	4b30      	ldr	r3, [pc, #192]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de0:	492c      	ldr	r1, [pc, #176]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005df0:	d105      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df2:	4b28      	ldr	r3, [pc, #160]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	4a27      	ldr	r2, [pc, #156]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dfc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d015      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e0a:	4b22      	ldr	r3, [pc, #136]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	491e      	ldr	r1, [pc, #120]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e28:	d105      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	4a19      	ldr	r2, [pc, #100]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e34:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d015      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e42:	4b14      	ldr	r3, [pc, #80]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	4910      	ldr	r1, [pc, #64]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e62:	4b0c      	ldr	r3, [pc, #48]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4a0b      	ldr	r2, [pc, #44]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e6c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e7a:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e80:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	4902      	ldr	r1, [pc, #8]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	e001      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e94:	40021000 	.word	0x40021000
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9e:	d105      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ea0:	4b21      	ldr	r3, [pc, #132]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eaa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ebe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec6:	4918      	ldr	r1, [pc, #96]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ed8:	4b13      	ldr	r3, [pc, #76]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a12      	ldr	r2, [pc, #72]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005efe:	490a      	ldr	r1, [pc, #40]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f0e:	d105      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f10:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a04      	ldr	r2, [pc, #16]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000

08005f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e049      	b.n	8005fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f841 	bl	8005fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 fa28 	bl	80063c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e04f      	b.n	80060a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a23      	ldr	r2, [pc, #140]	@ (80060b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d018      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	@ (80060bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d115      	bne.n	8006092 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <HAL_TIM_Base_Start_IT+0xdc>)
 800606e:	4013      	ands	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d015      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800607e:	d011      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	e008      	b.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40013400 	.word	0x40013400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40015000 	.word	0x40015000
 80060cc:	00010007 	.word	0x00010007

080060d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d020      	beq.n	8006134 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01b      	beq.n	8006134 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0202 	mvn.w	r2, #2
 8006104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f931 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 8006120:	e005      	b.n	800612e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f923 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f934 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d020      	beq.n	8006180 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01b      	beq.n	8006180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0204 	mvn.w	r2, #4
 8006150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f90b 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 800616c:	e005      	b.n	800617a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8fd 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f90e 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d020      	beq.n	80061cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01b      	beq.n	80061cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0208 	mvn.w	r2, #8
 800619c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2204      	movs	r2, #4
 80061a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8e5 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 80061b8:	e005      	b.n	80061c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8d7 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f8e8 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d020      	beq.n	8006218 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01b      	beq.n	8006218 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0210 	mvn.w	r2, #16
 80061e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2208      	movs	r2, #8
 80061ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f8bf 	bl	8006382 <HAL_TIM_IC_CaptureCallback>
 8006204:	e005      	b.n	8006212 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f8b1 	bl	800636e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f8c2 	bl	8006396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00c      	beq.n	800623c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0201 	mvn.w	r2, #1
 8006234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb fb62 	bl	8001900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00c      	beq.n	800626a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f95f 	bl	8006528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00c      	beq.n	800628e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f957 	bl	800653c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00c      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f87c 	bl	80063aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f06f 0220 	mvn.w	r2, #32
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f91f 	bl	8006514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80062f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f92b 	bl	8006550 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00c      	beq.n	800631e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f923 	bl	8006564 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00c      	beq.n	8006342 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800633a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f91b 	bl	8006578 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800635e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f913 	bl	800658c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a48      	ldr	r2, [pc, #288]	@ (80064f4 <TIM_Base_SetConfig+0x134>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a45      	ldr	r2, [pc, #276]	@ (80064f8 <TIM_Base_SetConfig+0x138>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a44      	ldr	r2, [pc, #272]	@ (80064fc <TIM_Base_SetConfig+0x13c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a43      	ldr	r2, [pc, #268]	@ (8006500 <TIM_Base_SetConfig+0x140>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0x40>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a42      	ldr	r2, [pc, #264]	@ (8006504 <TIM_Base_SetConfig+0x144>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a37      	ldr	r2, [pc, #220]	@ (80064f4 <TIM_Base_SetConfig+0x134>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01f      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006420:	d01b      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a34      	ldr	r2, [pc, #208]	@ (80064f8 <TIM_Base_SetConfig+0x138>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d017      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a33      	ldr	r2, [pc, #204]	@ (80064fc <TIM_Base_SetConfig+0x13c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a32      	ldr	r2, [pc, #200]	@ (8006500 <TIM_Base_SetConfig+0x140>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a32      	ldr	r2, [pc, #200]	@ (8006508 <TIM_Base_SetConfig+0x148>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a31      	ldr	r2, [pc, #196]	@ (800650c <TIM_Base_SetConfig+0x14c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a30      	ldr	r2, [pc, #192]	@ (8006510 <TIM_Base_SetConfig+0x150>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_Base_SetConfig+0x9a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a2b      	ldr	r2, [pc, #172]	@ (8006504 <TIM_Base_SetConfig+0x144>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d108      	bne.n	800646c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a18      	ldr	r2, [pc, #96]	@ (80064f4 <TIM_Base_SetConfig+0x134>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <TIM_Base_SetConfig+0x100>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a19      	ldr	r2, [pc, #100]	@ (8006500 <TIM_Base_SetConfig+0x140>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00f      	beq.n	80064c0 <TIM_Base_SetConfig+0x100>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a19      	ldr	r2, [pc, #100]	@ (8006508 <TIM_Base_SetConfig+0x148>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <TIM_Base_SetConfig+0x100>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a18      	ldr	r2, [pc, #96]	@ (800650c <TIM_Base_SetConfig+0x14c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_Base_SetConfig+0x100>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a17      	ldr	r2, [pc, #92]	@ (8006510 <TIM_Base_SetConfig+0x150>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_Base_SetConfig+0x100>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a12      	ldr	r2, [pc, #72]	@ (8006504 <TIM_Base_SetConfig+0x144>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d103      	bne.n	80064c8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d105      	bne.n	80064e6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	611a      	str	r2, [r3, #16]
  }
}
 80064e6:	bf00      	nop
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800
 8006500:	40013400 	.word	0x40013400
 8006504:	40015000 	.word	0x40015000
 8006508:	40014000 	.word	0x40014000
 800650c:	40014400 	.word	0x40014400
 8006510:	40014800 	.word	0x40014800

08006514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e042      	b.n	8006638 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fb fa91 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2224      	movs	r2, #36	@ 0x24
 80065ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fb24 	bl	8006c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f825 	bl	8006640 <UART_SetConfig>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e01b      	b.n	8006638 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800660e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800661e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fba3 	bl	8006d7c <UART_CheckIdleState>
 8006636:	4603      	mov	r3, r0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006644:	b08c      	sub	sp, #48	@ 0x30
 8006646:	af00      	add	r7, sp, #0
 8006648:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	431a      	orrs	r2, r3
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	431a      	orrs	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	4313      	orrs	r3, r2
 8006666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4baa      	ldr	r3, [pc, #680]	@ (8006918 <UART_SetConfig+0x2d8>)
 8006670:	4013      	ands	r3, r2
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006678:	430b      	orrs	r3, r1
 800667a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a9f      	ldr	r2, [pc, #636]	@ (800691c <UART_SetConfig+0x2dc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d004      	beq.n	80066ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066a8:	4313      	orrs	r3, r2
 80066aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80066b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	f023 010f 	bic.w	r1, r3, #15
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a90      	ldr	r2, [pc, #576]	@ (8006920 <UART_SetConfig+0x2e0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d125      	bne.n	8006730 <UART_SetConfig+0xf0>
 80066e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006924 <UART_SetConfig+0x2e4>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d81a      	bhi.n	8006728 <UART_SetConfig+0xe8>
 80066f2:	a201      	add	r2, pc, #4	@ (adr r2, 80066f8 <UART_SetConfig+0xb8>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006709 	.word	0x08006709
 80066fc:	08006719 	.word	0x08006719
 8006700:	08006711 	.word	0x08006711
 8006704:	08006721 	.word	0x08006721
 8006708:	2301      	movs	r3, #1
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e116      	b.n	800693e <UART_SetConfig+0x2fe>
 8006710:	2302      	movs	r3, #2
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e112      	b.n	800693e <UART_SetConfig+0x2fe>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e10e      	b.n	800693e <UART_SetConfig+0x2fe>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e10a      	b.n	800693e <UART_SetConfig+0x2fe>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e106      	b.n	800693e <UART_SetConfig+0x2fe>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a7c      	ldr	r2, [pc, #496]	@ (8006928 <UART_SetConfig+0x2e8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d138      	bne.n	80067ac <UART_SetConfig+0x16c>
 800673a:	4b7a      	ldr	r3, [pc, #488]	@ (8006924 <UART_SetConfig+0x2e4>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006740:	f003 030c 	and.w	r3, r3, #12
 8006744:	2b0c      	cmp	r3, #12
 8006746:	d82d      	bhi.n	80067a4 <UART_SetConfig+0x164>
 8006748:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <UART_SetConfig+0x110>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006785 	.word	0x08006785
 8006754:	080067a5 	.word	0x080067a5
 8006758:	080067a5 	.word	0x080067a5
 800675c:	080067a5 	.word	0x080067a5
 8006760:	08006795 	.word	0x08006795
 8006764:	080067a5 	.word	0x080067a5
 8006768:	080067a5 	.word	0x080067a5
 800676c:	080067a5 	.word	0x080067a5
 8006770:	0800678d 	.word	0x0800678d
 8006774:	080067a5 	.word	0x080067a5
 8006778:	080067a5 	.word	0x080067a5
 800677c:	080067a5 	.word	0x080067a5
 8006780:	0800679d 	.word	0x0800679d
 8006784:	2300      	movs	r3, #0
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678a:	e0d8      	b.n	800693e <UART_SetConfig+0x2fe>
 800678c:	2302      	movs	r3, #2
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006792:	e0d4      	b.n	800693e <UART_SetConfig+0x2fe>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679a:	e0d0      	b.n	800693e <UART_SetConfig+0x2fe>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a2:	e0cc      	b.n	800693e <UART_SetConfig+0x2fe>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067aa:	e0c8      	b.n	800693e <UART_SetConfig+0x2fe>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a5e      	ldr	r2, [pc, #376]	@ (800692c <UART_SetConfig+0x2ec>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d125      	bne.n	8006802 <UART_SetConfig+0x1c2>
 80067b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006924 <UART_SetConfig+0x2e4>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067c0:	2b30      	cmp	r3, #48	@ 0x30
 80067c2:	d016      	beq.n	80067f2 <UART_SetConfig+0x1b2>
 80067c4:	2b30      	cmp	r3, #48	@ 0x30
 80067c6:	d818      	bhi.n	80067fa <UART_SetConfig+0x1ba>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d00a      	beq.n	80067e2 <UART_SetConfig+0x1a2>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d814      	bhi.n	80067fa <UART_SetConfig+0x1ba>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <UART_SetConfig+0x19a>
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d008      	beq.n	80067ea <UART_SetConfig+0x1aa>
 80067d8:	e00f      	b.n	80067fa <UART_SetConfig+0x1ba>
 80067da:	2300      	movs	r3, #0
 80067dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e0:	e0ad      	b.n	800693e <UART_SetConfig+0x2fe>
 80067e2:	2302      	movs	r3, #2
 80067e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e8:	e0a9      	b.n	800693e <UART_SetConfig+0x2fe>
 80067ea:	2304      	movs	r3, #4
 80067ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f0:	e0a5      	b.n	800693e <UART_SetConfig+0x2fe>
 80067f2:	2308      	movs	r3, #8
 80067f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f8:	e0a1      	b.n	800693e <UART_SetConfig+0x2fe>
 80067fa:	2310      	movs	r3, #16
 80067fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006800:	e09d      	b.n	800693e <UART_SetConfig+0x2fe>
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a4a      	ldr	r2, [pc, #296]	@ (8006930 <UART_SetConfig+0x2f0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d125      	bne.n	8006858 <UART_SetConfig+0x218>
 800680c:	4b45      	ldr	r3, [pc, #276]	@ (8006924 <UART_SetConfig+0x2e4>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006812:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006816:	2bc0      	cmp	r3, #192	@ 0xc0
 8006818:	d016      	beq.n	8006848 <UART_SetConfig+0x208>
 800681a:	2bc0      	cmp	r3, #192	@ 0xc0
 800681c:	d818      	bhi.n	8006850 <UART_SetConfig+0x210>
 800681e:	2b80      	cmp	r3, #128	@ 0x80
 8006820:	d00a      	beq.n	8006838 <UART_SetConfig+0x1f8>
 8006822:	2b80      	cmp	r3, #128	@ 0x80
 8006824:	d814      	bhi.n	8006850 <UART_SetConfig+0x210>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <UART_SetConfig+0x1f0>
 800682a:	2b40      	cmp	r3, #64	@ 0x40
 800682c:	d008      	beq.n	8006840 <UART_SetConfig+0x200>
 800682e:	e00f      	b.n	8006850 <UART_SetConfig+0x210>
 8006830:	2300      	movs	r3, #0
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006836:	e082      	b.n	800693e <UART_SetConfig+0x2fe>
 8006838:	2302      	movs	r3, #2
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683e:	e07e      	b.n	800693e <UART_SetConfig+0x2fe>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e07a      	b.n	800693e <UART_SetConfig+0x2fe>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e076      	b.n	800693e <UART_SetConfig+0x2fe>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e072      	b.n	800693e <UART_SetConfig+0x2fe>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a35      	ldr	r2, [pc, #212]	@ (8006934 <UART_SetConfig+0x2f4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d12a      	bne.n	80068b8 <UART_SetConfig+0x278>
 8006862:	4b30      	ldr	r3, [pc, #192]	@ (8006924 <UART_SetConfig+0x2e4>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006870:	d01a      	beq.n	80068a8 <UART_SetConfig+0x268>
 8006872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006876:	d81b      	bhi.n	80068b0 <UART_SetConfig+0x270>
 8006878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687c:	d00c      	beq.n	8006898 <UART_SetConfig+0x258>
 800687e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006882:	d815      	bhi.n	80068b0 <UART_SetConfig+0x270>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <UART_SetConfig+0x250>
 8006888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800688c:	d008      	beq.n	80068a0 <UART_SetConfig+0x260>
 800688e:	e00f      	b.n	80068b0 <UART_SetConfig+0x270>
 8006890:	2300      	movs	r3, #0
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006896:	e052      	b.n	800693e <UART_SetConfig+0x2fe>
 8006898:	2302      	movs	r3, #2
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800689e:	e04e      	b.n	800693e <UART_SetConfig+0x2fe>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a6:	e04a      	b.n	800693e <UART_SetConfig+0x2fe>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ae:	e046      	b.n	800693e <UART_SetConfig+0x2fe>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b6:	e042      	b.n	800693e <UART_SetConfig+0x2fe>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a17      	ldr	r2, [pc, #92]	@ (800691c <UART_SetConfig+0x2dc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d13a      	bne.n	8006938 <UART_SetConfig+0x2f8>
 80068c2:	4b18      	ldr	r3, [pc, #96]	@ (8006924 <UART_SetConfig+0x2e4>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068d0:	d01a      	beq.n	8006908 <UART_SetConfig+0x2c8>
 80068d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068d6:	d81b      	bhi.n	8006910 <UART_SetConfig+0x2d0>
 80068d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068dc:	d00c      	beq.n	80068f8 <UART_SetConfig+0x2b8>
 80068de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e2:	d815      	bhi.n	8006910 <UART_SetConfig+0x2d0>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <UART_SetConfig+0x2b0>
 80068e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ec:	d008      	beq.n	8006900 <UART_SetConfig+0x2c0>
 80068ee:	e00f      	b.n	8006910 <UART_SetConfig+0x2d0>
 80068f0:	2300      	movs	r3, #0
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f6:	e022      	b.n	800693e <UART_SetConfig+0x2fe>
 80068f8:	2302      	movs	r3, #2
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fe:	e01e      	b.n	800693e <UART_SetConfig+0x2fe>
 8006900:	2304      	movs	r3, #4
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006906:	e01a      	b.n	800693e <UART_SetConfig+0x2fe>
 8006908:	2308      	movs	r3, #8
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800690e:	e016      	b.n	800693e <UART_SetConfig+0x2fe>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006916:	e012      	b.n	800693e <UART_SetConfig+0x2fe>
 8006918:	cfff69f3 	.word	0xcfff69f3
 800691c:	40008000 	.word	0x40008000
 8006920:	40013800 	.word	0x40013800
 8006924:	40021000 	.word	0x40021000
 8006928:	40004400 	.word	0x40004400
 800692c:	40004800 	.word	0x40004800
 8006930:	40004c00 	.word	0x40004c00
 8006934:	40005000 	.word	0x40005000
 8006938:	2310      	movs	r3, #16
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4aae      	ldr	r2, [pc, #696]	@ (8006bfc <UART_SetConfig+0x5bc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	f040 8097 	bne.w	8006a78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800694a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800694e:	2b08      	cmp	r3, #8
 8006950:	d823      	bhi.n	800699a <UART_SetConfig+0x35a>
 8006952:	a201      	add	r2, pc, #4	@ (adr r2, 8006958 <UART_SetConfig+0x318>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	0800697d 	.word	0x0800697d
 800695c:	0800699b 	.word	0x0800699b
 8006960:	08006985 	.word	0x08006985
 8006964:	0800699b 	.word	0x0800699b
 8006968:	0800698b 	.word	0x0800698b
 800696c:	0800699b 	.word	0x0800699b
 8006970:	0800699b 	.word	0x0800699b
 8006974:	0800699b 	.word	0x0800699b
 8006978:	08006993 	.word	0x08006993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697c:	f7fe fff6 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8006980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006982:	e010      	b.n	80069a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006984:	4b9e      	ldr	r3, [pc, #632]	@ (8006c00 <UART_SetConfig+0x5c0>)
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006988:	e00d      	b.n	80069a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698a:	f7fe ff81 	bl	8005890 <HAL_RCC_GetSysClockFreq>
 800698e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006990:	e009      	b.n	80069a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8130 	beq.w	8006c0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	4a94      	ldr	r2, [pc, #592]	@ (8006c04 <UART_SetConfig+0x5c4>)
 80069b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d305      	bcc.n	80069de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d903      	bls.n	80069e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80069e4:	e113      	b.n	8006c0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	2200      	movs	r2, #0
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	60fa      	str	r2, [r7, #12]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	4a84      	ldr	r2, [pc, #528]	@ (8006c04 <UART_SetConfig+0x5c4>)
 80069f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2200      	movs	r2, #0
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a08:	f7fa f8f6 	bl	8000bf8 <__aeabi_uldivmod>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4610      	mov	r0, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	020b      	lsls	r3, r1, #8
 8006a1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a22:	0202      	lsls	r2, r0, #8
 8006a24:	6979      	ldr	r1, [r7, #20]
 8006a26:	6849      	ldr	r1, [r1, #4]
 8006a28:	0849      	lsrs	r1, r1, #1
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	4605      	mov	r5, r0
 8006a30:	eb12 0804 	adds.w	r8, r2, r4
 8006a34:	eb43 0905 	adc.w	r9, r3, r5
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	469a      	mov	sl, r3
 8006a40:	4693      	mov	fp, r2
 8006a42:	4652      	mov	r2, sl
 8006a44:	465b      	mov	r3, fp
 8006a46:	4640      	mov	r0, r8
 8006a48:	4649      	mov	r1, r9
 8006a4a:	f7fa f8d5 	bl	8000bf8 <__aeabi_uldivmod>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4613      	mov	r3, r2
 8006a54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a5c:	d308      	bcc.n	8006a70 <UART_SetConfig+0x430>
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a64:	d204      	bcs.n	8006a70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e0ce      	b.n	8006c0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a76:	e0ca      	b.n	8006c0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a80:	d166      	bne.n	8006b50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d827      	bhi.n	8006ada <UART_SetConfig+0x49a>
 8006a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a90 <UART_SetConfig+0x450>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	08006adb 	.word	0x08006adb
 8006aa0:	08006acb 	.word	0x08006acb
 8006aa4:	08006adb 	.word	0x08006adb
 8006aa8:	08006adb 	.word	0x08006adb
 8006aac:	08006adb 	.word	0x08006adb
 8006ab0:	08006ad3 	.word	0x08006ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab4:	f7fe ff5a 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8006ab8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aba:	e014      	b.n	8006ae6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006abc:	f7fe ff6c 	bl	8005998 <HAL_RCC_GetPCLK2Freq>
 8006ac0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac2:	e010      	b.n	8006ae6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8006c00 <UART_SetConfig+0x5c0>)
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ac8:	e00d      	b.n	8006ae6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aca:	f7fe fee1 	bl	8005890 <HAL_RCC_GetSysClockFreq>
 8006ace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ad0:	e009      	b.n	8006ae6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ad8:	e005      	b.n	8006ae6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8090 	beq.w	8006c0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	4a44      	ldr	r2, [pc, #272]	@ (8006c04 <UART_SetConfig+0x5c4>)
 8006af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b00:	005a      	lsls	r2, r3, #1
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	441a      	add	r2, r3
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	2b0f      	cmp	r3, #15
 8006b18:	d916      	bls.n	8006b48 <UART_SetConfig+0x508>
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b20:	d212      	bcs.n	8006b48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f023 030f 	bic.w	r3, r3, #15
 8006b2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	8bfb      	ldrh	r3, [r7, #30]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	8bfa      	ldrh	r2, [r7, #30]
 8006b44:	60da      	str	r2, [r3, #12]
 8006b46:	e062      	b.n	8006c0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b4e:	e05e      	b.n	8006c0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d828      	bhi.n	8006baa <UART_SetConfig+0x56a>
 8006b58:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <UART_SetConfig+0x520>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b85 	.word	0x08006b85
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	08006bab 	.word	0x08006bab
 8006b70:	08006b9b 	.word	0x08006b9b
 8006b74:	08006bab 	.word	0x08006bab
 8006b78:	08006bab 	.word	0x08006bab
 8006b7c:	08006bab 	.word	0x08006bab
 8006b80:	08006ba3 	.word	0x08006ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7fe fef2 	bl	800596c <HAL_RCC_GetPCLK1Freq>
 8006b88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b8a:	e014      	b.n	8006bb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b8c:	f7fe ff04 	bl	8005998 <HAL_RCC_GetPCLK2Freq>
 8006b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b92:	e010      	b.n	8006bb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b94:	4b1a      	ldr	r3, [pc, #104]	@ (8006c00 <UART_SetConfig+0x5c0>)
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b98:	e00d      	b.n	8006bb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9a:	f7fe fe79 	bl	8005890 <HAL_RCC_GetSysClockFreq>
 8006b9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ba0:	e009      	b.n	8006bb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ba8:	e005      	b.n	8006bb6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bb4:	bf00      	nop
    }

    if (pclk != 0U)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d028      	beq.n	8006c0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	4a10      	ldr	r2, [pc, #64]	@ (8006c04 <UART_SetConfig+0x5c4>)
 8006bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	441a      	add	r2, r3
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d910      	bls.n	8006c08 <UART_SetConfig+0x5c8>
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bec:	d20c      	bcs.n	8006c08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60da      	str	r2, [r3, #12]
 8006bf8:	e009      	b.n	8006c0e <UART_SetConfig+0x5ce>
 8006bfa:	bf00      	nop
 8006bfc:	40008000 	.word	0x40008000
 8006c00:	00f42400 	.word	0x00f42400
 8006c04:	080110a8 	.word	0x080110a8
      }
      else
      {
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2200      	movs	r2, #0
 8006c28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3730      	adds	r7, #48	@ 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d36:	d10a      	bne.n	8006d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b098      	sub	sp, #96	@ 0x60
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d8c:	f7fb f8ce 	bl	8001f2c <HAL_GetTick>
 8006d90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d12f      	bne.n	8006e00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f88e 	bl	8006ed0 <UART_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d022      	beq.n	8006e00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e6      	bne.n	8006dba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e063      	b.n	8006ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d149      	bne.n	8006ea2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e16:	2200      	movs	r2, #0
 8006e18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f857 	bl	8006ed0 <UART_WaitOnFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d03c      	beq.n	8006ea2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	623b      	str	r3, [r7, #32]
   return(result);
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e6      	bne.n	8006e28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e7a:	61fa      	str	r2, [r7, #28]
 8006e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	69b9      	ldr	r1, [r7, #24]
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	617b      	str	r3, [r7, #20]
   return(result);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e012      	b.n	8006ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3758      	adds	r7, #88	@ 0x58
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee0:	e04f      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d04b      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eea:	f7fb f81f 	bl	8001f2c <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d302      	bcc.n	8006f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e04e      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d037      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b80      	cmp	r3, #128	@ 0x80
 8006f16:	d034      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b40      	cmp	r3, #64	@ 0x40
 8006f1c:	d031      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d110      	bne.n	8006f4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2208      	movs	r2, #8
 8006f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f838 	bl	8006faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e029      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f5c:	d111      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f81e 	bl	8006faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e00f      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69da      	ldr	r2, [r3, #28]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	bf0c      	ite	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	2300      	movne	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d0a0      	beq.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b095      	sub	sp, #84	@ 0x54
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007008:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800700e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e3      	bne.n	8006fe4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d118      	bne.n	8007056 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	60bb      	str	r3, [r7, #8]
   return(result);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f023 0310 	bic.w	r3, r3, #16
 8007038:	647b      	str	r3, [r7, #68]	@ 0x44
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007042:	61bb      	str	r3, [r7, #24]
 8007044:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6979      	ldr	r1, [r7, #20]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	613b      	str	r3, [r7, #16]
   return(result);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e6      	bne.n	8007024 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800706a:	bf00      	nop
 800706c:	3754      	adds	r7, #84	@ 0x54
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_UARTEx_DisableFifoMode+0x16>
 8007088:	2302      	movs	r3, #2
 800708a:	e027      	b.n	80070dc <HAL_UARTEx_DisableFifoMode+0x66>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	@ 0x24
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e02d      	b.n	800715c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2224      	movs	r2, #36	@ 0x24
 800710c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f84f 	bl	80071e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007178:	2302      	movs	r3, #2
 800717a:	e02d      	b.n	80071d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	@ 0x24
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f811 	bl	80071e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d108      	bne.n	8007202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007200:	e031      	b.n	8007266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007202:	2308      	movs	r3, #8
 8007204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007206:	2308      	movs	r3, #8
 8007208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	0e5b      	lsrs	r3, r3, #25
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	0f5b      	lsrs	r3, r3, #29
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	7b3a      	ldrb	r2, [r7, #12]
 800722e:	4911      	ldr	r1, [pc, #68]	@ (8007274 <UARTEx_SetNbDataToProcess+0x94>)
 8007230:	5c8a      	ldrb	r2, [r1, r2]
 8007232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007236:	7b3a      	ldrb	r2, [r7, #12]
 8007238:	490f      	ldr	r1, [pc, #60]	@ (8007278 <UARTEx_SetNbDataToProcess+0x98>)
 800723a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800723c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007240:	b29a      	uxth	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	7b7a      	ldrb	r2, [r7, #13]
 800724c:	4909      	ldr	r1, [pc, #36]	@ (8007274 <UARTEx_SetNbDataToProcess+0x94>)
 800724e:	5c8a      	ldrb	r2, [r1, r2]
 8007250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007254:	7b7a      	ldrb	r2, [r7, #13]
 8007256:	4908      	ldr	r1, [pc, #32]	@ (8007278 <UARTEx_SetNbDataToProcess+0x98>)
 8007258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800725a:	fb93 f3f2 	sdiv	r3, r3, r2
 800725e:	b29a      	uxth	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	080110c0 	.word	0x080110c0
 8007278:	080110c8 	.word	0x080110c8

0800727c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800728c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007290:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072b2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80072b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	43db      	mvns	r3, r3
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4013      	ands	r3, r2
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	1d3b      	adds	r3, r7, #4
 80072ea:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800731c:	b480      	push	{r7}
 800731e:	b0a7      	sub	sp, #156	@ 0x9c
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800733e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007342:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	78db      	ldrb	r3, [r3, #3]
 800734a:	2b03      	cmp	r3, #3
 800734c:	d81f      	bhi.n	800738e <USB_ActivateEndpoint+0x72>
 800734e:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <USB_ActivateEndpoint+0x38>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	08007365 	.word	0x08007365
 8007358:	08007381 	.word	0x08007381
 800735c:	08007397 	.word	0x08007397
 8007360:	08007373 	.word	0x08007373
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007364:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800736c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007370:	e012      	b.n	8007398 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007372:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007376:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800737a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800737e:	e00b      	b.n	8007398 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007380:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007388:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800738c:	e004      	b.n	8007398 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007394:	e000      	b.n	8007398 <USB_ActivateEndpoint+0x7c>
      break;
 8007396:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80073a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	b21b      	sxth	r3, r3
 80073ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d2:	b21a      	sxth	r2, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b21b      	sxth	r3, r3
 80073da:	4313      	orrs	r3, r2
 80073dc:	b21b      	sxth	r3, r3
 80073de:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	441a      	add	r2, r3
 80073ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80073f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007400:	b29b      	uxth	r3, r3
 8007402:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	7b1b      	ldrb	r3, [r3, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f040 8180 	bne.w	800770e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8084 	beq.w	8007520 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	4413      	add	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	00da      	lsls	r2, r3, #3
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	88db      	ldrh	r3, [r3, #6]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	b29b      	uxth	r3, r3
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	827b      	strh	r3, [r7, #18]
 800745a:	8a7b      	ldrh	r3, [r7, #18]
 800745c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01b      	beq.n	800749c <USB_ActivateEndpoint+0x180>
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747a:	823b      	strh	r3, [r7, #16]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	8a3b      	ldrh	r3, [r7, #16]
 8007488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800748c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007494:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007498:	b29b      	uxth	r3, r3
 800749a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	78db      	ldrb	r3, [r3, #3]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d020      	beq.n	80074e6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ba:	81bb      	strh	r3, [r7, #12]
 80074bc:	89bb      	ldrh	r3, [r7, #12]
 80074be:	f083 0320 	eor.w	r3, r3, #32
 80074c2:	81bb      	strh	r3, [r7, #12]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	441a      	add	r2, r3
 80074ce:	89bb      	ldrh	r3, [r7, #12]
 80074d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	8013      	strh	r3, [r2, #0]
 80074e4:	e3f9      	b.n	8007cda <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074fc:	81fb      	strh	r3, [r7, #14]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	441a      	add	r2, r3
 8007508:	89fb      	ldrh	r3, [r7, #14]
 800750a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800750e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751a:	b29b      	uxth	r3, r3
 800751c:	8013      	strh	r3, [r2, #0]
 800751e:	e3dc      	b.n	8007cda <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	633b      	str	r3, [r7, #48]	@ 0x30
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800752a:	b29b      	uxth	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	4413      	add	r3, r2
 8007532:	633b      	str	r3, [r7, #48]	@ 0x30
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	00da      	lsls	r2, r3, #3
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	4413      	add	r3, r2
 800753e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	88db      	ldrh	r3, [r3, #6]
 8007548:	085b      	lsrs	r3, r3, #1
 800754a:	b29b      	uxth	r3, r3
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800755e:	b29b      	uxth	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	4413      	add	r3, r2
 8007566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	00da      	lsls	r2, r3, #3
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	4413      	add	r3, r2
 8007572:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007582:	b29a      	uxth	r2, r3
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <USB_ActivateEndpoint+0x28a>
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759e:	b29a      	uxth	r2, r3
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	e041      	b.n	800762a <USB_ActivateEndpoint+0x30e>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80075ac:	d81c      	bhi.n	80075e8 <USB_ActivateEndpoint+0x2cc>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <USB_ActivateEndpoint+0x2b2>
 80075c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075c8:	3301      	adds	r3, #1
 80075ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075d8:	b29b      	uxth	r3, r3
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	b29b      	uxth	r3, r3
 80075de:	4313      	orrs	r3, r2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e020      	b.n	800762a <USB_ActivateEndpoint+0x30e>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 031f 	and.w	r3, r3, #31
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d104      	bne.n	8007608 <USB_ActivateEndpoint+0x2ec>
 80075fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007602:	3b01      	subs	r3, #1
 8007604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007612:	b29b      	uxth	r3, r3
 8007614:	029b      	lsls	r3, r3, #10
 8007616:	b29b      	uxth	r3, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007624:	b29a      	uxth	r2, r3
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007638:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800763a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01b      	beq.n	800767a <USB_ActivateEndpoint+0x35e>
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007658:	843b      	strh	r3, [r7, #32]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	441a      	add	r2, r3
 8007664:	8c3b      	ldrh	r3, [r7, #32]
 8007666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800766e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007676:	b29b      	uxth	r3, r3
 8007678:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d124      	bne.n	80076cc <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007698:	83bb      	strh	r3, [r7, #28]
 800769a:	8bbb      	ldrh	r3, [r7, #28]
 800769c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076a0:	83bb      	strh	r3, [r7, #28]
 80076a2:	8bbb      	ldrh	r3, [r7, #28]
 80076a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076a8:	83bb      	strh	r3, [r7, #28]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	441a      	add	r2, r3
 80076b4:	8bbb      	ldrh	r3, [r7, #28]
 80076b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	8013      	strh	r3, [r2, #0]
 80076ca:	e306      	b.n	8007cda <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e2:	83fb      	strh	r3, [r7, #30]
 80076e4:	8bfb      	ldrh	r3, [r7, #30]
 80076e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076ea:	83fb      	strh	r3, [r7, #30]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	8bfb      	ldrh	r3, [r7, #30]
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
 800770c:	e2e5      	b.n	8007cda <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	78db      	ldrb	r3, [r3, #3]
 8007712:	2b02      	cmp	r3, #2
 8007714:	d11e      	bne.n	8007754 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800772c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	441a      	add	r2, r3
 800773a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800773e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007746:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800774a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800774e:	b29b      	uxth	r3, r3
 8007750:	8013      	strh	r3, [r2, #0]
 8007752:	e01d      	b.n	8007790 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800776a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	441a      	add	r2, r3
 8007778:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800777c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778c:	b29b      	uxth	r3, r3
 800778e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800779a:	b29b      	uxth	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077a0:	4413      	add	r3, r2
 80077a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	00da      	lsls	r2, r3, #3
 80077aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	891b      	ldrh	r3, [r3, #8]
 80077b8:	085b      	lsrs	r3, r3, #1
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077c2:	801a      	strh	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077d4:	4413      	add	r3, r2
 80077d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	00da      	lsls	r2, r3, #3
 80077de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077e0:	4413      	add	r3, r2
 80077e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	895b      	ldrh	r3, [r3, #10]
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 81af 	bne.w	8007b60 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007812:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01d      	beq.n	800785a <USB_ActivateEndpoint+0x53e>
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007834:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800784e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800786a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800786e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01d      	beq.n	80078b2 <USB_ActivateEndpoint+0x596>
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d16b      	bne.n	8007992 <USB_ActivateEndpoint+0x676>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ca:	4413      	add	r3, r2
 80078cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	00da      	lsls	r2, r3, #3
 80078d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078ec:	801a      	strh	r2, [r3, #0]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <USB_ActivateEndpoint+0x5f0>
 80078f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007904:	b29a      	uxth	r2, r3
 8007906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	e05d      	b.n	80079c8 <USB_ActivateEndpoint+0x6ac>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b3e      	cmp	r3, #62	@ 0x3e
 8007912:	d81c      	bhi.n	800794e <USB_ActivateEndpoint+0x632>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	085b      	lsrs	r3, r3, #1
 800791a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <USB_ActivateEndpoint+0x618>
 800792a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800792e:	3301      	adds	r3, #1
 8007930:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29a      	uxth	r2, r3
 800793a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800793e:	b29b      	uxth	r3, r3
 8007940:	029b      	lsls	r3, r3, #10
 8007942:	b29b      	uxth	r3, r3
 8007944:	4313      	orrs	r3, r2
 8007946:	b29a      	uxth	r2, r3
 8007948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800794a:	801a      	strh	r2, [r3, #0]
 800794c:	e03c      	b.n	80079c8 <USB_ActivateEndpoint+0x6ac>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2b00      	cmp	r3, #0
 8007962:	d104      	bne.n	800796e <USB_ActivateEndpoint+0x652>
 8007964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007968:	3b01      	subs	r3, #1
 800796a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800796e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29a      	uxth	r2, r3
 8007974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007978:	b29b      	uxth	r3, r3
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	b29b      	uxth	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b29b      	uxth	r3, r3
 8007982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798a:	b29a      	uxth	r2, r3
 800798c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	e01a      	b.n	80079c8 <USB_ActivateEndpoint+0x6ac>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d116      	bne.n	80079c8 <USB_ActivateEndpoint+0x6ac>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	657b      	str	r3, [r7, #84]	@ 0x54
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079aa:	4413      	add	r3, r2
 80079ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	00da      	lsls	r2, r3, #3
 80079b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b6:	4413      	add	r3, r2
 80079b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d16b      	bne.n	8007aac <USB_ActivateEndpoint+0x790>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079de:	b29b      	uxth	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e4:	4413      	add	r3, r2
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	00da      	lsls	r2, r3, #3
 80079ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <USB_ActivateEndpoint+0x70a>
 8007a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	801a      	strh	r2, [r3, #0]
 8007a24:	e05b      	b.n	8007ade <USB_ActivateEndpoint+0x7c2>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a2c:	d81c      	bhi.n	8007a68 <USB_ActivateEndpoint+0x74c>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <USB_ActivateEndpoint+0x732>
 8007a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	029b      	lsls	r3, r3, #10
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	e03a      	b.n	8007ade <USB_ActivateEndpoint+0x7c2>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d104      	bne.n	8007a88 <USB_ActivateEndpoint+0x76c>
 8007a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a82:	3b01      	subs	r3, #1
 8007a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	029b      	lsls	r3, r3, #10
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	801a      	strh	r2, [r3, #0]
 8007aaa:	e018      	b.n	8007ade <USB_ActivateEndpoint+0x7c2>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d114      	bne.n	8007ade <USB_ActivateEndpoint+0x7c2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ac0:	4413      	add	r3, r2
 8007ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	00da      	lsls	r2, r3, #3
 8007aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007acc:	4413      	add	r3, r2
 8007ace:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007adc:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007af6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007af8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007afc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007afe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b04:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b3c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	441a      	add	r2, r3
 8007b48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	8013      	strh	r3, [r2, #0]
 8007b5e:	e0bc      	b.n	8007cda <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007b70:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01d      	beq.n	8007bb8 <USB_ActivateEndpoint+0x89c>
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b92:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007bc8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01d      	beq.n	8007c10 <USB_ActivateEndpoint+0x8f4>
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bea:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	441a      	add	r2, r3
 8007bf8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	78db      	ldrb	r3, [r3, #3]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d024      	beq.n	8007c62 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c2e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007c32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007c36:	f083 0320 	eor.w	r3, r3, #32
 8007c3a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	441a      	add	r2, r3
 8007c48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	8013      	strh	r3, [r2, #0]
 8007c60:	e01d      	b.n	8007c9e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c78:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	441a      	add	r2, r3
 8007c86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007cda:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	379c      	adds	r7, #156	@ 0x9c
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop

08007cec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b08d      	sub	sp, #52	@ 0x34
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	7b1b      	ldrb	r3, [r3, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 808e 	bne.w	8007e1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d044      	beq.n	8007d92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	81bb      	strh	r3, [r7, #12]
 8007d16:	89bb      	ldrh	r3, [r7, #12]
 8007d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01b      	beq.n	8007d58 <USB_DeactivateEndpoint+0x6c>
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d36:	817b      	strh	r3, [r7, #10]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	441a      	add	r2, r3
 8007d42:	897b      	ldrh	r3, [r7, #10]
 8007d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d6e:	813b      	strh	r3, [r7, #8]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	441a      	add	r2, r3
 8007d7a:	893b      	ldrh	r3, [r7, #8]
 8007d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	8013      	strh	r3, [r2, #0]
 8007d90:	e192      	b.n	80080b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	827b      	strh	r3, [r7, #18]
 8007da0:	8a7b      	ldrh	r3, [r7, #18]
 8007da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01b      	beq.n	8007de2 <USB_DeactivateEndpoint+0xf6>
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc0:	823b      	strh	r3, [r7, #16]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	441a      	add	r2, r3
 8007dcc:	8a3b      	ldrh	r3, [r7, #16]
 8007dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df8:	81fb      	strh	r3, [r7, #14]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	441a      	add	r2, r3
 8007e04:	89fb      	ldrh	r3, [r7, #14]
 8007e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]
 8007e1a:	e14d      	b.n	80080b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 80a5 	bne.w	8007f70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	843b      	strh	r3, [r7, #32]
 8007e34:	8c3b      	ldrh	r3, [r7, #32]
 8007e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01b      	beq.n	8007e76 <USB_DeactivateEndpoint+0x18a>
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e54:	83fb      	strh	r3, [r7, #30]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	441a      	add	r2, r3
 8007e60:	8bfb      	ldrh	r3, [r7, #30]
 8007e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	83bb      	strh	r3, [r7, #28]
 8007e84:	8bbb      	ldrh	r3, [r7, #28]
 8007e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01b      	beq.n	8007ec6 <USB_DeactivateEndpoint+0x1da>
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea4:	837b      	strh	r3, [r7, #26]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	441a      	add	r2, r3
 8007eb0:	8b7b      	ldrh	r3, [r7, #26]
 8007eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ebe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007edc:	833b      	strh	r3, [r7, #24]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	8b3b      	ldrh	r3, [r7, #24]
 8007eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f14:	82fb      	strh	r3, [r7, #22]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	441a      	add	r2, r3
 8007f20:	8afb      	ldrh	r3, [r7, #22]
 8007f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f4c:	82bb      	strh	r3, [r7, #20]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	441a      	add	r2, r3
 8007f58:	8abb      	ldrh	r3, [r7, #20]
 8007f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	8013      	strh	r3, [r2, #0]
 8007f6e:	e0a3      	b.n	80080b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007f7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01b      	beq.n	8007fc0 <USB_DeactivateEndpoint+0x2d4>
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	441a      	add	r2, r3
 8007faa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007fce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01b      	beq.n	8008010 <USB_DeactivateEndpoint+0x324>
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008008:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008026:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	441a      	add	r2, r3
 8008032:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800803c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008044:	b29b      	uxth	r3, r3
 8008046:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800805a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800805e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	441a      	add	r2, r3
 800806a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800806c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807c:	b29b      	uxth	r3, r3
 800807e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008096:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	441a      	add	r2, r3
 80080a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80080a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3734      	adds	r7, #52	@ 0x34
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b0ac      	sub	sp, #176	@ 0xb0
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	f040 84ca 	bne.w	8008a6e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d904      	bls.n	80080f0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080ee:	e003      	b.n	80080f8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	7b1b      	ldrb	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d122      	bne.n	8008146 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6959      	ldr	r1, [r3, #20]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	88da      	ldrh	r2, [r3, #6]
 8008108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800810c:	b29b      	uxth	r3, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 febd 	bl	8008e8e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811e:	b29b      	uxth	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4413      	add	r3, r2
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	00da      	lsls	r2, r3, #3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4413      	add	r3, r2
 8008132:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	f000 bc6f 	b.w	8008a24 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	78db      	ldrb	r3, [r3, #3]
 800814a:	2b02      	cmp	r3, #2
 800814c:	f040 831e 	bne.w	800878c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	6a1a      	ldr	r2, [r3, #32]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	429a      	cmp	r2, r3
 800815a:	f240 82cf 	bls.w	80086fc <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008174:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	441a      	add	r2, r3
 8008182:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800818a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800818e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008196:	b29b      	uxth	r3, r3
 8008198:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6a1a      	ldr	r2, [r3, #32]
 800819e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 814f 	beq.w	800845e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d16b      	bne.n	80082a4 <USB_EPStartXfer+0x1de>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	4413      	add	r3, r2
 80081de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	00da      	lsls	r2, r3, #3
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	4413      	add	r3, r2
 80081ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <USB_EPStartXfer+0x158>
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008216:	b29a      	uxth	r2, r3
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	801a      	strh	r2, [r3, #0]
 800821c:	e05b      	b.n	80082d6 <USB_EPStartXfer+0x210>
 800821e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008222:	2b3e      	cmp	r3, #62	@ 0x3e
 8008224:	d81c      	bhi.n	8008260 <USB_EPStartXfer+0x19a>
 8008226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d004      	beq.n	8008246 <USB_EPStartXfer+0x180>
 800823c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008240:	3301      	adds	r3, #1
 8008242:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008250:	b29b      	uxth	r3, r3
 8008252:	029b      	lsls	r3, r3, #10
 8008254:	b29b      	uxth	r3, r3
 8008256:	4313      	orrs	r3, r2
 8008258:	b29a      	uxth	r2, r3
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	e03a      	b.n	80082d6 <USB_EPStartXfer+0x210>
 8008260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800826a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <USB_EPStartXfer+0x1ba>
 8008276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800827a:	3b01      	subs	r3, #1
 800827c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29a      	uxth	r2, r3
 8008286:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800828a:	b29b      	uxth	r3, r3
 800828c:	029b      	lsls	r3, r3, #10
 800828e:	b29b      	uxth	r3, r3
 8008290:	4313      	orrs	r3, r2
 8008292:	b29b      	uxth	r3, r3
 8008294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800829c:	b29a      	uxth	r2, r3
 800829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	e018      	b.n	80082d6 <USB_EPStartXfer+0x210>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d114      	bne.n	80082d6 <USB_EPStartXfer+0x210>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	4413      	add	r3, r2
 80082ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	00da      	lsls	r2, r3, #3
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	4413      	add	r3, r2
 80082c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	895b      	ldrh	r3, [r3, #10]
 80082da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6959      	ldr	r1, [r3, #20]
 80082e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fdce 	bl	8008e8e <USB_WritePMA>
            ep->xfer_buff += len;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	695a      	ldr	r2, [r3, #20]
 80082f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082fa:	441a      	add	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	429a      	cmp	r2, r3
 800830a:	d907      	bls.n	800831c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	6a1a      	ldr	r2, [r3, #32]
 8008310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	621a      	str	r2, [r3, #32]
 800831a:	e006      	b.n	800832a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2200      	movs	r2, #0
 8008328:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d16b      	bne.n	800840a <USB_EPStartXfer+0x344>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800833c:	b29b      	uxth	r3, r3
 800833e:	461a      	mov	r2, r3
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	4413      	add	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	00da      	lsls	r2, r3, #3
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	4413      	add	r3, r2
 8008350:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008360:	b29a      	uxth	r2, r3
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	801a      	strh	r2, [r3, #0]
 8008366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <USB_EPStartXfer+0x2be>
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837c:	b29a      	uxth	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	801a      	strh	r2, [r3, #0]
 8008382:	e05d      	b.n	8008440 <USB_EPStartXfer+0x37a>
 8008384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008388:	2b3e      	cmp	r3, #62	@ 0x3e
 800838a:	d81c      	bhi.n	80083c6 <USB_EPStartXfer+0x300>
 800838c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008390:	085b      	lsrs	r3, r3, #1
 8008392:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <USB_EPStartXfer+0x2e6>
 80083a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083a6:	3301      	adds	r3, #1
 80083a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	029b      	lsls	r3, r3, #10
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	b29a      	uxth	r2, r3
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	e03c      	b.n	8008440 <USB_EPStartXfer+0x37a>
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083d4:	f003 031f 	and.w	r3, r3, #31
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <USB_EPStartXfer+0x320>
 80083dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083e0:	3b01      	subs	r3, #1
 80083e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	029b      	lsls	r3, r3, #10
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008402:	b29a      	uxth	r2, r3
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e01a      	b.n	8008440 <USB_EPStartXfer+0x37a>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d116      	bne.n	8008440 <USB_EPStartXfer+0x37a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	623b      	str	r3, [r7, #32]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800841c:	b29b      	uxth	r3, r3
 800841e:	461a      	mov	r2, r3
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	4413      	add	r3, r2
 8008424:	623b      	str	r3, [r7, #32]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	00da      	lsls	r2, r3, #3
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	4413      	add	r3, r2
 8008430:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800843a:	b29a      	uxth	r2, r3
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	891b      	ldrh	r3, [r3, #8]
 8008444:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6959      	ldr	r1, [r3, #20]
 800844c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008450:	b29b      	uxth	r3, r3
 8008452:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fd19 	bl	8008e8e <USB_WritePMA>
 800845c:	e2e2      	b.n	8008a24 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d16b      	bne.n	800853e <USB_EPStartXfer+0x478>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	64bb      	str	r3, [r7, #72]	@ 0x48
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008470:	b29b      	uxth	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008476:	4413      	add	r3, r2
 8008478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	00da      	lsls	r2, r3, #3
 8008480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008482:	4413      	add	r3, r2
 8008484:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008488:	647b      	str	r3, [r7, #68]	@ 0x44
 800848a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008494:	b29a      	uxth	r2, r3
 8008496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008498:	801a      	strh	r2, [r3, #0]
 800849a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <USB_EPStartXfer+0x3f2>
 80084a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	e05d      	b.n	8008574 <USB_EPStartXfer+0x4ae>
 80084b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80084be:	d81c      	bhi.n	80084fa <USB_EPStartXfer+0x434>
 80084c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c4:	085b      	lsrs	r3, r3, #1
 80084c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d004      	beq.n	80084e0 <USB_EPStartXfer+0x41a>
 80084d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084da:	3301      	adds	r3, #1
 80084dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	029b      	lsls	r3, r3, #10
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	4313      	orrs	r3, r2
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	e03c      	b.n	8008574 <USB_EPStartXfer+0x4ae>
 80084fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <USB_EPStartXfer+0x454>
 8008510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008514:	3b01      	subs	r3, #1
 8008516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800851a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29a      	uxth	r2, r3
 8008520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008524:	b29b      	uxth	r3, r3
 8008526:	029b      	lsls	r3, r3, #10
 8008528:	b29b      	uxth	r3, r3
 800852a:	4313      	orrs	r3, r2
 800852c:	b29b      	uxth	r3, r3
 800852e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008536:	b29a      	uxth	r2, r3
 8008538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800853a:	801a      	strh	r2, [r3, #0]
 800853c:	e01a      	b.n	8008574 <USB_EPStartXfer+0x4ae>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d116      	bne.n	8008574 <USB_EPStartXfer+0x4ae>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	653b      	str	r3, [r7, #80]	@ 0x50
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008550:	b29b      	uxth	r3, r3
 8008552:	461a      	mov	r2, r3
 8008554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008556:	4413      	add	r3, r2
 8008558:	653b      	str	r3, [r7, #80]	@ 0x50
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	00da      	lsls	r2, r3, #3
 8008560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008562:	4413      	add	r3, r2
 8008564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008568:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800856a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800856e:	b29a      	uxth	r2, r3
 8008570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008572:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	891b      	ldrh	r3, [r3, #8]
 8008578:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	6959      	ldr	r1, [r3, #20]
 8008580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008584:	b29b      	uxth	r3, r3
 8008586:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fc7f 	bl	8008e8e <USB_WritePMA>
            ep->xfer_buff += len;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695a      	ldr	r2, [r3, #20]
 8008594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008598:	441a      	add	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6a1a      	ldr	r2, [r3, #32]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d907      	bls.n	80085ba <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6a1a      	ldr	r2, [r3, #32]
 80085ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085b2:	1ad2      	subs	r2, r2, r3
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	621a      	str	r2, [r3, #32]
 80085b8:	e006      	b.n	80085c8 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2200      	movs	r2, #0
 80085c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	785b      	ldrb	r3, [r3, #1]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d16b      	bne.n	80086ac <USB_EPStartXfer+0x5e6>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085de:	b29b      	uxth	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e4:	4413      	add	r3, r2
 80085e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	00da      	lsls	r2, r3, #3
 80085ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f0:	4413      	add	r3, r2
 80085f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008602:	b29a      	uxth	r2, r3
 8008604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008606:	801a      	strh	r2, [r3, #0]
 8008608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <USB_EPStartXfer+0x560>
 8008610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861e:	b29a      	uxth	r2, r3
 8008620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008622:	801a      	strh	r2, [r3, #0]
 8008624:	e05b      	b.n	80086de <USB_EPStartXfer+0x618>
 8008626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800862a:	2b3e      	cmp	r3, #62	@ 0x3e
 800862c:	d81c      	bhi.n	8008668 <USB_EPStartXfer+0x5a2>
 800862e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <USB_EPStartXfer+0x588>
 8008644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008648:	3301      	adds	r3, #1
 800864a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29a      	uxth	r2, r3
 8008654:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008658:	b29b      	uxth	r3, r3
 800865a:	029b      	lsls	r3, r3, #10
 800865c:	b29b      	uxth	r3, r3
 800865e:	4313      	orrs	r3, r2
 8008660:	b29a      	uxth	r2, r3
 8008662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	e03a      	b.n	80086de <USB_EPStartXfer+0x618>
 8008668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <USB_EPStartXfer+0x5c2>
 800867e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008682:	3b01      	subs	r3, #1
 8008684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29a      	uxth	r2, r3
 800868e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008692:	b29b      	uxth	r3, r3
 8008694:	029b      	lsls	r3, r3, #10
 8008696:	b29b      	uxth	r3, r3
 8008698:	4313      	orrs	r3, r2
 800869a:	b29b      	uxth	r3, r3
 800869c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	801a      	strh	r2, [r3, #0]
 80086aa:	e018      	b.n	80086de <USB_EPStartXfer+0x618>
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d114      	bne.n	80086de <USB_EPStartXfer+0x618>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c0:	4413      	add	r3, r2
 80086c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	00da      	lsls	r2, r3, #3
 80086ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086d8:	b29a      	uxth	r2, r3
 80086da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	895b      	ldrh	r3, [r3, #10]
 80086e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6959      	ldr	r1, [r3, #20]
 80086ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbca 	bl	8008e8e <USB_WritePMA>
 80086fa:	e193      	b.n	8008a24 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800872c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873c:	b29b      	uxth	r3, r3
 800873e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800874a:	b29b      	uxth	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008750:	4413      	add	r3, r2
 8008752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	00da      	lsls	r2, r3, #3
 800875a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800875c:	4413      	add	r3, r2
 800875e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008762:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008768:	b29a      	uxth	r2, r3
 800876a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800876c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	891b      	ldrh	r3, [r3, #8]
 8008772:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6959      	ldr	r1, [r3, #20]
 800877a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800877e:	b29b      	uxth	r3, r3
 8008780:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb82 	bl	8008e8e <USB_WritePMA>
 800878a:	e14b      	b.n	8008a24 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	6a1a      	ldr	r2, [r3, #32]
 8008790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008794:	1ad2      	subs	r2, r2, r3
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 809a 	beq.w	80088e6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	785b      	ldrb	r3, [r3, #1]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d16b      	bne.n	8008896 <USB_EPStartXfer+0x7d0>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087ce:	4413      	add	r3, r2
 80087d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	00da      	lsls	r2, r3, #3
 80087d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087da:	4413      	add	r3, r2
 80087dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80087e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <USB_EPStartXfer+0x74a>
 80087fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800880c:	801a      	strh	r2, [r3, #0]
 800880e:	e05b      	b.n	80088c8 <USB_EPStartXfer+0x802>
 8008810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008814:	2b3e      	cmp	r3, #62	@ 0x3e
 8008816:	d81c      	bhi.n	8008852 <USB_EPStartXfer+0x78c>
 8008818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <USB_EPStartXfer+0x772>
 800882e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008832:	3301      	adds	r3, #1
 8008834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29a      	uxth	r2, r3
 800883e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008842:	b29b      	uxth	r3, r3
 8008844:	029b      	lsls	r3, r3, #10
 8008846:	b29b      	uxth	r3, r3
 8008848:	4313      	orrs	r3, r2
 800884a:	b29a      	uxth	r2, r3
 800884c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e03a      	b.n	80088c8 <USB_EPStartXfer+0x802>
 8008852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008856:	095b      	lsrs	r3, r3, #5
 8008858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800885c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008860:	f003 031f 	and.w	r3, r3, #31
 8008864:	2b00      	cmp	r3, #0
 8008866:	d104      	bne.n	8008872 <USB_EPStartXfer+0x7ac>
 8008868:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800886c:	3b01      	subs	r3, #1
 800886e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29a      	uxth	r2, r3
 8008878:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800887c:	b29b      	uxth	r3, r3
 800887e:	029b      	lsls	r3, r3, #10
 8008880:	b29b      	uxth	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	b29b      	uxth	r3, r3
 8008886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800888a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800888e:	b29a      	uxth	r2, r3
 8008890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e018      	b.n	80088c8 <USB_EPStartXfer+0x802>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d114      	bne.n	80088c8 <USB_EPStartXfer+0x802>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088aa:	4413      	add	r3, r2
 80088ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	00da      	lsls	r2, r3, #3
 80088b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088b6:	4413      	add	r3, r2
 80088b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	895b      	ldrh	r3, [r3, #10]
 80088cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	6959      	ldr	r1, [r3, #20]
 80088d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fad5 	bl	8008e8e <USB_WritePMA>
 80088e4:	e09e      	b.n	8008a24 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d16b      	bne.n	80089c6 <USB_EPStartXfer+0x900>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088fe:	4413      	add	r3, r2
 8008900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	00da      	lsls	r2, r3, #3
 8008908:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800890a:	4413      	add	r3, r2
 800890c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008910:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800891c:	b29a      	uxth	r2, r3
 800891e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008920:	801a      	strh	r2, [r3, #0]
 8008922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10a      	bne.n	8008940 <USB_EPStartXfer+0x87a>
 800892a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008938:	b29a      	uxth	r2, r3
 800893a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	e063      	b.n	8008a08 <USB_EPStartXfer+0x942>
 8008940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008944:	2b3e      	cmp	r3, #62	@ 0x3e
 8008946:	d81c      	bhi.n	8008982 <USB_EPStartXfer+0x8bc>
 8008948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <USB_EPStartXfer+0x8a2>
 800895e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008962:	3301      	adds	r3, #1
 8008964:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008968:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29a      	uxth	r2, r3
 800896e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008972:	b29b      	uxth	r3, r3
 8008974:	029b      	lsls	r3, r3, #10
 8008976:	b29b      	uxth	r3, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	b29a      	uxth	r2, r3
 800897c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e042      	b.n	8008a08 <USB_EPStartXfer+0x942>
 8008982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800898c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008990:	f003 031f 	and.w	r3, r3, #31
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <USB_EPStartXfer+0x8dc>
 8008998:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800899c:	3b01      	subs	r3, #1
 800899e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	029b      	lsls	r3, r3, #10
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4313      	orrs	r3, r2
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	e020      	b.n	8008a08 <USB_EPStartXfer+0x942>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d11c      	bne.n	8008a08 <USB_EPStartXfer+0x942>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089da:	b29b      	uxth	r3, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089e2:	4413      	add	r3, r2
 80089e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	00da      	lsls	r2, r3, #3
 80089ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089f2:	4413      	add	r3, r2
 80089f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	891b      	ldrh	r3, [r3, #8]
 8008a0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	6959      	ldr	r1, [r3, #20]
 8008a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa35 	bl	8008e8e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a3a:	817b      	strh	r3, [r7, #10]
 8008a3c:	897b      	ldrh	r3, [r7, #10]
 8008a3e:	f083 0310 	eor.w	r3, r3, #16
 8008a42:	817b      	strh	r3, [r7, #10]
 8008a44:	897b      	ldrh	r3, [r7, #10]
 8008a46:	f083 0320 	eor.w	r3, r3, #32
 8008a4a:	817b      	strh	r3, [r7, #10]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	897b      	ldrh	r3, [r7, #10]
 8008a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	8013      	strh	r3, [r2, #0]
 8008a6c:	e0d5      	b.n	8008c1a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	7b1b      	ldrb	r3, [r3, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d156      	bne.n	8008b24 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d122      	bne.n	8008ac4 <USB_EPStartXfer+0x9fe>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	78db      	ldrb	r3, [r3, #3]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d11e      	bne.n	8008ac4 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	8013      	strh	r3, [r2, #0]
 8008ac2:	e01d      	b.n	8008b00 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ada:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	441a      	add	r2, r3
 8008ae8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	699a      	ldr	r2, [r3, #24]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d907      	bls.n	8008b1c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	1ad2      	subs	r2, r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	619a      	str	r2, [r3, #24]
 8008b1a:	e054      	b.n	8008bc6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	619a      	str	r2, [r3, #24]
 8008b22:	e050      	b.n	8008bc6 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	78db      	ldrb	r3, [r3, #3]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d142      	bne.n	8008bb2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d048      	beq.n	8008bc6 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b44:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <USB_EPStartXfer+0xa96>
 8008b50:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10b      	bne.n	8008b74 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d12e      	bne.n	8008bc6 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d128      	bne.n	8008bc6 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	441a      	add	r2, r3
 8008b98:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ba8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	8013      	strh	r3, [r2, #0]
 8008bb0:	e009      	b.n	8008bc6 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	78db      	ldrb	r3, [r3, #3]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d103      	bne.n	8008bc2 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	619a      	str	r2, [r3, #24]
 8008bc0:	e001      	b.n	8008bc6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e02a      	b.n	8008c1c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bdc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008be0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008be4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008be8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008bec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008bf0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	441a      	add	r2, r3
 8008c02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	37b0      	adds	r7, #176	@ 0xb0
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d020      	beq.n	8008c78 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c4c:	81bb      	strh	r3, [r7, #12]
 8008c4e:	89bb      	ldrh	r3, [r7, #12]
 8008c50:	f083 0310 	eor.w	r3, r3, #16
 8008c54:	81bb      	strh	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	441a      	add	r2, r3
 8008c60:	89bb      	ldrh	r3, [r7, #12]
 8008c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	8013      	strh	r3, [r2, #0]
 8008c76:	e01f      	b.n	8008cb8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c8e:	81fb      	strh	r3, [r7, #14]
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c96:	81fb      	strh	r3, [r7, #14]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	441a      	add	r2, r3
 8008ca2:	89fb      	ldrh	r3, [r7, #14]
 8008ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b087      	sub	sp, #28
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d04c      	beq.n	8008d72 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	823b      	strh	r3, [r7, #16]
 8008ce6:	8a3b      	ldrh	r3, [r7, #16]
 8008ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01b      	beq.n	8008d28 <USB_EPClearStall+0x62>
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d06:	81fb      	strh	r3, [r7, #14]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	89fb      	ldrh	r3, [r7, #14]
 8008d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	78db      	ldrb	r3, [r3, #3]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d06c      	beq.n	8008e0a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d46:	81bb      	strh	r3, [r7, #12]
 8008d48:	89bb      	ldrh	r3, [r7, #12]
 8008d4a:	f083 0320 	eor.w	r3, r3, #32
 8008d4e:	81bb      	strh	r3, [r7, #12]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	441a      	add	r2, r3
 8008d5a:	89bb      	ldrh	r3, [r7, #12]
 8008d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	8013      	strh	r3, [r2, #0]
 8008d70:	e04b      	b.n	8008e0a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	82fb      	strh	r3, [r7, #22]
 8008d80:	8afb      	ldrh	r3, [r7, #22]
 8008d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01b      	beq.n	8008dc2 <USB_EPClearStall+0xfc>
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da0:	82bb      	strh	r3, [r7, #20]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	441a      	add	r2, r3
 8008dac:	8abb      	ldrh	r3, [r7, #20]
 8008dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008db6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd8:	827b      	strh	r3, [r7, #18]
 8008dda:	8a7b      	ldrh	r3, [r7, #18]
 8008ddc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008de0:	827b      	strh	r3, [r7, #18]
 8008de2:	8a7b      	ldrh	r3, [r7, #18]
 8008de4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008de8:	827b      	strh	r3, [r7, #18]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	8a7b      	ldrh	r3, [r7, #18]
 8008df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2280      	movs	r2, #128	@ 0x80
 8008e2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b085      	sub	sp, #20
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e80:	68fb      	ldr	r3, [r7, #12]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b08b      	sub	sp, #44	@ 0x2c
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	80fb      	strh	r3, [r7, #6]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ea4:	88bb      	ldrh	r3, [r7, #4]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008eb4:	88fa      	ldrh	r2, [r7, #6]
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ebe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ec4:	e01c      	b.n	8008f00 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b21b      	sxth	r3, r3
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	b21a      	sxth	r2, r3
 8008ed8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	b21b      	sxth	r3, r3
 8008ee0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	8a7a      	ldrh	r2, [r7, #18]
 8008ee6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	3302      	adds	r3, #2
 8008eec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efc:	3b01      	subs	r3, #1
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1df      	bne.n	8008ec6 <USB_WritePMA+0x38>
  }
}
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	372c      	adds	r7, #44	@ 0x2c
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b08b      	sub	sp, #44	@ 0x2c
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4611      	mov	r1, r2
 8008f20:	461a      	mov	r2, r3
 8008f22:	460b      	mov	r3, r1
 8008f24:	80fb      	strh	r3, [r7, #6]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f2a:	88bb      	ldrh	r3, [r7, #4]
 8008f2c:	085b      	lsrs	r3, r3, #1
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f3a:	88fa      	ldrh	r2, [r7, #6]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f4a:	e018      	b.n	8008f7e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	3302      	adds	r3, #2
 8008f58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	3301      	adds	r3, #1
 8008f66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e3      	bne.n	8008f4c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008f84:	88bb      	ldrh	r3, [r7, #4]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d007      	beq.n	8008fa0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	701a      	strb	r2, [r3, #0]
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	372c      	adds	r7, #44	@ 0x2c
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fb8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008fbc:	f004 ff9c 	bl	800def8 <USBD_static_malloc>
 8008fc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d105      	bne.n	8008fd4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e066      	b.n	80090a2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7c1b      	ldrb	r3, [r3, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d119      	bne.n	8009018 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fe8:	2202      	movs	r2, #2
 8008fea:	2181      	movs	r1, #129	@ 0x81
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f004 fe2a 	bl	800dc46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	2101      	movs	r1, #1
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f004 fe20 	bl	800dc46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2210      	movs	r2, #16
 8009012:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009016:	e016      	b.n	8009046 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009018:	2340      	movs	r3, #64	@ 0x40
 800901a:	2202      	movs	r2, #2
 800901c:	2181      	movs	r1, #129	@ 0x81
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f004 fe11 	bl	800dc46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800902a:	2340      	movs	r3, #64	@ 0x40
 800902c:	2202      	movs	r2, #2
 800902e:	2101      	movs	r1, #1
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f004 fe08 	bl	800dc46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2210      	movs	r2, #16
 8009042:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009046:	2308      	movs	r3, #8
 8009048:	2203      	movs	r2, #3
 800904a:	2182      	movs	r1, #130	@ 0x82
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f004 fdfa 	bl	800dc46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	7c1b      	ldrb	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009086:	2101      	movs	r1, #1
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f004 fecb 	bl	800de24 <USBD_LL_PrepareReceive>
 800908e:	e007      	b.n	80090a0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009096:	2340      	movs	r3, #64	@ 0x40
 8009098:	2101      	movs	r1, #1
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f004 fec2 	bl	800de24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090b6:	2181      	movs	r1, #129	@ 0x81
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f004 fdea 	bl	800dc92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090c4:	2101      	movs	r1, #1
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f004 fde3 	bl	800dc92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80090d4:	2182      	movs	r1, #130	@ 0x82
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f004 fddb 	bl	800dc92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00e      	beq.n	8009114 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009106:	4618      	mov	r0, r3
 8009108:	f004 ff04 	bl	800df14 <USBD_static_free>
    pdev->pClassData = NULL;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009130:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009144:	2303      	movs	r3, #3
 8009146:	e0af      	b.n	80092a8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009150:	2b00      	cmp	r3, #0
 8009152:	d03f      	beq.n	80091d4 <USBD_CDC_Setup+0xb4>
 8009154:	2b20      	cmp	r3, #32
 8009156:	f040 809f 	bne.w	8009298 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	88db      	ldrh	r3, [r3, #6]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d02e      	beq.n	80091c0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	b25b      	sxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	da16      	bge.n	800919a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009178:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	88d2      	ldrh	r2, [r2, #6]
 800917e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	88db      	ldrh	r3, [r3, #6]
 8009184:	2b07      	cmp	r3, #7
 8009186:	bf28      	it	cs
 8009188:	2307      	movcs	r3, #7
 800918a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	89fa      	ldrh	r2, [r7, #14]
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 facf 	bl	800a736 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009198:	e085      	b.n	80092a6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	785a      	ldrb	r2, [r3, #1]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	88db      	ldrh	r3, [r3, #6]
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80091b0:	6939      	ldr	r1, [r7, #16]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	88db      	ldrh	r3, [r3, #6]
 80091b6:	461a      	mov	r2, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 fae8 	bl	800a78e <USBD_CtlPrepareRx>
      break;
 80091be:	e072      	b.n	80092a6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	7850      	ldrb	r0, [r2, #1]
 80091cc:	2200      	movs	r2, #0
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	4798      	blx	r3
      break;
 80091d2:	e068      	b.n	80092a6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	2b0b      	cmp	r3, #11
 80091da:	d852      	bhi.n	8009282 <USBD_CDC_Setup+0x162>
 80091dc:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <USBD_CDC_Setup+0xc4>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009215 	.word	0x08009215
 80091e8:	08009291 	.word	0x08009291
 80091ec:	08009283 	.word	0x08009283
 80091f0:	08009283 	.word	0x08009283
 80091f4:	08009283 	.word	0x08009283
 80091f8:	08009283 	.word	0x08009283
 80091fc:	08009283 	.word	0x08009283
 8009200:	08009283 	.word	0x08009283
 8009204:	08009283 	.word	0x08009283
 8009208:	08009283 	.word	0x08009283
 800920c:	0800923f 	.word	0x0800923f
 8009210:	08009269 	.word	0x08009269
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b03      	cmp	r3, #3
 800921e:	d107      	bne.n	8009230 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009220:	f107 030a 	add.w	r3, r7, #10
 8009224:	2202      	movs	r2, #2
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 fa84 	bl	800a736 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800922e:	e032      	b.n	8009296 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fa0e 	bl	800a654 <USBD_CtlError>
            ret = USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	75fb      	strb	r3, [r7, #23]
          break;
 800923c:	e02b      	b.n	8009296 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b03      	cmp	r3, #3
 8009248:	d107      	bne.n	800925a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800924a:	f107 030d 	add.w	r3, r7, #13
 800924e:	2201      	movs	r2, #1
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fa6f 	bl	800a736 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009258:	e01d      	b.n	8009296 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 f9f9 	bl	800a654 <USBD_CtlError>
            ret = USBD_FAIL;
 8009262:	2303      	movs	r3, #3
 8009264:	75fb      	strb	r3, [r7, #23]
          break;
 8009266:	e016      	b.n	8009296 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b03      	cmp	r3, #3
 8009272:	d00f      	beq.n	8009294 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f9ec 	bl	800a654 <USBD_CtlError>
            ret = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009280:	e008      	b.n	8009294 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f9e5 	bl	800a654 <USBD_CtlError>
          ret = USBD_FAIL;
 800928a:	2303      	movs	r3, #3
 800928c:	75fb      	strb	r3, [r7, #23]
          break;
 800928e:	e002      	b.n	8009296 <USBD_CDC_Setup+0x176>
          break;
 8009290:	bf00      	nop
 8009292:	e008      	b.n	80092a6 <USBD_CDC_Setup+0x186>
          break;
 8009294:	bf00      	nop
      }
      break;
 8009296:	e006      	b.n	80092a6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 f9da 	bl	800a654 <USBD_CtlError>
      ret = USBD_FAIL;
 80092a0:	2303      	movs	r3, #3
 80092a2:	75fb      	strb	r3, [r7, #23]
      break;
 80092a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	460b      	mov	r3, r1
 80092ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80092c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e04f      	b.n	8009372 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	440b      	add	r3, r1
 80092e8:	3318      	adds	r3, #24
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d029      	beq.n	8009344 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	440b      	add	r3, r1
 80092fe:	3318      	adds	r3, #24
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	78f9      	ldrb	r1, [r7, #3]
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	460b      	mov	r3, r1
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	4403      	add	r3, r0
 8009310:	3320      	adds	r3, #32
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	fbb2 f1f3 	udiv	r1, r2, r3
 8009318:	fb01 f303 	mul.w	r3, r1, r3
 800931c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800931e:	2b00      	cmp	r3, #0
 8009320:	d110      	bne.n	8009344 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	440b      	add	r3, r1
 8009330:	3318      	adds	r3, #24
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009336:	78f9      	ldrb	r1, [r7, #3]
 8009338:	2300      	movs	r3, #0
 800933a:	2200      	movs	r2, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f004 fd50 	bl	800dde2 <USBD_LL_Transmit>
 8009342:	e015      	b.n	8009370 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800938c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009398:	2303      	movs	r3, #3
 800939a:	e015      	b.n	80093c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800939c:	78fb      	ldrb	r3, [r7, #3]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f004 fd60 	bl	800de66 <USBD_LL_GetRxDataSize>
 80093a6:	4602      	mov	r2, r0
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80093c2:	4611      	mov	r1, r2
 80093c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e01a      	b.n	8009420 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d014      	beq.n	800941e <USBD_CDC_EP0_RxReady+0x4e>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80093fa:	2bff      	cmp	r3, #255	@ 0xff
 80093fc:	d00f      	beq.n	800941e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800940c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009414:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	22ff      	movs	r2, #255	@ 0xff
 800941a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2243      	movs	r2, #67	@ 0x43
 8009434:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009436:	4b03      	ldr	r3, [pc, #12]	@ (8009444 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	20000094 	.word	0x20000094

08009448 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2243      	movs	r2, #67	@ 0x43
 8009454:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009456:	4b03      	ldr	r3, [pc, #12]	@ (8009464 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20000050 	.word	0x20000050

08009468 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2243      	movs	r2, #67	@ 0x43
 8009474:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009476:	4b03      	ldr	r3, [pc, #12]	@ (8009484 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	200000d8 	.word	0x200000d8

08009488 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	220a      	movs	r2, #10
 8009494:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009496:	4b03      	ldr	r3, [pc, #12]	@ (80094a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009498:	4618      	mov	r0, r3
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	2000000c 	.word	0x2000000c

080094a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e004      	b.n	80094c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b087      	sub	sp, #28
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e008      	b.n	8009502 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800951e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	e004      	b.n	8009534 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800954e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009550:	2301      	movs	r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800955e:	2303      	movs	r3, #3
 8009560:	e01a      	b.n	8009598 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009568:	2b00      	cmp	r3, #0
 800956a:	d114      	bne.n	8009596 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2201      	movs	r2, #1
 8009570:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800958a:	2181      	movs	r1, #129	@ 0x81
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f004 fc28 	bl	800dde2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e016      	b.n	80095ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7c1b      	ldrb	r3, [r3, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095d0:	2101      	movs	r1, #1
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f004 fc26 	bl	800de24 <USBD_LL_PrepareReceive>
 80095d8:	e007      	b.n	80095ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095e0:	2340      	movs	r3, #64	@ 0x40
 80095e2:	2101      	movs	r1, #1
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f004 fc1d 	bl	800de24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009608:	2303      	movs	r3, #3
 800960a:	e01f      	b.n	800964c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	79fa      	ldrb	r2, [r7, #7]
 800963e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f004 fa85 	bl	800db50 <USBD_LL_Init>
 8009646:	4603      	mov	r3, r0
 8009648:	75fb      	strb	r3, [r7, #23]

  return ret;
 800964a:	7dfb      	ldrb	r3, [r7, #23]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009668:	2303      	movs	r3, #3
 800966a:	e016      	b.n	800969a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009688:	f107 020e 	add.w	r2, r7, #14
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	4602      	mov	r2, r0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f004 fab0 	bl	800dc10 <USBD_LL_Start>
 80096b0:	4603      	mov	r3, r0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	4611      	mov	r1, r2
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800971a:	2b00      	cmp	r3, #0
 800971c:	d007      	beq.n	800972e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	4611      	mov	r1, r2
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
  }

  return USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 ff48 	bl	800a5e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800975e:	461a      	mov	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	2b02      	cmp	r3, #2
 8009772:	d01a      	beq.n	80097aa <USBD_LL_SetupStage+0x72>
 8009774:	2b02      	cmp	r3, #2
 8009776:	d822      	bhi.n	80097be <USBD_LL_SetupStage+0x86>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <USBD_LL_SetupStage+0x4a>
 800977c:	2b01      	cmp	r3, #1
 800977e:	d00a      	beq.n	8009796 <USBD_LL_SetupStage+0x5e>
 8009780:	e01d      	b.n	80097be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f9f0 	bl	8009b70 <USBD_StdDevReq>
 8009790:	4603      	mov	r3, r0
 8009792:	73fb      	strb	r3, [r7, #15]
      break;
 8009794:	e020      	b.n	80097d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa54 	bl	8009c4c <USBD_StdItfReq>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
      break;
 80097a8:	e016      	b.n	80097d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa93 	bl	8009cde <USBD_StdEPReq>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
      break;
 80097bc:	e00c      	b.n	80097d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f004 fa7f 	bl	800dcd0 <USBD_LL_StallEP>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
      break;
 80097d6:	bf00      	nop
  }

  return ret;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	460b      	mov	r3, r1
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80097f0:	7afb      	ldrb	r3, [r7, #11]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d138      	bne.n	8009868 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80097fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009804:	2b03      	cmp	r3, #3
 8009806:	d14a      	bne.n	800989e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	429a      	cmp	r2, r3
 8009812:	d913      	bls.n	800983c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	1ad2      	subs	r2, r2, r3
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	4293      	cmp	r3, r2
 800982c:	bf28      	it	cs
 800982e:	4613      	movcs	r3, r2
 8009830:	461a      	mov	r2, r3
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 ffc7 	bl	800a7c8 <USBD_CtlContinueRx>
 800983a:	e030      	b.n	800989e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b03      	cmp	r3, #3
 8009846:	d10b      	bne.n	8009860 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 ffc2 	bl	800a7ea <USBD_CtlSendStatus>
 8009866:	e01a      	b.n	800989e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b03      	cmp	r3, #3
 8009872:	d114      	bne.n	800989e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00e      	beq.n	800989e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	7afa      	ldrb	r2, [r7, #11]
 800988a:	4611      	mov	r1, r2
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	4798      	blx	r3
 8009890:	4603      	mov	r3, r0
 8009892:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	e000      	b.n	80098a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	460b      	mov	r3, r1
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d16b      	bne.n	8009994 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3314      	adds	r3, #20
 80098c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d156      	bne.n	800997a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d914      	bls.n	8009902 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	1ad2      	subs	r2, r2, r3
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 ff3c 	bl	800a76c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098f4:	2300      	movs	r3, #0
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f004 fa92 	bl	800de24 <USBD_LL_PrepareReceive>
 8009900:	e03b      	b.n	800997a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	429a      	cmp	r2, r3
 800990c:	d11c      	bne.n	8009948 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009916:	429a      	cmp	r2, r3
 8009918:	d316      	bcc.n	8009948 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009924:	429a      	cmp	r2, r3
 8009926:	d20f      	bcs.n	8009948 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 ff1d 	bl	800a76c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800993a:	2300      	movs	r3, #0
 800993c:	2200      	movs	r2, #0
 800993e:	2100      	movs	r1, #0
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f004 fa6f 	bl	800de24 <USBD_LL_PrepareReceive>
 8009946:	e018      	b.n	800997a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b03      	cmp	r3, #3
 8009952:	d10b      	bne.n	800996c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800996c:	2180      	movs	r1, #128	@ 0x80
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f004 f9ae 	bl	800dcd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 ff4b 	bl	800a810 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009980:	2b01      	cmp	r3, #1
 8009982:	d122      	bne.n	80099ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff fe98 	bl	80096ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009992:	e01a      	b.n	80099ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b03      	cmp	r3, #3
 800999e:	d114      	bne.n	80099ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	7afa      	ldrb	r2, [r7, #11]
 80099b6:	4611      	mov	r1, r2
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	4798      	blx	r3
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	e000      	b.n	80099cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e02f      	b.n	8009a68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00f      	beq.n	8009a32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	6852      	ldr	r2, [r2, #4]
 8009a2a:	b2d2      	uxtb	r2, r2
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a32:	2340      	movs	r3, #64	@ 0x40
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f004 f904 	bl	800dc46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2240      	movs	r2, #64	@ 0x40
 8009a4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a4e:	2340      	movs	r3, #64	@ 0x40
 8009a50:	2200      	movs	r2, #0
 8009a52:	2180      	movs	r1, #128	@ 0x80
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f004 f8f6 	bl	800dc46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2240      	movs	r2, #64	@ 0x40
 8009a64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	78fa      	ldrb	r2, [r7, #3]
 8009a80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2204      	movs	r2, #4
 8009aaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d106      	bne.n	8009ade <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e012      	b.n	8009b28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d10b      	bne.n	8009b26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d005      	beq.n	8009b26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	3301      	adds	r3, #1
 8009b46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009b52:	021b      	lsls	r3, r3, #8
 8009b54:	b21a      	sxth	r2, r3
 8009b56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	b21b      	sxth	r3, r3
 8009b5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b60:	89fb      	ldrh	r3, [r7, #14]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
	...

08009b70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b86:	2b40      	cmp	r3, #64	@ 0x40
 8009b88:	d005      	beq.n	8009b96 <USBD_StdDevReq+0x26>
 8009b8a:	2b40      	cmp	r3, #64	@ 0x40
 8009b8c:	d853      	bhi.n	8009c36 <USBD_StdDevReq+0xc6>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <USBD_StdDevReq+0x3a>
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d14f      	bne.n	8009c36 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	4798      	blx	r3
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba8:	e04a      	b.n	8009c40 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	2b09      	cmp	r3, #9
 8009bb0:	d83b      	bhi.n	8009c2a <USBD_StdDevReq+0xba>
 8009bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb8 <USBD_StdDevReq+0x48>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009c0d 	.word	0x08009c0d
 8009bbc:	08009c21 	.word	0x08009c21
 8009bc0:	08009c2b 	.word	0x08009c2b
 8009bc4:	08009c17 	.word	0x08009c17
 8009bc8:	08009c2b 	.word	0x08009c2b
 8009bcc:	08009beb 	.word	0x08009beb
 8009bd0:	08009be1 	.word	0x08009be1
 8009bd4:	08009c2b 	.word	0x08009c2b
 8009bd8:	08009c03 	.word	0x08009c03
 8009bdc:	08009bf5 	.word	0x08009bf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f9de 	bl	8009fa4 <USBD_GetDescriptor>
          break;
 8009be8:	e024      	b.n	8009c34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fb6d 	bl	800a2cc <USBD_SetAddress>
          break;
 8009bf2:	e01f      	b.n	8009c34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fbac 	bl	800a354 <USBD_SetConfig>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
          break;
 8009c00:	e018      	b.n	8009c34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fc4b 	bl	800a4a0 <USBD_GetConfig>
          break;
 8009c0a:	e013      	b.n	8009c34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fc7c 	bl	800a50c <USBD_GetStatus>
          break;
 8009c14:	e00e      	b.n	8009c34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fcab 	bl	800a574 <USBD_SetFeature>
          break;
 8009c1e:	e009      	b.n	8009c34 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fcba 	bl	800a59c <USBD_ClrFeature>
          break;
 8009c28:	e004      	b.n	8009c34 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fd11 	bl	800a654 <USBD_CtlError>
          break;
 8009c32:	bf00      	nop
      }
      break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fd0b 	bl	800a654 <USBD_CtlError>
      break;
 8009c3e:	bf00      	nop
  }

  return ret;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop

08009c4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c62:	2b40      	cmp	r3, #64	@ 0x40
 8009c64:	d005      	beq.n	8009c72 <USBD_StdItfReq+0x26>
 8009c66:	2b40      	cmp	r3, #64	@ 0x40
 8009c68:	d82f      	bhi.n	8009cca <USBD_StdItfReq+0x7e>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <USBD_StdItfReq+0x26>
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d12b      	bne.n	8009cca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d81d      	bhi.n	8009cbc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	889b      	ldrh	r3, [r3, #4]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d813      	bhi.n	8009cb2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	4798      	blx	r3
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	88db      	ldrh	r3, [r3, #6]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d110      	bne.n	8009cc6 <USBD_StdItfReq+0x7a>
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10d      	bne.n	8009cc6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fd9d 	bl	800a7ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cb0:	e009      	b.n	8009cc6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fccd 	bl	800a654 <USBD_CtlError>
          break;
 8009cba:	e004      	b.n	8009cc6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fcc8 	bl	800a654 <USBD_CtlError>
          break;
 8009cc4:	e000      	b.n	8009cc8 <USBD_StdItfReq+0x7c>
          break;
 8009cc6:	bf00      	nop
      }
      break;
 8009cc8:	e004      	b.n	8009cd4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fcc1 	bl	800a654 <USBD_CtlError>
      break;
 8009cd2:	bf00      	nop
  }

  return ret;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	889b      	ldrh	r3, [r3, #4]
 8009cf0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cfa:	2b40      	cmp	r3, #64	@ 0x40
 8009cfc:	d007      	beq.n	8009d0e <USBD_StdEPReq+0x30>
 8009cfe:	2b40      	cmp	r3, #64	@ 0x40
 8009d00:	f200 8145 	bhi.w	8009f8e <USBD_StdEPReq+0x2b0>
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00c      	beq.n	8009d22 <USBD_StdEPReq+0x44>
 8009d08:	2b20      	cmp	r3, #32
 8009d0a:	f040 8140 	bne.w	8009f8e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	4798      	blx	r3
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d20:	e13a      	b.n	8009f98 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d007      	beq.n	8009d3a <USBD_StdEPReq+0x5c>
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	f300 8129 	bgt.w	8009f82 <USBD_StdEPReq+0x2a4>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d07f      	beq.n	8009e34 <USBD_StdEPReq+0x156>
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d03c      	beq.n	8009db2 <USBD_StdEPReq+0xd4>
 8009d38:	e123      	b.n	8009f82 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d002      	beq.n	8009d4c <USBD_StdEPReq+0x6e>
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d016      	beq.n	8009d78 <USBD_StdEPReq+0x9a>
 8009d4a:	e02c      	b.n	8009da6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00d      	beq.n	8009d6e <USBD_StdEPReq+0x90>
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	2b80      	cmp	r3, #128	@ 0x80
 8009d56:	d00a      	beq.n	8009d6e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f003 ffb7 	bl	800dcd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d62:	2180      	movs	r1, #128	@ 0x80
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f003 ffb3 	bl	800dcd0 <USBD_LL_StallEP>
 8009d6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d6c:	e020      	b.n	8009db0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fc6f 	bl	800a654 <USBD_CtlError>
              break;
 8009d76:	e01b      	b.n	8009db0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	885b      	ldrh	r3, [r3, #2]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10e      	bne.n	8009d9e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00b      	beq.n	8009d9e <USBD_StdEPReq+0xc0>
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	2b80      	cmp	r3, #128	@ 0x80
 8009d8a:	d008      	beq.n	8009d9e <USBD_StdEPReq+0xc0>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	88db      	ldrh	r3, [r3, #6]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d104      	bne.n	8009d9e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f003 ff99 	bl	800dcd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fd23 	bl	800a7ea <USBD_CtlSendStatus>

              break;
 8009da4:	e004      	b.n	8009db0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fc53 	bl	800a654 <USBD_CtlError>
              break;
 8009dae:	bf00      	nop
          }
          break;
 8009db0:	e0ec      	b.n	8009f8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d002      	beq.n	8009dc4 <USBD_StdEPReq+0xe6>
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d016      	beq.n	8009df0 <USBD_StdEPReq+0x112>
 8009dc2:	e030      	b.n	8009e26 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00d      	beq.n	8009de6 <USBD_StdEPReq+0x108>
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	2b80      	cmp	r3, #128	@ 0x80
 8009dce:	d00a      	beq.n	8009de6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f003 ff7b 	bl	800dcd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dda:	2180      	movs	r1, #128	@ 0x80
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f003 ff77 	bl	800dcd0 <USBD_LL_StallEP>
 8009de2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009de4:	e025      	b.n	8009e32 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009de6:	6839      	ldr	r1, [r7, #0]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fc33 	bl	800a654 <USBD_CtlError>
              break;
 8009dee:	e020      	b.n	8009e32 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d11b      	bne.n	8009e30 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f003 ff81 	bl	800dd0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fcec 	bl	800a7ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	4798      	blx	r3
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009e24:	e004      	b.n	8009e30 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fc13 	bl	800a654 <USBD_CtlError>
              break;
 8009e2e:	e000      	b.n	8009e32 <USBD_StdEPReq+0x154>
              break;
 8009e30:	bf00      	nop
          }
          break;
 8009e32:	e0ab      	b.n	8009f8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d002      	beq.n	8009e46 <USBD_StdEPReq+0x168>
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d032      	beq.n	8009eaa <USBD_StdEPReq+0x1cc>
 8009e44:	e097      	b.n	8009f76 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d007      	beq.n	8009e5c <USBD_StdEPReq+0x17e>
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	2b80      	cmp	r3, #128	@ 0x80
 8009e50:	d004      	beq.n	8009e5c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fbfd 	bl	800a654 <USBD_CtlError>
                break;
 8009e5a:	e091      	b.n	8009f80 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	da0b      	bge.n	8009e7c <USBD_StdEPReq+0x19e>
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	3310      	adds	r3, #16
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	4413      	add	r3, r2
 8009e78:	3304      	adds	r3, #4
 8009e7a:	e00b      	b.n	8009e94 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	4413      	add	r3, r2
 8009e92:	3304      	adds	r3, #4
 8009e94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fc47 	bl	800a736 <USBD_CtlSendData>
              break;
 8009ea8:	e06a      	b.n	8009f80 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009eaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da11      	bge.n	8009ed6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
 8009eb4:	f003 020f 	and.w	r2, r3, #15
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3324      	adds	r3, #36	@ 0x24
 8009ec6:	881b      	ldrh	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d117      	bne.n	8009efc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fbc0 	bl	800a654 <USBD_CtlError>
                  break;
 8009ed4:	e054      	b.n	8009f80 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	f003 020f 	and.w	r2, r3, #15
 8009edc:	6879      	ldr	r1, [r7, #4]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	440b      	add	r3, r1
 8009ee8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fbad 	bl	800a654 <USBD_CtlError>
                  break;
 8009efa:	e041      	b.n	8009f80 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da0b      	bge.n	8009f1c <USBD_StdEPReq+0x23e>
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	3310      	adds	r3, #16
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	4413      	add	r3, r2
 8009f18:	3304      	adds	r3, #4
 8009f1a:	e00b      	b.n	8009f34 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	3304      	adds	r3, #4
 8009f34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <USBD_StdEPReq+0x264>
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
 8009f3e:	2b80      	cmp	r3, #128	@ 0x80
 8009f40:	d103      	bne.n	8009f4a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	e00e      	b.n	8009f68 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f003 fefc 	bl	800dd4c <USBD_LL_IsStallEP>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e002      	b.n	8009f68 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fbe1 	bl	800a736 <USBD_CtlSendData>
              break;
 8009f74:	e004      	b.n	8009f80 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fb6b 	bl	800a654 <USBD_CtlError>
              break;
 8009f7e:	bf00      	nop
          }
          break;
 8009f80:	e004      	b.n	8009f8c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb65 	bl	800a654 <USBD_CtlError>
          break;
 8009f8a:	bf00      	nop
      }
      break;
 8009f8c:	e004      	b.n	8009f98 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fb5f 	bl	800a654 <USBD_CtlError>
      break;
 8009f96:	bf00      	nop
  }

  return ret;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	885b      	ldrh	r3, [r3, #2]
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	2b0e      	cmp	r3, #14
 8009fc6:	f200 8152 	bhi.w	800a26e <USBD_GetDescriptor+0x2ca>
 8009fca:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd0 <USBD_GetDescriptor+0x2c>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	0800a041 	.word	0x0800a041
 8009fd4:	0800a059 	.word	0x0800a059
 8009fd8:	0800a099 	.word	0x0800a099
 8009fdc:	0800a26f 	.word	0x0800a26f
 8009fe0:	0800a26f 	.word	0x0800a26f
 8009fe4:	0800a20f 	.word	0x0800a20f
 8009fe8:	0800a23b 	.word	0x0800a23b
 8009fec:	0800a26f 	.word	0x0800a26f
 8009ff0:	0800a26f 	.word	0x0800a26f
 8009ff4:	0800a26f 	.word	0x0800a26f
 8009ff8:	0800a26f 	.word	0x0800a26f
 8009ffc:	0800a26f 	.word	0x0800a26f
 800a000:	0800a26f 	.word	0x0800a26f
 800a004:	0800a26f 	.word	0x0800a26f
 800a008:	0800a00d 	.word	0x0800a00d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00b      	beq.n	800a030 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	7c12      	ldrb	r2, [r2, #16]
 800a024:	f107 0108 	add.w	r1, r7, #8
 800a028:	4610      	mov	r0, r2
 800a02a:	4798      	blx	r3
 800a02c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a02e:	e126      	b.n	800a27e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fb0e 	bl	800a654 <USBD_CtlError>
        err++;
 800a038:	7afb      	ldrb	r3, [r7, #11]
 800a03a:	3301      	adds	r3, #1
 800a03c:	72fb      	strb	r3, [r7, #11]
      break;
 800a03e:	e11e      	b.n	800a27e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	7c12      	ldrb	r2, [r2, #16]
 800a04c:	f107 0108 	add.w	r1, r7, #8
 800a050:	4610      	mov	r0, r2
 800a052:	4798      	blx	r3
 800a054:	60f8      	str	r0, [r7, #12]
      break;
 800a056:	e112      	b.n	800a27e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	7c1b      	ldrb	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10d      	bne.n	800a07c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a068:	f107 0208 	add.w	r2, r7, #8
 800a06c:	4610      	mov	r0, r2
 800a06e:	4798      	blx	r3
 800a070:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3301      	adds	r3, #1
 800a076:	2202      	movs	r2, #2
 800a078:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a07a:	e100      	b.n	800a27e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a084:	f107 0208 	add.w	r2, r7, #8
 800a088:	4610      	mov	r0, r2
 800a08a:	4798      	blx	r3
 800a08c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3301      	adds	r3, #1
 800a092:	2202      	movs	r2, #2
 800a094:	701a      	strb	r2, [r3, #0]
      break;
 800a096:	e0f2      	b.n	800a27e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	885b      	ldrh	r3, [r3, #2]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	f200 80ac 	bhi.w	800a1fc <USBD_GetDescriptor+0x258>
 800a0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ac <USBD_GetDescriptor+0x108>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a0c5 	.word	0x0800a0c5
 800a0b0:	0800a0f9 	.word	0x0800a0f9
 800a0b4:	0800a12d 	.word	0x0800a12d
 800a0b8:	0800a161 	.word	0x0800a161
 800a0bc:	0800a195 	.word	0x0800a195
 800a0c0:	0800a1c9 	.word	0x0800a1c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	7c12      	ldrb	r2, [r2, #16]
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e6:	e091      	b.n	800a20c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fab2 	bl	800a654 <USBD_CtlError>
            err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f6:	e089      	b.n	800a20c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7c12      	ldrb	r2, [r2, #16]
 800a110:	f107 0108 	add.w	r1, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11a:	e077      	b.n	800a20c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa98 	bl	800a654 <USBD_CtlError>
            err++;
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	3301      	adds	r3, #1
 800a128:	72fb      	strb	r3, [r7, #11]
          break;
 800a12a:	e06f      	b.n	800a20c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00b      	beq.n	800a150 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	7c12      	ldrb	r2, [r2, #16]
 800a144:	f107 0108 	add.w	r1, r7, #8
 800a148:	4610      	mov	r0, r2
 800a14a:	4798      	blx	r3
 800a14c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a14e:	e05d      	b.n	800a20c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa7e 	bl	800a654 <USBD_CtlError>
            err++;
 800a158:	7afb      	ldrb	r3, [r7, #11]
 800a15a:	3301      	adds	r3, #1
 800a15c:	72fb      	strb	r3, [r7, #11]
          break;
 800a15e:	e055      	b.n	800a20c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00b      	beq.n	800a184 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	7c12      	ldrb	r2, [r2, #16]
 800a178:	f107 0108 	add.w	r1, r7, #8
 800a17c:	4610      	mov	r0, r2
 800a17e:	4798      	blx	r3
 800a180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a182:	e043      	b.n	800a20c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fa64 	bl	800a654 <USBD_CtlError>
            err++;
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	3301      	adds	r3, #1
 800a190:	72fb      	strb	r3, [r7, #11]
          break;
 800a192:	e03b      	b.n	800a20c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00b      	beq.n	800a1b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	7c12      	ldrb	r2, [r2, #16]
 800a1ac:	f107 0108 	add.w	r1, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1b6:	e029      	b.n	800a20c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa4a 	bl	800a654 <USBD_CtlError>
            err++;
 800a1c0:	7afb      	ldrb	r3, [r7, #11]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1c6:	e021      	b.n	800a20c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7c12      	ldrb	r2, [r2, #16]
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ea:	e00f      	b.n	800a20c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa30 	bl	800a654 <USBD_CtlError>
            err++;
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1fa:	e007      	b.n	800a20c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fa28 	bl	800a654 <USBD_CtlError>
          err++;
 800a204:	7afb      	ldrb	r3, [r7, #11]
 800a206:	3301      	adds	r3, #1
 800a208:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a20a:	bf00      	nop
      }
      break;
 800a20c:	e037      	b.n	800a27e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	7c1b      	ldrb	r3, [r3, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a21e:	f107 0208 	add.w	r2, r7, #8
 800a222:	4610      	mov	r0, r2
 800a224:	4798      	blx	r3
 800a226:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a228:	e029      	b.n	800a27e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fa11 	bl	800a654 <USBD_CtlError>
        err++;
 800a232:	7afb      	ldrb	r3, [r7, #11]
 800a234:	3301      	adds	r3, #1
 800a236:	72fb      	strb	r3, [r7, #11]
      break;
 800a238:	e021      	b.n	800a27e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7c1b      	ldrb	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10d      	bne.n	800a25e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a24a:	f107 0208 	add.w	r2, r7, #8
 800a24e:	4610      	mov	r0, r2
 800a250:	4798      	blx	r3
 800a252:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3301      	adds	r3, #1
 800a258:	2207      	movs	r2, #7
 800a25a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a25c:	e00f      	b.n	800a27e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f9f7 	bl	800a654 <USBD_CtlError>
        err++;
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	3301      	adds	r3, #1
 800a26a:	72fb      	strb	r3, [r7, #11]
      break;
 800a26c:	e007      	b.n	800a27e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f9ef 	bl	800a654 <USBD_CtlError>
      err++;
 800a276:	7afb      	ldrb	r3, [r7, #11]
 800a278:	3301      	adds	r3, #1
 800a27a:	72fb      	strb	r3, [r7, #11]
      break;
 800a27c:	bf00      	nop
  }

  if (err != 0U)
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d11e      	bne.n	800a2c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	88db      	ldrh	r3, [r3, #6]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a28c:	893b      	ldrh	r3, [r7, #8]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00e      	beq.n	800a2b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	88da      	ldrh	r2, [r3, #6]
 800a296:	893b      	ldrh	r3, [r7, #8]
 800a298:	4293      	cmp	r3, r2
 800a29a:	bf28      	it	cs
 800a29c:	4613      	movcs	r3, r2
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2a2:	893b      	ldrh	r3, [r7, #8]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	68f9      	ldr	r1, [r7, #12]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fa44 	bl	800a736 <USBD_CtlSendData>
 800a2ae:	e009      	b.n	800a2c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9ce 	bl	800a654 <USBD_CtlError>
 800a2b8:	e004      	b.n	800a2c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa95 	bl	800a7ea <USBD_CtlSendStatus>
 800a2c0:	e000      	b.n	800a2c4 <USBD_GetDescriptor+0x320>
    return;
 800a2c2:	bf00      	nop
  }
}
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop

0800a2cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	889b      	ldrh	r3, [r3, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d131      	bne.n	800a342 <USBD_SetAddress+0x76>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	88db      	ldrh	r3, [r3, #6]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d12d      	bne.n	800a342 <USBD_SetAddress+0x76>
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	885b      	ldrh	r3, [r3, #2]
 800a2ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2ec:	d829      	bhi.n	800a342 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	885b      	ldrh	r3, [r3, #2]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b03      	cmp	r3, #3
 800a304:	d104      	bne.n	800a310 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9a3 	bl	800a654 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30e:	e01d      	b.n	800a34c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7bfa      	ldrb	r2, [r7, #15]
 800a314:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f003 fd41 	bl	800dda4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa61 	bl	800a7ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d004      	beq.n	800a338 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2202      	movs	r2, #2
 800a332:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a336:	e009      	b.n	800a34c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a340:	e004      	b.n	800a34c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f985 	bl	800a654 <USBD_CtlError>
  }
}
 800a34a:	bf00      	nop
 800a34c:	bf00      	nop
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	885b      	ldrh	r3, [r3, #2]
 800a366:	b2da      	uxtb	r2, r3
 800a368:	4b4c      	ldr	r3, [pc, #304]	@ (800a49c <USBD_SetConfig+0x148>)
 800a36a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a36c:	4b4b      	ldr	r3, [pc, #300]	@ (800a49c <USBD_SetConfig+0x148>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d905      	bls.n	800a380 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f96c 	bl	800a654 <USBD_CtlError>
    return USBD_FAIL;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e088      	b.n	800a492 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d002      	beq.n	800a392 <USBD_SetConfig+0x3e>
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d025      	beq.n	800a3dc <USBD_SetConfig+0x88>
 800a390:	e071      	b.n	800a476 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a392:	4b42      	ldr	r3, [pc, #264]	@ (800a49c <USBD_SetConfig+0x148>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d01c      	beq.n	800a3d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a39a:	4b40      	ldr	r3, [pc, #256]	@ (800a49c <USBD_SetConfig+0x148>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3a4:	4b3d      	ldr	r3, [pc, #244]	@ (800a49c <USBD_SetConfig+0x148>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff f990 	bl	80096d0 <USBD_SetClassConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d004      	beq.n	800a3c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f949 	bl	800a654 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3c2:	e065      	b.n	800a490 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fa10 	bl	800a7ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2203      	movs	r2, #3
 800a3ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a3d2:	e05d      	b.n	800a490 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fa08 	bl	800a7ea <USBD_CtlSendStatus>
      break;
 800a3da:	e059      	b.n	800a490 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a49c <USBD_SetConfig+0x148>)
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d112      	bne.n	800a40a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a3ec:	4b2b      	ldr	r3, [pc, #172]	@ (800a49c <USBD_SetConfig+0x148>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3f6:	4b29      	ldr	r3, [pc, #164]	@ (800a49c <USBD_SetConfig+0x148>)
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff f983 	bl	8009708 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f9f1 	bl	800a7ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a408:	e042      	b.n	800a490 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a40a:	4b24      	ldr	r3, [pc, #144]	@ (800a49c <USBD_SetConfig+0x148>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	429a      	cmp	r2, r3
 800a416:	d02a      	beq.n	800a46e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	4619      	mov	r1, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff f971 	bl	8009708 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a426:	4b1d      	ldr	r3, [pc, #116]	@ (800a49c <USBD_SetConfig+0x148>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a430:	4b1a      	ldr	r3, [pc, #104]	@ (800a49c <USBD_SetConfig+0x148>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff f94a 	bl	80096d0 <USBD_SetClassConfig>
 800a43c:	4603      	mov	r3, r0
 800a43e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a440:	7bfb      	ldrb	r3, [r7, #15]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00f      	beq.n	800a466 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f903 	bl	800a654 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff f956 	bl	8009708 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a464:	e014      	b.n	800a490 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f9bf 	bl	800a7ea <USBD_CtlSendStatus>
      break;
 800a46c:	e010      	b.n	800a490 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f9bb 	bl	800a7ea <USBD_CtlSendStatus>
      break;
 800a474:	e00c      	b.n	800a490 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f8eb 	bl	800a654 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a47e:	4b07      	ldr	r3, [pc, #28]	@ (800a49c <USBD_SetConfig+0x148>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff f93f 	bl	8009708 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a48a:	2303      	movs	r3, #3
 800a48c:	73fb      	strb	r3, [r7, #15]
      break;
 800a48e:	bf00      	nop
  }

  return ret;
 800a490:	7bfb      	ldrb	r3, [r7, #15]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20000540 	.word	0x20000540

0800a4a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	88db      	ldrh	r3, [r3, #6]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d004      	beq.n	800a4bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f8cd 	bl	800a654 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4ba:	e023      	b.n	800a504 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	dc02      	bgt.n	800a4ce <USBD_GetConfig+0x2e>
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc03      	bgt.n	800a4d4 <USBD_GetConfig+0x34>
 800a4cc:	e015      	b.n	800a4fa <USBD_GetConfig+0x5a>
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d00b      	beq.n	800a4ea <USBD_GetConfig+0x4a>
 800a4d2:	e012      	b.n	800a4fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3308      	adds	r3, #8
 800a4de:	2201      	movs	r2, #1
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f927 	bl	800a736 <USBD_CtlSendData>
        break;
 800a4e8:	e00c      	b.n	800a504 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f91f 	bl	800a736 <USBD_CtlSendData>
        break;
 800a4f8:	e004      	b.n	800a504 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f8a9 	bl	800a654 <USBD_CtlError>
        break;
 800a502:	bf00      	nop
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	3b01      	subs	r3, #1
 800a520:	2b02      	cmp	r3, #2
 800a522:	d81e      	bhi.n	800a562 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	88db      	ldrh	r3, [r3, #6]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d004      	beq.n	800a536 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f890 	bl	800a654 <USBD_CtlError>
        break;
 800a534:	e01a      	b.n	800a56c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a542:	2b00      	cmp	r3, #0
 800a544:	d005      	beq.n	800a552 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f043 0202 	orr.w	r2, r3, #2
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	330c      	adds	r3, #12
 800a556:	2202      	movs	r2, #2
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f8eb 	bl	800a736 <USBD_CtlSendData>
      break;
 800a560:	e004      	b.n	800a56c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f875 	bl	800a654 <USBD_CtlError>
      break;
 800a56a:	bf00      	nop
  }
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	885b      	ldrh	r3, [r3, #2]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d106      	bne.n	800a594 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f92b 	bl	800a7ea <USBD_CtlSendStatus>
  }
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d80b      	bhi.n	800a5cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	885b      	ldrh	r3, [r3, #2]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d10c      	bne.n	800a5d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f910 	bl	800a7ea <USBD_CtlSendStatus>
      }
      break;
 800a5ca:	e004      	b.n	800a5d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f840 	bl	800a654 <USBD_CtlError>
      break;
 800a5d4:	e000      	b.n	800a5d8 <USBD_ClrFeature+0x3c>
      break;
 800a5d6:	bf00      	nop
  }
}
 800a5d8:	bf00      	nop
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	781a      	ldrb	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	781a      	ldrb	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3301      	adds	r3, #1
 800a608:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff fa90 	bl	8009b30 <SWAPBYTE>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3301      	adds	r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3301      	adds	r3, #1
 800a622:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7ff fa83 	bl	8009b30 <SWAPBYTE>
 800a62a:	4603      	mov	r3, r0
 800a62c:	461a      	mov	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3301      	adds	r3, #1
 800a636:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f7ff fa76 	bl	8009b30 <SWAPBYTE>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	80da      	strh	r2, [r3, #6]
}
 800a64c:	bf00      	nop
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a65e:	2180      	movs	r1, #128	@ 0x80
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f003 fb35 	bl	800dcd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a666:	2100      	movs	r1, #0
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f003 fb31 	bl	800dcd0 <USBD_LL_StallEP>
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b086      	sub	sp, #24
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a682:	2300      	movs	r3, #0
 800a684:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d036      	beq.n	800a6fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a690:	6938      	ldr	r0, [r7, #16]
 800a692:	f000 f836 	bl	800a702 <USBD_GetLen>
 800a696:	4603      	mov	r3, r0
 800a698:	3301      	adds	r3, #1
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	005b      	lsls	r3, r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	7812      	ldrb	r2, [r2, #0]
 800a6ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	2203      	movs	r2, #3
 800a6be:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6c6:	e013      	b.n	800a6f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	7812      	ldrb	r2, [r2, #0]
 800a6d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	613b      	str	r3, [r7, #16]
    idx++;
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1e7      	bne.n	800a6c8 <USBD_GetString+0x52>
 800a6f8:	e000      	b.n	800a6fc <USBD_GetString+0x86>
    return;
 800a6fa:	bf00      	nop
  }
}
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a702:	b480      	push	{r7}
 800a704:	b085      	sub	sp, #20
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a712:	e005      	b.n	800a720 <USBD_GetLen+0x1e>
  {
    len++;
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	3301      	adds	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	3301      	adds	r3, #1
 800a71e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1f5      	bne.n	800a714 <USBD_GetLen+0x12>
  }

  return len;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2202      	movs	r2, #2
 800a746:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	2100      	movs	r1, #0
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f003 fb40 	bl	800dde2 <USBD_LL_Transmit>

  return USBD_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f003 fb2f 	bl	800dde2 <USBD_LL_Transmit>

  return USBD_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2203      	movs	r2, #3
 800a79e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f003 fb33 	bl	800de24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	2100      	movs	r1, #0
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f003 fb22 	bl	800de24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2204      	movs	r2, #4
 800a7f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2100      	movs	r1, #0
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f003 faee 	bl	800dde2 <USBD_LL_Transmit>

  return USBD_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2205      	movs	r2, #5
 800a81c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a820:	2300      	movs	r3, #0
 800a822:	2200      	movs	r2, #0
 800a824:	2100      	movs	r1, #0
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f003 fafc 	bl	800de24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <__NVIC_SetPriority>:
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	6039      	str	r1, [r7, #0]
 800a842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	db0a      	blt.n	800a862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	490c      	ldr	r1, [pc, #48]	@ (800a884 <__NVIC_SetPriority+0x4c>)
 800a852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a856:	0112      	lsls	r2, r2, #4
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	440b      	add	r3, r1
 800a85c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a860:	e00a      	b.n	800a878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	4908      	ldr	r1, [pc, #32]	@ (800a888 <__NVIC_SetPriority+0x50>)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	f003 030f 	and.w	r3, r3, #15
 800a86e:	3b04      	subs	r3, #4
 800a870:	0112      	lsls	r2, r2, #4
 800a872:	b2d2      	uxtb	r2, r2
 800a874:	440b      	add	r3, r1
 800a876:	761a      	strb	r2, [r3, #24]
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	e000e100 	.word	0xe000e100
 800a888:	e000ed00 	.word	0xe000ed00

0800a88c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a890:	4b05      	ldr	r3, [pc, #20]	@ (800a8a8 <SysTick_Handler+0x1c>)
 800a892:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a894:	f001 fdf6 	bl	800c484 <xTaskGetSchedulerState>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d001      	beq.n	800a8a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a89e:	f002 fbeb 	bl	800d078 <xPortSysTickHandler>
  }
}
 800a8a2:	bf00      	nop
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	e000e010 	.word	0xe000e010

0800a8ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	f06f 0004 	mvn.w	r0, #4
 800a8b6:	f7ff ffbf 	bl	800a838 <__NVIC_SetPriority>
#endif
}
 800a8ba:	bf00      	nop
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8c6:	f3ef 8305 	mrs	r3, IPSR
 800a8ca:	603b      	str	r3, [r7, #0]
  return(result);
 800a8cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a8d2:	f06f 0305 	mvn.w	r3, #5
 800a8d6:	607b      	str	r3, [r7, #4]
 800a8d8:	e00c      	b.n	800a8f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a8da:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <osKernelInitialize+0x44>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d105      	bne.n	800a8ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a8e2:	4b08      	ldr	r3, [pc, #32]	@ (800a904 <osKernelInitialize+0x44>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	607b      	str	r3, [r7, #4]
 800a8ec:	e002      	b.n	800a8f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8f4:	687b      	ldr	r3, [r7, #4]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	20000544 	.word	0x20000544

0800a908 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a90e:	f3ef 8305 	mrs	r3, IPSR
 800a912:	603b      	str	r3, [r7, #0]
  return(result);
 800a914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a91a:	f06f 0305 	mvn.w	r3, #5
 800a91e:	607b      	str	r3, [r7, #4]
 800a920:	e010      	b.n	800a944 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a922:	4b0b      	ldr	r3, [pc, #44]	@ (800a950 <osKernelStart+0x48>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d109      	bne.n	800a93e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a92a:	f7ff ffbf 	bl	800a8ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a92e:	4b08      	ldr	r3, [pc, #32]	@ (800a950 <osKernelStart+0x48>)
 800a930:	2202      	movs	r2, #2
 800a932:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a934:	f001 f942 	bl	800bbbc <vTaskStartScheduler>
      stat = osOK;
 800a938:	2300      	movs	r3, #0
 800a93a:	607b      	str	r3, [r7, #4]
 800a93c:	e002      	b.n	800a944 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a93e:	f04f 33ff 	mov.w	r3, #4294967295
 800a942:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a944:	687b      	ldr	r3, [r7, #4]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20000544 	.word	0x20000544

0800a954 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a954:	b580      	push	{r7, lr}
 800a956:	b08e      	sub	sp, #56	@ 0x38
 800a958:	af04      	add	r7, sp, #16
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a960:	2300      	movs	r3, #0
 800a962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a964:	f3ef 8305 	mrs	r3, IPSR
 800a968:	617b      	str	r3, [r7, #20]
  return(result);
 800a96a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d17f      	bne.n	800aa70 <osThreadNew+0x11c>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d07c      	beq.n	800aa70 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a976:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800a97a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a97c:	2318      	movs	r3, #24
 800a97e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a980:	2300      	movs	r3, #0
 800a982:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d045      	beq.n	800aa1c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <osThreadNew+0x4a>
        name = attr->name;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d008      	beq.n	800a9c4 <osThreadNew+0x70>
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	2b38      	cmp	r3, #56	@ 0x38
 800a9b6:	d805      	bhi.n	800a9c4 <osThreadNew+0x70>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <osThreadNew+0x74>
        return (NULL);
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e054      	b.n	800aa72 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	089b      	lsrs	r3, r3, #2
 800a9d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00e      	beq.n	800a9fe <osThreadNew+0xaa>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	2ba7      	cmp	r3, #167	@ 0xa7
 800a9e6:	d90a      	bls.n	800a9fe <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d006      	beq.n	800a9fe <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <osThreadNew+0xaa>
        mem = 1;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	61bb      	str	r3, [r7, #24]
 800a9fc:	e010      	b.n	800aa20 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10c      	bne.n	800aa20 <osThreadNew+0xcc>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d108      	bne.n	800aa20 <osThreadNew+0xcc>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d104      	bne.n	800aa20 <osThreadNew+0xcc>
          mem = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	61bb      	str	r3, [r7, #24]
 800aa1a:	e001      	b.n	800aa20 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d110      	bne.n	800aa48 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa2e:	9202      	str	r2, [sp, #8]
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6a3a      	ldr	r2, [r7, #32]
 800aa3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fec9 	bl	800b7d4 <xTaskCreateStatic>
 800aa42:	4603      	mov	r3, r0
 800aa44:	613b      	str	r3, [r7, #16]
 800aa46:	e013      	b.n	800aa70 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d110      	bne.n	800aa70 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	f107 0310 	add.w	r3, r7, #16
 800aa56:	9301      	str	r3, [sp, #4]
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 ff17 	bl	800b894 <xTaskCreate>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d001      	beq.n	800aa70 <osThreadNew+0x11c>
            hTask = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa70:	693b      	ldr	r3, [r7, #16]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3728      	adds	r7, #40	@ 0x28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa82:	f3ef 8305 	mrs	r3, IPSR
 800aa86:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <osDelay+0x1c>
    stat = osErrorISR;
 800aa8e:	f06f 0305 	mvn.w	r3, #5
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e007      	b.n	800aaa6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f001 f855 	bl	800bb50 <vTaskDelay>
    }
  }

  return (stat);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	@ 0x28
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aac0:	f3ef 8305 	mrs	r3, IPSR
 800aac4:	613b      	str	r3, [r7, #16]
  return(result);
 800aac6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d15f      	bne.n	800ab8c <osMessageQueueNew+0xdc>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d05c      	beq.n	800ab8c <osMessageQueueNew+0xdc>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d059      	beq.n	800ab8c <osMessageQueueNew+0xdc>
    mem = -1;
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295
 800aadc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d029      	beq.n	800ab38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d012      	beq.n	800ab12 <osMessageQueueNew+0x62>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	2b4f      	cmp	r3, #79	@ 0x4f
 800aaf2:	d90e      	bls.n	800ab12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	695a      	ldr	r2, [r3, #20]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	fb01 f303 	mul.w	r3, r1, r3
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d302      	bcc.n	800ab12 <osMessageQueueNew+0x62>
        mem = 1;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	61bb      	str	r3, [r7, #24]
 800ab10:	e014      	b.n	800ab3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d110      	bne.n	800ab3c <osMessageQueueNew+0x8c>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10c      	bne.n	800ab3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d108      	bne.n	800ab3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <osMessageQueueNew+0x8c>
          mem = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	61bb      	str	r3, [r7, #24]
 800ab36:	e001      	b.n	800ab3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d10b      	bne.n	800ab5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	691a      	ldr	r2, [r3, #16]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	9100      	str	r1, [sp, #0]
 800ab4e:	68b9      	ldr	r1, [r7, #8]
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f973 	bl	800ae3c <xQueueGenericCreateStatic>
 800ab56:	61f8      	str	r0, [r7, #28]
 800ab58:	e008      	b.n	800ab6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d105      	bne.n	800ab6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ab60:	2200      	movs	r2, #0
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f000 f9e6 	bl	800af36 <xQueueGenericCreate>
 800ab6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00c      	beq.n	800ab8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	617b      	str	r3, [r7, #20]
 800ab7e:	e001      	b.n	800ab84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ab84:	6979      	ldr	r1, [r7, #20]
 800ab86:	69f8      	ldr	r0, [r7, #28]
 800ab88:	f000 fdc6 	bl	800b718 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ab8c:	69fb      	ldr	r3, [r7, #28]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3720      	adds	r7, #32
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4a07      	ldr	r2, [pc, #28]	@ (800abc4 <vApplicationGetIdleTaskMemory+0x2c>)
 800aba8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4a06      	ldr	r2, [pc, #24]	@ (800abc8 <vApplicationGetIdleTaskMemory+0x30>)
 800abae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800abb6:	601a      	str	r2, [r3, #0]
}
 800abb8:	bf00      	nop
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	20000548 	.word	0x20000548
 800abc8:	200005f0 	.word	0x200005f0

0800abcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4a07      	ldr	r2, [pc, #28]	@ (800abf8 <vApplicationGetTimerTaskMemory+0x2c>)
 800abdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4a06      	ldr	r2, [pc, #24]	@ (800abfc <vApplicationGetTimerTaskMemory+0x30>)
 800abe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800abea:	601a      	str	r2, [r3, #0]
}
 800abec:	bf00      	nop
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	200010e0 	.word	0x200010e0
 800abfc:	20001188 	.word	0x20001188

0800ac00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f103 0208 	add.w	r2, r3, #8
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f04f 32ff 	mov.w	r2, #4294967295
 800ac18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f103 0208 	add.w	r2, r3, #8
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f103 0208 	add.w	r2, r3, #8
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	601a      	str	r2, [r3, #0]
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aca2:	b480      	push	{r7}
 800aca4:	b085      	sub	sp, #20
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb8:	d103      	bne.n	800acc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e00c      	b.n	800acdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3308      	adds	r3, #8
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	e002      	b.n	800acd0 <vListInsert+0x2e>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d2f6      	bcs.n	800acca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	601a      	str	r2, [r3, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	6892      	ldr	r2, [r2, #8]
 800ad2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	6852      	ldr	r2, [r2, #4]
 800ad34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d103      	bne.n	800ad48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	1e5a      	subs	r2, r3, #1
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad8e:	bf00      	nop
 800ad90:	bf00      	nop
 800ad92:	e7fd      	b.n	800ad90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad94:	f002 f8e0 	bl	800cf58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada0:	68f9      	ldr	r1, [r7, #12]
 800ada2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ada4:	fb01 f303 	mul.w	r3, r1, r3
 800ada8:	441a      	add	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adc4:	3b01      	subs	r3, #1
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800adca:	fb01 f303 	mul.w	r3, r1, r3
 800adce:	441a      	add	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	22ff      	movs	r2, #255	@ 0xff
 800add8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	22ff      	movs	r2, #255	@ 0xff
 800ade0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d114      	bne.n	800ae14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d01a      	beq.n	800ae28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3310      	adds	r3, #16
 800adf6:	4618      	mov	r0, r3
 800adf8:	f001 f97e 	bl	800c0f8 <xTaskRemoveFromEventList>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d012      	beq.n	800ae28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae02:	4b0d      	ldr	r3, [pc, #52]	@ (800ae38 <xQueueGenericReset+0xd0>)
 800ae04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	e009      	b.n	800ae28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3310      	adds	r3, #16
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fef1 	bl	800ac00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3324      	adds	r3, #36	@ 0x24
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff feec 	bl	800ac00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae28:	f002 f8c8 	bl	800cfbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae2c:	2301      	movs	r3, #1
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08e      	sub	sp, #56	@ 0x38
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10b      	bne.n	800ae68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae62:	bf00      	nop
 800ae64:	bf00      	nop
 800ae66:	e7fd      	b.n	800ae64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10b      	bne.n	800ae86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	e7fd      	b.n	800ae82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <xQueueGenericCreateStatic+0x56>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <xQueueGenericCreateStatic+0x5a>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <xQueueGenericCreateStatic+0x5c>
 800ae96:	2300      	movs	r3, #0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10b      	bne.n	800aeb4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	623b      	str	r3, [r7, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	bf00      	nop
 800aeb2:	e7fd      	b.n	800aeb0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d102      	bne.n	800aec0 <xQueueGenericCreateStatic+0x84>
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <xQueueGenericCreateStatic+0x88>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e000      	b.n	800aec6 <xQueueGenericCreateStatic+0x8a>
 800aec4:	2300      	movs	r3, #0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10b      	bne.n	800aee2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	61fb      	str	r3, [r7, #28]
}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	e7fd      	b.n	800aede <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aee2:	2350      	movs	r3, #80	@ 0x50
 800aee4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b50      	cmp	r3, #80	@ 0x50
 800aeea:	d00b      	beq.n	800af04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	61bb      	str	r3, [r7, #24]
}
 800aefe:	bf00      	nop
 800af00:	bf00      	nop
 800af02:	e7fd      	b.n	800af00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800af04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800af0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00d      	beq.n	800af2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af12:	2201      	movs	r2, #1
 800af14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800af1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	4613      	mov	r3, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f000 f840 	bl	800afac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800af2e:	4618      	mov	r0, r3
 800af30:	3730      	adds	r7, #48	@ 0x30
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af36:	b580      	push	{r7, lr}
 800af38:	b08a      	sub	sp, #40	@ 0x28
 800af3a:	af02      	add	r7, sp, #8
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	4613      	mov	r3, r2
 800af42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <xQueueGenericCreate+0x2c>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	613b      	str	r3, [r7, #16]
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	e7fd      	b.n	800af5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	fb02 f303 	mul.w	r3, r2, r3
 800af6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	3350      	adds	r3, #80	@ 0x50
 800af70:	4618      	mov	r0, r3
 800af72:	f002 f913 	bl	800d19c <pvPortMalloc>
 800af76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d011      	beq.n	800afa2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	3350      	adds	r3, #80	@ 0x50
 800af86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af90:	79fa      	ldrb	r2, [r7, #7]
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	4613      	mov	r3, r2
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	68b9      	ldr	r1, [r7, #8]
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 f805 	bl	800afac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800afa2:	69bb      	ldr	r3, [r7, #24]
	}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3720      	adds	r7, #32
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d103      	bne.n	800afc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	69ba      	ldr	r2, [r7, #24]
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	e002      	b.n	800afce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afda:	2101      	movs	r1, #1
 800afdc:	69b8      	ldr	r0, [r7, #24]
 800afde:	f7ff fec3 	bl	800ad68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	78fa      	ldrb	r2, [r7, #3]
 800afe6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afea:	bf00      	nop
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08e      	sub	sp, #56	@ 0x38
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b002:	2300      	movs	r3, #0
 800b004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10b      	bne.n	800b028 <xQueueGenericSend+0x34>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b022:	bf00      	nop
 800b024:	bf00      	nop
 800b026:	e7fd      	b.n	800b024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d103      	bne.n	800b036 <xQueueGenericSend+0x42>
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <xQueueGenericSend+0x46>
 800b036:	2301      	movs	r3, #1
 800b038:	e000      	b.n	800b03c <xQueueGenericSend+0x48>
 800b03a:	2300      	movs	r3, #0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <xQueueGenericSend+0x64>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b052:	bf00      	nop
 800b054:	bf00      	nop
 800b056:	e7fd      	b.n	800b054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d103      	bne.n	800b066 <xQueueGenericSend+0x72>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b062:	2b01      	cmp	r3, #1
 800b064:	d101      	bne.n	800b06a <xQueueGenericSend+0x76>
 800b066:	2301      	movs	r3, #1
 800b068:	e000      	b.n	800b06c <xQueueGenericSend+0x78>
 800b06a:	2300      	movs	r3, #0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10b      	bne.n	800b088 <xQueueGenericSend+0x94>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	623b      	str	r3, [r7, #32]
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b088:	f001 f9fc 	bl	800c484 <xTaskGetSchedulerState>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d102      	bne.n	800b098 <xQueueGenericSend+0xa4>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <xQueueGenericSend+0xa8>
 800b098:	2301      	movs	r3, #1
 800b09a:	e000      	b.n	800b09e <xQueueGenericSend+0xaa>
 800b09c:	2300      	movs	r3, #0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10b      	bne.n	800b0ba <xQueueGenericSend+0xc6>
	__asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	61fb      	str	r3, [r7, #28]
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop
 800b0b8:	e7fd      	b.n	800b0b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0ba:	f001 ff4d 	bl	800cf58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d302      	bcc.n	800b0d0 <xQueueGenericSend+0xdc>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d129      	bne.n	800b124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0d6:	f000 fa0f 	bl	800b4f8 <prvCopyDataToQueue>
 800b0da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d010      	beq.n	800b106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e6:	3324      	adds	r3, #36	@ 0x24
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f001 f805 	bl	800c0f8 <xTaskRemoveFromEventList>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d013      	beq.n	800b11c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0f4:	4b3f      	ldr	r3, [pc, #252]	@ (800b1f4 <xQueueGenericSend+0x200>)
 800b0f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	e00a      	b.n	800b11c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d007      	beq.n	800b11c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b10c:	4b39      	ldr	r3, [pc, #228]	@ (800b1f4 <xQueueGenericSend+0x200>)
 800b10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b11c:	f001 ff4e 	bl	800cfbc <vPortExitCritical>
				return pdPASS;
 800b120:	2301      	movs	r3, #1
 800b122:	e063      	b.n	800b1ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d103      	bne.n	800b132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b12a:	f001 ff47 	bl	800cfbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	e05c      	b.n	800b1ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b134:	2b00      	cmp	r3, #0
 800b136:	d106      	bne.n	800b146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b138:	f107 0314 	add.w	r3, r7, #20
 800b13c:	4618      	mov	r0, r3
 800b13e:	f001 f83f 	bl	800c1c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b142:	2301      	movs	r3, #1
 800b144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b146:	f001 ff39 	bl	800cfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b14a:	f000 fda7 	bl	800bc9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b14e:	f001 ff03 	bl	800cf58 <vPortEnterCritical>
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b158:	b25b      	sxtb	r3, r3
 800b15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15e:	d103      	bne.n	800b168 <xQueueGenericSend+0x174>
 800b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b16e:	b25b      	sxtb	r3, r3
 800b170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b174:	d103      	bne.n	800b17e <xQueueGenericSend+0x18a>
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b17e:	f001 ff1d 	bl	800cfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b182:	1d3a      	adds	r2, r7, #4
 800b184:	f107 0314 	add.w	r3, r7, #20
 800b188:	4611      	mov	r1, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 f82e 	bl	800c1ec <xTaskCheckForTimeOut>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d124      	bne.n	800b1e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b198:	f000 faa6 	bl	800b6e8 <prvIsQueueFull>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d018      	beq.n	800b1d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	3310      	adds	r3, #16
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 ff52 	bl	800c054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1b2:	f000 fa31 	bl	800b618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1b6:	f000 fd7f 	bl	800bcb8 <xTaskResumeAll>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f47f af7c 	bne.w	800b0ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b1c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f4 <xQueueGenericSend+0x200>)
 800b1c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	e772      	b.n	800b0ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1d6:	f000 fa1f 	bl	800b618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1da:	f000 fd6d 	bl	800bcb8 <xTaskResumeAll>
 800b1de:	e76c      	b.n	800b0ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1e2:	f000 fa19 	bl	800b618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1e6:	f000 fd67 	bl	800bcb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3738      	adds	r7, #56	@ 0x38
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	e000ed04 	.word	0xe000ed04

0800b1f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b090      	sub	sp, #64	@ 0x40
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
 800b204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10b      	bne.n	800b228 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b222:	bf00      	nop
 800b224:	bf00      	nop
 800b226:	e7fd      	b.n	800b224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d103      	bne.n	800b236 <xQueueGenericSendFromISR+0x3e>
 800b22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <xQueueGenericSendFromISR+0x42>
 800b236:	2301      	movs	r3, #1
 800b238:	e000      	b.n	800b23c <xQueueGenericSendFromISR+0x44>
 800b23a:	2300      	movs	r3, #0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10b      	bne.n	800b258 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d103      	bne.n	800b266 <xQueueGenericSendFromISR+0x6e>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b262:	2b01      	cmp	r3, #1
 800b264:	d101      	bne.n	800b26a <xQueueGenericSendFromISR+0x72>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <xQueueGenericSendFromISR+0x74>
 800b26a:	2300      	movs	r3, #0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10b      	bne.n	800b288 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	623b      	str	r3, [r7, #32]
}
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	e7fd      	b.n	800b284 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b288:	f001 ff46 	bl	800d118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b28c:	f3ef 8211 	mrs	r2, BASEPRI
 800b290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	61fa      	str	r2, [r7, #28]
 800b2a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d302      	bcc.n	800b2ba <xQueueGenericSendFromISR+0xc2>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d12f      	bne.n	800b31a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2d0:	f000 f912 	bl	800b4f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2dc:	d112      	bne.n	800b304 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d016      	beq.n	800b314 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e8:	3324      	adds	r3, #36	@ 0x24
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 ff04 	bl	800c0f8 <xTaskRemoveFromEventList>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00e      	beq.n	800b314 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00b      	beq.n	800b314 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	e007      	b.n	800b314 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b308:	3301      	adds	r3, #1
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	b25a      	sxtb	r2, r3
 800b30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b314:	2301      	movs	r3, #1
 800b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b318:	e001      	b.n	800b31e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b320:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3740      	adds	r7, #64	@ 0x40
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08c      	sub	sp, #48	@ 0x30
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b340:	2300      	movs	r3, #0
 800b342:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10b      	bne.n	800b366 <xQueueReceive+0x32>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	623b      	str	r3, [r7, #32]
}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d103      	bne.n	800b374 <xQueueReceive+0x40>
 800b36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <xQueueReceive+0x44>
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <xQueueReceive+0x46>
 800b378:	2300      	movs	r3, #0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10b      	bne.n	800b396 <xQueueReceive+0x62>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	61fb      	str	r3, [r7, #28]
}
 800b390:	bf00      	nop
 800b392:	bf00      	nop
 800b394:	e7fd      	b.n	800b392 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b396:	f001 f875 	bl	800c484 <xTaskGetSchedulerState>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <xQueueReceive+0x72>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <xQueueReceive+0x76>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <xQueueReceive+0x78>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10b      	bne.n	800b3c8 <xQueueReceive+0x94>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	61bb      	str	r3, [r7, #24]
}
 800b3c2:	bf00      	nop
 800b3c4:	bf00      	nop
 800b3c6:	e7fd      	b.n	800b3c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3c8:	f001 fdc6 	bl	800cf58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d01f      	beq.n	800b418 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3d8:	68b9      	ldr	r1, [r7, #8]
 800b3da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3dc:	f000 f8f6 	bl	800b5cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	1e5a      	subs	r2, r3, #1
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00f      	beq.n	800b410 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f2:	3310      	adds	r3, #16
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 fe7f 	bl	800c0f8 <xTaskRemoveFromEventList>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b400:	4b3c      	ldr	r3, [pc, #240]	@ (800b4f4 <xQueueReceive+0x1c0>)
 800b402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b410:	f001 fdd4 	bl	800cfbc <vPortExitCritical>
				return pdPASS;
 800b414:	2301      	movs	r3, #1
 800b416:	e069      	b.n	800b4ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d103      	bne.n	800b426 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b41e:	f001 fdcd 	bl	800cfbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b422:	2300      	movs	r3, #0
 800b424:	e062      	b.n	800b4ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b42c:	f107 0310 	add.w	r3, r7, #16
 800b430:	4618      	mov	r0, r3
 800b432:	f000 fec5 	bl	800c1c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b436:	2301      	movs	r3, #1
 800b438:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b43a:	f001 fdbf 	bl	800cfbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b43e:	f000 fc2d 	bl	800bc9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b442:	f001 fd89 	bl	800cf58 <vPortEnterCritical>
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b44c:	b25b      	sxtb	r3, r3
 800b44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b452:	d103      	bne.n	800b45c <xQueueReceive+0x128>
 800b454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b462:	b25b      	sxtb	r3, r3
 800b464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b468:	d103      	bne.n	800b472 <xQueueReceive+0x13e>
 800b46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b472:	f001 fda3 	bl	800cfbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b476:	1d3a      	adds	r2, r7, #4
 800b478:	f107 0310 	add.w	r3, r7, #16
 800b47c:	4611      	mov	r1, r2
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 feb4 	bl	800c1ec <xTaskCheckForTimeOut>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d123      	bne.n	800b4d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b48a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b48c:	f000 f916 	bl	800b6bc <prvIsQueueEmpty>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d017      	beq.n	800b4c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	3324      	adds	r3, #36	@ 0x24
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	4611      	mov	r1, r2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 fdd8 	bl	800c054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4a6:	f000 f8b7 	bl	800b618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4aa:	f000 fc05 	bl	800bcb8 <xTaskResumeAll>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d189      	bne.n	800b3c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f4 <xQueueReceive+0x1c0>)
 800b4b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	e780      	b.n	800b3c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4c8:	f000 f8a6 	bl	800b618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4cc:	f000 fbf4 	bl	800bcb8 <xTaskResumeAll>
 800b4d0:	e77a      	b.n	800b3c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b4d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4d4:	f000 f8a0 	bl	800b618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4d8:	f000 fbee 	bl	800bcb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4de:	f000 f8ed 	bl	800b6bc <prvIsQueueEmpty>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f43f af6f 	beq.w	800b3c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3730      	adds	r7, #48	@ 0x30
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	e000ed04 	.word	0xe000ed04

0800b4f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b504:	2300      	movs	r3, #0
 800b506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10d      	bne.n	800b532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d14d      	bne.n	800b5ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	4618      	mov	r0, r3
 800b524:	f000 ffcc 	bl	800c4c0 <xTaskPriorityDisinherit>
 800b528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2200      	movs	r2, #0
 800b52e:	609a      	str	r2, [r3, #8]
 800b530:	e043      	b.n	800b5ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d119      	bne.n	800b56c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6858      	ldr	r0, [r3, #4]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b540:	461a      	mov	r2, r3
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	f003 fb7b 	bl	800ec3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b550:	441a      	add	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d32b      	bcc.n	800b5ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	605a      	str	r2, [r3, #4]
 800b56a:	e026      	b.n	800b5ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68d8      	ldr	r0, [r3, #12]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b574:	461a      	mov	r2, r3
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	f003 fb61 	bl	800ec3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b584:	425b      	negs	r3, r3
 800b586:	441a      	add	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	429a      	cmp	r2, r3
 800b596:	d207      	bcs.n	800b5a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5a0:	425b      	negs	r3, r3
 800b5a2:	441a      	add	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d105      	bne.n	800b5ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b5c2:	697b      	ldr	r3, [r7, #20]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d018      	beq.n	800b610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68da      	ldr	r2, [r3, #12]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e6:	441a      	add	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68da      	ldr	r2, [r3, #12]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d303      	bcc.n	800b600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68d9      	ldr	r1, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b608:	461a      	mov	r2, r3
 800b60a:	6838      	ldr	r0, [r7, #0]
 800b60c:	f003 fb17 	bl	800ec3e <memcpy>
	}
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b620:	f001 fc9a 	bl	800cf58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b62a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b62c:	e011      	b.n	800b652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b632:	2b00      	cmp	r3, #0
 800b634:	d012      	beq.n	800b65c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3324      	adds	r3, #36	@ 0x24
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fd5c 	bl	800c0f8 <xTaskRemoveFromEventList>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b646:	f000 fe35 	bl	800c2b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b656:	2b00      	cmp	r3, #0
 800b658:	dce9      	bgt.n	800b62e <prvUnlockQueue+0x16>
 800b65a:	e000      	b.n	800b65e <prvUnlockQueue+0x46>
					break;
 800b65c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	22ff      	movs	r2, #255	@ 0xff
 800b662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b666:	f001 fca9 	bl	800cfbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b66a:	f001 fc75 	bl	800cf58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b676:	e011      	b.n	800b69c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d012      	beq.n	800b6a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3310      	adds	r3, #16
 800b684:	4618      	mov	r0, r3
 800b686:	f000 fd37 	bl	800c0f8 <xTaskRemoveFromEventList>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b690:	f000 fe10 	bl	800c2b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b694:	7bbb      	ldrb	r3, [r7, #14]
 800b696:	3b01      	subs	r3, #1
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	dce9      	bgt.n	800b678 <prvUnlockQueue+0x60>
 800b6a4:	e000      	b.n	800b6a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	22ff      	movs	r2, #255	@ 0xff
 800b6ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b6b0:	f001 fc84 	bl	800cfbc <vPortExitCritical>
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6c4:	f001 fc48 	bl	800cf58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	e001      	b.n	800b6da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6da:	f001 fc6f 	bl	800cfbc <vPortExitCritical>

	return xReturn;
 800b6de:	68fb      	ldr	r3, [r7, #12]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6f0:	f001 fc32 	bl	800cf58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d102      	bne.n	800b706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	e001      	b.n	800b70a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b70a:	f001 fc57 	bl	800cfbc <vPortExitCritical>

	return xReturn;
 800b70e:	68fb      	ldr	r3, [r7, #12]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	e014      	b.n	800b752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b728:	4a0f      	ldr	r2, [pc, #60]	@ (800b768 <vQueueAddToRegistry+0x50>)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10b      	bne.n	800b74c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b734:	490c      	ldr	r1, [pc, #48]	@ (800b768 <vQueueAddToRegistry+0x50>)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b73e:	4a0a      	ldr	r2, [pc, #40]	@ (800b768 <vQueueAddToRegistry+0x50>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	00db      	lsls	r3, r3, #3
 800b744:	4413      	add	r3, r2
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b74a:	e006      	b.n	800b75a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3301      	adds	r3, #1
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b07      	cmp	r3, #7
 800b756:	d9e7      	bls.n	800b728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	20002768 	.word	0x20002768

0800b76c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b77c:	f001 fbec 	bl	800cf58 <vPortEnterCritical>
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b786:	b25b      	sxtb	r3, r3
 800b788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78c:	d103      	bne.n	800b796 <vQueueWaitForMessageRestricted+0x2a>
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b79c:	b25b      	sxtb	r3, r3
 800b79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a2:	d103      	bne.n	800b7ac <vQueueWaitForMessageRestricted+0x40>
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7ac:	f001 fc06 	bl	800cfbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	3324      	adds	r3, #36	@ 0x24
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	68b9      	ldr	r1, [r7, #8]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 fc6d 	bl	800c0a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b7c6:	6978      	ldr	r0, [r7, #20]
 800b7c8:	f7ff ff26 	bl	800b618 <prvUnlockQueue>
	}
 800b7cc:	bf00      	nop
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08e      	sub	sp, #56	@ 0x38
 800b7d8:	af04      	add	r7, sp, #16
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10b      	bne.n	800b800 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	623b      	str	r3, [r7, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	e7fd      	b.n	800b7fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10b      	bne.n	800b81e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	61fb      	str	r3, [r7, #28]
}
 800b818:	bf00      	nop
 800b81a:	bf00      	nop
 800b81c:	e7fd      	b.n	800b81a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b81e:	23a8      	movs	r3, #168	@ 0xa8
 800b820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2ba8      	cmp	r3, #168	@ 0xa8
 800b826:	d00b      	beq.n	800b840 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	61bb      	str	r3, [r7, #24]
}
 800b83a:	bf00      	nop
 800b83c:	bf00      	nop
 800b83e:	e7fd      	b.n	800b83c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b840:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01e      	beq.n	800b886 <xTaskCreateStatic+0xb2>
 800b848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d01b      	beq.n	800b886 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b850:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b856:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85a:	2202      	movs	r2, #2
 800b85c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b860:	2300      	movs	r3, #0
 800b862:	9303      	str	r3, [sp, #12]
 800b864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b866:	9302      	str	r3, [sp, #8]
 800b868:	f107 0314 	add.w	r3, r7, #20
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	68b9      	ldr	r1, [r7, #8]
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f851 	bl	800b920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b87e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b880:	f000 f8f6 	bl	800ba70 <prvAddNewTaskToReadyList>
 800b884:	e001      	b.n	800b88a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b88a:	697b      	ldr	r3, [r7, #20]
	}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3728      	adds	r7, #40	@ 0x28
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08c      	sub	sp, #48	@ 0x30
 800b898:	af04      	add	r7, sp, #16
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8a4:	88fb      	ldrh	r3, [r7, #6]
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f001 fc77 	bl	800d19c <pvPortMalloc>
 800b8ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00e      	beq.n	800b8d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8b6:	20a8      	movs	r0, #168	@ 0xa8
 800b8b8:	f001 fc70 	bl	800d19c <pvPortMalloc>
 800b8bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8ca:	e005      	b.n	800b8d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8cc:	6978      	ldr	r0, [r7, #20]
 800b8ce:	f001 fd33 	bl	800d338 <vPortFree>
 800b8d2:	e001      	b.n	800b8d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d017      	beq.n	800b90e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8e6:	88fa      	ldrh	r2, [r7, #6]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	9303      	str	r3, [sp, #12]
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	9302      	str	r3, [sp, #8]
 800b8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f000 f80f 	bl	800b920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b902:	69f8      	ldr	r0, [r7, #28]
 800b904:	f000 f8b4 	bl	800ba70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b908:	2301      	movs	r3, #1
 800b90a:	61bb      	str	r3, [r7, #24]
 800b90c:	e002      	b.n	800b914 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b90e:	f04f 33ff 	mov.w	r3, #4294967295
 800b912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b914:	69bb      	ldr	r3, [r7, #24]
	}
 800b916:	4618      	mov	r0, r3
 800b918:	3720      	adds	r7, #32
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b930:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	461a      	mov	r2, r3
 800b938:	21a5      	movs	r1, #165	@ 0xa5
 800b93a:	f003 f8a3 	bl	800ea84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b948:	3b01      	subs	r3, #1
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	f023 0307 	bic.w	r3, r3, #7
 800b956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00b      	beq.n	800b97a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	617b      	str	r3, [r7, #20]
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop
 800b978:	e7fd      	b.n	800b976 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d01f      	beq.n	800b9c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b980:	2300      	movs	r3, #0
 800b982:	61fb      	str	r3, [r7, #28]
 800b984:	e012      	b.n	800b9ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	7819      	ldrb	r1, [r3, #0]
 800b98e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	4413      	add	r3, r2
 800b994:	3334      	adds	r3, #52	@ 0x34
 800b996:	460a      	mov	r2, r1
 800b998:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	4413      	add	r3, r2
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d006      	beq.n	800b9b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	2b0f      	cmp	r3, #15
 800b9b0:	d9e9      	bls.n	800b986 <prvInitialiseNewTask+0x66>
 800b9b2:	e000      	b.n	800b9b6 <prvInitialiseNewTask+0x96>
			{
				break;
 800b9b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b9be:	e003      	b.n	800b9c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ca:	2b37      	cmp	r3, #55	@ 0x37
 800b9cc:	d901      	bls.n	800b9d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9ce:	2337      	movs	r3, #55	@ 0x37
 800b9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff f929 	bl	800ac40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f0:	3318      	adds	r3, #24
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7ff f924 	bl	800ac40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	3354      	adds	r3, #84	@ 0x54
 800ba22:	224c      	movs	r2, #76	@ 0x4c
 800ba24:	2100      	movs	r1, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f003 f82c 	bl	800ea84 <memset>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	4a0d      	ldr	r2, [pc, #52]	@ (800ba64 <prvInitialiseNewTask+0x144>)
 800ba30:	659a      	str	r2, [r3, #88]	@ 0x58
 800ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba34:	4a0c      	ldr	r2, [pc, #48]	@ (800ba68 <prvInitialiseNewTask+0x148>)
 800ba36:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ba38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba6c <prvInitialiseNewTask+0x14c>)
 800ba3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	68f9      	ldr	r1, [r7, #12]
 800ba42:	69b8      	ldr	r0, [r7, #24]
 800ba44:	f001 f95a 	bl	800ccfc <pxPortInitialiseStack>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba5a:	bf00      	nop
 800ba5c:	3720      	adds	r7, #32
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	2000a588 	.word	0x2000a588
 800ba68:	2000a5f0 	.word	0x2000a5f0
 800ba6c:	2000a658 	.word	0x2000a658

0800ba70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba78:	f001 fa6e 	bl	800cf58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba7c:	4b2d      	ldr	r3, [pc, #180]	@ (800bb34 <prvAddNewTaskToReadyList+0xc4>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3301      	adds	r3, #1
 800ba82:	4a2c      	ldr	r2, [pc, #176]	@ (800bb34 <prvAddNewTaskToReadyList+0xc4>)
 800ba84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba86:	4b2c      	ldr	r3, [pc, #176]	@ (800bb38 <prvAddNewTaskToReadyList+0xc8>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d109      	bne.n	800baa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba8e:	4a2a      	ldr	r2, [pc, #168]	@ (800bb38 <prvAddNewTaskToReadyList+0xc8>)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba94:	4b27      	ldr	r3, [pc, #156]	@ (800bb34 <prvAddNewTaskToReadyList+0xc4>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d110      	bne.n	800babe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba9c:	f000 fc2e 	bl	800c2fc <prvInitialiseTaskLists>
 800baa0:	e00d      	b.n	800babe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baa2:	4b26      	ldr	r3, [pc, #152]	@ (800bb3c <prvAddNewTaskToReadyList+0xcc>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d109      	bne.n	800babe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800baaa:	4b23      	ldr	r3, [pc, #140]	@ (800bb38 <prvAddNewTaskToReadyList+0xc8>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d802      	bhi.n	800babe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bab8:	4a1f      	ldr	r2, [pc, #124]	@ (800bb38 <prvAddNewTaskToReadyList+0xc8>)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800babe:	4b20      	ldr	r3, [pc, #128]	@ (800bb40 <prvAddNewTaskToReadyList+0xd0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	4a1e      	ldr	r2, [pc, #120]	@ (800bb40 <prvAddNewTaskToReadyList+0xd0>)
 800bac6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bac8:	4b1d      	ldr	r3, [pc, #116]	@ (800bb40 <prvAddNewTaskToReadyList+0xd0>)
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad4:	4b1b      	ldr	r3, [pc, #108]	@ (800bb44 <prvAddNewTaskToReadyList+0xd4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d903      	bls.n	800bae4 <prvAddNewTaskToReadyList+0x74>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae0:	4a18      	ldr	r2, [pc, #96]	@ (800bb44 <prvAddNewTaskToReadyList+0xd4>)
 800bae2:	6013      	str	r3, [r2, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4a15      	ldr	r2, [pc, #84]	@ (800bb48 <prvAddNewTaskToReadyList+0xd8>)
 800baf2:	441a      	add	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3304      	adds	r3, #4
 800baf8:	4619      	mov	r1, r3
 800bafa:	4610      	mov	r0, r2
 800bafc:	f7ff f8ad 	bl	800ac5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb00:	f001 fa5c 	bl	800cfbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb04:	4b0d      	ldr	r3, [pc, #52]	@ (800bb3c <prvAddNewTaskToReadyList+0xcc>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00e      	beq.n	800bb2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb38 <prvAddNewTaskToReadyList+0xc8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d207      	bcs.n	800bb2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb1a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb4c <prvAddNewTaskToReadyList+0xdc>)
 800bb1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20002c7c 	.word	0x20002c7c
 800bb38:	200027a8 	.word	0x200027a8
 800bb3c:	20002c88 	.word	0x20002c88
 800bb40:	20002c98 	.word	0x20002c98
 800bb44:	20002c84 	.word	0x20002c84
 800bb48:	200027ac 	.word	0x200027ac
 800bb4c:	e000ed04 	.word	0xe000ed04

0800bb50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d018      	beq.n	800bb94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb62:	4b14      	ldr	r3, [pc, #80]	@ (800bbb4 <vTaskDelay+0x64>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00b      	beq.n	800bb82 <vTaskDelay+0x32>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60bb      	str	r3, [r7, #8]
}
 800bb7c:	bf00      	nop
 800bb7e:	bf00      	nop
 800bb80:	e7fd      	b.n	800bb7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb82:	f000 f88b 	bl	800bc9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb86:	2100      	movs	r1, #0
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fd09 	bl	800c5a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb8e:	f000 f893 	bl	800bcb8 <xTaskResumeAll>
 800bb92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d107      	bne.n	800bbaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bb9a:	4b07      	ldr	r3, [pc, #28]	@ (800bbb8 <vTaskDelay+0x68>)
 800bb9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbaa:	bf00      	nop
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20002ca4 	.word	0x20002ca4
 800bbb8:	e000ed04 	.word	0xe000ed04

0800bbbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	@ 0x28
 800bbc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbca:	463a      	mov	r2, r7
 800bbcc:	1d39      	adds	r1, r7, #4
 800bbce:	f107 0308 	add.w	r3, r7, #8
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe ffe0 	bl	800ab98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	9202      	str	r2, [sp, #8]
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	460a      	mov	r2, r1
 800bbea:	4924      	ldr	r1, [pc, #144]	@ (800bc7c <vTaskStartScheduler+0xc0>)
 800bbec:	4824      	ldr	r0, [pc, #144]	@ (800bc80 <vTaskStartScheduler+0xc4>)
 800bbee:	f7ff fdf1 	bl	800b7d4 <xTaskCreateStatic>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	4a23      	ldr	r2, [pc, #140]	@ (800bc84 <vTaskStartScheduler+0xc8>)
 800bbf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbf8:	4b22      	ldr	r3, [pc, #136]	@ (800bc84 <vTaskStartScheduler+0xc8>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc00:	2301      	movs	r3, #1
 800bc02:	617b      	str	r3, [r7, #20]
 800bc04:	e001      	b.n	800bc0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d102      	bne.n	800bc16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc10:	f000 fd1a 	bl	800c648 <xTimerCreateTimerTask>
 800bc14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d11b      	bne.n	800bc54 <vTaskStartScheduler+0x98>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	613b      	str	r3, [r7, #16]
}
 800bc2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc30:	4b15      	ldr	r3, [pc, #84]	@ (800bc88 <vTaskStartScheduler+0xcc>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3354      	adds	r3, #84	@ 0x54
 800bc36:	4a15      	ldr	r2, [pc, #84]	@ (800bc8c <vTaskStartScheduler+0xd0>)
 800bc38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc3a:	4b15      	ldr	r3, [pc, #84]	@ (800bc90 <vTaskStartScheduler+0xd4>)
 800bc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc42:	4b14      	ldr	r3, [pc, #80]	@ (800bc94 <vTaskStartScheduler+0xd8>)
 800bc44:	2201      	movs	r2, #1
 800bc46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc48:	4b13      	ldr	r3, [pc, #76]	@ (800bc98 <vTaskStartScheduler+0xdc>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc4e:	f001 f8df 	bl	800ce10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc52:	e00f      	b.n	800bc74 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc5a:	d10b      	bne.n	800bc74 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60fb      	str	r3, [r7, #12]
}
 800bc6e:	bf00      	nop
 800bc70:	bf00      	nop
 800bc72:	e7fd      	b.n	800bc70 <vTaskStartScheduler+0xb4>
}
 800bc74:	bf00      	nop
 800bc76:	3718      	adds	r7, #24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	08010f30 	.word	0x08010f30
 800bc80:	0800c2cd 	.word	0x0800c2cd
 800bc84:	20002ca0 	.word	0x20002ca0
 800bc88:	200027a8 	.word	0x200027a8
 800bc8c:	20000194 	.word	0x20000194
 800bc90:	20002c9c 	.word	0x20002c9c
 800bc94:	20002c88 	.word	0x20002c88
 800bc98:	20002c80 	.word	0x20002c80

0800bc9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bca0:	4b04      	ldr	r3, [pc, #16]	@ (800bcb4 <vTaskSuspendAll+0x18>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3301      	adds	r3, #1
 800bca6:	4a03      	ldr	r2, [pc, #12]	@ (800bcb4 <vTaskSuspendAll+0x18>)
 800bca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcaa:	bf00      	nop
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	20002ca4 	.word	0x20002ca4

0800bcb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcc6:	4b42      	ldr	r3, [pc, #264]	@ (800bdd0 <xTaskResumeAll+0x118>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10b      	bne.n	800bce6 <xTaskResumeAll+0x2e>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	603b      	str	r3, [r7, #0]
}
 800bce0:	bf00      	nop
 800bce2:	bf00      	nop
 800bce4:	e7fd      	b.n	800bce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bce6:	f001 f937 	bl	800cf58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcea:	4b39      	ldr	r3, [pc, #228]	@ (800bdd0 <xTaskResumeAll+0x118>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	4a37      	ldr	r2, [pc, #220]	@ (800bdd0 <xTaskResumeAll+0x118>)
 800bcf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf4:	4b36      	ldr	r3, [pc, #216]	@ (800bdd0 <xTaskResumeAll+0x118>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d162      	bne.n	800bdc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcfc:	4b35      	ldr	r3, [pc, #212]	@ (800bdd4 <xTaskResumeAll+0x11c>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d05e      	beq.n	800bdc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd04:	e02f      	b.n	800bd66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd06:	4b34      	ldr	r3, [pc, #208]	@ (800bdd8 <xTaskResumeAll+0x120>)
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3318      	adds	r3, #24
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe fffe 	bl	800ad14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fe fff9 	bl	800ad14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd26:	4b2d      	ldr	r3, [pc, #180]	@ (800bddc <xTaskResumeAll+0x124>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d903      	bls.n	800bd36 <xTaskResumeAll+0x7e>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd32:	4a2a      	ldr	r2, [pc, #168]	@ (800bddc <xTaskResumeAll+0x124>)
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4a27      	ldr	r2, [pc, #156]	@ (800bde0 <xTaskResumeAll+0x128>)
 800bd44:	441a      	add	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe ff84 	bl	800ac5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd56:	4b23      	ldr	r3, [pc, #140]	@ (800bde4 <xTaskResumeAll+0x12c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d302      	bcc.n	800bd66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bd60:	4b21      	ldr	r3, [pc, #132]	@ (800bde8 <xTaskResumeAll+0x130>)
 800bd62:	2201      	movs	r2, #1
 800bd64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd66:	4b1c      	ldr	r3, [pc, #112]	@ (800bdd8 <xTaskResumeAll+0x120>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1cb      	bne.n	800bd06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d001      	beq.n	800bd78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd74:	f000 fb66 	bl	800c444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd78:	4b1c      	ldr	r3, [pc, #112]	@ (800bdec <xTaskResumeAll+0x134>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d010      	beq.n	800bda6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd84:	f000 f846 	bl	800be14 <xTaskIncrementTick>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d002      	beq.n	800bd94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bd8e:	4b16      	ldr	r3, [pc, #88]	@ (800bde8 <xTaskResumeAll+0x130>)
 800bd90:	2201      	movs	r2, #1
 800bd92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1f1      	bne.n	800bd84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bda0:	4b12      	ldr	r3, [pc, #72]	@ (800bdec <xTaskResumeAll+0x134>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bda6:	4b10      	ldr	r3, [pc, #64]	@ (800bde8 <xTaskResumeAll+0x130>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d009      	beq.n	800bdc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bdf0 <xTaskResumeAll+0x138>)
 800bdb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdc2:	f001 f8fb 	bl	800cfbc <vPortExitCritical>

	return xAlreadyYielded;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3710      	adds	r7, #16
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	20002ca4 	.word	0x20002ca4
 800bdd4:	20002c7c 	.word	0x20002c7c
 800bdd8:	20002c3c 	.word	0x20002c3c
 800bddc:	20002c84 	.word	0x20002c84
 800bde0:	200027ac 	.word	0x200027ac
 800bde4:	200027a8 	.word	0x200027a8
 800bde8:	20002c90 	.word	0x20002c90
 800bdec:	20002c8c 	.word	0x20002c8c
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdfa:	4b05      	ldr	r3, [pc, #20]	@ (800be10 <xTaskGetTickCount+0x1c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be00:	687b      	ldr	r3, [r7, #4]
}
 800be02:	4618      	mov	r0, r3
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	20002c80 	.word	0x20002c80

0800be14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be1e:	4b4f      	ldr	r3, [pc, #316]	@ (800bf5c <xTaskIncrementTick+0x148>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f040 8090 	bne.w	800bf48 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be28:	4b4d      	ldr	r3, [pc, #308]	@ (800bf60 <xTaskIncrementTick+0x14c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3301      	adds	r3, #1
 800be2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be30:	4a4b      	ldr	r2, [pc, #300]	@ (800bf60 <xTaskIncrementTick+0x14c>)
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d121      	bne.n	800be80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800be3c:	4b49      	ldr	r3, [pc, #292]	@ (800bf64 <xTaskIncrementTick+0x150>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00b      	beq.n	800be5e <xTaskIncrementTick+0x4a>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	603b      	str	r3, [r7, #0]
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	e7fd      	b.n	800be5a <xTaskIncrementTick+0x46>
 800be5e:	4b41      	ldr	r3, [pc, #260]	@ (800bf64 <xTaskIncrementTick+0x150>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	4b40      	ldr	r3, [pc, #256]	@ (800bf68 <xTaskIncrementTick+0x154>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a3e      	ldr	r2, [pc, #248]	@ (800bf64 <xTaskIncrementTick+0x150>)
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	4a3e      	ldr	r2, [pc, #248]	@ (800bf68 <xTaskIncrementTick+0x154>)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6013      	str	r3, [r2, #0]
 800be72:	4b3e      	ldr	r3, [pc, #248]	@ (800bf6c <xTaskIncrementTick+0x158>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	3301      	adds	r3, #1
 800be78:	4a3c      	ldr	r2, [pc, #240]	@ (800bf6c <xTaskIncrementTick+0x158>)
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	f000 fae2 	bl	800c444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be80:	4b3b      	ldr	r3, [pc, #236]	@ (800bf70 <xTaskIncrementTick+0x15c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	429a      	cmp	r2, r3
 800be88:	d349      	bcc.n	800bf1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be8a:	4b36      	ldr	r3, [pc, #216]	@ (800bf64 <xTaskIncrementTick+0x150>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d104      	bne.n	800be9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be94:	4b36      	ldr	r3, [pc, #216]	@ (800bf70 <xTaskIncrementTick+0x15c>)
 800be96:	f04f 32ff 	mov.w	r2, #4294967295
 800be9a:	601a      	str	r2, [r3, #0]
					break;
 800be9c:	e03f      	b.n	800bf1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9e:	4b31      	ldr	r3, [pc, #196]	@ (800bf64 <xTaskIncrementTick+0x150>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d203      	bcs.n	800bebe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800beb6:	4a2e      	ldr	r2, [pc, #184]	@ (800bf70 <xTaskIncrementTick+0x15c>)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bebc:	e02f      	b.n	800bf1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	3304      	adds	r3, #4
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe ff26 	bl	800ad14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	3318      	adds	r3, #24
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fe ff1d 	bl	800ad14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bede:	4b25      	ldr	r3, [pc, #148]	@ (800bf74 <xTaskIncrementTick+0x160>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d903      	bls.n	800beee <xTaskIncrementTick+0xda>
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beea:	4a22      	ldr	r2, [pc, #136]	@ (800bf74 <xTaskIncrementTick+0x160>)
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4a1f      	ldr	r2, [pc, #124]	@ (800bf78 <xTaskIncrementTick+0x164>)
 800befc:	441a      	add	r2, r3
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	3304      	adds	r3, #4
 800bf02:	4619      	mov	r1, r3
 800bf04:	4610      	mov	r0, r2
 800bf06:	f7fe fea8 	bl	800ac5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf0e:	4b1b      	ldr	r3, [pc, #108]	@ (800bf7c <xTaskIncrementTick+0x168>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d3b8      	bcc.n	800be8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf1c:	e7b5      	b.n	800be8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf1e:	4b17      	ldr	r3, [pc, #92]	@ (800bf7c <xTaskIncrementTick+0x168>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf24:	4914      	ldr	r1, [pc, #80]	@ (800bf78 <xTaskIncrementTick+0x164>)
 800bf26:	4613      	mov	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	440b      	add	r3, r1
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d901      	bls.n	800bf3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bf36:	2301      	movs	r3, #1
 800bf38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf3a:	4b11      	ldr	r3, [pc, #68]	@ (800bf80 <xTaskIncrementTick+0x16c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bf42:	2301      	movs	r3, #1
 800bf44:	617b      	str	r3, [r7, #20]
 800bf46:	e004      	b.n	800bf52 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf48:	4b0e      	ldr	r3, [pc, #56]	@ (800bf84 <xTaskIncrementTick+0x170>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	4a0d      	ldr	r2, [pc, #52]	@ (800bf84 <xTaskIncrementTick+0x170>)
 800bf50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf52:	697b      	ldr	r3, [r7, #20]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20002ca4 	.word	0x20002ca4
 800bf60:	20002c80 	.word	0x20002c80
 800bf64:	20002c34 	.word	0x20002c34
 800bf68:	20002c38 	.word	0x20002c38
 800bf6c:	20002c94 	.word	0x20002c94
 800bf70:	20002c9c 	.word	0x20002c9c
 800bf74:	20002c84 	.word	0x20002c84
 800bf78:	200027ac 	.word	0x200027ac
 800bf7c:	200027a8 	.word	0x200027a8
 800bf80:	20002c90 	.word	0x20002c90
 800bf84:	20002c8c 	.word	0x20002c8c

0800bf88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf8e:	4b2b      	ldr	r3, [pc, #172]	@ (800c03c <vTaskSwitchContext+0xb4>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf96:	4b2a      	ldr	r3, [pc, #168]	@ (800c040 <vTaskSwitchContext+0xb8>)
 800bf98:	2201      	movs	r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf9c:	e047      	b.n	800c02e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bf9e:	4b28      	ldr	r3, [pc, #160]	@ (800c040 <vTaskSwitchContext+0xb8>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa4:	4b27      	ldr	r3, [pc, #156]	@ (800c044 <vTaskSwitchContext+0xbc>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e011      	b.n	800bfd0 <vTaskSwitchContext+0x48>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10b      	bne.n	800bfca <vTaskSwitchContext+0x42>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	607b      	str	r3, [r7, #4]
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
 800bfc8:	e7fd      	b.n	800bfc6 <vTaskSwitchContext+0x3e>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	491d      	ldr	r1, [pc, #116]	@ (800c048 <vTaskSwitchContext+0xc0>)
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	440b      	add	r3, r1
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0e3      	beq.n	800bfac <vTaskSwitchContext+0x24>
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4a16      	ldr	r2, [pc, #88]	@ (800c048 <vTaskSwitchContext+0xc0>)
 800bff0:	4413      	add	r3, r2
 800bff2:	60bb      	str	r3, [r7, #8]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	605a      	str	r2, [r3, #4]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	3308      	adds	r3, #8
 800c006:	429a      	cmp	r2, r3
 800c008:	d104      	bne.n	800c014 <vTaskSwitchContext+0x8c>
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	605a      	str	r2, [r3, #4]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	4a0c      	ldr	r2, [pc, #48]	@ (800c04c <vTaskSwitchContext+0xc4>)
 800c01c:	6013      	str	r3, [r2, #0]
 800c01e:	4a09      	ldr	r2, [pc, #36]	@ (800c044 <vTaskSwitchContext+0xbc>)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c024:	4b09      	ldr	r3, [pc, #36]	@ (800c04c <vTaskSwitchContext+0xc4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3354      	adds	r3, #84	@ 0x54
 800c02a:	4a09      	ldr	r2, [pc, #36]	@ (800c050 <vTaskSwitchContext+0xc8>)
 800c02c:	6013      	str	r3, [r2, #0]
}
 800c02e:	bf00      	nop
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	20002ca4 	.word	0x20002ca4
 800c040:	20002c90 	.word	0x20002c90
 800c044:	20002c84 	.word	0x20002c84
 800c048:	200027ac 	.word	0x200027ac
 800c04c:	200027a8 	.word	0x200027a8
 800c050:	20000194 	.word	0x20000194

0800c054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10b      	bne.n	800c07c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	60fb      	str	r3, [r7, #12]
}
 800c076:	bf00      	nop
 800c078:	bf00      	nop
 800c07a:	e7fd      	b.n	800c078 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c07c:	4b07      	ldr	r3, [pc, #28]	@ (800c09c <vTaskPlaceOnEventList+0x48>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	3318      	adds	r3, #24
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7fe fe0c 	bl	800aca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c08a:	2101      	movs	r1, #1
 800c08c:	6838      	ldr	r0, [r7, #0]
 800c08e:	f000 fa87 	bl	800c5a0 <prvAddCurrentTaskToDelayedList>
}
 800c092:	bf00      	nop
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	200027a8 	.word	0x200027a8

0800c0a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10b      	bne.n	800c0ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b6:	f383 8811 	msr	BASEPRI, r3
 800c0ba:	f3bf 8f6f 	isb	sy
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	617b      	str	r3, [r7, #20]
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop
 800c0c8:	e7fd      	b.n	800c0c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800c0f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3318      	adds	r3, #24
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7fe fdc1 	bl	800ac5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c0de:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0e4:	6879      	ldr	r1, [r7, #4]
 800c0e6:	68b8      	ldr	r0, [r7, #8]
 800c0e8:	f000 fa5a 	bl	800c5a0 <prvAddCurrentTaskToDelayedList>
	}
 800c0ec:	bf00      	nop
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200027a8 	.word	0x200027a8

0800c0f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10b      	bne.n	800c126 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	60fb      	str	r3, [r7, #12]
}
 800c120:	bf00      	nop
 800c122:	bf00      	nop
 800c124:	e7fd      	b.n	800c122 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	3318      	adds	r3, #24
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fe fdf2 	bl	800ad14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c130:	4b1d      	ldr	r3, [pc, #116]	@ (800c1a8 <xTaskRemoveFromEventList+0xb0>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d11d      	bne.n	800c174 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	3304      	adds	r3, #4
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fe fde9 	bl	800ad14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c146:	4b19      	ldr	r3, [pc, #100]	@ (800c1ac <xTaskRemoveFromEventList+0xb4>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d903      	bls.n	800c156 <xTaskRemoveFromEventList+0x5e>
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c152:	4a16      	ldr	r2, [pc, #88]	@ (800c1ac <xTaskRemoveFromEventList+0xb4>)
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c15a:	4613      	mov	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4413      	add	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4a13      	ldr	r2, [pc, #76]	@ (800c1b0 <xTaskRemoveFromEventList+0xb8>)
 800c164:	441a      	add	r2, r3
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	3304      	adds	r3, #4
 800c16a:	4619      	mov	r1, r3
 800c16c:	4610      	mov	r0, r2
 800c16e:	f7fe fd74 	bl	800ac5a <vListInsertEnd>
 800c172:	e005      	b.n	800c180 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	3318      	adds	r3, #24
 800c178:	4619      	mov	r1, r3
 800c17a:	480e      	ldr	r0, [pc, #56]	@ (800c1b4 <xTaskRemoveFromEventList+0xbc>)
 800c17c:	f7fe fd6d 	bl	800ac5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c184:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b8 <xTaskRemoveFromEventList+0xc0>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d905      	bls.n	800c19a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c18e:	2301      	movs	r3, #1
 800c190:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c192:	4b0a      	ldr	r3, [pc, #40]	@ (800c1bc <xTaskRemoveFromEventList+0xc4>)
 800c194:	2201      	movs	r2, #1
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	e001      	b.n	800c19e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c19a:	2300      	movs	r3, #0
 800c19c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c19e:	697b      	ldr	r3, [r7, #20]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3718      	adds	r7, #24
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20002ca4 	.word	0x20002ca4
 800c1ac:	20002c84 	.word	0x20002c84
 800c1b0:	200027ac 	.word	0x200027ac
 800c1b4:	20002c3c 	.word	0x20002c3c
 800c1b8:	200027a8 	.word	0x200027a8
 800c1bc:	20002c90 	.word	0x20002c90

0800c1c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1c8:	4b06      	ldr	r3, [pc, #24]	@ (800c1e4 <vTaskInternalSetTimeOutState+0x24>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1d0:	4b05      	ldr	r3, [pc, #20]	@ (800c1e8 <vTaskInternalSetTimeOutState+0x28>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	605a      	str	r2, [r3, #4]
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	20002c94 	.word	0x20002c94
 800c1e8:	20002c80 	.word	0x20002c80

0800c1ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10b      	bne.n	800c214 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	613b      	str	r3, [r7, #16]
}
 800c20e:	bf00      	nop
 800c210:	bf00      	nop
 800c212:	e7fd      	b.n	800c210 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10b      	bne.n	800c232 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	60fb      	str	r3, [r7, #12]
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	e7fd      	b.n	800c22e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c232:	f000 fe91 	bl	800cf58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c236:	4b1d      	ldr	r3, [pc, #116]	@ (800c2ac <xTaskCheckForTimeOut+0xc0>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	69ba      	ldr	r2, [r7, #24]
 800c242:	1ad3      	subs	r3, r2, r3
 800c244:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c24e:	d102      	bne.n	800c256 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c250:	2300      	movs	r3, #0
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	e023      	b.n	800c29e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	4b15      	ldr	r3, [pc, #84]	@ (800c2b0 <xTaskCheckForTimeOut+0xc4>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d007      	beq.n	800c272 <xTaskCheckForTimeOut+0x86>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d302      	bcc.n	800c272 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c26c:	2301      	movs	r3, #1
 800c26e:	61fb      	str	r3, [r7, #28]
 800c270:	e015      	b.n	800c29e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d20b      	bcs.n	800c294 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	1ad2      	subs	r2, r2, r3
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff ff99 	bl	800c1c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c28e:	2300      	movs	r3, #0
 800c290:	61fb      	str	r3, [r7, #28]
 800c292:	e004      	b.n	800c29e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2200      	movs	r2, #0
 800c298:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c29a:	2301      	movs	r3, #1
 800c29c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c29e:	f000 fe8d 	bl	800cfbc <vPortExitCritical>

	return xReturn;
 800c2a2:	69fb      	ldr	r3, [r7, #28]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3720      	adds	r7, #32
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20002c80 	.word	0x20002c80
 800c2b0:	20002c94 	.word	0x20002c94

0800c2b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2b8:	4b03      	ldr	r3, [pc, #12]	@ (800c2c8 <vTaskMissedYield+0x14>)
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	601a      	str	r2, [r3, #0]
}
 800c2be:	bf00      	nop
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	20002c90 	.word	0x20002c90

0800c2cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2d4:	f000 f852 	bl	800c37c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2d8:	4b06      	ldr	r3, [pc, #24]	@ (800c2f4 <prvIdleTask+0x28>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d9f9      	bls.n	800c2d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2e0:	4b05      	ldr	r3, [pc, #20]	@ (800c2f8 <prvIdleTask+0x2c>)
 800c2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2f0:	e7f0      	b.n	800c2d4 <prvIdleTask+0x8>
 800c2f2:	bf00      	nop
 800c2f4:	200027ac 	.word	0x200027ac
 800c2f8:	e000ed04 	.word	0xe000ed04

0800c2fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c302:	2300      	movs	r3, #0
 800c304:	607b      	str	r3, [r7, #4]
 800c306:	e00c      	b.n	800c322 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	4613      	mov	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4a12      	ldr	r2, [pc, #72]	@ (800c35c <prvInitialiseTaskLists+0x60>)
 800c314:	4413      	add	r3, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe fc72 	bl	800ac00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	3301      	adds	r3, #1
 800c320:	607b      	str	r3, [r7, #4]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b37      	cmp	r3, #55	@ 0x37
 800c326:	d9ef      	bls.n	800c308 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c328:	480d      	ldr	r0, [pc, #52]	@ (800c360 <prvInitialiseTaskLists+0x64>)
 800c32a:	f7fe fc69 	bl	800ac00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c32e:	480d      	ldr	r0, [pc, #52]	@ (800c364 <prvInitialiseTaskLists+0x68>)
 800c330:	f7fe fc66 	bl	800ac00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c334:	480c      	ldr	r0, [pc, #48]	@ (800c368 <prvInitialiseTaskLists+0x6c>)
 800c336:	f7fe fc63 	bl	800ac00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c33a:	480c      	ldr	r0, [pc, #48]	@ (800c36c <prvInitialiseTaskLists+0x70>)
 800c33c:	f7fe fc60 	bl	800ac00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c340:	480b      	ldr	r0, [pc, #44]	@ (800c370 <prvInitialiseTaskLists+0x74>)
 800c342:	f7fe fc5d 	bl	800ac00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c346:	4b0b      	ldr	r3, [pc, #44]	@ (800c374 <prvInitialiseTaskLists+0x78>)
 800c348:	4a05      	ldr	r2, [pc, #20]	@ (800c360 <prvInitialiseTaskLists+0x64>)
 800c34a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c34c:	4b0a      	ldr	r3, [pc, #40]	@ (800c378 <prvInitialiseTaskLists+0x7c>)
 800c34e:	4a05      	ldr	r2, [pc, #20]	@ (800c364 <prvInitialiseTaskLists+0x68>)
 800c350:	601a      	str	r2, [r3, #0]
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	200027ac 	.word	0x200027ac
 800c360:	20002c0c 	.word	0x20002c0c
 800c364:	20002c20 	.word	0x20002c20
 800c368:	20002c3c 	.word	0x20002c3c
 800c36c:	20002c50 	.word	0x20002c50
 800c370:	20002c68 	.word	0x20002c68
 800c374:	20002c34 	.word	0x20002c34
 800c378:	20002c38 	.word	0x20002c38

0800c37c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c382:	e019      	b.n	800c3b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c384:	f000 fde8 	bl	800cf58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c388:	4b10      	ldr	r3, [pc, #64]	@ (800c3cc <prvCheckTasksWaitingTermination+0x50>)
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	3304      	adds	r3, #4
 800c394:	4618      	mov	r0, r3
 800c396:	f7fe fcbd 	bl	800ad14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c39a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d0 <prvCheckTasksWaitingTermination+0x54>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c3d0 <prvCheckTasksWaitingTermination+0x54>)
 800c3a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c3d4 <prvCheckTasksWaitingTermination+0x58>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	4a0a      	ldr	r2, [pc, #40]	@ (800c3d4 <prvCheckTasksWaitingTermination+0x58>)
 800c3ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3ae:	f000 fe05 	bl	800cfbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f810 	bl	800c3d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3b8:	4b06      	ldr	r3, [pc, #24]	@ (800c3d4 <prvCheckTasksWaitingTermination+0x58>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1e1      	bne.n	800c384 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20002c50 	.word	0x20002c50
 800c3d0:	20002c7c 	.word	0x20002c7c
 800c3d4:	20002c64 	.word	0x20002c64

0800c3d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3354      	adds	r3, #84	@ 0x54
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f002 fb69 	bl	800eabc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d108      	bne.n	800c406 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 ff9d 	bl	800d338 <vPortFree>
				vPortFree( pxTCB );
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 ff9a 	bl	800d338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c404:	e019      	b.n	800c43a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d103      	bne.n	800c418 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 ff91 	bl	800d338 <vPortFree>
	}
 800c416:	e010      	b.n	800c43a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d00b      	beq.n	800c43a <prvDeleteTCB+0x62>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	60fb      	str	r3, [r7, #12]
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	e7fd      	b.n	800c436 <prvDeleteTCB+0x5e>
	}
 800c43a:	bf00      	nop
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
	...

0800c444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c44a:	4b0c      	ldr	r3, [pc, #48]	@ (800c47c <prvResetNextTaskUnblockTime+0x38>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d104      	bne.n	800c45e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c454:	4b0a      	ldr	r3, [pc, #40]	@ (800c480 <prvResetNextTaskUnblockTime+0x3c>)
 800c456:	f04f 32ff 	mov.w	r2, #4294967295
 800c45a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c45c:	e008      	b.n	800c470 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45e:	4b07      	ldr	r3, [pc, #28]	@ (800c47c <prvResetNextTaskUnblockTime+0x38>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4a04      	ldr	r2, [pc, #16]	@ (800c480 <prvResetNextTaskUnblockTime+0x3c>)
 800c46e:	6013      	str	r3, [r2, #0]
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	20002c34 	.word	0x20002c34
 800c480:	20002c9c 	.word	0x20002c9c

0800c484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c48a:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b8 <xTaskGetSchedulerState+0x34>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c492:	2301      	movs	r3, #1
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	e008      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c498:	4b08      	ldr	r3, [pc, #32]	@ (800c4bc <xTaskGetSchedulerState+0x38>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	e001      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4aa:	687b      	ldr	r3, [r7, #4]
	}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	20002c88 	.word	0x20002c88
 800c4bc:	20002ca4 	.word	0x20002ca4

0800c4c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d058      	beq.n	800c588 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c4d6:	4b2f      	ldr	r3, [pc, #188]	@ (800c594 <xTaskPriorityDisinherit+0xd4>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d00b      	beq.n	800c4f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10b      	bne.n	800c518 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60bb      	str	r3, [r7, #8]
}
 800c512:	bf00      	nop
 800c514:	bf00      	nop
 800c516:	e7fd      	b.n	800c514 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c51c:	1e5a      	subs	r2, r3, #1
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d02c      	beq.n	800c588 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c532:	2b00      	cmp	r3, #0
 800c534:	d128      	bne.n	800c588 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	3304      	adds	r3, #4
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fe fbea 	bl	800ad14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c558:	4b0f      	ldr	r3, [pc, #60]	@ (800c598 <xTaskPriorityDisinherit+0xd8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d903      	bls.n	800c568 <xTaskPriorityDisinherit+0xa8>
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c564:	4a0c      	ldr	r2, [pc, #48]	@ (800c598 <xTaskPriorityDisinherit+0xd8>)
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c56c:	4613      	mov	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4a09      	ldr	r2, [pc, #36]	@ (800c59c <xTaskPriorityDisinherit+0xdc>)
 800c576:	441a      	add	r2, r3
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	3304      	adds	r3, #4
 800c57c:	4619      	mov	r1, r3
 800c57e:	4610      	mov	r0, r2
 800c580:	f7fe fb6b 	bl	800ac5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c584:	2301      	movs	r3, #1
 800c586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c588:	697b      	ldr	r3, [r7, #20]
	}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3718      	adds	r7, #24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	200027a8 	.word	0x200027a8
 800c598:	20002c84 	.word	0x20002c84
 800c59c:	200027ac 	.word	0x200027ac

0800c5a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5aa:	4b21      	ldr	r3, [pc, #132]	@ (800c630 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5b0:	4b20      	ldr	r3, [pc, #128]	@ (800c634 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe fbac 	bl	800ad14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c2:	d10a      	bne.n	800c5da <prvAddCurrentTaskToDelayedList+0x3a>
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d007      	beq.n	800c5da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5ca:	4b1a      	ldr	r3, [pc, #104]	@ (800c634 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	4819      	ldr	r0, [pc, #100]	@ (800c638 <prvAddCurrentTaskToDelayedList+0x98>)
 800c5d4:	f7fe fb41 	bl	800ac5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5d8:	e026      	b.n	800c628 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4413      	add	r3, r2
 800c5e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5e2:	4b14      	ldr	r3, [pc, #80]	@ (800c634 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d209      	bcs.n	800c606 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5f2:	4b12      	ldr	r3, [pc, #72]	@ (800c63c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c634 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4610      	mov	r0, r2
 800c600:	f7fe fb4f 	bl	800aca2 <vListInsert>
}
 800c604:	e010      	b.n	800c628 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c606:	4b0e      	ldr	r3, [pc, #56]	@ (800c640 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	4b0a      	ldr	r3, [pc, #40]	@ (800c634 <prvAddCurrentTaskToDelayedList+0x94>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3304      	adds	r3, #4
 800c610:	4619      	mov	r1, r3
 800c612:	4610      	mov	r0, r2
 800c614:	f7fe fb45 	bl	800aca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c618:	4b0a      	ldr	r3, [pc, #40]	@ (800c644 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d202      	bcs.n	800c628 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c622:	4a08      	ldr	r2, [pc, #32]	@ (800c644 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	6013      	str	r3, [r2, #0]
}
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	20002c80 	.word	0x20002c80
 800c634:	200027a8 	.word	0x200027a8
 800c638:	20002c68 	.word	0x20002c68
 800c63c:	20002c38 	.word	0x20002c38
 800c640:	20002c34 	.word	0x20002c34
 800c644:	20002c9c 	.word	0x20002c9c

0800c648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08a      	sub	sp, #40	@ 0x28
 800c64c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c652:	f000 fb13 	bl	800cc7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c656:	4b1d      	ldr	r3, [pc, #116]	@ (800c6cc <xTimerCreateTimerTask+0x84>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d021      	beq.n	800c6a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c666:	1d3a      	adds	r2, r7, #4
 800c668:	f107 0108 	add.w	r1, r7, #8
 800c66c:	f107 030c 	add.w	r3, r7, #12
 800c670:	4618      	mov	r0, r3
 800c672:	f7fe faab 	bl	800abcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	9202      	str	r2, [sp, #8]
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	2302      	movs	r3, #2
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	2300      	movs	r3, #0
 800c686:	460a      	mov	r2, r1
 800c688:	4911      	ldr	r1, [pc, #68]	@ (800c6d0 <xTimerCreateTimerTask+0x88>)
 800c68a:	4812      	ldr	r0, [pc, #72]	@ (800c6d4 <xTimerCreateTimerTask+0x8c>)
 800c68c:	f7ff f8a2 	bl	800b7d4 <xTaskCreateStatic>
 800c690:	4603      	mov	r3, r0
 800c692:	4a11      	ldr	r2, [pc, #68]	@ (800c6d8 <xTimerCreateTimerTask+0x90>)
 800c694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c696:	4b10      	ldr	r3, [pc, #64]	@ (800c6d8 <xTimerCreateTimerTask+0x90>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10b      	bne.n	800c6c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	613b      	str	r3, [r7, #16]
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	e7fd      	b.n	800c6bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6c0:	697b      	ldr	r3, [r7, #20]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20002cd8 	.word	0x20002cd8
 800c6d0:	08010f38 	.word	0x08010f38
 800c6d4:	0800c815 	.word	0x0800c815
 800c6d8:	20002cdc 	.word	0x20002cdc

0800c6dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08a      	sub	sp, #40	@ 0x28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
 800c6e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10b      	bne.n	800c70c <xTimerGenericCommand+0x30>
	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	623b      	str	r3, [r7, #32]
}
 800c706:	bf00      	nop
 800c708:	bf00      	nop
 800c70a:	e7fd      	b.n	800c708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c70c:	4b19      	ldr	r3, [pc, #100]	@ (800c774 <xTimerGenericCommand+0x98>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d02a      	beq.n	800c76a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b05      	cmp	r3, #5
 800c724:	dc18      	bgt.n	800c758 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c726:	f7ff fead 	bl	800c484 <xTaskGetSchedulerState>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d109      	bne.n	800c744 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c730:	4b10      	ldr	r3, [pc, #64]	@ (800c774 <xTimerGenericCommand+0x98>)
 800c732:	6818      	ldr	r0, [r3, #0]
 800c734:	f107 0110 	add.w	r1, r7, #16
 800c738:	2300      	movs	r3, #0
 800c73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c73c:	f7fe fc5a 	bl	800aff4 <xQueueGenericSend>
 800c740:	6278      	str	r0, [r7, #36]	@ 0x24
 800c742:	e012      	b.n	800c76a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c744:	4b0b      	ldr	r3, [pc, #44]	@ (800c774 <xTimerGenericCommand+0x98>)
 800c746:	6818      	ldr	r0, [r3, #0]
 800c748:	f107 0110 	add.w	r1, r7, #16
 800c74c:	2300      	movs	r3, #0
 800c74e:	2200      	movs	r2, #0
 800c750:	f7fe fc50 	bl	800aff4 <xQueueGenericSend>
 800c754:	6278      	str	r0, [r7, #36]	@ 0x24
 800c756:	e008      	b.n	800c76a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c758:	4b06      	ldr	r3, [pc, #24]	@ (800c774 <xTimerGenericCommand+0x98>)
 800c75a:	6818      	ldr	r0, [r3, #0]
 800c75c:	f107 0110 	add.w	r1, r7, #16
 800c760:	2300      	movs	r3, #0
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	f7fe fd48 	bl	800b1f8 <xQueueGenericSendFromISR>
 800c768:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3728      	adds	r7, #40	@ 0x28
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	20002cd8 	.word	0x20002cd8

0800c778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af02      	add	r7, sp, #8
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c782:	4b23      	ldr	r3, [pc, #140]	@ (800c810 <prvProcessExpiredTimer+0x98>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	3304      	adds	r3, #4
 800c790:	4618      	mov	r0, r3
 800c792:	f7fe fabf 	bl	800ad14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c79c:	f003 0304 	and.w	r3, r3, #4
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d023      	beq.n	800c7ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	699a      	ldr	r2, [r3, #24]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	18d1      	adds	r1, r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	6978      	ldr	r0, [r7, #20]
 800c7b2:	f000 f8d5 	bl	800c960 <prvInsertTimerInActiveList>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d020      	beq.n	800c7fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7bc:	2300      	movs	r3, #0
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	6978      	ldr	r0, [r7, #20]
 800c7c8:	f7ff ff88 	bl	800c6dc <xTimerGenericCommand>
 800c7cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d114      	bne.n	800c7fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	60fb      	str	r3, [r7, #12]
}
 800c7e6:	bf00      	nop
 800c7e8:	bf00      	nop
 800c7ea:	e7fd      	b.n	800c7e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7f2:	f023 0301 	bic.w	r3, r3, #1
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	6978      	ldr	r0, [r7, #20]
 800c804:	4798      	blx	r3
}
 800c806:	bf00      	nop
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20002cd0 	.word	0x20002cd0

0800c814 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c81c:	f107 0308 	add.w	r3, r7, #8
 800c820:	4618      	mov	r0, r3
 800c822:	f000 f859 	bl	800c8d8 <prvGetNextExpireTime>
 800c826:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	4619      	mov	r1, r3
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f805 	bl	800c83c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c832:	f000 f8d7 	bl	800c9e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c836:	bf00      	nop
 800c838:	e7f0      	b.n	800c81c <prvTimerTask+0x8>
	...

0800c83c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c846:	f7ff fa29 	bl	800bc9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c84a:	f107 0308 	add.w	r3, r7, #8
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f866 	bl	800c920 <prvSampleTimeNow>
 800c854:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d130      	bne.n	800c8be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10a      	bne.n	800c878 <prvProcessTimerOrBlockTask+0x3c>
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	429a      	cmp	r2, r3
 800c868:	d806      	bhi.n	800c878 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c86a:	f7ff fa25 	bl	800bcb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c86e:	68f9      	ldr	r1, [r7, #12]
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff ff81 	bl	800c778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c876:	e024      	b.n	800c8c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d008      	beq.n	800c890 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c87e:	4b13      	ldr	r3, [pc, #76]	@ (800c8cc <prvProcessTimerOrBlockTask+0x90>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <prvProcessTimerOrBlockTask+0x50>
 800c888:	2301      	movs	r3, #1
 800c88a:	e000      	b.n	800c88e <prvProcessTimerOrBlockTask+0x52>
 800c88c:	2300      	movs	r3, #0
 800c88e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c890:	4b0f      	ldr	r3, [pc, #60]	@ (800c8d0 <prvProcessTimerOrBlockTask+0x94>)
 800c892:	6818      	ldr	r0, [r3, #0]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	4619      	mov	r1, r3
 800c89e:	f7fe ff65 	bl	800b76c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8a2:	f7ff fa09 	bl	800bcb8 <xTaskResumeAll>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8ac:	4b09      	ldr	r3, [pc, #36]	@ (800c8d4 <prvProcessTimerOrBlockTask+0x98>)
 800c8ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	f3bf 8f6f 	isb	sy
}
 800c8bc:	e001      	b.n	800c8c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8be:	f7ff f9fb 	bl	800bcb8 <xTaskResumeAll>
}
 800c8c2:	bf00      	nop
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20002cd4 	.word	0x20002cd4
 800c8d0:	20002cd8 	.word	0x20002cd8
 800c8d4:	e000ed04 	.word	0xe000ed04

0800c8d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800c91c <prvGetNextExpireTime+0x44>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <prvGetNextExpireTime+0x16>
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	e000      	b.n	800c8f0 <prvGetNextExpireTime+0x18>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d105      	bne.n	800c908 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8fc:	4b07      	ldr	r3, [pc, #28]	@ (800c91c <prvGetNextExpireTime+0x44>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	60fb      	str	r3, [r7, #12]
 800c906:	e001      	b.n	800c90c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c90c:	68fb      	ldr	r3, [r7, #12]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	20002cd0 	.word	0x20002cd0

0800c920 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c928:	f7ff fa64 	bl	800bdf4 <xTaskGetTickCount>
 800c92c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c92e:	4b0b      	ldr	r3, [pc, #44]	@ (800c95c <prvSampleTimeNow+0x3c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	429a      	cmp	r2, r3
 800c936:	d205      	bcs.n	800c944 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c938:	f000 f93a 	bl	800cbb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	e002      	b.n	800c94a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c94a:	4a04      	ldr	r2, [pc, #16]	@ (800c95c <prvSampleTimeNow+0x3c>)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c950:	68fb      	ldr	r3, [r7, #12]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	20002ce0 	.word	0x20002ce0

0800c960 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
 800c96c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	68ba      	ldr	r2, [r7, #8]
 800c976:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	429a      	cmp	r2, r3
 800c984:	d812      	bhi.n	800c9ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	1ad2      	subs	r2, r2, r3
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	429a      	cmp	r2, r3
 800c992:	d302      	bcc.n	800c99a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c994:	2301      	movs	r3, #1
 800c996:	617b      	str	r3, [r7, #20]
 800c998:	e01b      	b.n	800c9d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c99a:	4b10      	ldr	r3, [pc, #64]	@ (800c9dc <prvInsertTimerInActiveList+0x7c>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	f7fe f97c 	bl	800aca2 <vListInsert>
 800c9aa:	e012      	b.n	800c9d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d206      	bcs.n	800c9c2 <prvInsertTimerInActiveList+0x62>
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d302      	bcc.n	800c9c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e007      	b.n	800c9d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9c2:	4b07      	ldr	r3, [pc, #28]	@ (800c9e0 <prvInsertTimerInActiveList+0x80>)
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	f7fe f968 	bl	800aca2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9d2:	697b      	ldr	r3, [r7, #20]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	20002cd4 	.word	0x20002cd4
 800c9e0:	20002cd0 	.word	0x20002cd0

0800c9e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08e      	sub	sp, #56	@ 0x38
 800c9e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9ea:	e0ce      	b.n	800cb8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	da19      	bge.n	800ca26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9f2:	1d3b      	adds	r3, r7, #4
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10b      	bne.n	800ca16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	61fb      	str	r3, [r7, #28]
}
 800ca10:	bf00      	nop
 800ca12:	bf00      	nop
 800ca14:	e7fd      	b.n	800ca12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca1c:	6850      	ldr	r0, [r2, #4]
 800ca1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca20:	6892      	ldr	r2, [r2, #8]
 800ca22:	4611      	mov	r1, r2
 800ca24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f2c0 80ae 	blt.w	800cb8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d004      	beq.n	800ca44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe f968 	bl	800ad14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca44:	463b      	mov	r3, r7
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff ff6a 	bl	800c920 <prvSampleTimeNow>
 800ca4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b09      	cmp	r3, #9
 800ca52:	f200 8097 	bhi.w	800cb84 <prvProcessReceivedCommands+0x1a0>
 800ca56:	a201      	add	r2, pc, #4	@ (adr r2, 800ca5c <prvProcessReceivedCommands+0x78>)
 800ca58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca85 	.word	0x0800ca85
 800ca64:	0800ca85 	.word	0x0800ca85
 800ca68:	0800cafb 	.word	0x0800cafb
 800ca6c:	0800cb0f 	.word	0x0800cb0f
 800ca70:	0800cb5b 	.word	0x0800cb5b
 800ca74:	0800ca85 	.word	0x0800ca85
 800ca78:	0800ca85 	.word	0x0800ca85
 800ca7c:	0800cafb 	.word	0x0800cafb
 800ca80:	0800cb0f 	.word	0x0800cb0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca8a:	f043 0301 	orr.w	r3, r3, #1
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	18d1      	adds	r1, r2, r3
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caa4:	f7ff ff5c 	bl	800c960 <prvInsertTimerInActiveList>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d06c      	beq.n	800cb88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cab4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d061      	beq.n	800cb88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac8:	699b      	ldr	r3, [r3, #24]
 800caca:	441a      	add	r2, r3
 800cacc:	2300      	movs	r3, #0
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	2300      	movs	r3, #0
 800cad2:	2100      	movs	r1, #0
 800cad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cad6:	f7ff fe01 	bl	800c6dc <xTimerGenericCommand>
 800cada:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cadc:	6a3b      	ldr	r3, [r7, #32]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d152      	bne.n	800cb88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	61bb      	str	r3, [r7, #24]
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb00:	f023 0301 	bic.w	r3, r3, #1
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cb0c:	e03d      	b.n	800cb8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb14:	f043 0301 	orr.w	r3, r3, #1
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb28:	699b      	ldr	r3, [r3, #24]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10b      	bne.n	800cb46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	617b      	str	r3, [r7, #20]
}
 800cb40:	bf00      	nop
 800cb42:	bf00      	nop
 800cb44:	e7fd      	b.n	800cb42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb48:	699a      	ldr	r2, [r3, #24]
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	18d1      	adds	r1, r2, r3
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb54:	f7ff ff04 	bl	800c960 <prvInsertTimerInActiveList>
					break;
 800cb58:	e017      	b.n	800cb8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d103      	bne.n	800cb70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cb68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb6a:	f000 fbe5 	bl	800d338 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb6e:	e00c      	b.n	800cb8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb76:	f023 0301 	bic.w	r3, r3, #1
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cb82:	e002      	b.n	800cb8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cb84:	bf00      	nop
 800cb86:	e000      	b.n	800cb8a <prvProcessReceivedCommands+0x1a6>
					break;
 800cb88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb8a:	4b08      	ldr	r3, [pc, #32]	@ (800cbac <prvProcessReceivedCommands+0x1c8>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	1d39      	adds	r1, r7, #4
 800cb90:	2200      	movs	r2, #0
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe fbce 	bl	800b334 <xQueueReceive>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f47f af26 	bne.w	800c9ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cba0:	bf00      	nop
 800cba2:	bf00      	nop
 800cba4:	3730      	adds	r7, #48	@ 0x30
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20002cd8 	.word	0x20002cd8

0800cbb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbb6:	e049      	b.n	800cc4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbb8:	4b2e      	ldr	r3, [pc, #184]	@ (800cc74 <prvSwitchTimerLists+0xc4>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc2:	4b2c      	ldr	r3, [pc, #176]	@ (800cc74 <prvSwitchTimerLists+0xc4>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	3304      	adds	r3, #4
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe f89f 	bl	800ad14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbe4:	f003 0304 	and.w	r3, r3, #4
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d02f      	beq.n	800cc4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cbf6:	68ba      	ldr	r2, [r7, #8]
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d90e      	bls.n	800cc1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc0a:	4b1a      	ldr	r3, [pc, #104]	@ (800cc74 <prvSwitchTimerLists+0xc4>)
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3304      	adds	r3, #4
 800cc12:	4619      	mov	r1, r3
 800cc14:	4610      	mov	r0, r2
 800cc16:	f7fe f844 	bl	800aca2 <vListInsert>
 800cc1a:	e017      	b.n	800cc4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	2300      	movs	r3, #0
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	2100      	movs	r1, #0
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f7ff fd58 	bl	800c6dc <xTimerGenericCommand>
 800cc2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10b      	bne.n	800cc4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	603b      	str	r3, [r7, #0]
}
 800cc46:	bf00      	nop
 800cc48:	bf00      	nop
 800cc4a:	e7fd      	b.n	800cc48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc4c:	4b09      	ldr	r3, [pc, #36]	@ (800cc74 <prvSwitchTimerLists+0xc4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1b0      	bne.n	800cbb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc56:	4b07      	ldr	r3, [pc, #28]	@ (800cc74 <prvSwitchTimerLists+0xc4>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc5c:	4b06      	ldr	r3, [pc, #24]	@ (800cc78 <prvSwitchTimerLists+0xc8>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a04      	ldr	r2, [pc, #16]	@ (800cc74 <prvSwitchTimerLists+0xc4>)
 800cc62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc64:	4a04      	ldr	r2, [pc, #16]	@ (800cc78 <prvSwitchTimerLists+0xc8>)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	6013      	str	r3, [r2, #0]
}
 800cc6a:	bf00      	nop
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20002cd0 	.word	0x20002cd0
 800cc78:	20002cd4 	.word	0x20002cd4

0800cc7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc82:	f000 f969 	bl	800cf58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc86:	4b15      	ldr	r3, [pc, #84]	@ (800ccdc <prvCheckForValidListAndQueue+0x60>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d120      	bne.n	800ccd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc8e:	4814      	ldr	r0, [pc, #80]	@ (800cce0 <prvCheckForValidListAndQueue+0x64>)
 800cc90:	f7fd ffb6 	bl	800ac00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc94:	4813      	ldr	r0, [pc, #76]	@ (800cce4 <prvCheckForValidListAndQueue+0x68>)
 800cc96:	f7fd ffb3 	bl	800ac00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc9a:	4b13      	ldr	r3, [pc, #76]	@ (800cce8 <prvCheckForValidListAndQueue+0x6c>)
 800cc9c:	4a10      	ldr	r2, [pc, #64]	@ (800cce0 <prvCheckForValidListAndQueue+0x64>)
 800cc9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cca0:	4b12      	ldr	r3, [pc, #72]	@ (800ccec <prvCheckForValidListAndQueue+0x70>)
 800cca2:	4a10      	ldr	r2, [pc, #64]	@ (800cce4 <prvCheckForValidListAndQueue+0x68>)
 800cca4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cca6:	2300      	movs	r3, #0
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	4b11      	ldr	r3, [pc, #68]	@ (800ccf0 <prvCheckForValidListAndQueue+0x74>)
 800ccac:	4a11      	ldr	r2, [pc, #68]	@ (800ccf4 <prvCheckForValidListAndQueue+0x78>)
 800ccae:	2110      	movs	r1, #16
 800ccb0:	200a      	movs	r0, #10
 800ccb2:	f7fe f8c3 	bl	800ae3c <xQueueGenericCreateStatic>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	4a08      	ldr	r2, [pc, #32]	@ (800ccdc <prvCheckForValidListAndQueue+0x60>)
 800ccba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ccbc:	4b07      	ldr	r3, [pc, #28]	@ (800ccdc <prvCheckForValidListAndQueue+0x60>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d005      	beq.n	800ccd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ccc4:	4b05      	ldr	r3, [pc, #20]	@ (800ccdc <prvCheckForValidListAndQueue+0x60>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	490b      	ldr	r1, [pc, #44]	@ (800ccf8 <prvCheckForValidListAndQueue+0x7c>)
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe fd24 	bl	800b718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccd0:	f000 f974 	bl	800cfbc <vPortExitCritical>
}
 800ccd4:	bf00      	nop
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	20002cd8 	.word	0x20002cd8
 800cce0:	20002ca8 	.word	0x20002ca8
 800cce4:	20002cbc 	.word	0x20002cbc
 800cce8:	20002cd0 	.word	0x20002cd0
 800ccec:	20002cd4 	.word	0x20002cd4
 800ccf0:	20002d84 	.word	0x20002d84
 800ccf4:	20002ce4 	.word	0x20002ce4
 800ccf8:	08010f40 	.word	0x08010f40

0800ccfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	3b04      	subs	r3, #4
 800cd0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cd14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3b04      	subs	r3, #4
 800cd1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f023 0201 	bic.w	r2, r3, #1
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	3b04      	subs	r3, #4
 800cd2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd2c:	4a0c      	ldr	r2, [pc, #48]	@ (800cd60 <pxPortInitialiseStack+0x64>)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3b14      	subs	r3, #20
 800cd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3b04      	subs	r3, #4
 800cd42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f06f 0202 	mvn.w	r2, #2
 800cd4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3b20      	subs	r3, #32
 800cd50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd52:	68fb      	ldr	r3, [r7, #12]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3714      	adds	r7, #20
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	0800cd65 	.word	0x0800cd65

0800cd64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd6e:	4b13      	ldr	r3, [pc, #76]	@ (800cdbc <prvTaskExitError+0x58>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d00b      	beq.n	800cd90 <prvTaskExitError+0x2c>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	60fb      	str	r3, [r7, #12]
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	e7fd      	b.n	800cd8c <prvTaskExitError+0x28>
	__asm volatile
 800cd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	60bb      	str	r3, [r7, #8]
}
 800cda2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cda4:	bf00      	nop
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d0fc      	beq.n	800cda6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdac:	bf00      	nop
 800cdae:	bf00      	nop
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	2000011c 	.word	0x2000011c

0800cdc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cdc0:	4b07      	ldr	r3, [pc, #28]	@ (800cde0 <pxCurrentTCBConst2>)
 800cdc2:	6819      	ldr	r1, [r3, #0]
 800cdc4:	6808      	ldr	r0, [r1, #0]
 800cdc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdca:	f380 8809 	msr	PSP, r0
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f04f 0000 	mov.w	r0, #0
 800cdd6:	f380 8811 	msr	BASEPRI, r0
 800cdda:	4770      	bx	lr
 800cddc:	f3af 8000 	nop.w

0800cde0 <pxCurrentTCBConst2>:
 800cde0:	200027a8 	.word	0x200027a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop

0800cde8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cde8:	4808      	ldr	r0, [pc, #32]	@ (800ce0c <prvPortStartFirstTask+0x24>)
 800cdea:	6800      	ldr	r0, [r0, #0]
 800cdec:	6800      	ldr	r0, [r0, #0]
 800cdee:	f380 8808 	msr	MSP, r0
 800cdf2:	f04f 0000 	mov.w	r0, #0
 800cdf6:	f380 8814 	msr	CONTROL, r0
 800cdfa:	b662      	cpsie	i
 800cdfc:	b661      	cpsie	f
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	df00      	svc	0
 800ce08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce0a:	bf00      	nop
 800ce0c:	e000ed08 	.word	0xe000ed08

0800ce10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce16:	4b47      	ldr	r3, [pc, #284]	@ (800cf34 <xPortStartScheduler+0x124>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a47      	ldr	r2, [pc, #284]	@ (800cf38 <xPortStartScheduler+0x128>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d10b      	bne.n	800ce38 <xPortStartScheduler+0x28>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	60fb      	str	r3, [r7, #12]
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	e7fd      	b.n	800ce34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce38:	4b3e      	ldr	r3, [pc, #248]	@ (800cf34 <xPortStartScheduler+0x124>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a3f      	ldr	r2, [pc, #252]	@ (800cf3c <xPortStartScheduler+0x12c>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d10b      	bne.n	800ce5a <xPortStartScheduler+0x4a>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	613b      	str	r3, [r7, #16]
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop
 800ce58:	e7fd      	b.n	800ce56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce5a:	4b39      	ldr	r3, [pc, #228]	@ (800cf40 <xPortStartScheduler+0x130>)
 800ce5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	22ff      	movs	r2, #255	@ 0xff
 800ce6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce74:	78fb      	ldrb	r3, [r7, #3]
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	4b31      	ldr	r3, [pc, #196]	@ (800cf44 <xPortStartScheduler+0x134>)
 800ce80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce82:	4b31      	ldr	r3, [pc, #196]	@ (800cf48 <xPortStartScheduler+0x138>)
 800ce84:	2207      	movs	r2, #7
 800ce86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce88:	e009      	b.n	800ce9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ce8a:	4b2f      	ldr	r3, [pc, #188]	@ (800cf48 <xPortStartScheduler+0x138>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	4a2d      	ldr	r2, [pc, #180]	@ (800cf48 <xPortStartScheduler+0x138>)
 800ce92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce9e:	78fb      	ldrb	r3, [r7, #3]
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cea6:	2b80      	cmp	r3, #128	@ 0x80
 800cea8:	d0ef      	beq.n	800ce8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ceaa:	4b27      	ldr	r3, [pc, #156]	@ (800cf48 <xPortStartScheduler+0x138>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f1c3 0307 	rsb	r3, r3, #7
 800ceb2:	2b04      	cmp	r3, #4
 800ceb4:	d00b      	beq.n	800cece <xPortStartScheduler+0xbe>
	__asm volatile
 800ceb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	60bb      	str	r3, [r7, #8]
}
 800cec8:	bf00      	nop
 800ceca:	bf00      	nop
 800cecc:	e7fd      	b.n	800ceca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cece:	4b1e      	ldr	r3, [pc, #120]	@ (800cf48 <xPortStartScheduler+0x138>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	021b      	lsls	r3, r3, #8
 800ced4:	4a1c      	ldr	r2, [pc, #112]	@ (800cf48 <xPortStartScheduler+0x138>)
 800ced6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ced8:	4b1b      	ldr	r3, [pc, #108]	@ (800cf48 <xPortStartScheduler+0x138>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cee0:	4a19      	ldr	r2, [pc, #100]	@ (800cf48 <xPortStartScheduler+0x138>)
 800cee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ceec:	4b17      	ldr	r3, [pc, #92]	@ (800cf4c <xPortStartScheduler+0x13c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a16      	ldr	r2, [pc, #88]	@ (800cf4c <xPortStartScheduler+0x13c>)
 800cef2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cef8:	4b14      	ldr	r3, [pc, #80]	@ (800cf4c <xPortStartScheduler+0x13c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a13      	ldr	r2, [pc, #76]	@ (800cf4c <xPortStartScheduler+0x13c>)
 800cefe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cf02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf04:	f000 f8da 	bl	800d0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf08:	4b11      	ldr	r3, [pc, #68]	@ (800cf50 <xPortStartScheduler+0x140>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf0e:	f000 f8f9 	bl	800d104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf12:	4b10      	ldr	r3, [pc, #64]	@ (800cf54 <xPortStartScheduler+0x144>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a0f      	ldr	r2, [pc, #60]	@ (800cf54 <xPortStartScheduler+0x144>)
 800cf18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cf1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf1e:	f7ff ff63 	bl	800cde8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf22:	f7ff f831 	bl	800bf88 <vTaskSwitchContext>
	prvTaskExitError();
 800cf26:	f7ff ff1d 	bl	800cd64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	e000ed00 	.word	0xe000ed00
 800cf38:	410fc271 	.word	0x410fc271
 800cf3c:	410fc270 	.word	0x410fc270
 800cf40:	e000e400 	.word	0xe000e400
 800cf44:	20002dd4 	.word	0x20002dd4
 800cf48:	20002dd8 	.word	0x20002dd8
 800cf4c:	e000ed20 	.word	0xe000ed20
 800cf50:	2000011c 	.word	0x2000011c
 800cf54:	e000ef34 	.word	0xe000ef34

0800cf58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	607b      	str	r3, [r7, #4]
}
 800cf70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf72:	4b10      	ldr	r3, [pc, #64]	@ (800cfb4 <vPortEnterCritical+0x5c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3301      	adds	r3, #1
 800cf78:	4a0e      	ldr	r2, [pc, #56]	@ (800cfb4 <vPortEnterCritical+0x5c>)
 800cf7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb4 <vPortEnterCritical+0x5c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d110      	bne.n	800cfa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf84:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb8 <vPortEnterCritical+0x60>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00b      	beq.n	800cfa6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	603b      	str	r3, [r7, #0]
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	e7fd      	b.n	800cfa2 <vPortEnterCritical+0x4a>
	}
}
 800cfa6:	bf00      	nop
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	2000011c 	.word	0x2000011c
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cfc2:	4b12      	ldr	r3, [pc, #72]	@ (800d00c <vPortExitCritical+0x50>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10b      	bne.n	800cfe2 <vPortExitCritical+0x26>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	607b      	str	r3, [r7, #4]
}
 800cfdc:	bf00      	nop
 800cfde:	bf00      	nop
 800cfe0:	e7fd      	b.n	800cfde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	@ (800d00c <vPortExitCritical+0x50>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	4a08      	ldr	r2, [pc, #32]	@ (800d00c <vPortExitCritical+0x50>)
 800cfea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfec:	4b07      	ldr	r3, [pc, #28]	@ (800d00c <vPortExitCritical+0x50>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d105      	bne.n	800d000 <vPortExitCritical+0x44>
 800cff4:	2300      	movs	r3, #0
 800cff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f383 8811 	msr	BASEPRI, r3
}
 800cffe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	2000011c 	.word	0x2000011c

0800d010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d010:	f3ef 8009 	mrs	r0, PSP
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	4b15      	ldr	r3, [pc, #84]	@ (800d070 <pxCurrentTCBConst>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	f01e 0f10 	tst.w	lr, #16
 800d020:	bf08      	it	eq
 800d022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02a:	6010      	str	r0, [r2, #0]
 800d02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d034:	f380 8811 	msr	BASEPRI, r0
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f7fe ffa2 	bl	800bf88 <vTaskSwitchContext>
 800d044:	f04f 0000 	mov.w	r0, #0
 800d048:	f380 8811 	msr	BASEPRI, r0
 800d04c:	bc09      	pop	{r0, r3}
 800d04e:	6819      	ldr	r1, [r3, #0]
 800d050:	6808      	ldr	r0, [r1, #0]
 800d052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d056:	f01e 0f10 	tst.w	lr, #16
 800d05a:	bf08      	it	eq
 800d05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d060:	f380 8809 	msr	PSP, r0
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	f3af 8000 	nop.w

0800d070 <pxCurrentTCBConst>:
 800d070:	200027a8 	.word	0x200027a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d074:	bf00      	nop
 800d076:	bf00      	nop

0800d078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	607b      	str	r3, [r7, #4]
}
 800d090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d092:	f7fe febf 	bl	800be14 <xTaskIncrementTick>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d003      	beq.n	800d0a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d09c:	4b06      	ldr	r3, [pc, #24]	@ (800d0b8 <xPortSysTickHandler+0x40>)
 800d09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	f383 8811 	msr	BASEPRI, r3
}
 800d0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	e000ed04 	.word	0xe000ed04

0800d0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d0bc:	b480      	push	{r7}
 800d0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f0 <vPortSetupTimerInterrupt+0x34>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f4 <vPortSetupTimerInterrupt+0x38>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f8 <vPortSetupTimerInterrupt+0x3c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a0a      	ldr	r2, [pc, #40]	@ (800d0fc <vPortSetupTimerInterrupt+0x40>)
 800d0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d6:	099b      	lsrs	r3, r3, #6
 800d0d8:	4a09      	ldr	r2, [pc, #36]	@ (800d100 <vPortSetupTimerInterrupt+0x44>)
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0de:	4b04      	ldr	r3, [pc, #16]	@ (800d0f0 <vPortSetupTimerInterrupt+0x34>)
 800d0e0:	2207      	movs	r2, #7
 800d0e2:	601a      	str	r2, [r3, #0]
}
 800d0e4:	bf00      	nop
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	e000e010 	.word	0xe000e010
 800d0f4:	e000e018 	.word	0xe000e018
 800d0f8:	20000000 	.word	0x20000000
 800d0fc:	10624dd3 	.word	0x10624dd3
 800d100:	e000e014 	.word	0xe000e014

0800d104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d104:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d114 <vPortEnableVFP+0x10>
 800d108:	6801      	ldr	r1, [r0, #0]
 800d10a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d10e:	6001      	str	r1, [r0, #0]
 800d110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d112:	bf00      	nop
 800d114:	e000ed88 	.word	0xe000ed88

0800d118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d11e:	f3ef 8305 	mrs	r3, IPSR
 800d122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b0f      	cmp	r3, #15
 800d128:	d915      	bls.n	800d156 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d12a:	4a18      	ldr	r2, [pc, #96]	@ (800d18c <vPortValidateInterruptPriority+0x74>)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4413      	add	r3, r2
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d134:	4b16      	ldr	r3, [pc, #88]	@ (800d190 <vPortValidateInterruptPriority+0x78>)
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	7afa      	ldrb	r2, [r7, #11]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d20b      	bcs.n	800d156 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	607b      	str	r3, [r7, #4]
}
 800d150:	bf00      	nop
 800d152:	bf00      	nop
 800d154:	e7fd      	b.n	800d152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d156:	4b0f      	ldr	r3, [pc, #60]	@ (800d194 <vPortValidateInterruptPriority+0x7c>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d15e:	4b0e      	ldr	r3, [pc, #56]	@ (800d198 <vPortValidateInterruptPriority+0x80>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	429a      	cmp	r2, r3
 800d164:	d90b      	bls.n	800d17e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	603b      	str	r3, [r7, #0]
}
 800d178:	bf00      	nop
 800d17a:	bf00      	nop
 800d17c:	e7fd      	b.n	800d17a <vPortValidateInterruptPriority+0x62>
	}
 800d17e:	bf00      	nop
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	e000e3f0 	.word	0xe000e3f0
 800d190:	20002dd4 	.word	0x20002dd4
 800d194:	e000ed0c 	.word	0xe000ed0c
 800d198:	20002dd8 	.word	0x20002dd8

0800d19c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b08a      	sub	sp, #40	@ 0x28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1a8:	f7fe fd78 	bl	800bc9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1ac:	4b5c      	ldr	r3, [pc, #368]	@ (800d320 <pvPortMalloc+0x184>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d101      	bne.n	800d1b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1b4:	f000 f924 	bl	800d400 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1b8:	4b5a      	ldr	r3, [pc, #360]	@ (800d324 <pvPortMalloc+0x188>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4013      	ands	r3, r2
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f040 8095 	bne.w	800d2f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d01e      	beq.n	800d20a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d1cc:	2208      	movs	r2, #8
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f003 0307 	and.w	r3, r3, #7
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d015      	beq.n	800d20a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f023 0307 	bic.w	r3, r3, #7
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f003 0307 	and.w	r3, r3, #7
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00b      	beq.n	800d20a <pvPortMalloc+0x6e>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	617b      	str	r3, [r7, #20]
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	e7fd      	b.n	800d206 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d06f      	beq.n	800d2f0 <pvPortMalloc+0x154>
 800d210:	4b45      	ldr	r3, [pc, #276]	@ (800d328 <pvPortMalloc+0x18c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	429a      	cmp	r2, r3
 800d218:	d86a      	bhi.n	800d2f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d21a:	4b44      	ldr	r3, [pc, #272]	@ (800d32c <pvPortMalloc+0x190>)
 800d21c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d21e:	4b43      	ldr	r3, [pc, #268]	@ (800d32c <pvPortMalloc+0x190>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d224:	e004      	b.n	800d230 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	429a      	cmp	r2, r3
 800d238:	d903      	bls.n	800d242 <pvPortMalloc+0xa6>
 800d23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1f1      	bne.n	800d226 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d242:	4b37      	ldr	r3, [pc, #220]	@ (800d320 <pvPortMalloc+0x184>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d248:	429a      	cmp	r2, r3
 800d24a:	d051      	beq.n	800d2f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2208      	movs	r2, #8
 800d252:	4413      	add	r3, r2
 800d254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	1ad2      	subs	r2, r2, r3
 800d266:	2308      	movs	r3, #8
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d920      	bls.n	800d2b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d26e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	4413      	add	r3, r2
 800d274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00b      	beq.n	800d298 <pvPortMalloc+0xfc>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	613b      	str	r3, [r7, #16]
}
 800d292:	bf00      	nop
 800d294:	bf00      	nop
 800d296:	e7fd      	b.n	800d294 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2aa:	69b8      	ldr	r0, [r7, #24]
 800d2ac:	f000 f90a 	bl	800d4c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800d328 <pvPortMalloc+0x18c>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800d328 <pvPortMalloc+0x18c>)
 800d2bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2be:	4b1a      	ldr	r3, [pc, #104]	@ (800d328 <pvPortMalloc+0x18c>)
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d330 <pvPortMalloc+0x194>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d203      	bcs.n	800d2d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d2ca:	4b17      	ldr	r3, [pc, #92]	@ (800d328 <pvPortMalloc+0x18c>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a18      	ldr	r2, [pc, #96]	@ (800d330 <pvPortMalloc+0x194>)
 800d2d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	4b13      	ldr	r3, [pc, #76]	@ (800d324 <pvPortMalloc+0x188>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d2e6:	4b13      	ldr	r3, [pc, #76]	@ (800d334 <pvPortMalloc+0x198>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	4a11      	ldr	r2, [pc, #68]	@ (800d334 <pvPortMalloc+0x198>)
 800d2ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2f0:	f7fe fce2 	bl	800bcb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00b      	beq.n	800d316 <pvPortMalloc+0x17a>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	60fb      	str	r3, [r7, #12]
}
 800d310:	bf00      	nop
 800d312:	bf00      	nop
 800d314:	e7fd      	b.n	800d312 <pvPortMalloc+0x176>
	return pvReturn;
 800d316:	69fb      	ldr	r3, [r7, #28]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3728      	adds	r7, #40	@ 0x28
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20008ba4 	.word	0x20008ba4
 800d324:	20008bb8 	.word	0x20008bb8
 800d328:	20008ba8 	.word	0x20008ba8
 800d32c:	20008b9c 	.word	0x20008b9c
 800d330:	20008bac 	.word	0x20008bac
 800d334:	20008bb0 	.word	0x20008bb0

0800d338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d04f      	beq.n	800d3ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d34a:	2308      	movs	r3, #8
 800d34c:	425b      	negs	r3, r3
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	4413      	add	r3, r2
 800d352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	4b25      	ldr	r3, [pc, #148]	@ (800d3f4 <vPortFree+0xbc>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4013      	ands	r3, r2
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10b      	bne.n	800d37e <vPortFree+0x46>
	__asm volatile
 800d366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	60fb      	str	r3, [r7, #12]
}
 800d378:	bf00      	nop
 800d37a:	bf00      	nop
 800d37c:	e7fd      	b.n	800d37a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00b      	beq.n	800d39e <vPortFree+0x66>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	60bb      	str	r3, [r7, #8]
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	e7fd      	b.n	800d39a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	4b14      	ldr	r3, [pc, #80]	@ (800d3f4 <vPortFree+0xbc>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01e      	beq.n	800d3ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d11a      	bne.n	800d3ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	685a      	ldr	r2, [r3, #4]
 800d3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d3f4 <vPortFree+0xbc>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	43db      	mvns	r3, r3
 800d3be:	401a      	ands	r2, r3
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3c4:	f7fe fc6a 	bl	800bc9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f8 <vPortFree+0xc0>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	4a09      	ldr	r2, [pc, #36]	@ (800d3f8 <vPortFree+0xc0>)
 800d3d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3d6:	6938      	ldr	r0, [r7, #16]
 800d3d8:	f000 f874 	bl	800d4c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d3dc:	4b07      	ldr	r3, [pc, #28]	@ (800d3fc <vPortFree+0xc4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	4a06      	ldr	r2, [pc, #24]	@ (800d3fc <vPortFree+0xc4>)
 800d3e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d3e6:	f7fe fc67 	bl	800bcb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3ea:	bf00      	nop
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20008bb8 	.word	0x20008bb8
 800d3f8:	20008ba8 	.word	0x20008ba8
 800d3fc:	20008bb4 	.word	0x20008bb4

0800d400 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d406:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800d40a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d40c:	4b27      	ldr	r3, [pc, #156]	@ (800d4ac <prvHeapInit+0xac>)
 800d40e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f003 0307 	and.w	r3, r3, #7
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00c      	beq.n	800d434 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3307      	adds	r3, #7
 800d41e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f023 0307 	bic.w	r3, r3, #7
 800d426:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	4a1f      	ldr	r2, [pc, #124]	@ (800d4ac <prvHeapInit+0xac>)
 800d430:	4413      	add	r3, r2
 800d432:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d438:	4a1d      	ldr	r2, [pc, #116]	@ (800d4b0 <prvHeapInit+0xb0>)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d43e:	4b1c      	ldr	r3, [pc, #112]	@ (800d4b0 <prvHeapInit+0xb0>)
 800d440:	2200      	movs	r2, #0
 800d442:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	4413      	add	r3, r2
 800d44a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d44c:	2208      	movs	r2, #8
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	1a9b      	subs	r3, r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f023 0307 	bic.w	r3, r3, #7
 800d45a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	4a15      	ldr	r2, [pc, #84]	@ (800d4b4 <prvHeapInit+0xb4>)
 800d460:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d462:	4b14      	ldr	r3, [pc, #80]	@ (800d4b4 <prvHeapInit+0xb4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2200      	movs	r2, #0
 800d468:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d46a:	4b12      	ldr	r3, [pc, #72]	@ (800d4b4 <prvHeapInit+0xb4>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2200      	movs	r2, #0
 800d470:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	1ad2      	subs	r2, r2, r3
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d480:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b4 <prvHeapInit+0xb4>)
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	4a0a      	ldr	r2, [pc, #40]	@ (800d4b8 <prvHeapInit+0xb8>)
 800d48e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	4a09      	ldr	r2, [pc, #36]	@ (800d4bc <prvHeapInit+0xbc>)
 800d496:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d498:	4b09      	ldr	r3, [pc, #36]	@ (800d4c0 <prvHeapInit+0xc0>)
 800d49a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d49e:	601a      	str	r2, [r3, #0]
}
 800d4a0:	bf00      	nop
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	20002ddc 	.word	0x20002ddc
 800d4b0:	20008b9c 	.word	0x20008b9c
 800d4b4:	20008ba4 	.word	0x20008ba4
 800d4b8:	20008bac 	.word	0x20008bac
 800d4bc:	20008ba8 	.word	0x20008ba8
 800d4c0:	20008bb8 	.word	0x20008bb8

0800d4c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d4cc:	4b28      	ldr	r3, [pc, #160]	@ (800d570 <prvInsertBlockIntoFreeList+0xac>)
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	e002      	b.n	800d4d8 <prvInsertBlockIntoFreeList+0x14>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	60fb      	str	r3, [r7, #12]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d8f7      	bhi.n	800d4d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d108      	bne.n	800d506 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	685a      	ldr	r2, [r3, #4]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	441a      	add	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	441a      	add	r2, r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	429a      	cmp	r2, r3
 800d518:	d118      	bne.n	800d54c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	4b15      	ldr	r3, [pc, #84]	@ (800d574 <prvInsertBlockIntoFreeList+0xb0>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	429a      	cmp	r2, r3
 800d524:	d00d      	beq.n	800d542 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	441a      	add	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	e008      	b.n	800d554 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d542:	4b0c      	ldr	r3, [pc, #48]	@ (800d574 <prvInsertBlockIntoFreeList+0xb0>)
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	e003      	b.n	800d554 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d002      	beq.n	800d562 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d562:	bf00      	nop
 800d564:	3714      	adds	r7, #20
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	20008b9c 	.word	0x20008b9c
 800d574:	20008ba4 	.word	0x20008ba4

0800d578 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d57c:	2200      	movs	r2, #0
 800d57e:	4912      	ldr	r1, [pc, #72]	@ (800d5c8 <MX_USB_Device_Init+0x50>)
 800d580:	4812      	ldr	r0, [pc, #72]	@ (800d5cc <MX_USB_Device_Init+0x54>)
 800d582:	f7fc f837 	bl	80095f4 <USBD_Init>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d58c:	f7f4 f9ca 	bl	8001924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d590:	490f      	ldr	r1, [pc, #60]	@ (800d5d0 <MX_USB_Device_Init+0x58>)
 800d592:	480e      	ldr	r0, [pc, #56]	@ (800d5cc <MX_USB_Device_Init+0x54>)
 800d594:	f7fc f85e 	bl	8009654 <USBD_RegisterClass>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d59e:	f7f4 f9c1 	bl	8001924 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d5a2:	490c      	ldr	r1, [pc, #48]	@ (800d5d4 <MX_USB_Device_Init+0x5c>)
 800d5a4:	4809      	ldr	r0, [pc, #36]	@ (800d5cc <MX_USB_Device_Init+0x54>)
 800d5a6:	f7fb ff7f 	bl	80094a8 <USBD_CDC_RegisterInterface>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d5b0:	f7f4 f9b8 	bl	8001924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d5b4:	4805      	ldr	r0, [pc, #20]	@ (800d5cc <MX_USB_Device_Init+0x54>)
 800d5b6:	f7fc f874 	bl	80096a2 <USBD_Start>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d5c0:	f7f4 f9b0 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d5c4:	bf00      	nop
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20000134 	.word	0x20000134
 800d5cc:	20008bbc 	.word	0x20008bbc
 800d5d0:	20000018 	.word	0x20000018
 800d5d4:	20000120 	.word	0x20000120

0800d5d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4905      	ldr	r1, [pc, #20]	@ (800d5f4 <CDC_Init_FS+0x1c>)
 800d5e0:	4805      	ldr	r0, [pc, #20]	@ (800d5f8 <CDC_Init_FS+0x20>)
 800d5e2:	f7fb ff76 	bl	80094d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5e6:	4905      	ldr	r1, [pc, #20]	@ (800d5fc <CDC_Init_FS+0x24>)
 800d5e8:	4803      	ldr	r0, [pc, #12]	@ (800d5f8 <CDC_Init_FS+0x20>)
 800d5ea:	f7fb ff90 	bl	800950e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d5ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	2000968c 	.word	0x2000968c
 800d5f8:	20008bbc 	.word	0x20008bbc
 800d5fc:	20008e8c 	.word	0x20008e8c

0800d600 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d600:	b480      	push	{r7}
 800d602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d604:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d606:	4618      	mov	r0, r3
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	6039      	str	r1, [r7, #0]
 800d61a:	71fb      	strb	r3, [r7, #7]
 800d61c:	4613      	mov	r3, r2
 800d61e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	2b23      	cmp	r3, #35	@ 0x23
 800d624:	d84a      	bhi.n	800d6bc <CDC_Control_FS+0xac>
 800d626:	a201      	add	r2, pc, #4	@ (adr r2, 800d62c <CDC_Control_FS+0x1c>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d6bd 	.word	0x0800d6bd
 800d630:	0800d6bd 	.word	0x0800d6bd
 800d634:	0800d6bd 	.word	0x0800d6bd
 800d638:	0800d6bd 	.word	0x0800d6bd
 800d63c:	0800d6bd 	.word	0x0800d6bd
 800d640:	0800d6bd 	.word	0x0800d6bd
 800d644:	0800d6bd 	.word	0x0800d6bd
 800d648:	0800d6bd 	.word	0x0800d6bd
 800d64c:	0800d6bd 	.word	0x0800d6bd
 800d650:	0800d6bd 	.word	0x0800d6bd
 800d654:	0800d6bd 	.word	0x0800d6bd
 800d658:	0800d6bd 	.word	0x0800d6bd
 800d65c:	0800d6bd 	.word	0x0800d6bd
 800d660:	0800d6bd 	.word	0x0800d6bd
 800d664:	0800d6bd 	.word	0x0800d6bd
 800d668:	0800d6bd 	.word	0x0800d6bd
 800d66c:	0800d6bd 	.word	0x0800d6bd
 800d670:	0800d6bd 	.word	0x0800d6bd
 800d674:	0800d6bd 	.word	0x0800d6bd
 800d678:	0800d6bd 	.word	0x0800d6bd
 800d67c:	0800d6bd 	.word	0x0800d6bd
 800d680:	0800d6bd 	.word	0x0800d6bd
 800d684:	0800d6bd 	.word	0x0800d6bd
 800d688:	0800d6bd 	.word	0x0800d6bd
 800d68c:	0800d6bd 	.word	0x0800d6bd
 800d690:	0800d6bd 	.word	0x0800d6bd
 800d694:	0800d6bd 	.word	0x0800d6bd
 800d698:	0800d6bd 	.word	0x0800d6bd
 800d69c:	0800d6bd 	.word	0x0800d6bd
 800d6a0:	0800d6bd 	.word	0x0800d6bd
 800d6a4:	0800d6bd 	.word	0x0800d6bd
 800d6a8:	0800d6bd 	.word	0x0800d6bd
 800d6ac:	0800d6bd 	.word	0x0800d6bd
 800d6b0:	0800d6bd 	.word	0x0800d6bd
 800d6b4:	0800d6bd 	.word	0x0800d6bd
 800d6b8:	0800d6bd 	.word	0x0800d6bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d6bc:	bf00      	nop
  }

  return (USBD_OK);
 800d6be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d6d6:	6879      	ldr	r1, [r7, #4]
 800d6d8:	4805      	ldr	r0, [pc, #20]	@ (800d6f0 <CDC_Receive_FS+0x24>)
 800d6da:	f7fb ff18 	bl	800950e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d6de:	4804      	ldr	r0, [pc, #16]	@ (800d6f0 <CDC_Receive_FS+0x24>)
 800d6e0:	f7fb ff5e 	bl	80095a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d6e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20008bbc 	.word	0x20008bbc

0800d6f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d704:	4b0d      	ldr	r3, [pc, #52]	@ (800d73c <CDC_Transmit_FS+0x48>)
 800d706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d70a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d716:	2301      	movs	r3, #1
 800d718:	e00b      	b.n	800d732 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d71a:	887b      	ldrh	r3, [r7, #2]
 800d71c:	461a      	mov	r2, r3
 800d71e:	6879      	ldr	r1, [r7, #4]
 800d720:	4806      	ldr	r0, [pc, #24]	@ (800d73c <CDC_Transmit_FS+0x48>)
 800d722:	f7fb fed6 	bl	80094d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d726:	4805      	ldr	r0, [pc, #20]	@ (800d73c <CDC_Transmit_FS+0x48>)
 800d728:	f7fb ff0a 	bl	8009540 <USBD_CDC_TransmitPacket>
 800d72c:	4603      	mov	r3, r0
 800d72e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d730:	7bfb      	ldrb	r3, [r7, #15]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	20008bbc 	.word	0x20008bbc

0800d740 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d740:	b480      	push	{r7}
 800d742:	b087      	sub	sp, #28
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	4613      	mov	r3, r2
 800d74c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d74e:	2300      	movs	r3, #0
 800d750:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d756:	4618      	mov	r0, r3
 800d758:	371c      	adds	r7, #28
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr
	...

0800d764 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	4603      	mov	r3, r0
 800d76c:	6039      	str	r1, [r7, #0]
 800d76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2212      	movs	r2, #18
 800d774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d776:	4b03      	ldr	r3, [pc, #12]	@ (800d784 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	20000154 	.word	0x20000154

0800d788 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	6039      	str	r1, [r7, #0]
 800d792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2204      	movs	r2, #4
 800d798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d79a:	4b03      	ldr	r3, [pc, #12]	@ (800d7a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	20000168 	.word	0x20000168

0800d7ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	6039      	str	r1, [r7, #0]
 800d7b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7b8:	79fb      	ldrb	r3, [r7, #7]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d105      	bne.n	800d7ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	4907      	ldr	r1, [pc, #28]	@ (800d7e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d7c2:	4808      	ldr	r0, [pc, #32]	@ (800d7e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d7c4:	f7fc ff57 	bl	800a676 <USBD_GetString>
 800d7c8:	e004      	b.n	800d7d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d7ca:	683a      	ldr	r2, [r7, #0]
 800d7cc:	4904      	ldr	r1, [pc, #16]	@ (800d7e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d7ce:	4805      	ldr	r0, [pc, #20]	@ (800d7e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d7d0:	f7fc ff51 	bl	800a676 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7d4:	4b02      	ldr	r3, [pc, #8]	@ (800d7e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	20009e8c 	.word	0x20009e8c
 800d7e4:	08010f48 	.word	0x08010f48

0800d7e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	6039      	str	r1, [r7, #0]
 800d7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	4904      	ldr	r1, [pc, #16]	@ (800d808 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d7f8:	4804      	ldr	r0, [pc, #16]	@ (800d80c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d7fa:	f7fc ff3c 	bl	800a676 <USBD_GetString>
  return USBD_StrDesc;
 800d7fe:	4b02      	ldr	r3, [pc, #8]	@ (800d808 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d800:	4618      	mov	r0, r3
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	20009e8c 	.word	0x20009e8c
 800d80c:	08010f60 	.word	0x08010f60

0800d810 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	221a      	movs	r2, #26
 800d820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d822:	f000 f843 	bl	800d8ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d826:	4b02      	ldr	r3, [pc, #8]	@ (800d830 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	2000016c 	.word	0x2000016c

0800d834 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d840:	79fb      	ldrb	r3, [r7, #7]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d105      	bne.n	800d852 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	4907      	ldr	r1, [pc, #28]	@ (800d868 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d84a:	4808      	ldr	r0, [pc, #32]	@ (800d86c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d84c:	f7fc ff13 	bl	800a676 <USBD_GetString>
 800d850:	e004      	b.n	800d85c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	4904      	ldr	r1, [pc, #16]	@ (800d868 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d856:	4805      	ldr	r0, [pc, #20]	@ (800d86c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d858:	f7fc ff0d 	bl	800a676 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d85c:	4b02      	ldr	r3, [pc, #8]	@ (800d868 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	20009e8c 	.word	0x20009e8c
 800d86c:	08010f74 	.word	0x08010f74

0800d870 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	6039      	str	r1, [r7, #0]
 800d87a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d87c:	79fb      	ldrb	r3, [r7, #7]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d105      	bne.n	800d88e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	4907      	ldr	r1, [pc, #28]	@ (800d8a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d886:	4808      	ldr	r0, [pc, #32]	@ (800d8a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d888:	f7fc fef5 	bl	800a676 <USBD_GetString>
 800d88c:	e004      	b.n	800d898 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	4904      	ldr	r1, [pc, #16]	@ (800d8a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d892:	4805      	ldr	r0, [pc, #20]	@ (800d8a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d894:	f7fc feef 	bl	800a676 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d898:	4b02      	ldr	r3, [pc, #8]	@ (800d8a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20009e8c 	.word	0x20009e8c
 800d8a8:	08010f80 	.word	0x08010f80

0800d8ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d8f0 <Get_SerialNum+0x44>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f4 <Get_SerialNum+0x48>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8be:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f8 <Get_SerialNum+0x4c>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d009      	beq.n	800d8e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8d2:	2208      	movs	r2, #8
 800d8d4:	4909      	ldr	r1, [pc, #36]	@ (800d8fc <Get_SerialNum+0x50>)
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f000 f814 	bl	800d904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8dc:	2204      	movs	r2, #4
 800d8de:	4908      	ldr	r1, [pc, #32]	@ (800d900 <Get_SerialNum+0x54>)
 800d8e0:	68b8      	ldr	r0, [r7, #8]
 800d8e2:	f000 f80f 	bl	800d904 <IntToUnicode>
  }
}
 800d8e6:	bf00      	nop
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	1fff7590 	.word	0x1fff7590
 800d8f4:	1fff7594 	.word	0x1fff7594
 800d8f8:	1fff7598 	.word	0x1fff7598
 800d8fc:	2000016e 	.word	0x2000016e
 800d900:	2000017e 	.word	0x2000017e

0800d904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d904:	b480      	push	{r7}
 800d906:	b087      	sub	sp, #28
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	4613      	mov	r3, r2
 800d910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d916:	2300      	movs	r3, #0
 800d918:	75fb      	strb	r3, [r7, #23]
 800d91a:	e027      	b.n	800d96c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	0f1b      	lsrs	r3, r3, #28
 800d920:	2b09      	cmp	r3, #9
 800d922:	d80b      	bhi.n	800d93c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	0f1b      	lsrs	r3, r3, #28
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	7dfb      	ldrb	r3, [r7, #23]
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	4619      	mov	r1, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	440b      	add	r3, r1
 800d934:	3230      	adds	r2, #48	@ 0x30
 800d936:	b2d2      	uxtb	r2, r2
 800d938:	701a      	strb	r2, [r3, #0]
 800d93a:	e00a      	b.n	800d952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	0f1b      	lsrs	r3, r3, #28
 800d940:	b2da      	uxtb	r2, r3
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	4619      	mov	r1, r3
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	440b      	add	r3, r1
 800d94c:	3237      	adds	r2, #55	@ 0x37
 800d94e:	b2d2      	uxtb	r2, r2
 800d950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	011b      	lsls	r3, r3, #4
 800d956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d958:	7dfb      	ldrb	r3, [r7, #23]
 800d95a:	005b      	lsls	r3, r3, #1
 800d95c:	3301      	adds	r3, #1
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	4413      	add	r3, r2
 800d962:	2200      	movs	r2, #0
 800d964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d966:	7dfb      	ldrb	r3, [r7, #23]
 800d968:	3301      	adds	r3, #1
 800d96a:	75fb      	strb	r3, [r7, #23]
 800d96c:	7dfa      	ldrb	r2, [r7, #23]
 800d96e:	79fb      	ldrb	r3, [r7, #7]
 800d970:	429a      	cmp	r2, r3
 800d972:	d3d3      	bcc.n	800d91c <IntToUnicode+0x18>
  }
}
 800d974:	bf00      	nop
 800d976:	bf00      	nop
 800d978:	371c      	adds	r7, #28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
	...

0800d984 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b098      	sub	sp, #96	@ 0x60
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d98c:	f107 0310 	add.w	r3, r7, #16
 800d990:	2250      	movs	r2, #80	@ 0x50
 800d992:	2100      	movs	r1, #0
 800d994:	4618      	mov	r0, r3
 800d996:	f001 f875 	bl	800ea84 <memset>
  if(pcdHandle->Instance==USB)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a15      	ldr	r2, [pc, #84]	@ (800d9f4 <HAL_PCD_MspInit+0x70>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d122      	bne.n	800d9ea <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d9a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d9a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d9ae:	f107 0310 	add.w	r3, r7, #16
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7f8 f87e 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d9be:	f7f3 ffb1 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f8 <HAL_PCD_MspInit+0x74>)
 800d9c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d9f8 <HAL_PCD_MspInit+0x74>)
 800d9c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d9cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800d9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f8 <HAL_PCD_MspInit+0x74>)
 800d9d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800d9da:	2200      	movs	r2, #0
 800d9dc:	2105      	movs	r1, #5
 800d9de:	2014      	movs	r0, #20
 800d9e0:	f7f4 fb8a 	bl	80020f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d9e4:	2014      	movs	r0, #20
 800d9e6:	f7f4 fba1 	bl	800212c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d9ea:	bf00      	nop
 800d9ec:	3760      	adds	r7, #96	@ 0x60
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	40005c00 	.word	0x40005c00
 800d9f8:	40021000 	.word	0x40021000

0800d9fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800da10:	4619      	mov	r1, r3
 800da12:	4610      	mov	r0, r2
 800da14:	f7fb fe90 	bl	8009738 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800da32:	78fa      	ldrb	r2, [r7, #3]
 800da34:	6879      	ldr	r1, [r7, #4]
 800da36:	4613      	mov	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4413      	add	r3, r2
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	440b      	add	r3, r1
 800da40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	78fb      	ldrb	r3, [r7, #3]
 800da48:	4619      	mov	r1, r3
 800da4a:	f7fb feca 	bl	80097e2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800da4e:	bf00      	nop
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
 800da5e:	460b      	mov	r3, r1
 800da60:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800da68:	78fa      	ldrb	r2, [r7, #3]
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	4613      	mov	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4413      	add	r3, r2
 800da72:	00db      	lsls	r3, r3, #3
 800da74:	440b      	add	r3, r1
 800da76:	3324      	adds	r3, #36	@ 0x24
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	78fb      	ldrb	r3, [r7, #3]
 800da7c:	4619      	mov	r1, r3
 800da7e:	f7fb ff13 	bl	80098a8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800da82:	bf00      	nop
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fc f827 	bl	8009aec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800da9e:	bf00      	nop
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800daae:	2301      	movs	r3, #1
 800dab0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	795b      	ldrb	r3, [r3, #5]
 800dab6:	2b02      	cmp	r3, #2
 800dab8:	d001      	beq.n	800dabe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800daba:	f7f3 ff33 	bl	8001924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dac4:	7bfa      	ldrb	r2, [r7, #15]
 800dac6:	4611      	mov	r1, r2
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fb ffd1 	bl	8009a70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fb ff7d 	bl	80099d4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dada:	bf00      	nop
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
	...

0800dae4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fb ffcc 	bl	8009a90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7a5b      	ldrb	r3, [r3, #9]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d005      	beq.n	800db0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db00:	4b04      	ldr	r3, [pc, #16]	@ (800db14 <HAL_PCD_SuspendCallback+0x30>)
 800db02:	691b      	ldr	r3, [r3, #16]
 800db04:	4a03      	ldr	r2, [pc, #12]	@ (800db14 <HAL_PCD_SuspendCallback+0x30>)
 800db06:	f043 0306 	orr.w	r3, r3, #6
 800db0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800db0c:	bf00      	nop
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	e000ed00 	.word	0xe000ed00

0800db18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	7a5b      	ldrb	r3, [r3, #9]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d007      	beq.n	800db38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db28:	4b08      	ldr	r3, [pc, #32]	@ (800db4c <HAL_PCD_ResumeCallback+0x34>)
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	4a07      	ldr	r2, [pc, #28]	@ (800db4c <HAL_PCD_ResumeCallback+0x34>)
 800db2e:	f023 0306 	bic.w	r3, r3, #6
 800db32:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800db34:	f000 f9f8 	bl	800df28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fb ffbc 	bl	8009abc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	e000ed00 	.word	0xe000ed00

0800db50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800db58:	4a2b      	ldr	r2, [pc, #172]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a29      	ldr	r2, [pc, #164]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800db68:	4b27      	ldr	r3, [pc, #156]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db6a:	4a28      	ldr	r2, [pc, #160]	@ (800dc0c <USBD_LL_Init+0xbc>)
 800db6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800db6e:	4b26      	ldr	r3, [pc, #152]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db70:	2208      	movs	r2, #8
 800db72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800db74:	4b24      	ldr	r3, [pc, #144]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db76:	2202      	movs	r2, #2
 800db78:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800db7a:	4b23      	ldr	r3, [pc, #140]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db7c:	2202      	movs	r2, #2
 800db7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800db80:	4b21      	ldr	r3, [pc, #132]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db82:	2200      	movs	r2, #0
 800db84:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800db86:	4b20      	ldr	r3, [pc, #128]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db88:	2200      	movs	r2, #0
 800db8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800db8c:	4b1e      	ldr	r3, [pc, #120]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db8e:	2200      	movs	r2, #0
 800db90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800db92:	4b1d      	ldr	r3, [pc, #116]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db94:	2200      	movs	r2, #0
 800db96:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800db98:	481b      	ldr	r0, [pc, #108]	@ (800dc08 <USBD_LL_Init+0xb8>)
 800db9a:	f7f5 fc76 	bl	800348a <HAL_PCD_Init>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d001      	beq.n	800dba8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800dba4:	f7f3 febe 	bl	8001924 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dbae:	2318      	movs	r3, #24
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	f7f7 f8fd 	bl	8004db2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dbbe:	2358      	movs	r3, #88	@ 0x58
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2180      	movs	r1, #128	@ 0x80
 800dbc4:	f7f7 f8f5 	bl	8004db2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dbce:	23c0      	movs	r3, #192	@ 0xc0
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	2181      	movs	r1, #129	@ 0x81
 800dbd4:	f7f7 f8ed 	bl	8004db2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dbde:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	2101      	movs	r1, #1
 800dbe6:	f7f7 f8e4 	bl	8004db2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dbf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	2182      	movs	r1, #130	@ 0x82
 800dbf8:	f7f7 f8db 	bl	8004db2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	2000a08c 	.word	0x2000a08c
 800dc0c:	40005c00 	.word	0x40005c00

0800dc10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7f5 fcfd 	bl	8003626 <HAL_PCD_Start>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 f97e 	bl	800df34 <USBD_Get_USB_Status>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	4608      	mov	r0, r1
 800dc50:	4611      	mov	r1, r2
 800dc52:	461a      	mov	r2, r3
 800dc54:	4603      	mov	r3, r0
 800dc56:	70fb      	strb	r3, [r7, #3]
 800dc58:	460b      	mov	r3, r1
 800dc5a:	70bb      	strb	r3, [r7, #2]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dc6e:	78bb      	ldrb	r3, [r7, #2]
 800dc70:	883a      	ldrh	r2, [r7, #0]
 800dc72:	78f9      	ldrb	r1, [r7, #3]
 800dc74:	f7f5 fe44 	bl	8003900 <HAL_PCD_EP_Open>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 f958 	bl	800df34 <USBD_Get_USB_Status>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b084      	sub	sp, #16
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dcac:	78fa      	ldrb	r2, [r7, #3]
 800dcae:	4611      	mov	r1, r2
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f5 fe84 	bl	80039be <HAL_PCD_EP_Close>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 f939 	bl	800df34 <USBD_Get_USB_Status>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dcea:	78fa      	ldrb	r2, [r7, #3]
 800dcec:	4611      	mov	r1, r2
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7f5 ff2d 	bl	8003b4e <HAL_PCD_EP_SetStall>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f000 f91a 	bl	800df34 <USBD_Get_USB_Status>
 800dd00:	4603      	mov	r3, r0
 800dd02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd04:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	460b      	mov	r3, r1
 800dd18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dd28:	78fa      	ldrb	r2, [r7, #3]
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7f5 ff60 	bl	8003bf2 <HAL_PCD_EP_ClrStall>
 800dd32:	4603      	mov	r3, r0
 800dd34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 f8fb 	bl	800df34 <USBD_Get_USB_Status>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd42:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dd5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	da0b      	bge.n	800dd80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd68:	78fb      	ldrb	r3, [r7, #3]
 800dd6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd6e:	68f9      	ldr	r1, [r7, #12]
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	440b      	add	r3, r1
 800dd7a:	3312      	adds	r3, #18
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	e00b      	b.n	800dd98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd86:	68f9      	ldr	r1, [r7, #12]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	440b      	add	r3, r1
 800dd92:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800dd96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ddbe:	78fa      	ldrb	r2, [r7, #3]
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7f5 fd78 	bl	80038b8 <HAL_PCD_SetAddress>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f000 f8b0 	bl	800df34 <USBD_Get_USB_Status>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b086      	sub	sp, #24
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	60f8      	str	r0, [r7, #12]
 800ddea:	607a      	str	r2, [r7, #4]
 800ddec:	603b      	str	r3, [r7, #0]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800de00:	7af9      	ldrb	r1, [r7, #11]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	f7f5 fe6b 	bl	8003ae0 <HAL_PCD_EP_Transmit>
 800de0a:	4603      	mov	r3, r0
 800de0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	4618      	mov	r0, r3
 800de12:	f000 f88f 	bl	800df34 <USBD_Get_USB_Status>
 800de16:	4603      	mov	r3, r0
 800de18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	607a      	str	r2, [r7, #4]
 800de2e:	603b      	str	r3, [r7, #0]
 800de30:	460b      	mov	r3, r1
 800de32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800de42:	7af9      	ldrb	r1, [r7, #11]
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	f7f5 fe01 	bl	8003a4e <HAL_PCD_EP_Receive>
 800de4c:	4603      	mov	r3, r0
 800de4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	4618      	mov	r0, r3
 800de54:	f000 f86e 	bl	800df34 <USBD_Get_USB_Status>
 800de58:	4603      	mov	r3, r0
 800de5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b082      	sub	sp, #8
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	460b      	mov	r3, r1
 800de70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800de78:	78fa      	ldrb	r2, [r7, #3]
 800de7a:	4611      	mov	r1, r2
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7f5 fe17 	bl	8003ab0 <HAL_PCD_EP_GetRxCount>
 800de82:	4603      	mov	r3, r0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800de98:	78fb      	ldrb	r3, [r7, #3]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <HAL_PCDEx_LPM_Callback+0x18>
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d013      	beq.n	800deca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dea2:	e023      	b.n	800deec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	7a5b      	ldrb	r3, [r3, #9]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d007      	beq.n	800debc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800deac:	f000 f83c 	bl	800df28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800deb0:	4b10      	ldr	r3, [pc, #64]	@ (800def4 <HAL_PCDEx_LPM_Callback+0x68>)
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	4a0f      	ldr	r2, [pc, #60]	@ (800def4 <HAL_PCDEx_LPM_Callback+0x68>)
 800deb6:	f023 0306 	bic.w	r3, r3, #6
 800deba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fb fdfa 	bl	8009abc <USBD_LL_Resume>
    break;
 800dec8:	e010      	b.n	800deec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fb fddd 	bl	8009a90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	7a5b      	ldrb	r3, [r3, #9]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d005      	beq.n	800deea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dede:	4b05      	ldr	r3, [pc, #20]	@ (800def4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dee0:	691b      	ldr	r3, [r3, #16]
 800dee2:	4a04      	ldr	r2, [pc, #16]	@ (800def4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dee4:	f043 0306 	orr.w	r3, r3, #6
 800dee8:	6113      	str	r3, [r2, #16]
    break;
 800deea:	bf00      	nop
}
 800deec:	bf00      	nop
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	e000ed00 	.word	0xe000ed00

0800def8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df00:	4b03      	ldr	r3, [pc, #12]	@ (800df10 <USBD_static_malloc+0x18>)
}
 800df02:	4618      	mov	r0, r3
 800df04:	370c      	adds	r7, #12
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	2000a368 	.word	0x2000a368

0800df14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]

}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800df2c:	f7f3 fae8 	bl	8001500 <SystemClock_Config>
}
 800df30:	bf00      	nop
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df34:	b480      	push	{r7}
 800df36:	b085      	sub	sp, #20
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4603      	mov	r3, r0
 800df3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df3e:	2300      	movs	r3, #0
 800df40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	2b03      	cmp	r3, #3
 800df46:	d817      	bhi.n	800df78 <USBD_Get_USB_Status+0x44>
 800df48:	a201      	add	r2, pc, #4	@ (adr r2, 800df50 <USBD_Get_USB_Status+0x1c>)
 800df4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4e:	bf00      	nop
 800df50:	0800df61 	.word	0x0800df61
 800df54:	0800df67 	.word	0x0800df67
 800df58:	0800df6d 	.word	0x0800df6d
 800df5c:	0800df73 	.word	0x0800df73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	73fb      	strb	r3, [r7, #15]
    break;
 800df64:	e00b      	b.n	800df7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df66:	2303      	movs	r3, #3
 800df68:	73fb      	strb	r3, [r7, #15]
    break;
 800df6a:	e008      	b.n	800df7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df6c:	2301      	movs	r3, #1
 800df6e:	73fb      	strb	r3, [r7, #15]
    break;
 800df70:	e005      	b.n	800df7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df72:	2303      	movs	r3, #3
 800df74:	73fb      	strb	r3, [r7, #15]
    break;
 800df76:	e002      	b.n	800df7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df78:	2303      	movs	r3, #3
 800df7a:	73fb      	strb	r3, [r7, #15]
    break;
 800df7c:	bf00      	nop
  }
  return usb_status;
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df80:	4618      	mov	r0, r3
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <__cvt>:
 800df8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df90:	ec57 6b10 	vmov	r6, r7, d0
 800df94:	2f00      	cmp	r7, #0
 800df96:	460c      	mov	r4, r1
 800df98:	4619      	mov	r1, r3
 800df9a:	463b      	mov	r3, r7
 800df9c:	bfbb      	ittet	lt
 800df9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dfa2:	461f      	movlt	r7, r3
 800dfa4:	2300      	movge	r3, #0
 800dfa6:	232d      	movlt	r3, #45	@ 0x2d
 800dfa8:	700b      	strb	r3, [r1, #0]
 800dfaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dfb0:	4691      	mov	r9, r2
 800dfb2:	f023 0820 	bic.w	r8, r3, #32
 800dfb6:	bfbc      	itt	lt
 800dfb8:	4632      	movlt	r2, r6
 800dfba:	4616      	movlt	r6, r2
 800dfbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dfc0:	d005      	beq.n	800dfce <__cvt+0x42>
 800dfc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dfc6:	d100      	bne.n	800dfca <__cvt+0x3e>
 800dfc8:	3401      	adds	r4, #1
 800dfca:	2102      	movs	r1, #2
 800dfcc:	e000      	b.n	800dfd0 <__cvt+0x44>
 800dfce:	2103      	movs	r1, #3
 800dfd0:	ab03      	add	r3, sp, #12
 800dfd2:	9301      	str	r3, [sp, #4]
 800dfd4:	ab02      	add	r3, sp, #8
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	ec47 6b10 	vmov	d0, r6, r7
 800dfdc:	4653      	mov	r3, sl
 800dfde:	4622      	mov	r2, r4
 800dfe0:	f000 fec6 	bl	800ed70 <_dtoa_r>
 800dfe4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dfe8:	4605      	mov	r5, r0
 800dfea:	d119      	bne.n	800e020 <__cvt+0x94>
 800dfec:	f019 0f01 	tst.w	r9, #1
 800dff0:	d00e      	beq.n	800e010 <__cvt+0x84>
 800dff2:	eb00 0904 	add.w	r9, r0, r4
 800dff6:	2200      	movs	r2, #0
 800dff8:	2300      	movs	r3, #0
 800dffa:	4630      	mov	r0, r6
 800dffc:	4639      	mov	r1, r7
 800dffe:	f7f2 fd8b 	bl	8000b18 <__aeabi_dcmpeq>
 800e002:	b108      	cbz	r0, 800e008 <__cvt+0x7c>
 800e004:	f8cd 900c 	str.w	r9, [sp, #12]
 800e008:	2230      	movs	r2, #48	@ 0x30
 800e00a:	9b03      	ldr	r3, [sp, #12]
 800e00c:	454b      	cmp	r3, r9
 800e00e:	d31e      	bcc.n	800e04e <__cvt+0xc2>
 800e010:	9b03      	ldr	r3, [sp, #12]
 800e012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e014:	1b5b      	subs	r3, r3, r5
 800e016:	4628      	mov	r0, r5
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	b004      	add	sp, #16
 800e01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e020:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e024:	eb00 0904 	add.w	r9, r0, r4
 800e028:	d1e5      	bne.n	800dff6 <__cvt+0x6a>
 800e02a:	7803      	ldrb	r3, [r0, #0]
 800e02c:	2b30      	cmp	r3, #48	@ 0x30
 800e02e:	d10a      	bne.n	800e046 <__cvt+0xba>
 800e030:	2200      	movs	r2, #0
 800e032:	2300      	movs	r3, #0
 800e034:	4630      	mov	r0, r6
 800e036:	4639      	mov	r1, r7
 800e038:	f7f2 fd6e 	bl	8000b18 <__aeabi_dcmpeq>
 800e03c:	b918      	cbnz	r0, 800e046 <__cvt+0xba>
 800e03e:	f1c4 0401 	rsb	r4, r4, #1
 800e042:	f8ca 4000 	str.w	r4, [sl]
 800e046:	f8da 3000 	ldr.w	r3, [sl]
 800e04a:	4499      	add	r9, r3
 800e04c:	e7d3      	b.n	800dff6 <__cvt+0x6a>
 800e04e:	1c59      	adds	r1, r3, #1
 800e050:	9103      	str	r1, [sp, #12]
 800e052:	701a      	strb	r2, [r3, #0]
 800e054:	e7d9      	b.n	800e00a <__cvt+0x7e>

0800e056 <__exponent>:
 800e056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e058:	2900      	cmp	r1, #0
 800e05a:	bfba      	itte	lt
 800e05c:	4249      	neglt	r1, r1
 800e05e:	232d      	movlt	r3, #45	@ 0x2d
 800e060:	232b      	movge	r3, #43	@ 0x2b
 800e062:	2909      	cmp	r1, #9
 800e064:	7002      	strb	r2, [r0, #0]
 800e066:	7043      	strb	r3, [r0, #1]
 800e068:	dd29      	ble.n	800e0be <__exponent+0x68>
 800e06a:	f10d 0307 	add.w	r3, sp, #7
 800e06e:	461d      	mov	r5, r3
 800e070:	270a      	movs	r7, #10
 800e072:	461a      	mov	r2, r3
 800e074:	fbb1 f6f7 	udiv	r6, r1, r7
 800e078:	fb07 1416 	mls	r4, r7, r6, r1
 800e07c:	3430      	adds	r4, #48	@ 0x30
 800e07e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e082:	460c      	mov	r4, r1
 800e084:	2c63      	cmp	r4, #99	@ 0x63
 800e086:	f103 33ff 	add.w	r3, r3, #4294967295
 800e08a:	4631      	mov	r1, r6
 800e08c:	dcf1      	bgt.n	800e072 <__exponent+0x1c>
 800e08e:	3130      	adds	r1, #48	@ 0x30
 800e090:	1e94      	subs	r4, r2, #2
 800e092:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e096:	1c41      	adds	r1, r0, #1
 800e098:	4623      	mov	r3, r4
 800e09a:	42ab      	cmp	r3, r5
 800e09c:	d30a      	bcc.n	800e0b4 <__exponent+0x5e>
 800e09e:	f10d 0309 	add.w	r3, sp, #9
 800e0a2:	1a9b      	subs	r3, r3, r2
 800e0a4:	42ac      	cmp	r4, r5
 800e0a6:	bf88      	it	hi
 800e0a8:	2300      	movhi	r3, #0
 800e0aa:	3302      	adds	r3, #2
 800e0ac:	4403      	add	r3, r0
 800e0ae:	1a18      	subs	r0, r3, r0
 800e0b0:	b003      	add	sp, #12
 800e0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e0b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e0bc:	e7ed      	b.n	800e09a <__exponent+0x44>
 800e0be:	2330      	movs	r3, #48	@ 0x30
 800e0c0:	3130      	adds	r1, #48	@ 0x30
 800e0c2:	7083      	strb	r3, [r0, #2]
 800e0c4:	70c1      	strb	r1, [r0, #3]
 800e0c6:	1d03      	adds	r3, r0, #4
 800e0c8:	e7f1      	b.n	800e0ae <__exponent+0x58>
	...

0800e0cc <_printf_float>:
 800e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d0:	b08d      	sub	sp, #52	@ 0x34
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e0d8:	4616      	mov	r6, r2
 800e0da:	461f      	mov	r7, r3
 800e0dc:	4605      	mov	r5, r0
 800e0de:	f000 fcd9 	bl	800ea94 <_localeconv_r>
 800e0e2:	6803      	ldr	r3, [r0, #0]
 800e0e4:	9304      	str	r3, [sp, #16]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7f2 f8ea 	bl	80002c0 <strlen>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0f0:	f8d8 3000 	ldr.w	r3, [r8]
 800e0f4:	9005      	str	r0, [sp, #20]
 800e0f6:	3307      	adds	r3, #7
 800e0f8:	f023 0307 	bic.w	r3, r3, #7
 800e0fc:	f103 0208 	add.w	r2, r3, #8
 800e100:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e104:	f8d4 b000 	ldr.w	fp, [r4]
 800e108:	f8c8 2000 	str.w	r2, [r8]
 800e10c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e110:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e114:	9307      	str	r3, [sp, #28]
 800e116:	f8cd 8018 	str.w	r8, [sp, #24]
 800e11a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e122:	4b9c      	ldr	r3, [pc, #624]	@ (800e394 <_printf_float+0x2c8>)
 800e124:	f04f 32ff 	mov.w	r2, #4294967295
 800e128:	f7f2 fd28 	bl	8000b7c <__aeabi_dcmpun>
 800e12c:	bb70      	cbnz	r0, 800e18c <_printf_float+0xc0>
 800e12e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e132:	4b98      	ldr	r3, [pc, #608]	@ (800e394 <_printf_float+0x2c8>)
 800e134:	f04f 32ff 	mov.w	r2, #4294967295
 800e138:	f7f2 fd02 	bl	8000b40 <__aeabi_dcmple>
 800e13c:	bb30      	cbnz	r0, 800e18c <_printf_float+0xc0>
 800e13e:	2200      	movs	r2, #0
 800e140:	2300      	movs	r3, #0
 800e142:	4640      	mov	r0, r8
 800e144:	4649      	mov	r1, r9
 800e146:	f7f2 fcf1 	bl	8000b2c <__aeabi_dcmplt>
 800e14a:	b110      	cbz	r0, 800e152 <_printf_float+0x86>
 800e14c:	232d      	movs	r3, #45	@ 0x2d
 800e14e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e152:	4a91      	ldr	r2, [pc, #580]	@ (800e398 <_printf_float+0x2cc>)
 800e154:	4b91      	ldr	r3, [pc, #580]	@ (800e39c <_printf_float+0x2d0>)
 800e156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e15a:	bf8c      	ite	hi
 800e15c:	4690      	movhi	r8, r2
 800e15e:	4698      	movls	r8, r3
 800e160:	2303      	movs	r3, #3
 800e162:	6123      	str	r3, [r4, #16]
 800e164:	f02b 0304 	bic.w	r3, fp, #4
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	f04f 0900 	mov.w	r9, #0
 800e16e:	9700      	str	r7, [sp, #0]
 800e170:	4633      	mov	r3, r6
 800e172:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e174:	4621      	mov	r1, r4
 800e176:	4628      	mov	r0, r5
 800e178:	f000 f9d2 	bl	800e520 <_printf_common>
 800e17c:	3001      	adds	r0, #1
 800e17e:	f040 808d 	bne.w	800e29c <_printf_float+0x1d0>
 800e182:	f04f 30ff 	mov.w	r0, #4294967295
 800e186:	b00d      	add	sp, #52	@ 0x34
 800e188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18c:	4642      	mov	r2, r8
 800e18e:	464b      	mov	r3, r9
 800e190:	4640      	mov	r0, r8
 800e192:	4649      	mov	r1, r9
 800e194:	f7f2 fcf2 	bl	8000b7c <__aeabi_dcmpun>
 800e198:	b140      	cbz	r0, 800e1ac <_printf_float+0xe0>
 800e19a:	464b      	mov	r3, r9
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	bfbc      	itt	lt
 800e1a0:	232d      	movlt	r3, #45	@ 0x2d
 800e1a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e1a6:	4a7e      	ldr	r2, [pc, #504]	@ (800e3a0 <_printf_float+0x2d4>)
 800e1a8:	4b7e      	ldr	r3, [pc, #504]	@ (800e3a4 <_printf_float+0x2d8>)
 800e1aa:	e7d4      	b.n	800e156 <_printf_float+0x8a>
 800e1ac:	6863      	ldr	r3, [r4, #4]
 800e1ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e1b2:	9206      	str	r2, [sp, #24]
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	d13b      	bne.n	800e230 <_printf_float+0x164>
 800e1b8:	2306      	movs	r3, #6
 800e1ba:	6063      	str	r3, [r4, #4]
 800e1bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	6022      	str	r2, [r4, #0]
 800e1c4:	9303      	str	r3, [sp, #12]
 800e1c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800e1c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e1cc:	ab09      	add	r3, sp, #36	@ 0x24
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	6861      	ldr	r1, [r4, #4]
 800e1d2:	ec49 8b10 	vmov	d0, r8, r9
 800e1d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f7ff fed6 	bl	800df8c <__cvt>
 800e1e0:	9b06      	ldr	r3, [sp, #24]
 800e1e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e1e4:	2b47      	cmp	r3, #71	@ 0x47
 800e1e6:	4680      	mov	r8, r0
 800e1e8:	d129      	bne.n	800e23e <_printf_float+0x172>
 800e1ea:	1cc8      	adds	r0, r1, #3
 800e1ec:	db02      	blt.n	800e1f4 <_printf_float+0x128>
 800e1ee:	6863      	ldr	r3, [r4, #4]
 800e1f0:	4299      	cmp	r1, r3
 800e1f2:	dd41      	ble.n	800e278 <_printf_float+0x1ac>
 800e1f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e1f8:	fa5f fa8a 	uxtb.w	sl, sl
 800e1fc:	3901      	subs	r1, #1
 800e1fe:	4652      	mov	r2, sl
 800e200:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e204:	9109      	str	r1, [sp, #36]	@ 0x24
 800e206:	f7ff ff26 	bl	800e056 <__exponent>
 800e20a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e20c:	1813      	adds	r3, r2, r0
 800e20e:	2a01      	cmp	r2, #1
 800e210:	4681      	mov	r9, r0
 800e212:	6123      	str	r3, [r4, #16]
 800e214:	dc02      	bgt.n	800e21c <_printf_float+0x150>
 800e216:	6822      	ldr	r2, [r4, #0]
 800e218:	07d2      	lsls	r2, r2, #31
 800e21a:	d501      	bpl.n	800e220 <_printf_float+0x154>
 800e21c:	3301      	adds	r3, #1
 800e21e:	6123      	str	r3, [r4, #16]
 800e220:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e224:	2b00      	cmp	r3, #0
 800e226:	d0a2      	beq.n	800e16e <_printf_float+0xa2>
 800e228:	232d      	movs	r3, #45	@ 0x2d
 800e22a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e22e:	e79e      	b.n	800e16e <_printf_float+0xa2>
 800e230:	9a06      	ldr	r2, [sp, #24]
 800e232:	2a47      	cmp	r2, #71	@ 0x47
 800e234:	d1c2      	bne.n	800e1bc <_printf_float+0xf0>
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1c0      	bne.n	800e1bc <_printf_float+0xf0>
 800e23a:	2301      	movs	r3, #1
 800e23c:	e7bd      	b.n	800e1ba <_printf_float+0xee>
 800e23e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e242:	d9db      	bls.n	800e1fc <_printf_float+0x130>
 800e244:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e248:	d118      	bne.n	800e27c <_printf_float+0x1b0>
 800e24a:	2900      	cmp	r1, #0
 800e24c:	6863      	ldr	r3, [r4, #4]
 800e24e:	dd0b      	ble.n	800e268 <_printf_float+0x19c>
 800e250:	6121      	str	r1, [r4, #16]
 800e252:	b913      	cbnz	r3, 800e25a <_printf_float+0x18e>
 800e254:	6822      	ldr	r2, [r4, #0]
 800e256:	07d0      	lsls	r0, r2, #31
 800e258:	d502      	bpl.n	800e260 <_printf_float+0x194>
 800e25a:	3301      	adds	r3, #1
 800e25c:	440b      	add	r3, r1
 800e25e:	6123      	str	r3, [r4, #16]
 800e260:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e262:	f04f 0900 	mov.w	r9, #0
 800e266:	e7db      	b.n	800e220 <_printf_float+0x154>
 800e268:	b913      	cbnz	r3, 800e270 <_printf_float+0x1a4>
 800e26a:	6822      	ldr	r2, [r4, #0]
 800e26c:	07d2      	lsls	r2, r2, #31
 800e26e:	d501      	bpl.n	800e274 <_printf_float+0x1a8>
 800e270:	3302      	adds	r3, #2
 800e272:	e7f4      	b.n	800e25e <_printf_float+0x192>
 800e274:	2301      	movs	r3, #1
 800e276:	e7f2      	b.n	800e25e <_printf_float+0x192>
 800e278:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e27e:	4299      	cmp	r1, r3
 800e280:	db05      	blt.n	800e28e <_printf_float+0x1c2>
 800e282:	6823      	ldr	r3, [r4, #0]
 800e284:	6121      	str	r1, [r4, #16]
 800e286:	07d8      	lsls	r0, r3, #31
 800e288:	d5ea      	bpl.n	800e260 <_printf_float+0x194>
 800e28a:	1c4b      	adds	r3, r1, #1
 800e28c:	e7e7      	b.n	800e25e <_printf_float+0x192>
 800e28e:	2900      	cmp	r1, #0
 800e290:	bfd4      	ite	le
 800e292:	f1c1 0202 	rsble	r2, r1, #2
 800e296:	2201      	movgt	r2, #1
 800e298:	4413      	add	r3, r2
 800e29a:	e7e0      	b.n	800e25e <_printf_float+0x192>
 800e29c:	6823      	ldr	r3, [r4, #0]
 800e29e:	055a      	lsls	r2, r3, #21
 800e2a0:	d407      	bmi.n	800e2b2 <_printf_float+0x1e6>
 800e2a2:	6923      	ldr	r3, [r4, #16]
 800e2a4:	4642      	mov	r2, r8
 800e2a6:	4631      	mov	r1, r6
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	47b8      	blx	r7
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	d12b      	bne.n	800e308 <_printf_float+0x23c>
 800e2b0:	e767      	b.n	800e182 <_printf_float+0xb6>
 800e2b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e2b6:	f240 80dd 	bls.w	800e474 <_printf_float+0x3a8>
 800e2ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e2be:	2200      	movs	r2, #0
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	f7f2 fc29 	bl	8000b18 <__aeabi_dcmpeq>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d033      	beq.n	800e332 <_printf_float+0x266>
 800e2ca:	4a37      	ldr	r2, [pc, #220]	@ (800e3a8 <_printf_float+0x2dc>)
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	47b8      	blx	r7
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	f43f af54 	beq.w	800e182 <_printf_float+0xb6>
 800e2da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e2de:	4543      	cmp	r3, r8
 800e2e0:	db02      	blt.n	800e2e8 <_printf_float+0x21c>
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	07d8      	lsls	r0, r3, #31
 800e2e6:	d50f      	bpl.n	800e308 <_printf_float+0x23c>
 800e2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	47b8      	blx	r7
 800e2f2:	3001      	adds	r0, #1
 800e2f4:	f43f af45 	beq.w	800e182 <_printf_float+0xb6>
 800e2f8:	f04f 0900 	mov.w	r9, #0
 800e2fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800e300:	f104 0a1a 	add.w	sl, r4, #26
 800e304:	45c8      	cmp	r8, r9
 800e306:	dc09      	bgt.n	800e31c <_printf_float+0x250>
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	079b      	lsls	r3, r3, #30
 800e30c:	f100 8103 	bmi.w	800e516 <_printf_float+0x44a>
 800e310:	68e0      	ldr	r0, [r4, #12]
 800e312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e314:	4298      	cmp	r0, r3
 800e316:	bfb8      	it	lt
 800e318:	4618      	movlt	r0, r3
 800e31a:	e734      	b.n	800e186 <_printf_float+0xba>
 800e31c:	2301      	movs	r3, #1
 800e31e:	4652      	mov	r2, sl
 800e320:	4631      	mov	r1, r6
 800e322:	4628      	mov	r0, r5
 800e324:	47b8      	blx	r7
 800e326:	3001      	adds	r0, #1
 800e328:	f43f af2b 	beq.w	800e182 <_printf_float+0xb6>
 800e32c:	f109 0901 	add.w	r9, r9, #1
 800e330:	e7e8      	b.n	800e304 <_printf_float+0x238>
 800e332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e334:	2b00      	cmp	r3, #0
 800e336:	dc39      	bgt.n	800e3ac <_printf_float+0x2e0>
 800e338:	4a1b      	ldr	r2, [pc, #108]	@ (800e3a8 <_printf_float+0x2dc>)
 800e33a:	2301      	movs	r3, #1
 800e33c:	4631      	mov	r1, r6
 800e33e:	4628      	mov	r0, r5
 800e340:	47b8      	blx	r7
 800e342:	3001      	adds	r0, #1
 800e344:	f43f af1d 	beq.w	800e182 <_printf_float+0xb6>
 800e348:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e34c:	ea59 0303 	orrs.w	r3, r9, r3
 800e350:	d102      	bne.n	800e358 <_printf_float+0x28c>
 800e352:	6823      	ldr	r3, [r4, #0]
 800e354:	07d9      	lsls	r1, r3, #31
 800e356:	d5d7      	bpl.n	800e308 <_printf_float+0x23c>
 800e358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e35c:	4631      	mov	r1, r6
 800e35e:	4628      	mov	r0, r5
 800e360:	47b8      	blx	r7
 800e362:	3001      	adds	r0, #1
 800e364:	f43f af0d 	beq.w	800e182 <_printf_float+0xb6>
 800e368:	f04f 0a00 	mov.w	sl, #0
 800e36c:	f104 0b1a 	add.w	fp, r4, #26
 800e370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e372:	425b      	negs	r3, r3
 800e374:	4553      	cmp	r3, sl
 800e376:	dc01      	bgt.n	800e37c <_printf_float+0x2b0>
 800e378:	464b      	mov	r3, r9
 800e37a:	e793      	b.n	800e2a4 <_printf_float+0x1d8>
 800e37c:	2301      	movs	r3, #1
 800e37e:	465a      	mov	r2, fp
 800e380:	4631      	mov	r1, r6
 800e382:	4628      	mov	r0, r5
 800e384:	47b8      	blx	r7
 800e386:	3001      	adds	r0, #1
 800e388:	f43f aefb 	beq.w	800e182 <_printf_float+0xb6>
 800e38c:	f10a 0a01 	add.w	sl, sl, #1
 800e390:	e7ee      	b.n	800e370 <_printf_float+0x2a4>
 800e392:	bf00      	nop
 800e394:	7fefffff 	.word	0x7fefffff
 800e398:	080110d4 	.word	0x080110d4
 800e39c:	080110d0 	.word	0x080110d0
 800e3a0:	080110dc 	.word	0x080110dc
 800e3a4:	080110d8 	.word	0x080110d8
 800e3a8:	080110e0 	.word	0x080110e0
 800e3ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e3ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e3b2:	4553      	cmp	r3, sl
 800e3b4:	bfa8      	it	ge
 800e3b6:	4653      	movge	r3, sl
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	4699      	mov	r9, r3
 800e3bc:	dc36      	bgt.n	800e42c <_printf_float+0x360>
 800e3be:	f04f 0b00 	mov.w	fp, #0
 800e3c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3c6:	f104 021a 	add.w	r2, r4, #26
 800e3ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e3cc:	9306      	str	r3, [sp, #24]
 800e3ce:	eba3 0309 	sub.w	r3, r3, r9
 800e3d2:	455b      	cmp	r3, fp
 800e3d4:	dc31      	bgt.n	800e43a <_printf_float+0x36e>
 800e3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3d8:	459a      	cmp	sl, r3
 800e3da:	dc3a      	bgt.n	800e452 <_printf_float+0x386>
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	07da      	lsls	r2, r3, #31
 800e3e0:	d437      	bmi.n	800e452 <_printf_float+0x386>
 800e3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3e4:	ebaa 0903 	sub.w	r9, sl, r3
 800e3e8:	9b06      	ldr	r3, [sp, #24]
 800e3ea:	ebaa 0303 	sub.w	r3, sl, r3
 800e3ee:	4599      	cmp	r9, r3
 800e3f0:	bfa8      	it	ge
 800e3f2:	4699      	movge	r9, r3
 800e3f4:	f1b9 0f00 	cmp.w	r9, #0
 800e3f8:	dc33      	bgt.n	800e462 <_printf_float+0x396>
 800e3fa:	f04f 0800 	mov.w	r8, #0
 800e3fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e402:	f104 0b1a 	add.w	fp, r4, #26
 800e406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e408:	ebaa 0303 	sub.w	r3, sl, r3
 800e40c:	eba3 0309 	sub.w	r3, r3, r9
 800e410:	4543      	cmp	r3, r8
 800e412:	f77f af79 	ble.w	800e308 <_printf_float+0x23c>
 800e416:	2301      	movs	r3, #1
 800e418:	465a      	mov	r2, fp
 800e41a:	4631      	mov	r1, r6
 800e41c:	4628      	mov	r0, r5
 800e41e:	47b8      	blx	r7
 800e420:	3001      	adds	r0, #1
 800e422:	f43f aeae 	beq.w	800e182 <_printf_float+0xb6>
 800e426:	f108 0801 	add.w	r8, r8, #1
 800e42a:	e7ec      	b.n	800e406 <_printf_float+0x33a>
 800e42c:	4642      	mov	r2, r8
 800e42e:	4631      	mov	r1, r6
 800e430:	4628      	mov	r0, r5
 800e432:	47b8      	blx	r7
 800e434:	3001      	adds	r0, #1
 800e436:	d1c2      	bne.n	800e3be <_printf_float+0x2f2>
 800e438:	e6a3      	b.n	800e182 <_printf_float+0xb6>
 800e43a:	2301      	movs	r3, #1
 800e43c:	4631      	mov	r1, r6
 800e43e:	4628      	mov	r0, r5
 800e440:	9206      	str	r2, [sp, #24]
 800e442:	47b8      	blx	r7
 800e444:	3001      	adds	r0, #1
 800e446:	f43f ae9c 	beq.w	800e182 <_printf_float+0xb6>
 800e44a:	9a06      	ldr	r2, [sp, #24]
 800e44c:	f10b 0b01 	add.w	fp, fp, #1
 800e450:	e7bb      	b.n	800e3ca <_printf_float+0x2fe>
 800e452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e456:	4631      	mov	r1, r6
 800e458:	4628      	mov	r0, r5
 800e45a:	47b8      	blx	r7
 800e45c:	3001      	adds	r0, #1
 800e45e:	d1c0      	bne.n	800e3e2 <_printf_float+0x316>
 800e460:	e68f      	b.n	800e182 <_printf_float+0xb6>
 800e462:	9a06      	ldr	r2, [sp, #24]
 800e464:	464b      	mov	r3, r9
 800e466:	4442      	add	r2, r8
 800e468:	4631      	mov	r1, r6
 800e46a:	4628      	mov	r0, r5
 800e46c:	47b8      	blx	r7
 800e46e:	3001      	adds	r0, #1
 800e470:	d1c3      	bne.n	800e3fa <_printf_float+0x32e>
 800e472:	e686      	b.n	800e182 <_printf_float+0xb6>
 800e474:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e478:	f1ba 0f01 	cmp.w	sl, #1
 800e47c:	dc01      	bgt.n	800e482 <_printf_float+0x3b6>
 800e47e:	07db      	lsls	r3, r3, #31
 800e480:	d536      	bpl.n	800e4f0 <_printf_float+0x424>
 800e482:	2301      	movs	r3, #1
 800e484:	4642      	mov	r2, r8
 800e486:	4631      	mov	r1, r6
 800e488:	4628      	mov	r0, r5
 800e48a:	47b8      	blx	r7
 800e48c:	3001      	adds	r0, #1
 800e48e:	f43f ae78 	beq.w	800e182 <_printf_float+0xb6>
 800e492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e496:	4631      	mov	r1, r6
 800e498:	4628      	mov	r0, r5
 800e49a:	47b8      	blx	r7
 800e49c:	3001      	adds	r0, #1
 800e49e:	f43f ae70 	beq.w	800e182 <_printf_float+0xb6>
 800e4a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4ae:	f7f2 fb33 	bl	8000b18 <__aeabi_dcmpeq>
 800e4b2:	b9c0      	cbnz	r0, 800e4e6 <_printf_float+0x41a>
 800e4b4:	4653      	mov	r3, sl
 800e4b6:	f108 0201 	add.w	r2, r8, #1
 800e4ba:	4631      	mov	r1, r6
 800e4bc:	4628      	mov	r0, r5
 800e4be:	47b8      	blx	r7
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	d10c      	bne.n	800e4de <_printf_float+0x412>
 800e4c4:	e65d      	b.n	800e182 <_printf_float+0xb6>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	465a      	mov	r2, fp
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	47b8      	blx	r7
 800e4d0:	3001      	adds	r0, #1
 800e4d2:	f43f ae56 	beq.w	800e182 <_printf_float+0xb6>
 800e4d6:	f108 0801 	add.w	r8, r8, #1
 800e4da:	45d0      	cmp	r8, sl
 800e4dc:	dbf3      	blt.n	800e4c6 <_printf_float+0x3fa>
 800e4de:	464b      	mov	r3, r9
 800e4e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e4e4:	e6df      	b.n	800e2a6 <_printf_float+0x1da>
 800e4e6:	f04f 0800 	mov.w	r8, #0
 800e4ea:	f104 0b1a 	add.w	fp, r4, #26
 800e4ee:	e7f4      	b.n	800e4da <_printf_float+0x40e>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	4642      	mov	r2, r8
 800e4f4:	e7e1      	b.n	800e4ba <_printf_float+0x3ee>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	464a      	mov	r2, r9
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	47b8      	blx	r7
 800e500:	3001      	adds	r0, #1
 800e502:	f43f ae3e 	beq.w	800e182 <_printf_float+0xb6>
 800e506:	f108 0801 	add.w	r8, r8, #1
 800e50a:	68e3      	ldr	r3, [r4, #12]
 800e50c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e50e:	1a5b      	subs	r3, r3, r1
 800e510:	4543      	cmp	r3, r8
 800e512:	dcf0      	bgt.n	800e4f6 <_printf_float+0x42a>
 800e514:	e6fc      	b.n	800e310 <_printf_float+0x244>
 800e516:	f04f 0800 	mov.w	r8, #0
 800e51a:	f104 0919 	add.w	r9, r4, #25
 800e51e:	e7f4      	b.n	800e50a <_printf_float+0x43e>

0800e520 <_printf_common>:
 800e520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e524:	4616      	mov	r6, r2
 800e526:	4698      	mov	r8, r3
 800e528:	688a      	ldr	r2, [r1, #8]
 800e52a:	690b      	ldr	r3, [r1, #16]
 800e52c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e530:	4293      	cmp	r3, r2
 800e532:	bfb8      	it	lt
 800e534:	4613      	movlt	r3, r2
 800e536:	6033      	str	r3, [r6, #0]
 800e538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e53c:	4607      	mov	r7, r0
 800e53e:	460c      	mov	r4, r1
 800e540:	b10a      	cbz	r2, 800e546 <_printf_common+0x26>
 800e542:	3301      	adds	r3, #1
 800e544:	6033      	str	r3, [r6, #0]
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	0699      	lsls	r1, r3, #26
 800e54a:	bf42      	ittt	mi
 800e54c:	6833      	ldrmi	r3, [r6, #0]
 800e54e:	3302      	addmi	r3, #2
 800e550:	6033      	strmi	r3, [r6, #0]
 800e552:	6825      	ldr	r5, [r4, #0]
 800e554:	f015 0506 	ands.w	r5, r5, #6
 800e558:	d106      	bne.n	800e568 <_printf_common+0x48>
 800e55a:	f104 0a19 	add.w	sl, r4, #25
 800e55e:	68e3      	ldr	r3, [r4, #12]
 800e560:	6832      	ldr	r2, [r6, #0]
 800e562:	1a9b      	subs	r3, r3, r2
 800e564:	42ab      	cmp	r3, r5
 800e566:	dc26      	bgt.n	800e5b6 <_printf_common+0x96>
 800e568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e56c:	6822      	ldr	r2, [r4, #0]
 800e56e:	3b00      	subs	r3, #0
 800e570:	bf18      	it	ne
 800e572:	2301      	movne	r3, #1
 800e574:	0692      	lsls	r2, r2, #26
 800e576:	d42b      	bmi.n	800e5d0 <_printf_common+0xb0>
 800e578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e57c:	4641      	mov	r1, r8
 800e57e:	4638      	mov	r0, r7
 800e580:	47c8      	blx	r9
 800e582:	3001      	adds	r0, #1
 800e584:	d01e      	beq.n	800e5c4 <_printf_common+0xa4>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	6922      	ldr	r2, [r4, #16]
 800e58a:	f003 0306 	and.w	r3, r3, #6
 800e58e:	2b04      	cmp	r3, #4
 800e590:	bf02      	ittt	eq
 800e592:	68e5      	ldreq	r5, [r4, #12]
 800e594:	6833      	ldreq	r3, [r6, #0]
 800e596:	1aed      	subeq	r5, r5, r3
 800e598:	68a3      	ldr	r3, [r4, #8]
 800e59a:	bf0c      	ite	eq
 800e59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5a0:	2500      	movne	r5, #0
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	bfc4      	itt	gt
 800e5a6:	1a9b      	subgt	r3, r3, r2
 800e5a8:	18ed      	addgt	r5, r5, r3
 800e5aa:	2600      	movs	r6, #0
 800e5ac:	341a      	adds	r4, #26
 800e5ae:	42b5      	cmp	r5, r6
 800e5b0:	d11a      	bne.n	800e5e8 <_printf_common+0xc8>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	e008      	b.n	800e5c8 <_printf_common+0xa8>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	4652      	mov	r2, sl
 800e5ba:	4641      	mov	r1, r8
 800e5bc:	4638      	mov	r0, r7
 800e5be:	47c8      	blx	r9
 800e5c0:	3001      	adds	r0, #1
 800e5c2:	d103      	bne.n	800e5cc <_printf_common+0xac>
 800e5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	e7c6      	b.n	800e55e <_printf_common+0x3e>
 800e5d0:	18e1      	adds	r1, r4, r3
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	2030      	movs	r0, #48	@ 0x30
 800e5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e5da:	4422      	add	r2, r4
 800e5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e5e4:	3302      	adds	r3, #2
 800e5e6:	e7c7      	b.n	800e578 <_printf_common+0x58>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	4641      	mov	r1, r8
 800e5ee:	4638      	mov	r0, r7
 800e5f0:	47c8      	blx	r9
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	d0e6      	beq.n	800e5c4 <_printf_common+0xa4>
 800e5f6:	3601      	adds	r6, #1
 800e5f8:	e7d9      	b.n	800e5ae <_printf_common+0x8e>
	...

0800e5fc <_printf_i>:
 800e5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e600:	7e0f      	ldrb	r7, [r1, #24]
 800e602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e604:	2f78      	cmp	r7, #120	@ 0x78
 800e606:	4691      	mov	r9, r2
 800e608:	4680      	mov	r8, r0
 800e60a:	460c      	mov	r4, r1
 800e60c:	469a      	mov	sl, r3
 800e60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e612:	d807      	bhi.n	800e624 <_printf_i+0x28>
 800e614:	2f62      	cmp	r7, #98	@ 0x62
 800e616:	d80a      	bhi.n	800e62e <_printf_i+0x32>
 800e618:	2f00      	cmp	r7, #0
 800e61a:	f000 80d1 	beq.w	800e7c0 <_printf_i+0x1c4>
 800e61e:	2f58      	cmp	r7, #88	@ 0x58
 800e620:	f000 80b8 	beq.w	800e794 <_printf_i+0x198>
 800e624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e62c:	e03a      	b.n	800e6a4 <_printf_i+0xa8>
 800e62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e632:	2b15      	cmp	r3, #21
 800e634:	d8f6      	bhi.n	800e624 <_printf_i+0x28>
 800e636:	a101      	add	r1, pc, #4	@ (adr r1, 800e63c <_printf_i+0x40>)
 800e638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e63c:	0800e695 	.word	0x0800e695
 800e640:	0800e6a9 	.word	0x0800e6a9
 800e644:	0800e625 	.word	0x0800e625
 800e648:	0800e625 	.word	0x0800e625
 800e64c:	0800e625 	.word	0x0800e625
 800e650:	0800e625 	.word	0x0800e625
 800e654:	0800e6a9 	.word	0x0800e6a9
 800e658:	0800e625 	.word	0x0800e625
 800e65c:	0800e625 	.word	0x0800e625
 800e660:	0800e625 	.word	0x0800e625
 800e664:	0800e625 	.word	0x0800e625
 800e668:	0800e7a7 	.word	0x0800e7a7
 800e66c:	0800e6d3 	.word	0x0800e6d3
 800e670:	0800e761 	.word	0x0800e761
 800e674:	0800e625 	.word	0x0800e625
 800e678:	0800e625 	.word	0x0800e625
 800e67c:	0800e7c9 	.word	0x0800e7c9
 800e680:	0800e625 	.word	0x0800e625
 800e684:	0800e6d3 	.word	0x0800e6d3
 800e688:	0800e625 	.word	0x0800e625
 800e68c:	0800e625 	.word	0x0800e625
 800e690:	0800e769 	.word	0x0800e769
 800e694:	6833      	ldr	r3, [r6, #0]
 800e696:	1d1a      	adds	r2, r3, #4
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	6032      	str	r2, [r6, #0]
 800e69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	e09c      	b.n	800e7e2 <_printf_i+0x1e6>
 800e6a8:	6833      	ldr	r3, [r6, #0]
 800e6aa:	6820      	ldr	r0, [r4, #0]
 800e6ac:	1d19      	adds	r1, r3, #4
 800e6ae:	6031      	str	r1, [r6, #0]
 800e6b0:	0606      	lsls	r6, r0, #24
 800e6b2:	d501      	bpl.n	800e6b8 <_printf_i+0xbc>
 800e6b4:	681d      	ldr	r5, [r3, #0]
 800e6b6:	e003      	b.n	800e6c0 <_printf_i+0xc4>
 800e6b8:	0645      	lsls	r5, r0, #25
 800e6ba:	d5fb      	bpl.n	800e6b4 <_printf_i+0xb8>
 800e6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e6c0:	2d00      	cmp	r5, #0
 800e6c2:	da03      	bge.n	800e6cc <_printf_i+0xd0>
 800e6c4:	232d      	movs	r3, #45	@ 0x2d
 800e6c6:	426d      	negs	r5, r5
 800e6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6cc:	4858      	ldr	r0, [pc, #352]	@ (800e830 <_printf_i+0x234>)
 800e6ce:	230a      	movs	r3, #10
 800e6d0:	e011      	b.n	800e6f6 <_printf_i+0xfa>
 800e6d2:	6821      	ldr	r1, [r4, #0]
 800e6d4:	6833      	ldr	r3, [r6, #0]
 800e6d6:	0608      	lsls	r0, r1, #24
 800e6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e6dc:	d402      	bmi.n	800e6e4 <_printf_i+0xe8>
 800e6de:	0649      	lsls	r1, r1, #25
 800e6e0:	bf48      	it	mi
 800e6e2:	b2ad      	uxthmi	r5, r5
 800e6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e6e6:	4852      	ldr	r0, [pc, #328]	@ (800e830 <_printf_i+0x234>)
 800e6e8:	6033      	str	r3, [r6, #0]
 800e6ea:	bf14      	ite	ne
 800e6ec:	230a      	movne	r3, #10
 800e6ee:	2308      	moveq	r3, #8
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e6f6:	6866      	ldr	r6, [r4, #4]
 800e6f8:	60a6      	str	r6, [r4, #8]
 800e6fa:	2e00      	cmp	r6, #0
 800e6fc:	db05      	blt.n	800e70a <_printf_i+0x10e>
 800e6fe:	6821      	ldr	r1, [r4, #0]
 800e700:	432e      	orrs	r6, r5
 800e702:	f021 0104 	bic.w	r1, r1, #4
 800e706:	6021      	str	r1, [r4, #0]
 800e708:	d04b      	beq.n	800e7a2 <_printf_i+0x1a6>
 800e70a:	4616      	mov	r6, r2
 800e70c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e710:	fb03 5711 	mls	r7, r3, r1, r5
 800e714:	5dc7      	ldrb	r7, [r0, r7]
 800e716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e71a:	462f      	mov	r7, r5
 800e71c:	42bb      	cmp	r3, r7
 800e71e:	460d      	mov	r5, r1
 800e720:	d9f4      	bls.n	800e70c <_printf_i+0x110>
 800e722:	2b08      	cmp	r3, #8
 800e724:	d10b      	bne.n	800e73e <_printf_i+0x142>
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	07df      	lsls	r7, r3, #31
 800e72a:	d508      	bpl.n	800e73e <_printf_i+0x142>
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	6861      	ldr	r1, [r4, #4]
 800e730:	4299      	cmp	r1, r3
 800e732:	bfde      	ittt	le
 800e734:	2330      	movle	r3, #48	@ 0x30
 800e736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e73a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e73e:	1b92      	subs	r2, r2, r6
 800e740:	6122      	str	r2, [r4, #16]
 800e742:	f8cd a000 	str.w	sl, [sp]
 800e746:	464b      	mov	r3, r9
 800e748:	aa03      	add	r2, sp, #12
 800e74a:	4621      	mov	r1, r4
 800e74c:	4640      	mov	r0, r8
 800e74e:	f7ff fee7 	bl	800e520 <_printf_common>
 800e752:	3001      	adds	r0, #1
 800e754:	d14a      	bne.n	800e7ec <_printf_i+0x1f0>
 800e756:	f04f 30ff 	mov.w	r0, #4294967295
 800e75a:	b004      	add	sp, #16
 800e75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	f043 0320 	orr.w	r3, r3, #32
 800e766:	6023      	str	r3, [r4, #0]
 800e768:	4832      	ldr	r0, [pc, #200]	@ (800e834 <_printf_i+0x238>)
 800e76a:	2778      	movs	r7, #120	@ 0x78
 800e76c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e770:	6823      	ldr	r3, [r4, #0]
 800e772:	6831      	ldr	r1, [r6, #0]
 800e774:	061f      	lsls	r7, r3, #24
 800e776:	f851 5b04 	ldr.w	r5, [r1], #4
 800e77a:	d402      	bmi.n	800e782 <_printf_i+0x186>
 800e77c:	065f      	lsls	r7, r3, #25
 800e77e:	bf48      	it	mi
 800e780:	b2ad      	uxthmi	r5, r5
 800e782:	6031      	str	r1, [r6, #0]
 800e784:	07d9      	lsls	r1, r3, #31
 800e786:	bf44      	itt	mi
 800e788:	f043 0320 	orrmi.w	r3, r3, #32
 800e78c:	6023      	strmi	r3, [r4, #0]
 800e78e:	b11d      	cbz	r5, 800e798 <_printf_i+0x19c>
 800e790:	2310      	movs	r3, #16
 800e792:	e7ad      	b.n	800e6f0 <_printf_i+0xf4>
 800e794:	4826      	ldr	r0, [pc, #152]	@ (800e830 <_printf_i+0x234>)
 800e796:	e7e9      	b.n	800e76c <_printf_i+0x170>
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	f023 0320 	bic.w	r3, r3, #32
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	e7f6      	b.n	800e790 <_printf_i+0x194>
 800e7a2:	4616      	mov	r6, r2
 800e7a4:	e7bd      	b.n	800e722 <_printf_i+0x126>
 800e7a6:	6833      	ldr	r3, [r6, #0]
 800e7a8:	6825      	ldr	r5, [r4, #0]
 800e7aa:	6961      	ldr	r1, [r4, #20]
 800e7ac:	1d18      	adds	r0, r3, #4
 800e7ae:	6030      	str	r0, [r6, #0]
 800e7b0:	062e      	lsls	r6, r5, #24
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	d501      	bpl.n	800e7ba <_printf_i+0x1be>
 800e7b6:	6019      	str	r1, [r3, #0]
 800e7b8:	e002      	b.n	800e7c0 <_printf_i+0x1c4>
 800e7ba:	0668      	lsls	r0, r5, #25
 800e7bc:	d5fb      	bpl.n	800e7b6 <_printf_i+0x1ba>
 800e7be:	8019      	strh	r1, [r3, #0]
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	6123      	str	r3, [r4, #16]
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	e7bc      	b.n	800e742 <_printf_i+0x146>
 800e7c8:	6833      	ldr	r3, [r6, #0]
 800e7ca:	1d1a      	adds	r2, r3, #4
 800e7cc:	6032      	str	r2, [r6, #0]
 800e7ce:	681e      	ldr	r6, [r3, #0]
 800e7d0:	6862      	ldr	r2, [r4, #4]
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7f1 fd23 	bl	8000220 <memchr>
 800e7da:	b108      	cbz	r0, 800e7e0 <_printf_i+0x1e4>
 800e7dc:	1b80      	subs	r0, r0, r6
 800e7de:	6060      	str	r0, [r4, #4]
 800e7e0:	6863      	ldr	r3, [r4, #4]
 800e7e2:	6123      	str	r3, [r4, #16]
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7ea:	e7aa      	b.n	800e742 <_printf_i+0x146>
 800e7ec:	6923      	ldr	r3, [r4, #16]
 800e7ee:	4632      	mov	r2, r6
 800e7f0:	4649      	mov	r1, r9
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	47d0      	blx	sl
 800e7f6:	3001      	adds	r0, #1
 800e7f8:	d0ad      	beq.n	800e756 <_printf_i+0x15a>
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	079b      	lsls	r3, r3, #30
 800e7fe:	d413      	bmi.n	800e828 <_printf_i+0x22c>
 800e800:	68e0      	ldr	r0, [r4, #12]
 800e802:	9b03      	ldr	r3, [sp, #12]
 800e804:	4298      	cmp	r0, r3
 800e806:	bfb8      	it	lt
 800e808:	4618      	movlt	r0, r3
 800e80a:	e7a6      	b.n	800e75a <_printf_i+0x15e>
 800e80c:	2301      	movs	r3, #1
 800e80e:	4632      	mov	r2, r6
 800e810:	4649      	mov	r1, r9
 800e812:	4640      	mov	r0, r8
 800e814:	47d0      	blx	sl
 800e816:	3001      	adds	r0, #1
 800e818:	d09d      	beq.n	800e756 <_printf_i+0x15a>
 800e81a:	3501      	adds	r5, #1
 800e81c:	68e3      	ldr	r3, [r4, #12]
 800e81e:	9903      	ldr	r1, [sp, #12]
 800e820:	1a5b      	subs	r3, r3, r1
 800e822:	42ab      	cmp	r3, r5
 800e824:	dcf2      	bgt.n	800e80c <_printf_i+0x210>
 800e826:	e7eb      	b.n	800e800 <_printf_i+0x204>
 800e828:	2500      	movs	r5, #0
 800e82a:	f104 0619 	add.w	r6, r4, #25
 800e82e:	e7f5      	b.n	800e81c <_printf_i+0x220>
 800e830:	080110e2 	.word	0x080110e2
 800e834:	080110f3 	.word	0x080110f3

0800e838 <std>:
 800e838:	2300      	movs	r3, #0
 800e83a:	b510      	push	{r4, lr}
 800e83c:	4604      	mov	r4, r0
 800e83e:	e9c0 3300 	strd	r3, r3, [r0]
 800e842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e846:	6083      	str	r3, [r0, #8]
 800e848:	8181      	strh	r1, [r0, #12]
 800e84a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e84c:	81c2      	strh	r2, [r0, #14]
 800e84e:	6183      	str	r3, [r0, #24]
 800e850:	4619      	mov	r1, r3
 800e852:	2208      	movs	r2, #8
 800e854:	305c      	adds	r0, #92	@ 0x5c
 800e856:	f000 f915 	bl	800ea84 <memset>
 800e85a:	4b0d      	ldr	r3, [pc, #52]	@ (800e890 <std+0x58>)
 800e85c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e85e:	4b0d      	ldr	r3, [pc, #52]	@ (800e894 <std+0x5c>)
 800e860:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e862:	4b0d      	ldr	r3, [pc, #52]	@ (800e898 <std+0x60>)
 800e864:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e866:	4b0d      	ldr	r3, [pc, #52]	@ (800e89c <std+0x64>)
 800e868:	6323      	str	r3, [r4, #48]	@ 0x30
 800e86a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a0 <std+0x68>)
 800e86c:	6224      	str	r4, [r4, #32]
 800e86e:	429c      	cmp	r4, r3
 800e870:	d006      	beq.n	800e880 <std+0x48>
 800e872:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e876:	4294      	cmp	r4, r2
 800e878:	d002      	beq.n	800e880 <std+0x48>
 800e87a:	33d0      	adds	r3, #208	@ 0xd0
 800e87c:	429c      	cmp	r4, r3
 800e87e:	d105      	bne.n	800e88c <std+0x54>
 800e880:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e888:	f000 b9d6 	b.w	800ec38 <__retarget_lock_init_recursive>
 800e88c:	bd10      	pop	{r4, pc}
 800e88e:	bf00      	nop
 800e890:	0800e9bd 	.word	0x0800e9bd
 800e894:	0800e9df 	.word	0x0800e9df
 800e898:	0800ea17 	.word	0x0800ea17
 800e89c:	0800ea3b 	.word	0x0800ea3b
 800e8a0:	2000a588 	.word	0x2000a588

0800e8a4 <stdio_exit_handler>:
 800e8a4:	4a02      	ldr	r2, [pc, #8]	@ (800e8b0 <stdio_exit_handler+0xc>)
 800e8a6:	4903      	ldr	r1, [pc, #12]	@ (800e8b4 <stdio_exit_handler+0x10>)
 800e8a8:	4803      	ldr	r0, [pc, #12]	@ (800e8b8 <stdio_exit_handler+0x14>)
 800e8aa:	f000 b869 	b.w	800e980 <_fwalk_sglue>
 800e8ae:	bf00      	nop
 800e8b0:	20000188 	.word	0x20000188
 800e8b4:	080105bd 	.word	0x080105bd
 800e8b8:	20000198 	.word	0x20000198

0800e8bc <cleanup_stdio>:
 800e8bc:	6841      	ldr	r1, [r0, #4]
 800e8be:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f0 <cleanup_stdio+0x34>)
 800e8c0:	4299      	cmp	r1, r3
 800e8c2:	b510      	push	{r4, lr}
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	d001      	beq.n	800e8cc <cleanup_stdio+0x10>
 800e8c8:	f001 fe78 	bl	80105bc <_fflush_r>
 800e8cc:	68a1      	ldr	r1, [r4, #8]
 800e8ce:	4b09      	ldr	r3, [pc, #36]	@ (800e8f4 <cleanup_stdio+0x38>)
 800e8d0:	4299      	cmp	r1, r3
 800e8d2:	d002      	beq.n	800e8da <cleanup_stdio+0x1e>
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f001 fe71 	bl	80105bc <_fflush_r>
 800e8da:	68e1      	ldr	r1, [r4, #12]
 800e8dc:	4b06      	ldr	r3, [pc, #24]	@ (800e8f8 <cleanup_stdio+0x3c>)
 800e8de:	4299      	cmp	r1, r3
 800e8e0:	d004      	beq.n	800e8ec <cleanup_stdio+0x30>
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8e8:	f001 be68 	b.w	80105bc <_fflush_r>
 800e8ec:	bd10      	pop	{r4, pc}
 800e8ee:	bf00      	nop
 800e8f0:	2000a588 	.word	0x2000a588
 800e8f4:	2000a5f0 	.word	0x2000a5f0
 800e8f8:	2000a658 	.word	0x2000a658

0800e8fc <global_stdio_init.part.0>:
 800e8fc:	b510      	push	{r4, lr}
 800e8fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e92c <global_stdio_init.part.0+0x30>)
 800e900:	4c0b      	ldr	r4, [pc, #44]	@ (800e930 <global_stdio_init.part.0+0x34>)
 800e902:	4a0c      	ldr	r2, [pc, #48]	@ (800e934 <global_stdio_init.part.0+0x38>)
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	4620      	mov	r0, r4
 800e908:	2200      	movs	r2, #0
 800e90a:	2104      	movs	r1, #4
 800e90c:	f7ff ff94 	bl	800e838 <std>
 800e910:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e914:	2201      	movs	r2, #1
 800e916:	2109      	movs	r1, #9
 800e918:	f7ff ff8e 	bl	800e838 <std>
 800e91c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e920:	2202      	movs	r2, #2
 800e922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e926:	2112      	movs	r1, #18
 800e928:	f7ff bf86 	b.w	800e838 <std>
 800e92c:	2000a6c0 	.word	0x2000a6c0
 800e930:	2000a588 	.word	0x2000a588
 800e934:	0800e8a5 	.word	0x0800e8a5

0800e938 <__sfp_lock_acquire>:
 800e938:	4801      	ldr	r0, [pc, #4]	@ (800e940 <__sfp_lock_acquire+0x8>)
 800e93a:	f000 b97e 	b.w	800ec3a <__retarget_lock_acquire_recursive>
 800e93e:	bf00      	nop
 800e940:	2000a6c9 	.word	0x2000a6c9

0800e944 <__sfp_lock_release>:
 800e944:	4801      	ldr	r0, [pc, #4]	@ (800e94c <__sfp_lock_release+0x8>)
 800e946:	f000 b979 	b.w	800ec3c <__retarget_lock_release_recursive>
 800e94a:	bf00      	nop
 800e94c:	2000a6c9 	.word	0x2000a6c9

0800e950 <__sinit>:
 800e950:	b510      	push	{r4, lr}
 800e952:	4604      	mov	r4, r0
 800e954:	f7ff fff0 	bl	800e938 <__sfp_lock_acquire>
 800e958:	6a23      	ldr	r3, [r4, #32]
 800e95a:	b11b      	cbz	r3, 800e964 <__sinit+0x14>
 800e95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e960:	f7ff bff0 	b.w	800e944 <__sfp_lock_release>
 800e964:	4b04      	ldr	r3, [pc, #16]	@ (800e978 <__sinit+0x28>)
 800e966:	6223      	str	r3, [r4, #32]
 800e968:	4b04      	ldr	r3, [pc, #16]	@ (800e97c <__sinit+0x2c>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1f5      	bne.n	800e95c <__sinit+0xc>
 800e970:	f7ff ffc4 	bl	800e8fc <global_stdio_init.part.0>
 800e974:	e7f2      	b.n	800e95c <__sinit+0xc>
 800e976:	bf00      	nop
 800e978:	0800e8bd 	.word	0x0800e8bd
 800e97c:	2000a6c0 	.word	0x2000a6c0

0800e980 <_fwalk_sglue>:
 800e980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e984:	4607      	mov	r7, r0
 800e986:	4688      	mov	r8, r1
 800e988:	4614      	mov	r4, r2
 800e98a:	2600      	movs	r6, #0
 800e98c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e990:	f1b9 0901 	subs.w	r9, r9, #1
 800e994:	d505      	bpl.n	800e9a2 <_fwalk_sglue+0x22>
 800e996:	6824      	ldr	r4, [r4, #0]
 800e998:	2c00      	cmp	r4, #0
 800e99a:	d1f7      	bne.n	800e98c <_fwalk_sglue+0xc>
 800e99c:	4630      	mov	r0, r6
 800e99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9a2:	89ab      	ldrh	r3, [r5, #12]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d907      	bls.n	800e9b8 <_fwalk_sglue+0x38>
 800e9a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	d003      	beq.n	800e9b8 <_fwalk_sglue+0x38>
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	4638      	mov	r0, r7
 800e9b4:	47c0      	blx	r8
 800e9b6:	4306      	orrs	r6, r0
 800e9b8:	3568      	adds	r5, #104	@ 0x68
 800e9ba:	e7e9      	b.n	800e990 <_fwalk_sglue+0x10>

0800e9bc <__sread>:
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	460c      	mov	r4, r1
 800e9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c4:	f000 f8ea 	bl	800eb9c <_read_r>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	bfab      	itete	ge
 800e9cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e9ce:	89a3      	ldrhlt	r3, [r4, #12]
 800e9d0:	181b      	addge	r3, r3, r0
 800e9d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e9d6:	bfac      	ite	ge
 800e9d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e9da:	81a3      	strhlt	r3, [r4, #12]
 800e9dc:	bd10      	pop	{r4, pc}

0800e9de <__swrite>:
 800e9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e2:	461f      	mov	r7, r3
 800e9e4:	898b      	ldrh	r3, [r1, #12]
 800e9e6:	05db      	lsls	r3, r3, #23
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	4616      	mov	r6, r2
 800e9ee:	d505      	bpl.n	800e9fc <__swrite+0x1e>
 800e9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f4:	2302      	movs	r3, #2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f000 f8be 	bl	800eb78 <_lseek_r>
 800e9fc:	89a3      	ldrh	r3, [r4, #12]
 800e9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea06:	81a3      	strh	r3, [r4, #12]
 800ea08:	4632      	mov	r2, r6
 800ea0a:	463b      	mov	r3, r7
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea12:	f000 b8d5 	b.w	800ebc0 <_write_r>

0800ea16 <__sseek>:
 800ea16:	b510      	push	{r4, lr}
 800ea18:	460c      	mov	r4, r1
 800ea1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1e:	f000 f8ab 	bl	800eb78 <_lseek_r>
 800ea22:	1c43      	adds	r3, r0, #1
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	bf15      	itete	ne
 800ea28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea32:	81a3      	strheq	r3, [r4, #12]
 800ea34:	bf18      	it	ne
 800ea36:	81a3      	strhne	r3, [r4, #12]
 800ea38:	bd10      	pop	{r4, pc}

0800ea3a <__sclose>:
 800ea3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea3e:	f000 b82d 	b.w	800ea9c <_close_r>
	...

0800ea44 <_vsiprintf_r>:
 800ea44:	b510      	push	{r4, lr}
 800ea46:	b09a      	sub	sp, #104	@ 0x68
 800ea48:	2400      	movs	r4, #0
 800ea4a:	9100      	str	r1, [sp, #0]
 800ea4c:	9104      	str	r1, [sp, #16]
 800ea4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ea52:	9105      	str	r1, [sp, #20]
 800ea54:	9102      	str	r1, [sp, #8]
 800ea56:	4905      	ldr	r1, [pc, #20]	@ (800ea6c <_vsiprintf_r+0x28>)
 800ea58:	9103      	str	r1, [sp, #12]
 800ea5a:	4669      	mov	r1, sp
 800ea5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea5e:	f001 fc2d 	bl	80102bc <_svfiprintf_r>
 800ea62:	9b00      	ldr	r3, [sp, #0]
 800ea64:	701c      	strb	r4, [r3, #0]
 800ea66:	b01a      	add	sp, #104	@ 0x68
 800ea68:	bd10      	pop	{r4, pc}
 800ea6a:	bf00      	nop
 800ea6c:	ffff0208 	.word	0xffff0208

0800ea70 <vsiprintf>:
 800ea70:	4613      	mov	r3, r2
 800ea72:	460a      	mov	r2, r1
 800ea74:	4601      	mov	r1, r0
 800ea76:	4802      	ldr	r0, [pc, #8]	@ (800ea80 <vsiprintf+0x10>)
 800ea78:	6800      	ldr	r0, [r0, #0]
 800ea7a:	f7ff bfe3 	b.w	800ea44 <_vsiprintf_r>
 800ea7e:	bf00      	nop
 800ea80:	20000194 	.word	0x20000194

0800ea84 <memset>:
 800ea84:	4402      	add	r2, r0
 800ea86:	4603      	mov	r3, r0
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d100      	bne.n	800ea8e <memset+0xa>
 800ea8c:	4770      	bx	lr
 800ea8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ea92:	e7f9      	b.n	800ea88 <memset+0x4>

0800ea94 <_localeconv_r>:
 800ea94:	4800      	ldr	r0, [pc, #0]	@ (800ea98 <_localeconv_r+0x4>)
 800ea96:	4770      	bx	lr
 800ea98:	200002d4 	.word	0x200002d4

0800ea9c <_close_r>:
 800ea9c:	b538      	push	{r3, r4, r5, lr}
 800ea9e:	4d06      	ldr	r5, [pc, #24]	@ (800eab8 <_close_r+0x1c>)
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	4608      	mov	r0, r1
 800eaa6:	602b      	str	r3, [r5, #0]
 800eaa8:	f7f3 f970 	bl	8001d8c <_close>
 800eaac:	1c43      	adds	r3, r0, #1
 800eaae:	d102      	bne.n	800eab6 <_close_r+0x1a>
 800eab0:	682b      	ldr	r3, [r5, #0]
 800eab2:	b103      	cbz	r3, 800eab6 <_close_r+0x1a>
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	bd38      	pop	{r3, r4, r5, pc}
 800eab8:	2000a6c4 	.word	0x2000a6c4

0800eabc <_reclaim_reent>:
 800eabc:	4b2d      	ldr	r3, [pc, #180]	@ (800eb74 <_reclaim_reent+0xb8>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4283      	cmp	r3, r0
 800eac2:	b570      	push	{r4, r5, r6, lr}
 800eac4:	4604      	mov	r4, r0
 800eac6:	d053      	beq.n	800eb70 <_reclaim_reent+0xb4>
 800eac8:	69c3      	ldr	r3, [r0, #28]
 800eaca:	b31b      	cbz	r3, 800eb14 <_reclaim_reent+0x58>
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	b163      	cbz	r3, 800eaea <_reclaim_reent+0x2e>
 800ead0:	2500      	movs	r5, #0
 800ead2:	69e3      	ldr	r3, [r4, #28]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	5959      	ldr	r1, [r3, r5]
 800ead8:	b9b1      	cbnz	r1, 800eb08 <_reclaim_reent+0x4c>
 800eada:	3504      	adds	r5, #4
 800eadc:	2d80      	cmp	r5, #128	@ 0x80
 800eade:	d1f8      	bne.n	800ead2 <_reclaim_reent+0x16>
 800eae0:	69e3      	ldr	r3, [r4, #28]
 800eae2:	4620      	mov	r0, r4
 800eae4:	68d9      	ldr	r1, [r3, #12]
 800eae6:	f000 ff13 	bl	800f910 <_free_r>
 800eaea:	69e3      	ldr	r3, [r4, #28]
 800eaec:	6819      	ldr	r1, [r3, #0]
 800eaee:	b111      	cbz	r1, 800eaf6 <_reclaim_reent+0x3a>
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f000 ff0d 	bl	800f910 <_free_r>
 800eaf6:	69e3      	ldr	r3, [r4, #28]
 800eaf8:	689d      	ldr	r5, [r3, #8]
 800eafa:	b15d      	cbz	r5, 800eb14 <_reclaim_reent+0x58>
 800eafc:	4629      	mov	r1, r5
 800eafe:	4620      	mov	r0, r4
 800eb00:	682d      	ldr	r5, [r5, #0]
 800eb02:	f000 ff05 	bl	800f910 <_free_r>
 800eb06:	e7f8      	b.n	800eafa <_reclaim_reent+0x3e>
 800eb08:	680e      	ldr	r6, [r1, #0]
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f000 ff00 	bl	800f910 <_free_r>
 800eb10:	4631      	mov	r1, r6
 800eb12:	e7e1      	b.n	800ead8 <_reclaim_reent+0x1c>
 800eb14:	6961      	ldr	r1, [r4, #20]
 800eb16:	b111      	cbz	r1, 800eb1e <_reclaim_reent+0x62>
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f000 fef9 	bl	800f910 <_free_r>
 800eb1e:	69e1      	ldr	r1, [r4, #28]
 800eb20:	b111      	cbz	r1, 800eb28 <_reclaim_reent+0x6c>
 800eb22:	4620      	mov	r0, r4
 800eb24:	f000 fef4 	bl	800f910 <_free_r>
 800eb28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800eb2a:	b111      	cbz	r1, 800eb32 <_reclaim_reent+0x76>
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f000 feef 	bl	800f910 <_free_r>
 800eb32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb34:	b111      	cbz	r1, 800eb3c <_reclaim_reent+0x80>
 800eb36:	4620      	mov	r0, r4
 800eb38:	f000 feea 	bl	800f910 <_free_r>
 800eb3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800eb3e:	b111      	cbz	r1, 800eb46 <_reclaim_reent+0x8a>
 800eb40:	4620      	mov	r0, r4
 800eb42:	f000 fee5 	bl	800f910 <_free_r>
 800eb46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eb48:	b111      	cbz	r1, 800eb50 <_reclaim_reent+0x94>
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f000 fee0 	bl	800f910 <_free_r>
 800eb50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800eb52:	b111      	cbz	r1, 800eb5a <_reclaim_reent+0x9e>
 800eb54:	4620      	mov	r0, r4
 800eb56:	f000 fedb 	bl	800f910 <_free_r>
 800eb5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eb5c:	b111      	cbz	r1, 800eb64 <_reclaim_reent+0xa8>
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f000 fed6 	bl	800f910 <_free_r>
 800eb64:	6a23      	ldr	r3, [r4, #32]
 800eb66:	b11b      	cbz	r3, 800eb70 <_reclaim_reent+0xb4>
 800eb68:	4620      	mov	r0, r4
 800eb6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb6e:	4718      	bx	r3
 800eb70:	bd70      	pop	{r4, r5, r6, pc}
 800eb72:	bf00      	nop
 800eb74:	20000194 	.word	0x20000194

0800eb78 <_lseek_r>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	4d07      	ldr	r5, [pc, #28]	@ (800eb98 <_lseek_r+0x20>)
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	4608      	mov	r0, r1
 800eb80:	4611      	mov	r1, r2
 800eb82:	2200      	movs	r2, #0
 800eb84:	602a      	str	r2, [r5, #0]
 800eb86:	461a      	mov	r2, r3
 800eb88:	f7f3 f927 	bl	8001dda <_lseek>
 800eb8c:	1c43      	adds	r3, r0, #1
 800eb8e:	d102      	bne.n	800eb96 <_lseek_r+0x1e>
 800eb90:	682b      	ldr	r3, [r5, #0]
 800eb92:	b103      	cbz	r3, 800eb96 <_lseek_r+0x1e>
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	bd38      	pop	{r3, r4, r5, pc}
 800eb98:	2000a6c4 	.word	0x2000a6c4

0800eb9c <_read_r>:
 800eb9c:	b538      	push	{r3, r4, r5, lr}
 800eb9e:	4d07      	ldr	r5, [pc, #28]	@ (800ebbc <_read_r+0x20>)
 800eba0:	4604      	mov	r4, r0
 800eba2:	4608      	mov	r0, r1
 800eba4:	4611      	mov	r1, r2
 800eba6:	2200      	movs	r2, #0
 800eba8:	602a      	str	r2, [r5, #0]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	f7f3 f8b5 	bl	8001d1a <_read>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_read_r+0x1e>
 800ebb4:	682b      	ldr	r3, [r5, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_read_r+0x1e>
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	2000a6c4 	.word	0x2000a6c4

0800ebc0 <_write_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	4d07      	ldr	r5, [pc, #28]	@ (800ebe0 <_write_r+0x20>)
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	4608      	mov	r0, r1
 800ebc8:	4611      	mov	r1, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	602a      	str	r2, [r5, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f7f3 f8c0 	bl	8001d54 <_write>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_write_r+0x1e>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_write_r+0x1e>
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	2000a6c4 	.word	0x2000a6c4

0800ebe4 <__errno>:
 800ebe4:	4b01      	ldr	r3, [pc, #4]	@ (800ebec <__errno+0x8>)
 800ebe6:	6818      	ldr	r0, [r3, #0]
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	20000194 	.word	0x20000194

0800ebf0 <__libc_init_array>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	4d0d      	ldr	r5, [pc, #52]	@ (800ec28 <__libc_init_array+0x38>)
 800ebf4:	4c0d      	ldr	r4, [pc, #52]	@ (800ec2c <__libc_init_array+0x3c>)
 800ebf6:	1b64      	subs	r4, r4, r5
 800ebf8:	10a4      	asrs	r4, r4, #2
 800ebfa:	2600      	movs	r6, #0
 800ebfc:	42a6      	cmp	r6, r4
 800ebfe:	d109      	bne.n	800ec14 <__libc_init_array+0x24>
 800ec00:	4d0b      	ldr	r5, [pc, #44]	@ (800ec30 <__libc_init_array+0x40>)
 800ec02:	4c0c      	ldr	r4, [pc, #48]	@ (800ec34 <__libc_init_array+0x44>)
 800ec04:	f002 f86a 	bl	8010cdc <_init>
 800ec08:	1b64      	subs	r4, r4, r5
 800ec0a:	10a4      	asrs	r4, r4, #2
 800ec0c:	2600      	movs	r6, #0
 800ec0e:	42a6      	cmp	r6, r4
 800ec10:	d105      	bne.n	800ec1e <__libc_init_array+0x2e>
 800ec12:	bd70      	pop	{r4, r5, r6, pc}
 800ec14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec18:	4798      	blx	r3
 800ec1a:	3601      	adds	r6, #1
 800ec1c:	e7ee      	b.n	800ebfc <__libc_init_array+0xc>
 800ec1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec22:	4798      	blx	r3
 800ec24:	3601      	adds	r6, #1
 800ec26:	e7f2      	b.n	800ec0e <__libc_init_array+0x1e>
 800ec28:	0801144c 	.word	0x0801144c
 800ec2c:	0801144c 	.word	0x0801144c
 800ec30:	0801144c 	.word	0x0801144c
 800ec34:	08011450 	.word	0x08011450

0800ec38 <__retarget_lock_init_recursive>:
 800ec38:	4770      	bx	lr

0800ec3a <__retarget_lock_acquire_recursive>:
 800ec3a:	4770      	bx	lr

0800ec3c <__retarget_lock_release_recursive>:
 800ec3c:	4770      	bx	lr

0800ec3e <memcpy>:
 800ec3e:	440a      	add	r2, r1
 800ec40:	4291      	cmp	r1, r2
 800ec42:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec46:	d100      	bne.n	800ec4a <memcpy+0xc>
 800ec48:	4770      	bx	lr
 800ec4a:	b510      	push	{r4, lr}
 800ec4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec54:	4291      	cmp	r1, r2
 800ec56:	d1f9      	bne.n	800ec4c <memcpy+0xe>
 800ec58:	bd10      	pop	{r4, pc}

0800ec5a <quorem>:
 800ec5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5e:	6903      	ldr	r3, [r0, #16]
 800ec60:	690c      	ldr	r4, [r1, #16]
 800ec62:	42a3      	cmp	r3, r4
 800ec64:	4607      	mov	r7, r0
 800ec66:	db7e      	blt.n	800ed66 <quorem+0x10c>
 800ec68:	3c01      	subs	r4, #1
 800ec6a:	f101 0814 	add.w	r8, r1, #20
 800ec6e:	00a3      	lsls	r3, r4, #2
 800ec70:	f100 0514 	add.w	r5, r0, #20
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec84:	3301      	adds	r3, #1
 800ec86:	429a      	cmp	r2, r3
 800ec88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec90:	d32e      	bcc.n	800ecf0 <quorem+0x96>
 800ec92:	f04f 0a00 	mov.w	sl, #0
 800ec96:	46c4      	mov	ip, r8
 800ec98:	46ae      	mov	lr, r5
 800ec9a:	46d3      	mov	fp, sl
 800ec9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eca0:	b298      	uxth	r0, r3
 800eca2:	fb06 a000 	mla	r0, r6, r0, sl
 800eca6:	0c02      	lsrs	r2, r0, #16
 800eca8:	0c1b      	lsrs	r3, r3, #16
 800ecaa:	fb06 2303 	mla	r3, r6, r3, r2
 800ecae:	f8de 2000 	ldr.w	r2, [lr]
 800ecb2:	b280      	uxth	r0, r0
 800ecb4:	b292      	uxth	r2, r2
 800ecb6:	1a12      	subs	r2, r2, r0
 800ecb8:	445a      	add	r2, fp
 800ecba:	f8de 0000 	ldr.w	r0, [lr]
 800ecbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ecc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eccc:	b292      	uxth	r2, r2
 800ecce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ecd2:	45e1      	cmp	r9, ip
 800ecd4:	f84e 2b04 	str.w	r2, [lr], #4
 800ecd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ecdc:	d2de      	bcs.n	800ec9c <quorem+0x42>
 800ecde:	9b00      	ldr	r3, [sp, #0]
 800ece0:	58eb      	ldr	r3, [r5, r3]
 800ece2:	b92b      	cbnz	r3, 800ecf0 <quorem+0x96>
 800ece4:	9b01      	ldr	r3, [sp, #4]
 800ece6:	3b04      	subs	r3, #4
 800ece8:	429d      	cmp	r5, r3
 800ecea:	461a      	mov	r2, r3
 800ecec:	d32f      	bcc.n	800ed4e <quorem+0xf4>
 800ecee:	613c      	str	r4, [r7, #16]
 800ecf0:	4638      	mov	r0, r7
 800ecf2:	f001 f97f 	bl	800fff4 <__mcmp>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	db25      	blt.n	800ed46 <quorem+0xec>
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed02:	f8d1 c000 	ldr.w	ip, [r1]
 800ed06:	fa1f fe82 	uxth.w	lr, r2
 800ed0a:	fa1f f38c 	uxth.w	r3, ip
 800ed0e:	eba3 030e 	sub.w	r3, r3, lr
 800ed12:	4403      	add	r3, r0
 800ed14:	0c12      	lsrs	r2, r2, #16
 800ed16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ed1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed24:	45c1      	cmp	r9, r8
 800ed26:	f841 3b04 	str.w	r3, [r1], #4
 800ed2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed2e:	d2e6      	bcs.n	800ecfe <quorem+0xa4>
 800ed30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed38:	b922      	cbnz	r2, 800ed44 <quorem+0xea>
 800ed3a:	3b04      	subs	r3, #4
 800ed3c:	429d      	cmp	r5, r3
 800ed3e:	461a      	mov	r2, r3
 800ed40:	d30b      	bcc.n	800ed5a <quorem+0x100>
 800ed42:	613c      	str	r4, [r7, #16]
 800ed44:	3601      	adds	r6, #1
 800ed46:	4630      	mov	r0, r6
 800ed48:	b003      	add	sp, #12
 800ed4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4e:	6812      	ldr	r2, [r2, #0]
 800ed50:	3b04      	subs	r3, #4
 800ed52:	2a00      	cmp	r2, #0
 800ed54:	d1cb      	bne.n	800ecee <quorem+0x94>
 800ed56:	3c01      	subs	r4, #1
 800ed58:	e7c6      	b.n	800ece8 <quorem+0x8e>
 800ed5a:	6812      	ldr	r2, [r2, #0]
 800ed5c:	3b04      	subs	r3, #4
 800ed5e:	2a00      	cmp	r2, #0
 800ed60:	d1ef      	bne.n	800ed42 <quorem+0xe8>
 800ed62:	3c01      	subs	r4, #1
 800ed64:	e7ea      	b.n	800ed3c <quorem+0xe2>
 800ed66:	2000      	movs	r0, #0
 800ed68:	e7ee      	b.n	800ed48 <quorem+0xee>
 800ed6a:	0000      	movs	r0, r0
 800ed6c:	0000      	movs	r0, r0
	...

0800ed70 <_dtoa_r>:
 800ed70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed74:	69c7      	ldr	r7, [r0, #28]
 800ed76:	b097      	sub	sp, #92	@ 0x5c
 800ed78:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ed7c:	ec55 4b10 	vmov	r4, r5, d0
 800ed80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ed82:	9107      	str	r1, [sp, #28]
 800ed84:	4681      	mov	r9, r0
 800ed86:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed88:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed8a:	b97f      	cbnz	r7, 800edac <_dtoa_r+0x3c>
 800ed8c:	2010      	movs	r0, #16
 800ed8e:	f000 fe09 	bl	800f9a4 <malloc>
 800ed92:	4602      	mov	r2, r0
 800ed94:	f8c9 001c 	str.w	r0, [r9, #28]
 800ed98:	b920      	cbnz	r0, 800eda4 <_dtoa_r+0x34>
 800ed9a:	4ba9      	ldr	r3, [pc, #676]	@ (800f040 <_dtoa_r+0x2d0>)
 800ed9c:	21ef      	movs	r1, #239	@ 0xef
 800ed9e:	48a9      	ldr	r0, [pc, #676]	@ (800f044 <_dtoa_r+0x2d4>)
 800eda0:	f001 fc5e 	bl	8010660 <__assert_func>
 800eda4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eda8:	6007      	str	r7, [r0, #0]
 800edaa:	60c7      	str	r7, [r0, #12]
 800edac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800edb0:	6819      	ldr	r1, [r3, #0]
 800edb2:	b159      	cbz	r1, 800edcc <_dtoa_r+0x5c>
 800edb4:	685a      	ldr	r2, [r3, #4]
 800edb6:	604a      	str	r2, [r1, #4]
 800edb8:	2301      	movs	r3, #1
 800edba:	4093      	lsls	r3, r2
 800edbc:	608b      	str	r3, [r1, #8]
 800edbe:	4648      	mov	r0, r9
 800edc0:	f000 fee6 	bl	800fb90 <_Bfree>
 800edc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800edc8:	2200      	movs	r2, #0
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	1e2b      	subs	r3, r5, #0
 800edce:	bfb9      	ittee	lt
 800edd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800edd4:	9305      	strlt	r3, [sp, #20]
 800edd6:	2300      	movge	r3, #0
 800edd8:	6033      	strge	r3, [r6, #0]
 800edda:	9f05      	ldr	r7, [sp, #20]
 800eddc:	4b9a      	ldr	r3, [pc, #616]	@ (800f048 <_dtoa_r+0x2d8>)
 800edde:	bfbc      	itt	lt
 800ede0:	2201      	movlt	r2, #1
 800ede2:	6032      	strlt	r2, [r6, #0]
 800ede4:	43bb      	bics	r3, r7
 800ede6:	d112      	bne.n	800ee0e <_dtoa_r+0x9e>
 800ede8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800edea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800edf4:	4323      	orrs	r3, r4
 800edf6:	f000 855a 	beq.w	800f8ae <_dtoa_r+0xb3e>
 800edfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800edfc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f05c <_dtoa_r+0x2ec>
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 855c 	beq.w	800f8be <_dtoa_r+0xb4e>
 800ee06:	f10a 0303 	add.w	r3, sl, #3
 800ee0a:	f000 bd56 	b.w	800f8ba <_dtoa_r+0xb4a>
 800ee0e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ee12:	2200      	movs	r2, #0
 800ee14:	ec51 0b17 	vmov	r0, r1, d7
 800ee18:	2300      	movs	r3, #0
 800ee1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ee1e:	f7f1 fe7b 	bl	8000b18 <__aeabi_dcmpeq>
 800ee22:	4680      	mov	r8, r0
 800ee24:	b158      	cbz	r0, 800ee3e <_dtoa_r+0xce>
 800ee26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ee28:	2301      	movs	r3, #1
 800ee2a:	6013      	str	r3, [r2, #0]
 800ee2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ee2e:	b113      	cbz	r3, 800ee36 <_dtoa_r+0xc6>
 800ee30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ee32:	4b86      	ldr	r3, [pc, #536]	@ (800f04c <_dtoa_r+0x2dc>)
 800ee34:	6013      	str	r3, [r2, #0]
 800ee36:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f060 <_dtoa_r+0x2f0>
 800ee3a:	f000 bd40 	b.w	800f8be <_dtoa_r+0xb4e>
 800ee3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ee42:	aa14      	add	r2, sp, #80	@ 0x50
 800ee44:	a915      	add	r1, sp, #84	@ 0x54
 800ee46:	4648      	mov	r0, r9
 800ee48:	f001 f984 	bl	8010154 <__d2b>
 800ee4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ee50:	9002      	str	r0, [sp, #8]
 800ee52:	2e00      	cmp	r6, #0
 800ee54:	d078      	beq.n	800ef48 <_dtoa_r+0x1d8>
 800ee56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee58:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ee5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ee64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ee6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ee70:	4619      	mov	r1, r3
 800ee72:	2200      	movs	r2, #0
 800ee74:	4b76      	ldr	r3, [pc, #472]	@ (800f050 <_dtoa_r+0x2e0>)
 800ee76:	f7f1 fa2f 	bl	80002d8 <__aeabi_dsub>
 800ee7a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f028 <_dtoa_r+0x2b8>)
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	f7f1 fbe2 	bl	8000648 <__aeabi_dmul>
 800ee84:	a36a      	add	r3, pc, #424	@ (adr r3, 800f030 <_dtoa_r+0x2c0>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	f7f1 fa27 	bl	80002dc <__adddf3>
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4630      	mov	r0, r6
 800ee92:	460d      	mov	r5, r1
 800ee94:	f7f1 fb6e 	bl	8000574 <__aeabi_i2d>
 800ee98:	a367      	add	r3, pc, #412	@ (adr r3, 800f038 <_dtoa_r+0x2c8>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 fbd3 	bl	8000648 <__aeabi_dmul>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	4620      	mov	r0, r4
 800eea8:	4629      	mov	r1, r5
 800eeaa:	f7f1 fa17 	bl	80002dc <__adddf3>
 800eeae:	4604      	mov	r4, r0
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	f7f1 fe79 	bl	8000ba8 <__aeabi_d2iz>
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	4607      	mov	r7, r0
 800eeba:	2300      	movs	r3, #0
 800eebc:	4620      	mov	r0, r4
 800eebe:	4629      	mov	r1, r5
 800eec0:	f7f1 fe34 	bl	8000b2c <__aeabi_dcmplt>
 800eec4:	b140      	cbz	r0, 800eed8 <_dtoa_r+0x168>
 800eec6:	4638      	mov	r0, r7
 800eec8:	f7f1 fb54 	bl	8000574 <__aeabi_i2d>
 800eecc:	4622      	mov	r2, r4
 800eece:	462b      	mov	r3, r5
 800eed0:	f7f1 fe22 	bl	8000b18 <__aeabi_dcmpeq>
 800eed4:	b900      	cbnz	r0, 800eed8 <_dtoa_r+0x168>
 800eed6:	3f01      	subs	r7, #1
 800eed8:	2f16      	cmp	r7, #22
 800eeda:	d852      	bhi.n	800ef82 <_dtoa_r+0x212>
 800eedc:	4b5d      	ldr	r3, [pc, #372]	@ (800f054 <_dtoa_r+0x2e4>)
 800eede:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eeea:	f7f1 fe1f 	bl	8000b2c <__aeabi_dcmplt>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d049      	beq.n	800ef86 <_dtoa_r+0x216>
 800eef2:	3f01      	subs	r7, #1
 800eef4:	2300      	movs	r3, #0
 800eef6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eef8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eefa:	1b9b      	subs	r3, r3, r6
 800eefc:	1e5a      	subs	r2, r3, #1
 800eefe:	bf45      	ittet	mi
 800ef00:	f1c3 0301 	rsbmi	r3, r3, #1
 800ef04:	9300      	strmi	r3, [sp, #0]
 800ef06:	2300      	movpl	r3, #0
 800ef08:	2300      	movmi	r3, #0
 800ef0a:	9206      	str	r2, [sp, #24]
 800ef0c:	bf54      	ite	pl
 800ef0e:	9300      	strpl	r3, [sp, #0]
 800ef10:	9306      	strmi	r3, [sp, #24]
 800ef12:	2f00      	cmp	r7, #0
 800ef14:	db39      	blt.n	800ef8a <_dtoa_r+0x21a>
 800ef16:	9b06      	ldr	r3, [sp, #24]
 800ef18:	970d      	str	r7, [sp, #52]	@ 0x34
 800ef1a:	443b      	add	r3, r7
 800ef1c:	9306      	str	r3, [sp, #24]
 800ef1e:	2300      	movs	r3, #0
 800ef20:	9308      	str	r3, [sp, #32]
 800ef22:	9b07      	ldr	r3, [sp, #28]
 800ef24:	2b09      	cmp	r3, #9
 800ef26:	d863      	bhi.n	800eff0 <_dtoa_r+0x280>
 800ef28:	2b05      	cmp	r3, #5
 800ef2a:	bfc4      	itt	gt
 800ef2c:	3b04      	subgt	r3, #4
 800ef2e:	9307      	strgt	r3, [sp, #28]
 800ef30:	9b07      	ldr	r3, [sp, #28]
 800ef32:	f1a3 0302 	sub.w	r3, r3, #2
 800ef36:	bfcc      	ite	gt
 800ef38:	2400      	movgt	r4, #0
 800ef3a:	2401      	movle	r4, #1
 800ef3c:	2b03      	cmp	r3, #3
 800ef3e:	d863      	bhi.n	800f008 <_dtoa_r+0x298>
 800ef40:	e8df f003 	tbb	[pc, r3]
 800ef44:	2b375452 	.word	0x2b375452
 800ef48:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ef4c:	441e      	add	r6, r3
 800ef4e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ef52:	2b20      	cmp	r3, #32
 800ef54:	bfc1      	itttt	gt
 800ef56:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ef5a:	409f      	lslgt	r7, r3
 800ef5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ef60:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ef64:	bfd6      	itet	le
 800ef66:	f1c3 0320 	rsble	r3, r3, #32
 800ef6a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ef6e:	fa04 f003 	lslle.w	r0, r4, r3
 800ef72:	f7f1 faef 	bl	8000554 <__aeabi_ui2d>
 800ef76:	2201      	movs	r2, #1
 800ef78:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ef7c:	3e01      	subs	r6, #1
 800ef7e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ef80:	e776      	b.n	800ee70 <_dtoa_r+0x100>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e7b7      	b.n	800eef6 <_dtoa_r+0x186>
 800ef86:	9010      	str	r0, [sp, #64]	@ 0x40
 800ef88:	e7b6      	b.n	800eef8 <_dtoa_r+0x188>
 800ef8a:	9b00      	ldr	r3, [sp, #0]
 800ef8c:	1bdb      	subs	r3, r3, r7
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	427b      	negs	r3, r7
 800ef92:	9308      	str	r3, [sp, #32]
 800ef94:	2300      	movs	r3, #0
 800ef96:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef98:	e7c3      	b.n	800ef22 <_dtoa_r+0x1b2>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800efa0:	eb07 0b03 	add.w	fp, r7, r3
 800efa4:	f10b 0301 	add.w	r3, fp, #1
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	9303      	str	r3, [sp, #12]
 800efac:	bfb8      	it	lt
 800efae:	2301      	movlt	r3, #1
 800efb0:	e006      	b.n	800efc0 <_dtoa_r+0x250>
 800efb2:	2301      	movs	r3, #1
 800efb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800efb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800efb8:	2b00      	cmp	r3, #0
 800efba:	dd28      	ble.n	800f00e <_dtoa_r+0x29e>
 800efbc:	469b      	mov	fp, r3
 800efbe:	9303      	str	r3, [sp, #12]
 800efc0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800efc4:	2100      	movs	r1, #0
 800efc6:	2204      	movs	r2, #4
 800efc8:	f102 0514 	add.w	r5, r2, #20
 800efcc:	429d      	cmp	r5, r3
 800efce:	d926      	bls.n	800f01e <_dtoa_r+0x2ae>
 800efd0:	6041      	str	r1, [r0, #4]
 800efd2:	4648      	mov	r0, r9
 800efd4:	f000 fd9c 	bl	800fb10 <_Balloc>
 800efd8:	4682      	mov	sl, r0
 800efda:	2800      	cmp	r0, #0
 800efdc:	d142      	bne.n	800f064 <_dtoa_r+0x2f4>
 800efde:	4b1e      	ldr	r3, [pc, #120]	@ (800f058 <_dtoa_r+0x2e8>)
 800efe0:	4602      	mov	r2, r0
 800efe2:	f240 11af 	movw	r1, #431	@ 0x1af
 800efe6:	e6da      	b.n	800ed9e <_dtoa_r+0x2e>
 800efe8:	2300      	movs	r3, #0
 800efea:	e7e3      	b.n	800efb4 <_dtoa_r+0x244>
 800efec:	2300      	movs	r3, #0
 800efee:	e7d5      	b.n	800ef9c <_dtoa_r+0x22c>
 800eff0:	2401      	movs	r4, #1
 800eff2:	2300      	movs	r3, #0
 800eff4:	9307      	str	r3, [sp, #28]
 800eff6:	9409      	str	r4, [sp, #36]	@ 0x24
 800eff8:	f04f 3bff 	mov.w	fp, #4294967295
 800effc:	2200      	movs	r2, #0
 800effe:	f8cd b00c 	str.w	fp, [sp, #12]
 800f002:	2312      	movs	r3, #18
 800f004:	920c      	str	r2, [sp, #48]	@ 0x30
 800f006:	e7db      	b.n	800efc0 <_dtoa_r+0x250>
 800f008:	2301      	movs	r3, #1
 800f00a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f00c:	e7f4      	b.n	800eff8 <_dtoa_r+0x288>
 800f00e:	f04f 0b01 	mov.w	fp, #1
 800f012:	f8cd b00c 	str.w	fp, [sp, #12]
 800f016:	465b      	mov	r3, fp
 800f018:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f01c:	e7d0      	b.n	800efc0 <_dtoa_r+0x250>
 800f01e:	3101      	adds	r1, #1
 800f020:	0052      	lsls	r2, r2, #1
 800f022:	e7d1      	b.n	800efc8 <_dtoa_r+0x258>
 800f024:	f3af 8000 	nop.w
 800f028:	636f4361 	.word	0x636f4361
 800f02c:	3fd287a7 	.word	0x3fd287a7
 800f030:	8b60c8b3 	.word	0x8b60c8b3
 800f034:	3fc68a28 	.word	0x3fc68a28
 800f038:	509f79fb 	.word	0x509f79fb
 800f03c:	3fd34413 	.word	0x3fd34413
 800f040:	08011111 	.word	0x08011111
 800f044:	08011128 	.word	0x08011128
 800f048:	7ff00000 	.word	0x7ff00000
 800f04c:	080110e1 	.word	0x080110e1
 800f050:	3ff80000 	.word	0x3ff80000
 800f054:	08011278 	.word	0x08011278
 800f058:	08011180 	.word	0x08011180
 800f05c:	0801110d 	.word	0x0801110d
 800f060:	080110e0 	.word	0x080110e0
 800f064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f068:	6018      	str	r0, [r3, #0]
 800f06a:	9b03      	ldr	r3, [sp, #12]
 800f06c:	2b0e      	cmp	r3, #14
 800f06e:	f200 80a1 	bhi.w	800f1b4 <_dtoa_r+0x444>
 800f072:	2c00      	cmp	r4, #0
 800f074:	f000 809e 	beq.w	800f1b4 <_dtoa_r+0x444>
 800f078:	2f00      	cmp	r7, #0
 800f07a:	dd33      	ble.n	800f0e4 <_dtoa_r+0x374>
 800f07c:	4b9c      	ldr	r3, [pc, #624]	@ (800f2f0 <_dtoa_r+0x580>)
 800f07e:	f007 020f 	and.w	r2, r7, #15
 800f082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f086:	ed93 7b00 	vldr	d7, [r3]
 800f08a:	05f8      	lsls	r0, r7, #23
 800f08c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f090:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f094:	d516      	bpl.n	800f0c4 <_dtoa_r+0x354>
 800f096:	4b97      	ldr	r3, [pc, #604]	@ (800f2f4 <_dtoa_r+0x584>)
 800f098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f09c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0a0:	f7f1 fbfc 	bl	800089c <__aeabi_ddiv>
 800f0a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0a8:	f004 040f 	and.w	r4, r4, #15
 800f0ac:	2603      	movs	r6, #3
 800f0ae:	4d91      	ldr	r5, [pc, #580]	@ (800f2f4 <_dtoa_r+0x584>)
 800f0b0:	b954      	cbnz	r4, 800f0c8 <_dtoa_r+0x358>
 800f0b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f0b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0ba:	f7f1 fbef 	bl	800089c <__aeabi_ddiv>
 800f0be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0c2:	e028      	b.n	800f116 <_dtoa_r+0x3a6>
 800f0c4:	2602      	movs	r6, #2
 800f0c6:	e7f2      	b.n	800f0ae <_dtoa_r+0x33e>
 800f0c8:	07e1      	lsls	r1, r4, #31
 800f0ca:	d508      	bpl.n	800f0de <_dtoa_r+0x36e>
 800f0cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f0d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0d4:	f7f1 fab8 	bl	8000648 <__aeabi_dmul>
 800f0d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f0dc:	3601      	adds	r6, #1
 800f0de:	1064      	asrs	r4, r4, #1
 800f0e0:	3508      	adds	r5, #8
 800f0e2:	e7e5      	b.n	800f0b0 <_dtoa_r+0x340>
 800f0e4:	f000 80af 	beq.w	800f246 <_dtoa_r+0x4d6>
 800f0e8:	427c      	negs	r4, r7
 800f0ea:	4b81      	ldr	r3, [pc, #516]	@ (800f2f0 <_dtoa_r+0x580>)
 800f0ec:	4d81      	ldr	r5, [pc, #516]	@ (800f2f4 <_dtoa_r+0x584>)
 800f0ee:	f004 020f 	and.w	r2, r4, #15
 800f0f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f0fe:	f7f1 faa3 	bl	8000648 <__aeabi_dmul>
 800f102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f106:	1124      	asrs	r4, r4, #4
 800f108:	2300      	movs	r3, #0
 800f10a:	2602      	movs	r6, #2
 800f10c:	2c00      	cmp	r4, #0
 800f10e:	f040 808f 	bne.w	800f230 <_dtoa_r+0x4c0>
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1d3      	bne.n	800f0be <_dtoa_r+0x34e>
 800f116:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f118:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 8094 	beq.w	800f24a <_dtoa_r+0x4da>
 800f122:	4b75      	ldr	r3, [pc, #468]	@ (800f2f8 <_dtoa_r+0x588>)
 800f124:	2200      	movs	r2, #0
 800f126:	4620      	mov	r0, r4
 800f128:	4629      	mov	r1, r5
 800f12a:	f7f1 fcff 	bl	8000b2c <__aeabi_dcmplt>
 800f12e:	2800      	cmp	r0, #0
 800f130:	f000 808b 	beq.w	800f24a <_dtoa_r+0x4da>
 800f134:	9b03      	ldr	r3, [sp, #12]
 800f136:	2b00      	cmp	r3, #0
 800f138:	f000 8087 	beq.w	800f24a <_dtoa_r+0x4da>
 800f13c:	f1bb 0f00 	cmp.w	fp, #0
 800f140:	dd34      	ble.n	800f1ac <_dtoa_r+0x43c>
 800f142:	4620      	mov	r0, r4
 800f144:	4b6d      	ldr	r3, [pc, #436]	@ (800f2fc <_dtoa_r+0x58c>)
 800f146:	2200      	movs	r2, #0
 800f148:	4629      	mov	r1, r5
 800f14a:	f7f1 fa7d 	bl	8000648 <__aeabi_dmul>
 800f14e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f152:	f107 38ff 	add.w	r8, r7, #4294967295
 800f156:	3601      	adds	r6, #1
 800f158:	465c      	mov	r4, fp
 800f15a:	4630      	mov	r0, r6
 800f15c:	f7f1 fa0a 	bl	8000574 <__aeabi_i2d>
 800f160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f164:	f7f1 fa70 	bl	8000648 <__aeabi_dmul>
 800f168:	4b65      	ldr	r3, [pc, #404]	@ (800f300 <_dtoa_r+0x590>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	f7f1 f8b6 	bl	80002dc <__adddf3>
 800f170:	4605      	mov	r5, r0
 800f172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f176:	2c00      	cmp	r4, #0
 800f178:	d16a      	bne.n	800f250 <_dtoa_r+0x4e0>
 800f17a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f17e:	4b61      	ldr	r3, [pc, #388]	@ (800f304 <_dtoa_r+0x594>)
 800f180:	2200      	movs	r2, #0
 800f182:	f7f1 f8a9 	bl	80002d8 <__aeabi_dsub>
 800f186:	4602      	mov	r2, r0
 800f188:	460b      	mov	r3, r1
 800f18a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f18e:	462a      	mov	r2, r5
 800f190:	4633      	mov	r3, r6
 800f192:	f7f1 fce9 	bl	8000b68 <__aeabi_dcmpgt>
 800f196:	2800      	cmp	r0, #0
 800f198:	f040 8298 	bne.w	800f6cc <_dtoa_r+0x95c>
 800f19c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1a0:	462a      	mov	r2, r5
 800f1a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f1a6:	f7f1 fcc1 	bl	8000b2c <__aeabi_dcmplt>
 800f1aa:	bb38      	cbnz	r0, 800f1fc <_dtoa_r+0x48c>
 800f1ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f1b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f1b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f2c0 8157 	blt.w	800f46a <_dtoa_r+0x6fa>
 800f1bc:	2f0e      	cmp	r7, #14
 800f1be:	f300 8154 	bgt.w	800f46a <_dtoa_r+0x6fa>
 800f1c2:	4b4b      	ldr	r3, [pc, #300]	@ (800f2f0 <_dtoa_r+0x580>)
 800f1c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1c8:	ed93 7b00 	vldr	d7, [r3]
 800f1cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	ed8d 7b00 	vstr	d7, [sp]
 800f1d4:	f280 80e5 	bge.w	800f3a2 <_dtoa_r+0x632>
 800f1d8:	9b03      	ldr	r3, [sp, #12]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f300 80e1 	bgt.w	800f3a2 <_dtoa_r+0x632>
 800f1e0:	d10c      	bne.n	800f1fc <_dtoa_r+0x48c>
 800f1e2:	4b48      	ldr	r3, [pc, #288]	@ (800f304 <_dtoa_r+0x594>)
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	ec51 0b17 	vmov	r0, r1, d7
 800f1ea:	f7f1 fa2d 	bl	8000648 <__aeabi_dmul>
 800f1ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1f2:	f7f1 fcaf 	bl	8000b54 <__aeabi_dcmpge>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f000 8266 	beq.w	800f6c8 <_dtoa_r+0x958>
 800f1fc:	2400      	movs	r4, #0
 800f1fe:	4625      	mov	r5, r4
 800f200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f202:	4656      	mov	r6, sl
 800f204:	ea6f 0803 	mvn.w	r8, r3
 800f208:	2700      	movs	r7, #0
 800f20a:	4621      	mov	r1, r4
 800f20c:	4648      	mov	r0, r9
 800f20e:	f000 fcbf 	bl	800fb90 <_Bfree>
 800f212:	2d00      	cmp	r5, #0
 800f214:	f000 80bd 	beq.w	800f392 <_dtoa_r+0x622>
 800f218:	b12f      	cbz	r7, 800f226 <_dtoa_r+0x4b6>
 800f21a:	42af      	cmp	r7, r5
 800f21c:	d003      	beq.n	800f226 <_dtoa_r+0x4b6>
 800f21e:	4639      	mov	r1, r7
 800f220:	4648      	mov	r0, r9
 800f222:	f000 fcb5 	bl	800fb90 <_Bfree>
 800f226:	4629      	mov	r1, r5
 800f228:	4648      	mov	r0, r9
 800f22a:	f000 fcb1 	bl	800fb90 <_Bfree>
 800f22e:	e0b0      	b.n	800f392 <_dtoa_r+0x622>
 800f230:	07e2      	lsls	r2, r4, #31
 800f232:	d505      	bpl.n	800f240 <_dtoa_r+0x4d0>
 800f234:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f238:	f7f1 fa06 	bl	8000648 <__aeabi_dmul>
 800f23c:	3601      	adds	r6, #1
 800f23e:	2301      	movs	r3, #1
 800f240:	1064      	asrs	r4, r4, #1
 800f242:	3508      	adds	r5, #8
 800f244:	e762      	b.n	800f10c <_dtoa_r+0x39c>
 800f246:	2602      	movs	r6, #2
 800f248:	e765      	b.n	800f116 <_dtoa_r+0x3a6>
 800f24a:	9c03      	ldr	r4, [sp, #12]
 800f24c:	46b8      	mov	r8, r7
 800f24e:	e784      	b.n	800f15a <_dtoa_r+0x3ea>
 800f250:	4b27      	ldr	r3, [pc, #156]	@ (800f2f0 <_dtoa_r+0x580>)
 800f252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f25c:	4454      	add	r4, sl
 800f25e:	2900      	cmp	r1, #0
 800f260:	d054      	beq.n	800f30c <_dtoa_r+0x59c>
 800f262:	4929      	ldr	r1, [pc, #164]	@ (800f308 <_dtoa_r+0x598>)
 800f264:	2000      	movs	r0, #0
 800f266:	f7f1 fb19 	bl	800089c <__aeabi_ddiv>
 800f26a:	4633      	mov	r3, r6
 800f26c:	462a      	mov	r2, r5
 800f26e:	f7f1 f833 	bl	80002d8 <__aeabi_dsub>
 800f272:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f276:	4656      	mov	r6, sl
 800f278:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f27c:	f7f1 fc94 	bl	8000ba8 <__aeabi_d2iz>
 800f280:	4605      	mov	r5, r0
 800f282:	f7f1 f977 	bl	8000574 <__aeabi_i2d>
 800f286:	4602      	mov	r2, r0
 800f288:	460b      	mov	r3, r1
 800f28a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f28e:	f7f1 f823 	bl	80002d8 <__aeabi_dsub>
 800f292:	3530      	adds	r5, #48	@ 0x30
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f29c:	f806 5b01 	strb.w	r5, [r6], #1
 800f2a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f2a4:	f7f1 fc42 	bl	8000b2c <__aeabi_dcmplt>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d172      	bne.n	800f392 <_dtoa_r+0x622>
 800f2ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2b0:	4911      	ldr	r1, [pc, #68]	@ (800f2f8 <_dtoa_r+0x588>)
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	f7f1 f810 	bl	80002d8 <__aeabi_dsub>
 800f2b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f2bc:	f7f1 fc36 	bl	8000b2c <__aeabi_dcmplt>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	f040 80b4 	bne.w	800f42e <_dtoa_r+0x6be>
 800f2c6:	42a6      	cmp	r6, r4
 800f2c8:	f43f af70 	beq.w	800f1ac <_dtoa_r+0x43c>
 800f2cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f2fc <_dtoa_r+0x58c>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f7f1 f9b8 	bl	8000648 <__aeabi_dmul>
 800f2d8:	4b08      	ldr	r3, [pc, #32]	@ (800f2fc <_dtoa_r+0x58c>)
 800f2da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f2de:	2200      	movs	r2, #0
 800f2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2e4:	f7f1 f9b0 	bl	8000648 <__aeabi_dmul>
 800f2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2ec:	e7c4      	b.n	800f278 <_dtoa_r+0x508>
 800f2ee:	bf00      	nop
 800f2f0:	08011278 	.word	0x08011278
 800f2f4:	08011250 	.word	0x08011250
 800f2f8:	3ff00000 	.word	0x3ff00000
 800f2fc:	40240000 	.word	0x40240000
 800f300:	401c0000 	.word	0x401c0000
 800f304:	40140000 	.word	0x40140000
 800f308:	3fe00000 	.word	0x3fe00000
 800f30c:	4631      	mov	r1, r6
 800f30e:	4628      	mov	r0, r5
 800f310:	f7f1 f99a 	bl	8000648 <__aeabi_dmul>
 800f314:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f318:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f31a:	4656      	mov	r6, sl
 800f31c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f320:	f7f1 fc42 	bl	8000ba8 <__aeabi_d2iz>
 800f324:	4605      	mov	r5, r0
 800f326:	f7f1 f925 	bl	8000574 <__aeabi_i2d>
 800f32a:	4602      	mov	r2, r0
 800f32c:	460b      	mov	r3, r1
 800f32e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f332:	f7f0 ffd1 	bl	80002d8 <__aeabi_dsub>
 800f336:	3530      	adds	r5, #48	@ 0x30
 800f338:	f806 5b01 	strb.w	r5, [r6], #1
 800f33c:	4602      	mov	r2, r0
 800f33e:	460b      	mov	r3, r1
 800f340:	42a6      	cmp	r6, r4
 800f342:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f346:	f04f 0200 	mov.w	r2, #0
 800f34a:	d124      	bne.n	800f396 <_dtoa_r+0x626>
 800f34c:	4baf      	ldr	r3, [pc, #700]	@ (800f60c <_dtoa_r+0x89c>)
 800f34e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f352:	f7f0 ffc3 	bl	80002dc <__adddf3>
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f35e:	f7f1 fc03 	bl	8000b68 <__aeabi_dcmpgt>
 800f362:	2800      	cmp	r0, #0
 800f364:	d163      	bne.n	800f42e <_dtoa_r+0x6be>
 800f366:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f36a:	49a8      	ldr	r1, [pc, #672]	@ (800f60c <_dtoa_r+0x89c>)
 800f36c:	2000      	movs	r0, #0
 800f36e:	f7f0 ffb3 	bl	80002d8 <__aeabi_dsub>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f37a:	f7f1 fbd7 	bl	8000b2c <__aeabi_dcmplt>
 800f37e:	2800      	cmp	r0, #0
 800f380:	f43f af14 	beq.w	800f1ac <_dtoa_r+0x43c>
 800f384:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f386:	1e73      	subs	r3, r6, #1
 800f388:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f38a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f38e:	2b30      	cmp	r3, #48	@ 0x30
 800f390:	d0f8      	beq.n	800f384 <_dtoa_r+0x614>
 800f392:	4647      	mov	r7, r8
 800f394:	e03b      	b.n	800f40e <_dtoa_r+0x69e>
 800f396:	4b9e      	ldr	r3, [pc, #632]	@ (800f610 <_dtoa_r+0x8a0>)
 800f398:	f7f1 f956 	bl	8000648 <__aeabi_dmul>
 800f39c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3a0:	e7bc      	b.n	800f31c <_dtoa_r+0x5ac>
 800f3a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f3a6:	4656      	mov	r6, sl
 800f3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	f7f1 fa74 	bl	800089c <__aeabi_ddiv>
 800f3b4:	f7f1 fbf8 	bl	8000ba8 <__aeabi_d2iz>
 800f3b8:	4680      	mov	r8, r0
 800f3ba:	f7f1 f8db 	bl	8000574 <__aeabi_i2d>
 800f3be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3c2:	f7f1 f941 	bl	8000648 <__aeabi_dmul>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f3d2:	f7f0 ff81 	bl	80002d8 <__aeabi_dsub>
 800f3d6:	f806 4b01 	strb.w	r4, [r6], #1
 800f3da:	9d03      	ldr	r5, [sp, #12]
 800f3dc:	eba6 040a 	sub.w	r4, r6, sl
 800f3e0:	42a5      	cmp	r5, r4
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	d133      	bne.n	800f450 <_dtoa_r+0x6e0>
 800f3e8:	f7f0 ff78 	bl	80002dc <__adddf3>
 800f3ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	460d      	mov	r5, r1
 800f3f4:	f7f1 fbb8 	bl	8000b68 <__aeabi_dcmpgt>
 800f3f8:	b9c0      	cbnz	r0, 800f42c <_dtoa_r+0x6bc>
 800f3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3fe:	4620      	mov	r0, r4
 800f400:	4629      	mov	r1, r5
 800f402:	f7f1 fb89 	bl	8000b18 <__aeabi_dcmpeq>
 800f406:	b110      	cbz	r0, 800f40e <_dtoa_r+0x69e>
 800f408:	f018 0f01 	tst.w	r8, #1
 800f40c:	d10e      	bne.n	800f42c <_dtoa_r+0x6bc>
 800f40e:	9902      	ldr	r1, [sp, #8]
 800f410:	4648      	mov	r0, r9
 800f412:	f000 fbbd 	bl	800fb90 <_Bfree>
 800f416:	2300      	movs	r3, #0
 800f418:	7033      	strb	r3, [r6, #0]
 800f41a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f41c:	3701      	adds	r7, #1
 800f41e:	601f      	str	r7, [r3, #0]
 800f420:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f422:	2b00      	cmp	r3, #0
 800f424:	f000 824b 	beq.w	800f8be <_dtoa_r+0xb4e>
 800f428:	601e      	str	r6, [r3, #0]
 800f42a:	e248      	b.n	800f8be <_dtoa_r+0xb4e>
 800f42c:	46b8      	mov	r8, r7
 800f42e:	4633      	mov	r3, r6
 800f430:	461e      	mov	r6, r3
 800f432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f436:	2a39      	cmp	r2, #57	@ 0x39
 800f438:	d106      	bne.n	800f448 <_dtoa_r+0x6d8>
 800f43a:	459a      	cmp	sl, r3
 800f43c:	d1f8      	bne.n	800f430 <_dtoa_r+0x6c0>
 800f43e:	2230      	movs	r2, #48	@ 0x30
 800f440:	f108 0801 	add.w	r8, r8, #1
 800f444:	f88a 2000 	strb.w	r2, [sl]
 800f448:	781a      	ldrb	r2, [r3, #0]
 800f44a:	3201      	adds	r2, #1
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	e7a0      	b.n	800f392 <_dtoa_r+0x622>
 800f450:	4b6f      	ldr	r3, [pc, #444]	@ (800f610 <_dtoa_r+0x8a0>)
 800f452:	2200      	movs	r2, #0
 800f454:	f7f1 f8f8 	bl	8000648 <__aeabi_dmul>
 800f458:	2200      	movs	r2, #0
 800f45a:	2300      	movs	r3, #0
 800f45c:	4604      	mov	r4, r0
 800f45e:	460d      	mov	r5, r1
 800f460:	f7f1 fb5a 	bl	8000b18 <__aeabi_dcmpeq>
 800f464:	2800      	cmp	r0, #0
 800f466:	d09f      	beq.n	800f3a8 <_dtoa_r+0x638>
 800f468:	e7d1      	b.n	800f40e <_dtoa_r+0x69e>
 800f46a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f46c:	2a00      	cmp	r2, #0
 800f46e:	f000 80ea 	beq.w	800f646 <_dtoa_r+0x8d6>
 800f472:	9a07      	ldr	r2, [sp, #28]
 800f474:	2a01      	cmp	r2, #1
 800f476:	f300 80cd 	bgt.w	800f614 <_dtoa_r+0x8a4>
 800f47a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f47c:	2a00      	cmp	r2, #0
 800f47e:	f000 80c1 	beq.w	800f604 <_dtoa_r+0x894>
 800f482:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f486:	9c08      	ldr	r4, [sp, #32]
 800f488:	9e00      	ldr	r6, [sp, #0]
 800f48a:	9a00      	ldr	r2, [sp, #0]
 800f48c:	441a      	add	r2, r3
 800f48e:	9200      	str	r2, [sp, #0]
 800f490:	9a06      	ldr	r2, [sp, #24]
 800f492:	2101      	movs	r1, #1
 800f494:	441a      	add	r2, r3
 800f496:	4648      	mov	r0, r9
 800f498:	9206      	str	r2, [sp, #24]
 800f49a:	f000 fc2d 	bl	800fcf8 <__i2b>
 800f49e:	4605      	mov	r5, r0
 800f4a0:	b166      	cbz	r6, 800f4bc <_dtoa_r+0x74c>
 800f4a2:	9b06      	ldr	r3, [sp, #24]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	dd09      	ble.n	800f4bc <_dtoa_r+0x74c>
 800f4a8:	42b3      	cmp	r3, r6
 800f4aa:	9a00      	ldr	r2, [sp, #0]
 800f4ac:	bfa8      	it	ge
 800f4ae:	4633      	movge	r3, r6
 800f4b0:	1ad2      	subs	r2, r2, r3
 800f4b2:	9200      	str	r2, [sp, #0]
 800f4b4:	9a06      	ldr	r2, [sp, #24]
 800f4b6:	1af6      	subs	r6, r6, r3
 800f4b8:	1ad3      	subs	r3, r2, r3
 800f4ba:	9306      	str	r3, [sp, #24]
 800f4bc:	9b08      	ldr	r3, [sp, #32]
 800f4be:	b30b      	cbz	r3, 800f504 <_dtoa_r+0x794>
 800f4c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f000 80c6 	beq.w	800f654 <_dtoa_r+0x8e4>
 800f4c8:	2c00      	cmp	r4, #0
 800f4ca:	f000 80c0 	beq.w	800f64e <_dtoa_r+0x8de>
 800f4ce:	4629      	mov	r1, r5
 800f4d0:	4622      	mov	r2, r4
 800f4d2:	4648      	mov	r0, r9
 800f4d4:	f000 fcc8 	bl	800fe68 <__pow5mult>
 800f4d8:	9a02      	ldr	r2, [sp, #8]
 800f4da:	4601      	mov	r1, r0
 800f4dc:	4605      	mov	r5, r0
 800f4de:	4648      	mov	r0, r9
 800f4e0:	f000 fc20 	bl	800fd24 <__multiply>
 800f4e4:	9902      	ldr	r1, [sp, #8]
 800f4e6:	4680      	mov	r8, r0
 800f4e8:	4648      	mov	r0, r9
 800f4ea:	f000 fb51 	bl	800fb90 <_Bfree>
 800f4ee:	9b08      	ldr	r3, [sp, #32]
 800f4f0:	1b1b      	subs	r3, r3, r4
 800f4f2:	9308      	str	r3, [sp, #32]
 800f4f4:	f000 80b1 	beq.w	800f65a <_dtoa_r+0x8ea>
 800f4f8:	9a08      	ldr	r2, [sp, #32]
 800f4fa:	4641      	mov	r1, r8
 800f4fc:	4648      	mov	r0, r9
 800f4fe:	f000 fcb3 	bl	800fe68 <__pow5mult>
 800f502:	9002      	str	r0, [sp, #8]
 800f504:	2101      	movs	r1, #1
 800f506:	4648      	mov	r0, r9
 800f508:	f000 fbf6 	bl	800fcf8 <__i2b>
 800f50c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f50e:	4604      	mov	r4, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	f000 81d8 	beq.w	800f8c6 <_dtoa_r+0xb56>
 800f516:	461a      	mov	r2, r3
 800f518:	4601      	mov	r1, r0
 800f51a:	4648      	mov	r0, r9
 800f51c:	f000 fca4 	bl	800fe68 <__pow5mult>
 800f520:	9b07      	ldr	r3, [sp, #28]
 800f522:	2b01      	cmp	r3, #1
 800f524:	4604      	mov	r4, r0
 800f526:	f300 809f 	bgt.w	800f668 <_dtoa_r+0x8f8>
 800f52a:	9b04      	ldr	r3, [sp, #16]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f040 8097 	bne.w	800f660 <_dtoa_r+0x8f0>
 800f532:	9b05      	ldr	r3, [sp, #20]
 800f534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f040 8093 	bne.w	800f664 <_dtoa_r+0x8f4>
 800f53e:	9b05      	ldr	r3, [sp, #20]
 800f540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f544:	0d1b      	lsrs	r3, r3, #20
 800f546:	051b      	lsls	r3, r3, #20
 800f548:	b133      	cbz	r3, 800f558 <_dtoa_r+0x7e8>
 800f54a:	9b00      	ldr	r3, [sp, #0]
 800f54c:	3301      	adds	r3, #1
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	9b06      	ldr	r3, [sp, #24]
 800f552:	3301      	adds	r3, #1
 800f554:	9306      	str	r3, [sp, #24]
 800f556:	2301      	movs	r3, #1
 800f558:	9308      	str	r3, [sp, #32]
 800f55a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f000 81b8 	beq.w	800f8d2 <_dtoa_r+0xb62>
 800f562:	6923      	ldr	r3, [r4, #16]
 800f564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f568:	6918      	ldr	r0, [r3, #16]
 800f56a:	f000 fb79 	bl	800fc60 <__hi0bits>
 800f56e:	f1c0 0020 	rsb	r0, r0, #32
 800f572:	9b06      	ldr	r3, [sp, #24]
 800f574:	4418      	add	r0, r3
 800f576:	f010 001f 	ands.w	r0, r0, #31
 800f57a:	f000 8082 	beq.w	800f682 <_dtoa_r+0x912>
 800f57e:	f1c0 0320 	rsb	r3, r0, #32
 800f582:	2b04      	cmp	r3, #4
 800f584:	dd73      	ble.n	800f66e <_dtoa_r+0x8fe>
 800f586:	9b00      	ldr	r3, [sp, #0]
 800f588:	f1c0 001c 	rsb	r0, r0, #28
 800f58c:	4403      	add	r3, r0
 800f58e:	9300      	str	r3, [sp, #0]
 800f590:	9b06      	ldr	r3, [sp, #24]
 800f592:	4403      	add	r3, r0
 800f594:	4406      	add	r6, r0
 800f596:	9306      	str	r3, [sp, #24]
 800f598:	9b00      	ldr	r3, [sp, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	dd05      	ble.n	800f5aa <_dtoa_r+0x83a>
 800f59e:	9902      	ldr	r1, [sp, #8]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	4648      	mov	r0, r9
 800f5a4:	f000 fcba 	bl	800ff1c <__lshift>
 800f5a8:	9002      	str	r0, [sp, #8]
 800f5aa:	9b06      	ldr	r3, [sp, #24]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	dd05      	ble.n	800f5bc <_dtoa_r+0x84c>
 800f5b0:	4621      	mov	r1, r4
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	4648      	mov	r0, r9
 800f5b6:	f000 fcb1 	bl	800ff1c <__lshift>
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d061      	beq.n	800f686 <_dtoa_r+0x916>
 800f5c2:	9802      	ldr	r0, [sp, #8]
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	f000 fd15 	bl	800fff4 <__mcmp>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	da5b      	bge.n	800f686 <_dtoa_r+0x916>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	9902      	ldr	r1, [sp, #8]
 800f5d2:	220a      	movs	r2, #10
 800f5d4:	4648      	mov	r0, r9
 800f5d6:	f000 fafd 	bl	800fbd4 <__multadd>
 800f5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5dc:	9002      	str	r0, [sp, #8]
 800f5de:	f107 38ff 	add.w	r8, r7, #4294967295
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f000 8177 	beq.w	800f8d6 <_dtoa_r+0xb66>
 800f5e8:	4629      	mov	r1, r5
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	220a      	movs	r2, #10
 800f5ee:	4648      	mov	r0, r9
 800f5f0:	f000 faf0 	bl	800fbd4 <__multadd>
 800f5f4:	f1bb 0f00 	cmp.w	fp, #0
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	dc6f      	bgt.n	800f6dc <_dtoa_r+0x96c>
 800f5fc:	9b07      	ldr	r3, [sp, #28]
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	dc49      	bgt.n	800f696 <_dtoa_r+0x926>
 800f602:	e06b      	b.n	800f6dc <_dtoa_r+0x96c>
 800f604:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f606:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f60a:	e73c      	b.n	800f486 <_dtoa_r+0x716>
 800f60c:	3fe00000 	.word	0x3fe00000
 800f610:	40240000 	.word	0x40240000
 800f614:	9b03      	ldr	r3, [sp, #12]
 800f616:	1e5c      	subs	r4, r3, #1
 800f618:	9b08      	ldr	r3, [sp, #32]
 800f61a:	42a3      	cmp	r3, r4
 800f61c:	db09      	blt.n	800f632 <_dtoa_r+0x8c2>
 800f61e:	1b1c      	subs	r4, r3, r4
 800f620:	9b03      	ldr	r3, [sp, #12]
 800f622:	2b00      	cmp	r3, #0
 800f624:	f6bf af30 	bge.w	800f488 <_dtoa_r+0x718>
 800f628:	9b00      	ldr	r3, [sp, #0]
 800f62a:	9a03      	ldr	r2, [sp, #12]
 800f62c:	1a9e      	subs	r6, r3, r2
 800f62e:	2300      	movs	r3, #0
 800f630:	e72b      	b.n	800f48a <_dtoa_r+0x71a>
 800f632:	9b08      	ldr	r3, [sp, #32]
 800f634:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f636:	9408      	str	r4, [sp, #32]
 800f638:	1ae3      	subs	r3, r4, r3
 800f63a:	441a      	add	r2, r3
 800f63c:	9e00      	ldr	r6, [sp, #0]
 800f63e:	9b03      	ldr	r3, [sp, #12]
 800f640:	920d      	str	r2, [sp, #52]	@ 0x34
 800f642:	2400      	movs	r4, #0
 800f644:	e721      	b.n	800f48a <_dtoa_r+0x71a>
 800f646:	9c08      	ldr	r4, [sp, #32]
 800f648:	9e00      	ldr	r6, [sp, #0]
 800f64a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f64c:	e728      	b.n	800f4a0 <_dtoa_r+0x730>
 800f64e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f652:	e751      	b.n	800f4f8 <_dtoa_r+0x788>
 800f654:	9a08      	ldr	r2, [sp, #32]
 800f656:	9902      	ldr	r1, [sp, #8]
 800f658:	e750      	b.n	800f4fc <_dtoa_r+0x78c>
 800f65a:	f8cd 8008 	str.w	r8, [sp, #8]
 800f65e:	e751      	b.n	800f504 <_dtoa_r+0x794>
 800f660:	2300      	movs	r3, #0
 800f662:	e779      	b.n	800f558 <_dtoa_r+0x7e8>
 800f664:	9b04      	ldr	r3, [sp, #16]
 800f666:	e777      	b.n	800f558 <_dtoa_r+0x7e8>
 800f668:	2300      	movs	r3, #0
 800f66a:	9308      	str	r3, [sp, #32]
 800f66c:	e779      	b.n	800f562 <_dtoa_r+0x7f2>
 800f66e:	d093      	beq.n	800f598 <_dtoa_r+0x828>
 800f670:	9a00      	ldr	r2, [sp, #0]
 800f672:	331c      	adds	r3, #28
 800f674:	441a      	add	r2, r3
 800f676:	9200      	str	r2, [sp, #0]
 800f678:	9a06      	ldr	r2, [sp, #24]
 800f67a:	441a      	add	r2, r3
 800f67c:	441e      	add	r6, r3
 800f67e:	9206      	str	r2, [sp, #24]
 800f680:	e78a      	b.n	800f598 <_dtoa_r+0x828>
 800f682:	4603      	mov	r3, r0
 800f684:	e7f4      	b.n	800f670 <_dtoa_r+0x900>
 800f686:	9b03      	ldr	r3, [sp, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	46b8      	mov	r8, r7
 800f68c:	dc20      	bgt.n	800f6d0 <_dtoa_r+0x960>
 800f68e:	469b      	mov	fp, r3
 800f690:	9b07      	ldr	r3, [sp, #28]
 800f692:	2b02      	cmp	r3, #2
 800f694:	dd1e      	ble.n	800f6d4 <_dtoa_r+0x964>
 800f696:	f1bb 0f00 	cmp.w	fp, #0
 800f69a:	f47f adb1 	bne.w	800f200 <_dtoa_r+0x490>
 800f69e:	4621      	mov	r1, r4
 800f6a0:	465b      	mov	r3, fp
 800f6a2:	2205      	movs	r2, #5
 800f6a4:	4648      	mov	r0, r9
 800f6a6:	f000 fa95 	bl	800fbd4 <__multadd>
 800f6aa:	4601      	mov	r1, r0
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	9802      	ldr	r0, [sp, #8]
 800f6b0:	f000 fca0 	bl	800fff4 <__mcmp>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	f77f ada3 	ble.w	800f200 <_dtoa_r+0x490>
 800f6ba:	4656      	mov	r6, sl
 800f6bc:	2331      	movs	r3, #49	@ 0x31
 800f6be:	f806 3b01 	strb.w	r3, [r6], #1
 800f6c2:	f108 0801 	add.w	r8, r8, #1
 800f6c6:	e59f      	b.n	800f208 <_dtoa_r+0x498>
 800f6c8:	9c03      	ldr	r4, [sp, #12]
 800f6ca:	46b8      	mov	r8, r7
 800f6cc:	4625      	mov	r5, r4
 800f6ce:	e7f4      	b.n	800f6ba <_dtoa_r+0x94a>
 800f6d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f000 8101 	beq.w	800f8de <_dtoa_r+0xb6e>
 800f6dc:	2e00      	cmp	r6, #0
 800f6de:	dd05      	ble.n	800f6ec <_dtoa_r+0x97c>
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	4632      	mov	r2, r6
 800f6e4:	4648      	mov	r0, r9
 800f6e6:	f000 fc19 	bl	800ff1c <__lshift>
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	9b08      	ldr	r3, [sp, #32]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d05c      	beq.n	800f7ac <_dtoa_r+0xa3c>
 800f6f2:	6869      	ldr	r1, [r5, #4]
 800f6f4:	4648      	mov	r0, r9
 800f6f6:	f000 fa0b 	bl	800fb10 <_Balloc>
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	b928      	cbnz	r0, 800f70a <_dtoa_r+0x99a>
 800f6fe:	4b82      	ldr	r3, [pc, #520]	@ (800f908 <_dtoa_r+0xb98>)
 800f700:	4602      	mov	r2, r0
 800f702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f706:	f7ff bb4a 	b.w	800ed9e <_dtoa_r+0x2e>
 800f70a:	692a      	ldr	r2, [r5, #16]
 800f70c:	3202      	adds	r2, #2
 800f70e:	0092      	lsls	r2, r2, #2
 800f710:	f105 010c 	add.w	r1, r5, #12
 800f714:	300c      	adds	r0, #12
 800f716:	f7ff fa92 	bl	800ec3e <memcpy>
 800f71a:	2201      	movs	r2, #1
 800f71c:	4631      	mov	r1, r6
 800f71e:	4648      	mov	r0, r9
 800f720:	f000 fbfc 	bl	800ff1c <__lshift>
 800f724:	f10a 0301 	add.w	r3, sl, #1
 800f728:	9300      	str	r3, [sp, #0]
 800f72a:	eb0a 030b 	add.w	r3, sl, fp
 800f72e:	9308      	str	r3, [sp, #32]
 800f730:	9b04      	ldr	r3, [sp, #16]
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	462f      	mov	r7, r5
 800f738:	9306      	str	r3, [sp, #24]
 800f73a:	4605      	mov	r5, r0
 800f73c:	9b00      	ldr	r3, [sp, #0]
 800f73e:	9802      	ldr	r0, [sp, #8]
 800f740:	4621      	mov	r1, r4
 800f742:	f103 3bff 	add.w	fp, r3, #4294967295
 800f746:	f7ff fa88 	bl	800ec5a <quorem>
 800f74a:	4603      	mov	r3, r0
 800f74c:	3330      	adds	r3, #48	@ 0x30
 800f74e:	9003      	str	r0, [sp, #12]
 800f750:	4639      	mov	r1, r7
 800f752:	9802      	ldr	r0, [sp, #8]
 800f754:	9309      	str	r3, [sp, #36]	@ 0x24
 800f756:	f000 fc4d 	bl	800fff4 <__mcmp>
 800f75a:	462a      	mov	r2, r5
 800f75c:	9004      	str	r0, [sp, #16]
 800f75e:	4621      	mov	r1, r4
 800f760:	4648      	mov	r0, r9
 800f762:	f000 fc63 	bl	801002c <__mdiff>
 800f766:	68c2      	ldr	r2, [r0, #12]
 800f768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f76a:	4606      	mov	r6, r0
 800f76c:	bb02      	cbnz	r2, 800f7b0 <_dtoa_r+0xa40>
 800f76e:	4601      	mov	r1, r0
 800f770:	9802      	ldr	r0, [sp, #8]
 800f772:	f000 fc3f 	bl	800fff4 <__mcmp>
 800f776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f778:	4602      	mov	r2, r0
 800f77a:	4631      	mov	r1, r6
 800f77c:	4648      	mov	r0, r9
 800f77e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f780:	9309      	str	r3, [sp, #36]	@ 0x24
 800f782:	f000 fa05 	bl	800fb90 <_Bfree>
 800f786:	9b07      	ldr	r3, [sp, #28]
 800f788:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f78a:	9e00      	ldr	r6, [sp, #0]
 800f78c:	ea42 0103 	orr.w	r1, r2, r3
 800f790:	9b06      	ldr	r3, [sp, #24]
 800f792:	4319      	orrs	r1, r3
 800f794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f796:	d10d      	bne.n	800f7b4 <_dtoa_r+0xa44>
 800f798:	2b39      	cmp	r3, #57	@ 0x39
 800f79a:	d027      	beq.n	800f7ec <_dtoa_r+0xa7c>
 800f79c:	9a04      	ldr	r2, [sp, #16]
 800f79e:	2a00      	cmp	r2, #0
 800f7a0:	dd01      	ble.n	800f7a6 <_dtoa_r+0xa36>
 800f7a2:	9b03      	ldr	r3, [sp, #12]
 800f7a4:	3331      	adds	r3, #49	@ 0x31
 800f7a6:	f88b 3000 	strb.w	r3, [fp]
 800f7aa:	e52e      	b.n	800f20a <_dtoa_r+0x49a>
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	e7b9      	b.n	800f724 <_dtoa_r+0x9b4>
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	e7e2      	b.n	800f77a <_dtoa_r+0xa0a>
 800f7b4:	9904      	ldr	r1, [sp, #16]
 800f7b6:	2900      	cmp	r1, #0
 800f7b8:	db04      	blt.n	800f7c4 <_dtoa_r+0xa54>
 800f7ba:	9807      	ldr	r0, [sp, #28]
 800f7bc:	4301      	orrs	r1, r0
 800f7be:	9806      	ldr	r0, [sp, #24]
 800f7c0:	4301      	orrs	r1, r0
 800f7c2:	d120      	bne.n	800f806 <_dtoa_r+0xa96>
 800f7c4:	2a00      	cmp	r2, #0
 800f7c6:	ddee      	ble.n	800f7a6 <_dtoa_r+0xa36>
 800f7c8:	9902      	ldr	r1, [sp, #8]
 800f7ca:	9300      	str	r3, [sp, #0]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	4648      	mov	r0, r9
 800f7d0:	f000 fba4 	bl	800ff1c <__lshift>
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	9002      	str	r0, [sp, #8]
 800f7d8:	f000 fc0c 	bl	800fff4 <__mcmp>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	9b00      	ldr	r3, [sp, #0]
 800f7e0:	dc02      	bgt.n	800f7e8 <_dtoa_r+0xa78>
 800f7e2:	d1e0      	bne.n	800f7a6 <_dtoa_r+0xa36>
 800f7e4:	07da      	lsls	r2, r3, #31
 800f7e6:	d5de      	bpl.n	800f7a6 <_dtoa_r+0xa36>
 800f7e8:	2b39      	cmp	r3, #57	@ 0x39
 800f7ea:	d1da      	bne.n	800f7a2 <_dtoa_r+0xa32>
 800f7ec:	2339      	movs	r3, #57	@ 0x39
 800f7ee:	f88b 3000 	strb.w	r3, [fp]
 800f7f2:	4633      	mov	r3, r6
 800f7f4:	461e      	mov	r6, r3
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7fc:	2a39      	cmp	r2, #57	@ 0x39
 800f7fe:	d04e      	beq.n	800f89e <_dtoa_r+0xb2e>
 800f800:	3201      	adds	r2, #1
 800f802:	701a      	strb	r2, [r3, #0]
 800f804:	e501      	b.n	800f20a <_dtoa_r+0x49a>
 800f806:	2a00      	cmp	r2, #0
 800f808:	dd03      	ble.n	800f812 <_dtoa_r+0xaa2>
 800f80a:	2b39      	cmp	r3, #57	@ 0x39
 800f80c:	d0ee      	beq.n	800f7ec <_dtoa_r+0xa7c>
 800f80e:	3301      	adds	r3, #1
 800f810:	e7c9      	b.n	800f7a6 <_dtoa_r+0xa36>
 800f812:	9a00      	ldr	r2, [sp, #0]
 800f814:	9908      	ldr	r1, [sp, #32]
 800f816:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f81a:	428a      	cmp	r2, r1
 800f81c:	d028      	beq.n	800f870 <_dtoa_r+0xb00>
 800f81e:	9902      	ldr	r1, [sp, #8]
 800f820:	2300      	movs	r3, #0
 800f822:	220a      	movs	r2, #10
 800f824:	4648      	mov	r0, r9
 800f826:	f000 f9d5 	bl	800fbd4 <__multadd>
 800f82a:	42af      	cmp	r7, r5
 800f82c:	9002      	str	r0, [sp, #8]
 800f82e:	f04f 0300 	mov.w	r3, #0
 800f832:	f04f 020a 	mov.w	r2, #10
 800f836:	4639      	mov	r1, r7
 800f838:	4648      	mov	r0, r9
 800f83a:	d107      	bne.n	800f84c <_dtoa_r+0xadc>
 800f83c:	f000 f9ca 	bl	800fbd4 <__multadd>
 800f840:	4607      	mov	r7, r0
 800f842:	4605      	mov	r5, r0
 800f844:	9b00      	ldr	r3, [sp, #0]
 800f846:	3301      	adds	r3, #1
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	e777      	b.n	800f73c <_dtoa_r+0x9cc>
 800f84c:	f000 f9c2 	bl	800fbd4 <__multadd>
 800f850:	4629      	mov	r1, r5
 800f852:	4607      	mov	r7, r0
 800f854:	2300      	movs	r3, #0
 800f856:	220a      	movs	r2, #10
 800f858:	4648      	mov	r0, r9
 800f85a:	f000 f9bb 	bl	800fbd4 <__multadd>
 800f85e:	4605      	mov	r5, r0
 800f860:	e7f0      	b.n	800f844 <_dtoa_r+0xad4>
 800f862:	f1bb 0f00 	cmp.w	fp, #0
 800f866:	bfcc      	ite	gt
 800f868:	465e      	movgt	r6, fp
 800f86a:	2601      	movle	r6, #1
 800f86c:	4456      	add	r6, sl
 800f86e:	2700      	movs	r7, #0
 800f870:	9902      	ldr	r1, [sp, #8]
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	2201      	movs	r2, #1
 800f876:	4648      	mov	r0, r9
 800f878:	f000 fb50 	bl	800ff1c <__lshift>
 800f87c:	4621      	mov	r1, r4
 800f87e:	9002      	str	r0, [sp, #8]
 800f880:	f000 fbb8 	bl	800fff4 <__mcmp>
 800f884:	2800      	cmp	r0, #0
 800f886:	dcb4      	bgt.n	800f7f2 <_dtoa_r+0xa82>
 800f888:	d102      	bne.n	800f890 <_dtoa_r+0xb20>
 800f88a:	9b00      	ldr	r3, [sp, #0]
 800f88c:	07db      	lsls	r3, r3, #31
 800f88e:	d4b0      	bmi.n	800f7f2 <_dtoa_r+0xa82>
 800f890:	4633      	mov	r3, r6
 800f892:	461e      	mov	r6, r3
 800f894:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f898:	2a30      	cmp	r2, #48	@ 0x30
 800f89a:	d0fa      	beq.n	800f892 <_dtoa_r+0xb22>
 800f89c:	e4b5      	b.n	800f20a <_dtoa_r+0x49a>
 800f89e:	459a      	cmp	sl, r3
 800f8a0:	d1a8      	bne.n	800f7f4 <_dtoa_r+0xa84>
 800f8a2:	2331      	movs	r3, #49	@ 0x31
 800f8a4:	f108 0801 	add.w	r8, r8, #1
 800f8a8:	f88a 3000 	strb.w	r3, [sl]
 800f8ac:	e4ad      	b.n	800f20a <_dtoa_r+0x49a>
 800f8ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f8b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f90c <_dtoa_r+0xb9c>
 800f8b4:	b11b      	cbz	r3, 800f8be <_dtoa_r+0xb4e>
 800f8b6:	f10a 0308 	add.w	r3, sl, #8
 800f8ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f8bc:	6013      	str	r3, [r2, #0]
 800f8be:	4650      	mov	r0, sl
 800f8c0:	b017      	add	sp, #92	@ 0x5c
 800f8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c6:	9b07      	ldr	r3, [sp, #28]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	f77f ae2e 	ble.w	800f52a <_dtoa_r+0x7ba>
 800f8ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8d0:	9308      	str	r3, [sp, #32]
 800f8d2:	2001      	movs	r0, #1
 800f8d4:	e64d      	b.n	800f572 <_dtoa_r+0x802>
 800f8d6:	f1bb 0f00 	cmp.w	fp, #0
 800f8da:	f77f aed9 	ble.w	800f690 <_dtoa_r+0x920>
 800f8de:	4656      	mov	r6, sl
 800f8e0:	9802      	ldr	r0, [sp, #8]
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	f7ff f9b9 	bl	800ec5a <quorem>
 800f8e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f8ec:	f806 3b01 	strb.w	r3, [r6], #1
 800f8f0:	eba6 020a 	sub.w	r2, r6, sl
 800f8f4:	4593      	cmp	fp, r2
 800f8f6:	ddb4      	ble.n	800f862 <_dtoa_r+0xaf2>
 800f8f8:	9902      	ldr	r1, [sp, #8]
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	220a      	movs	r2, #10
 800f8fe:	4648      	mov	r0, r9
 800f900:	f000 f968 	bl	800fbd4 <__multadd>
 800f904:	9002      	str	r0, [sp, #8]
 800f906:	e7eb      	b.n	800f8e0 <_dtoa_r+0xb70>
 800f908:	08011180 	.word	0x08011180
 800f90c:	08011104 	.word	0x08011104

0800f910 <_free_r>:
 800f910:	b538      	push	{r3, r4, r5, lr}
 800f912:	4605      	mov	r5, r0
 800f914:	2900      	cmp	r1, #0
 800f916:	d041      	beq.n	800f99c <_free_r+0x8c>
 800f918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f91c:	1f0c      	subs	r4, r1, #4
 800f91e:	2b00      	cmp	r3, #0
 800f920:	bfb8      	it	lt
 800f922:	18e4      	addlt	r4, r4, r3
 800f924:	f000 f8e8 	bl	800faf8 <__malloc_lock>
 800f928:	4a1d      	ldr	r2, [pc, #116]	@ (800f9a0 <_free_r+0x90>)
 800f92a:	6813      	ldr	r3, [r2, #0]
 800f92c:	b933      	cbnz	r3, 800f93c <_free_r+0x2c>
 800f92e:	6063      	str	r3, [r4, #4]
 800f930:	6014      	str	r4, [r2, #0]
 800f932:	4628      	mov	r0, r5
 800f934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f938:	f000 b8e4 	b.w	800fb04 <__malloc_unlock>
 800f93c:	42a3      	cmp	r3, r4
 800f93e:	d908      	bls.n	800f952 <_free_r+0x42>
 800f940:	6820      	ldr	r0, [r4, #0]
 800f942:	1821      	adds	r1, r4, r0
 800f944:	428b      	cmp	r3, r1
 800f946:	bf01      	itttt	eq
 800f948:	6819      	ldreq	r1, [r3, #0]
 800f94a:	685b      	ldreq	r3, [r3, #4]
 800f94c:	1809      	addeq	r1, r1, r0
 800f94e:	6021      	streq	r1, [r4, #0]
 800f950:	e7ed      	b.n	800f92e <_free_r+0x1e>
 800f952:	461a      	mov	r2, r3
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	b10b      	cbz	r3, 800f95c <_free_r+0x4c>
 800f958:	42a3      	cmp	r3, r4
 800f95a:	d9fa      	bls.n	800f952 <_free_r+0x42>
 800f95c:	6811      	ldr	r1, [r2, #0]
 800f95e:	1850      	adds	r0, r2, r1
 800f960:	42a0      	cmp	r0, r4
 800f962:	d10b      	bne.n	800f97c <_free_r+0x6c>
 800f964:	6820      	ldr	r0, [r4, #0]
 800f966:	4401      	add	r1, r0
 800f968:	1850      	adds	r0, r2, r1
 800f96a:	4283      	cmp	r3, r0
 800f96c:	6011      	str	r1, [r2, #0]
 800f96e:	d1e0      	bne.n	800f932 <_free_r+0x22>
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	6053      	str	r3, [r2, #4]
 800f976:	4408      	add	r0, r1
 800f978:	6010      	str	r0, [r2, #0]
 800f97a:	e7da      	b.n	800f932 <_free_r+0x22>
 800f97c:	d902      	bls.n	800f984 <_free_r+0x74>
 800f97e:	230c      	movs	r3, #12
 800f980:	602b      	str	r3, [r5, #0]
 800f982:	e7d6      	b.n	800f932 <_free_r+0x22>
 800f984:	6820      	ldr	r0, [r4, #0]
 800f986:	1821      	adds	r1, r4, r0
 800f988:	428b      	cmp	r3, r1
 800f98a:	bf04      	itt	eq
 800f98c:	6819      	ldreq	r1, [r3, #0]
 800f98e:	685b      	ldreq	r3, [r3, #4]
 800f990:	6063      	str	r3, [r4, #4]
 800f992:	bf04      	itt	eq
 800f994:	1809      	addeq	r1, r1, r0
 800f996:	6021      	streq	r1, [r4, #0]
 800f998:	6054      	str	r4, [r2, #4]
 800f99a:	e7ca      	b.n	800f932 <_free_r+0x22>
 800f99c:	bd38      	pop	{r3, r4, r5, pc}
 800f99e:	bf00      	nop
 800f9a0:	2000a6d0 	.word	0x2000a6d0

0800f9a4 <malloc>:
 800f9a4:	4b02      	ldr	r3, [pc, #8]	@ (800f9b0 <malloc+0xc>)
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	6818      	ldr	r0, [r3, #0]
 800f9aa:	f000 b825 	b.w	800f9f8 <_malloc_r>
 800f9ae:	bf00      	nop
 800f9b0:	20000194 	.word	0x20000194

0800f9b4 <sbrk_aligned>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	4e0f      	ldr	r6, [pc, #60]	@ (800f9f4 <sbrk_aligned+0x40>)
 800f9b8:	460c      	mov	r4, r1
 800f9ba:	6831      	ldr	r1, [r6, #0]
 800f9bc:	4605      	mov	r5, r0
 800f9be:	b911      	cbnz	r1, 800f9c6 <sbrk_aligned+0x12>
 800f9c0:	f000 fe3e 	bl	8010640 <_sbrk_r>
 800f9c4:	6030      	str	r0, [r6, #0]
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f000 fe39 	bl	8010640 <_sbrk_r>
 800f9ce:	1c43      	adds	r3, r0, #1
 800f9d0:	d103      	bne.n	800f9da <sbrk_aligned+0x26>
 800f9d2:	f04f 34ff 	mov.w	r4, #4294967295
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	bd70      	pop	{r4, r5, r6, pc}
 800f9da:	1cc4      	adds	r4, r0, #3
 800f9dc:	f024 0403 	bic.w	r4, r4, #3
 800f9e0:	42a0      	cmp	r0, r4
 800f9e2:	d0f8      	beq.n	800f9d6 <sbrk_aligned+0x22>
 800f9e4:	1a21      	subs	r1, r4, r0
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	f000 fe2a 	bl	8010640 <_sbrk_r>
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	d1f2      	bne.n	800f9d6 <sbrk_aligned+0x22>
 800f9f0:	e7ef      	b.n	800f9d2 <sbrk_aligned+0x1e>
 800f9f2:	bf00      	nop
 800f9f4:	2000a6cc 	.word	0x2000a6cc

0800f9f8 <_malloc_r>:
 800f9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9fc:	1ccd      	adds	r5, r1, #3
 800f9fe:	f025 0503 	bic.w	r5, r5, #3
 800fa02:	3508      	adds	r5, #8
 800fa04:	2d0c      	cmp	r5, #12
 800fa06:	bf38      	it	cc
 800fa08:	250c      	movcc	r5, #12
 800fa0a:	2d00      	cmp	r5, #0
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	db01      	blt.n	800fa14 <_malloc_r+0x1c>
 800fa10:	42a9      	cmp	r1, r5
 800fa12:	d904      	bls.n	800fa1e <_malloc_r+0x26>
 800fa14:	230c      	movs	r3, #12
 800fa16:	6033      	str	r3, [r6, #0]
 800fa18:	2000      	movs	r0, #0
 800fa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800faf4 <_malloc_r+0xfc>
 800fa22:	f000 f869 	bl	800faf8 <__malloc_lock>
 800fa26:	f8d8 3000 	ldr.w	r3, [r8]
 800fa2a:	461c      	mov	r4, r3
 800fa2c:	bb44      	cbnz	r4, 800fa80 <_malloc_r+0x88>
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7ff ffbf 	bl	800f9b4 <sbrk_aligned>
 800fa36:	1c43      	adds	r3, r0, #1
 800fa38:	4604      	mov	r4, r0
 800fa3a:	d158      	bne.n	800faee <_malloc_r+0xf6>
 800fa3c:	f8d8 4000 	ldr.w	r4, [r8]
 800fa40:	4627      	mov	r7, r4
 800fa42:	2f00      	cmp	r7, #0
 800fa44:	d143      	bne.n	800face <_malloc_r+0xd6>
 800fa46:	2c00      	cmp	r4, #0
 800fa48:	d04b      	beq.n	800fae2 <_malloc_r+0xea>
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	4639      	mov	r1, r7
 800fa4e:	4630      	mov	r0, r6
 800fa50:	eb04 0903 	add.w	r9, r4, r3
 800fa54:	f000 fdf4 	bl	8010640 <_sbrk_r>
 800fa58:	4581      	cmp	r9, r0
 800fa5a:	d142      	bne.n	800fae2 <_malloc_r+0xea>
 800fa5c:	6821      	ldr	r1, [r4, #0]
 800fa5e:	1a6d      	subs	r5, r5, r1
 800fa60:	4629      	mov	r1, r5
 800fa62:	4630      	mov	r0, r6
 800fa64:	f7ff ffa6 	bl	800f9b4 <sbrk_aligned>
 800fa68:	3001      	adds	r0, #1
 800fa6a:	d03a      	beq.n	800fae2 <_malloc_r+0xea>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	442b      	add	r3, r5
 800fa70:	6023      	str	r3, [r4, #0]
 800fa72:	f8d8 3000 	ldr.w	r3, [r8]
 800fa76:	685a      	ldr	r2, [r3, #4]
 800fa78:	bb62      	cbnz	r2, 800fad4 <_malloc_r+0xdc>
 800fa7a:	f8c8 7000 	str.w	r7, [r8]
 800fa7e:	e00f      	b.n	800faa0 <_malloc_r+0xa8>
 800fa80:	6822      	ldr	r2, [r4, #0]
 800fa82:	1b52      	subs	r2, r2, r5
 800fa84:	d420      	bmi.n	800fac8 <_malloc_r+0xd0>
 800fa86:	2a0b      	cmp	r2, #11
 800fa88:	d917      	bls.n	800faba <_malloc_r+0xc2>
 800fa8a:	1961      	adds	r1, r4, r5
 800fa8c:	42a3      	cmp	r3, r4
 800fa8e:	6025      	str	r5, [r4, #0]
 800fa90:	bf18      	it	ne
 800fa92:	6059      	strne	r1, [r3, #4]
 800fa94:	6863      	ldr	r3, [r4, #4]
 800fa96:	bf08      	it	eq
 800fa98:	f8c8 1000 	streq.w	r1, [r8]
 800fa9c:	5162      	str	r2, [r4, r5]
 800fa9e:	604b      	str	r3, [r1, #4]
 800faa0:	4630      	mov	r0, r6
 800faa2:	f000 f82f 	bl	800fb04 <__malloc_unlock>
 800faa6:	f104 000b 	add.w	r0, r4, #11
 800faaa:	1d23      	adds	r3, r4, #4
 800faac:	f020 0007 	bic.w	r0, r0, #7
 800fab0:	1ac2      	subs	r2, r0, r3
 800fab2:	bf1c      	itt	ne
 800fab4:	1a1b      	subne	r3, r3, r0
 800fab6:	50a3      	strne	r3, [r4, r2]
 800fab8:	e7af      	b.n	800fa1a <_malloc_r+0x22>
 800faba:	6862      	ldr	r2, [r4, #4]
 800fabc:	42a3      	cmp	r3, r4
 800fabe:	bf0c      	ite	eq
 800fac0:	f8c8 2000 	streq.w	r2, [r8]
 800fac4:	605a      	strne	r2, [r3, #4]
 800fac6:	e7eb      	b.n	800faa0 <_malloc_r+0xa8>
 800fac8:	4623      	mov	r3, r4
 800faca:	6864      	ldr	r4, [r4, #4]
 800facc:	e7ae      	b.n	800fa2c <_malloc_r+0x34>
 800face:	463c      	mov	r4, r7
 800fad0:	687f      	ldr	r7, [r7, #4]
 800fad2:	e7b6      	b.n	800fa42 <_malloc_r+0x4a>
 800fad4:	461a      	mov	r2, r3
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	42a3      	cmp	r3, r4
 800fada:	d1fb      	bne.n	800fad4 <_malloc_r+0xdc>
 800fadc:	2300      	movs	r3, #0
 800fade:	6053      	str	r3, [r2, #4]
 800fae0:	e7de      	b.n	800faa0 <_malloc_r+0xa8>
 800fae2:	230c      	movs	r3, #12
 800fae4:	6033      	str	r3, [r6, #0]
 800fae6:	4630      	mov	r0, r6
 800fae8:	f000 f80c 	bl	800fb04 <__malloc_unlock>
 800faec:	e794      	b.n	800fa18 <_malloc_r+0x20>
 800faee:	6005      	str	r5, [r0, #0]
 800faf0:	e7d6      	b.n	800faa0 <_malloc_r+0xa8>
 800faf2:	bf00      	nop
 800faf4:	2000a6d0 	.word	0x2000a6d0

0800faf8 <__malloc_lock>:
 800faf8:	4801      	ldr	r0, [pc, #4]	@ (800fb00 <__malloc_lock+0x8>)
 800fafa:	f7ff b89e 	b.w	800ec3a <__retarget_lock_acquire_recursive>
 800fafe:	bf00      	nop
 800fb00:	2000a6c8 	.word	0x2000a6c8

0800fb04 <__malloc_unlock>:
 800fb04:	4801      	ldr	r0, [pc, #4]	@ (800fb0c <__malloc_unlock+0x8>)
 800fb06:	f7ff b899 	b.w	800ec3c <__retarget_lock_release_recursive>
 800fb0a:	bf00      	nop
 800fb0c:	2000a6c8 	.word	0x2000a6c8

0800fb10 <_Balloc>:
 800fb10:	b570      	push	{r4, r5, r6, lr}
 800fb12:	69c6      	ldr	r6, [r0, #28]
 800fb14:	4604      	mov	r4, r0
 800fb16:	460d      	mov	r5, r1
 800fb18:	b976      	cbnz	r6, 800fb38 <_Balloc+0x28>
 800fb1a:	2010      	movs	r0, #16
 800fb1c:	f7ff ff42 	bl	800f9a4 <malloc>
 800fb20:	4602      	mov	r2, r0
 800fb22:	61e0      	str	r0, [r4, #28]
 800fb24:	b920      	cbnz	r0, 800fb30 <_Balloc+0x20>
 800fb26:	4b18      	ldr	r3, [pc, #96]	@ (800fb88 <_Balloc+0x78>)
 800fb28:	4818      	ldr	r0, [pc, #96]	@ (800fb8c <_Balloc+0x7c>)
 800fb2a:	216b      	movs	r1, #107	@ 0x6b
 800fb2c:	f000 fd98 	bl	8010660 <__assert_func>
 800fb30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb34:	6006      	str	r6, [r0, #0]
 800fb36:	60c6      	str	r6, [r0, #12]
 800fb38:	69e6      	ldr	r6, [r4, #28]
 800fb3a:	68f3      	ldr	r3, [r6, #12]
 800fb3c:	b183      	cbz	r3, 800fb60 <_Balloc+0x50>
 800fb3e:	69e3      	ldr	r3, [r4, #28]
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb46:	b9b8      	cbnz	r0, 800fb78 <_Balloc+0x68>
 800fb48:	2101      	movs	r1, #1
 800fb4a:	fa01 f605 	lsl.w	r6, r1, r5
 800fb4e:	1d72      	adds	r2, r6, #5
 800fb50:	0092      	lsls	r2, r2, #2
 800fb52:	4620      	mov	r0, r4
 800fb54:	f000 fda2 	bl	801069c <_calloc_r>
 800fb58:	b160      	cbz	r0, 800fb74 <_Balloc+0x64>
 800fb5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb5e:	e00e      	b.n	800fb7e <_Balloc+0x6e>
 800fb60:	2221      	movs	r2, #33	@ 0x21
 800fb62:	2104      	movs	r1, #4
 800fb64:	4620      	mov	r0, r4
 800fb66:	f000 fd99 	bl	801069c <_calloc_r>
 800fb6a:	69e3      	ldr	r3, [r4, #28]
 800fb6c:	60f0      	str	r0, [r6, #12]
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1e4      	bne.n	800fb3e <_Balloc+0x2e>
 800fb74:	2000      	movs	r0, #0
 800fb76:	bd70      	pop	{r4, r5, r6, pc}
 800fb78:	6802      	ldr	r2, [r0, #0]
 800fb7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb84:	e7f7      	b.n	800fb76 <_Balloc+0x66>
 800fb86:	bf00      	nop
 800fb88:	08011111 	.word	0x08011111
 800fb8c:	08011191 	.word	0x08011191

0800fb90 <_Bfree>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	69c6      	ldr	r6, [r0, #28]
 800fb94:	4605      	mov	r5, r0
 800fb96:	460c      	mov	r4, r1
 800fb98:	b976      	cbnz	r6, 800fbb8 <_Bfree+0x28>
 800fb9a:	2010      	movs	r0, #16
 800fb9c:	f7ff ff02 	bl	800f9a4 <malloc>
 800fba0:	4602      	mov	r2, r0
 800fba2:	61e8      	str	r0, [r5, #28]
 800fba4:	b920      	cbnz	r0, 800fbb0 <_Bfree+0x20>
 800fba6:	4b09      	ldr	r3, [pc, #36]	@ (800fbcc <_Bfree+0x3c>)
 800fba8:	4809      	ldr	r0, [pc, #36]	@ (800fbd0 <_Bfree+0x40>)
 800fbaa:	218f      	movs	r1, #143	@ 0x8f
 800fbac:	f000 fd58 	bl	8010660 <__assert_func>
 800fbb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbb4:	6006      	str	r6, [r0, #0]
 800fbb6:	60c6      	str	r6, [r0, #12]
 800fbb8:	b13c      	cbz	r4, 800fbca <_Bfree+0x3a>
 800fbba:	69eb      	ldr	r3, [r5, #28]
 800fbbc:	6862      	ldr	r2, [r4, #4]
 800fbbe:	68db      	ldr	r3, [r3, #12]
 800fbc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbc4:	6021      	str	r1, [r4, #0]
 800fbc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbca:	bd70      	pop	{r4, r5, r6, pc}
 800fbcc:	08011111 	.word	0x08011111
 800fbd0:	08011191 	.word	0x08011191

0800fbd4 <__multadd>:
 800fbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd8:	690d      	ldr	r5, [r1, #16]
 800fbda:	4607      	mov	r7, r0
 800fbdc:	460c      	mov	r4, r1
 800fbde:	461e      	mov	r6, r3
 800fbe0:	f101 0c14 	add.w	ip, r1, #20
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	f8dc 3000 	ldr.w	r3, [ip]
 800fbea:	b299      	uxth	r1, r3
 800fbec:	fb02 6101 	mla	r1, r2, r1, r6
 800fbf0:	0c1e      	lsrs	r6, r3, #16
 800fbf2:	0c0b      	lsrs	r3, r1, #16
 800fbf4:	fb02 3306 	mla	r3, r2, r6, r3
 800fbf8:	b289      	uxth	r1, r1
 800fbfa:	3001      	adds	r0, #1
 800fbfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc00:	4285      	cmp	r5, r0
 800fc02:	f84c 1b04 	str.w	r1, [ip], #4
 800fc06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc0a:	dcec      	bgt.n	800fbe6 <__multadd+0x12>
 800fc0c:	b30e      	cbz	r6, 800fc52 <__multadd+0x7e>
 800fc0e:	68a3      	ldr	r3, [r4, #8]
 800fc10:	42ab      	cmp	r3, r5
 800fc12:	dc19      	bgt.n	800fc48 <__multadd+0x74>
 800fc14:	6861      	ldr	r1, [r4, #4]
 800fc16:	4638      	mov	r0, r7
 800fc18:	3101      	adds	r1, #1
 800fc1a:	f7ff ff79 	bl	800fb10 <_Balloc>
 800fc1e:	4680      	mov	r8, r0
 800fc20:	b928      	cbnz	r0, 800fc2e <__multadd+0x5a>
 800fc22:	4602      	mov	r2, r0
 800fc24:	4b0c      	ldr	r3, [pc, #48]	@ (800fc58 <__multadd+0x84>)
 800fc26:	480d      	ldr	r0, [pc, #52]	@ (800fc5c <__multadd+0x88>)
 800fc28:	21ba      	movs	r1, #186	@ 0xba
 800fc2a:	f000 fd19 	bl	8010660 <__assert_func>
 800fc2e:	6922      	ldr	r2, [r4, #16]
 800fc30:	3202      	adds	r2, #2
 800fc32:	f104 010c 	add.w	r1, r4, #12
 800fc36:	0092      	lsls	r2, r2, #2
 800fc38:	300c      	adds	r0, #12
 800fc3a:	f7ff f800 	bl	800ec3e <memcpy>
 800fc3e:	4621      	mov	r1, r4
 800fc40:	4638      	mov	r0, r7
 800fc42:	f7ff ffa5 	bl	800fb90 <_Bfree>
 800fc46:	4644      	mov	r4, r8
 800fc48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc4c:	3501      	adds	r5, #1
 800fc4e:	615e      	str	r6, [r3, #20]
 800fc50:	6125      	str	r5, [r4, #16]
 800fc52:	4620      	mov	r0, r4
 800fc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc58:	08011180 	.word	0x08011180
 800fc5c:	08011191 	.word	0x08011191

0800fc60 <__hi0bits>:
 800fc60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fc64:	4603      	mov	r3, r0
 800fc66:	bf36      	itet	cc
 800fc68:	0403      	lslcc	r3, r0, #16
 800fc6a:	2000      	movcs	r0, #0
 800fc6c:	2010      	movcc	r0, #16
 800fc6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc72:	bf3c      	itt	cc
 800fc74:	021b      	lslcc	r3, r3, #8
 800fc76:	3008      	addcc	r0, #8
 800fc78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc7c:	bf3c      	itt	cc
 800fc7e:	011b      	lslcc	r3, r3, #4
 800fc80:	3004      	addcc	r0, #4
 800fc82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc86:	bf3c      	itt	cc
 800fc88:	009b      	lslcc	r3, r3, #2
 800fc8a:	3002      	addcc	r0, #2
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	db05      	blt.n	800fc9c <__hi0bits+0x3c>
 800fc90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fc94:	f100 0001 	add.w	r0, r0, #1
 800fc98:	bf08      	it	eq
 800fc9a:	2020      	moveq	r0, #32
 800fc9c:	4770      	bx	lr

0800fc9e <__lo0bits>:
 800fc9e:	6803      	ldr	r3, [r0, #0]
 800fca0:	4602      	mov	r2, r0
 800fca2:	f013 0007 	ands.w	r0, r3, #7
 800fca6:	d00b      	beq.n	800fcc0 <__lo0bits+0x22>
 800fca8:	07d9      	lsls	r1, r3, #31
 800fcaa:	d421      	bmi.n	800fcf0 <__lo0bits+0x52>
 800fcac:	0798      	lsls	r0, r3, #30
 800fcae:	bf49      	itett	mi
 800fcb0:	085b      	lsrmi	r3, r3, #1
 800fcb2:	089b      	lsrpl	r3, r3, #2
 800fcb4:	2001      	movmi	r0, #1
 800fcb6:	6013      	strmi	r3, [r2, #0]
 800fcb8:	bf5c      	itt	pl
 800fcba:	6013      	strpl	r3, [r2, #0]
 800fcbc:	2002      	movpl	r0, #2
 800fcbe:	4770      	bx	lr
 800fcc0:	b299      	uxth	r1, r3
 800fcc2:	b909      	cbnz	r1, 800fcc8 <__lo0bits+0x2a>
 800fcc4:	0c1b      	lsrs	r3, r3, #16
 800fcc6:	2010      	movs	r0, #16
 800fcc8:	b2d9      	uxtb	r1, r3
 800fcca:	b909      	cbnz	r1, 800fcd0 <__lo0bits+0x32>
 800fccc:	3008      	adds	r0, #8
 800fcce:	0a1b      	lsrs	r3, r3, #8
 800fcd0:	0719      	lsls	r1, r3, #28
 800fcd2:	bf04      	itt	eq
 800fcd4:	091b      	lsreq	r3, r3, #4
 800fcd6:	3004      	addeq	r0, #4
 800fcd8:	0799      	lsls	r1, r3, #30
 800fcda:	bf04      	itt	eq
 800fcdc:	089b      	lsreq	r3, r3, #2
 800fcde:	3002      	addeq	r0, #2
 800fce0:	07d9      	lsls	r1, r3, #31
 800fce2:	d403      	bmi.n	800fcec <__lo0bits+0x4e>
 800fce4:	085b      	lsrs	r3, r3, #1
 800fce6:	f100 0001 	add.w	r0, r0, #1
 800fcea:	d003      	beq.n	800fcf4 <__lo0bits+0x56>
 800fcec:	6013      	str	r3, [r2, #0]
 800fcee:	4770      	bx	lr
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	4770      	bx	lr
 800fcf4:	2020      	movs	r0, #32
 800fcf6:	4770      	bx	lr

0800fcf8 <__i2b>:
 800fcf8:	b510      	push	{r4, lr}
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	2101      	movs	r1, #1
 800fcfe:	f7ff ff07 	bl	800fb10 <_Balloc>
 800fd02:	4602      	mov	r2, r0
 800fd04:	b928      	cbnz	r0, 800fd12 <__i2b+0x1a>
 800fd06:	4b05      	ldr	r3, [pc, #20]	@ (800fd1c <__i2b+0x24>)
 800fd08:	4805      	ldr	r0, [pc, #20]	@ (800fd20 <__i2b+0x28>)
 800fd0a:	f240 1145 	movw	r1, #325	@ 0x145
 800fd0e:	f000 fca7 	bl	8010660 <__assert_func>
 800fd12:	2301      	movs	r3, #1
 800fd14:	6144      	str	r4, [r0, #20]
 800fd16:	6103      	str	r3, [r0, #16]
 800fd18:	bd10      	pop	{r4, pc}
 800fd1a:	bf00      	nop
 800fd1c:	08011180 	.word	0x08011180
 800fd20:	08011191 	.word	0x08011191

0800fd24 <__multiply>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	4617      	mov	r7, r2
 800fd2a:	690a      	ldr	r2, [r1, #16]
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	bfa8      	it	ge
 800fd32:	463b      	movge	r3, r7
 800fd34:	4689      	mov	r9, r1
 800fd36:	bfa4      	itt	ge
 800fd38:	460f      	movge	r7, r1
 800fd3a:	4699      	movge	r9, r3
 800fd3c:	693d      	ldr	r5, [r7, #16]
 800fd3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	6879      	ldr	r1, [r7, #4]
 800fd46:	eb05 060a 	add.w	r6, r5, sl
 800fd4a:	42b3      	cmp	r3, r6
 800fd4c:	b085      	sub	sp, #20
 800fd4e:	bfb8      	it	lt
 800fd50:	3101      	addlt	r1, #1
 800fd52:	f7ff fedd 	bl	800fb10 <_Balloc>
 800fd56:	b930      	cbnz	r0, 800fd66 <__multiply+0x42>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	4b41      	ldr	r3, [pc, #260]	@ (800fe60 <__multiply+0x13c>)
 800fd5c:	4841      	ldr	r0, [pc, #260]	@ (800fe64 <__multiply+0x140>)
 800fd5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fd62:	f000 fc7d 	bl	8010660 <__assert_func>
 800fd66:	f100 0414 	add.w	r4, r0, #20
 800fd6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fd6e:	4623      	mov	r3, r4
 800fd70:	2200      	movs	r2, #0
 800fd72:	4573      	cmp	r3, lr
 800fd74:	d320      	bcc.n	800fdb8 <__multiply+0x94>
 800fd76:	f107 0814 	add.w	r8, r7, #20
 800fd7a:	f109 0114 	add.w	r1, r9, #20
 800fd7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fd82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fd86:	9302      	str	r3, [sp, #8]
 800fd88:	1beb      	subs	r3, r5, r7
 800fd8a:	3b15      	subs	r3, #21
 800fd8c:	f023 0303 	bic.w	r3, r3, #3
 800fd90:	3304      	adds	r3, #4
 800fd92:	3715      	adds	r7, #21
 800fd94:	42bd      	cmp	r5, r7
 800fd96:	bf38      	it	cc
 800fd98:	2304      	movcc	r3, #4
 800fd9a:	9301      	str	r3, [sp, #4]
 800fd9c:	9b02      	ldr	r3, [sp, #8]
 800fd9e:	9103      	str	r1, [sp, #12]
 800fda0:	428b      	cmp	r3, r1
 800fda2:	d80c      	bhi.n	800fdbe <__multiply+0x9a>
 800fda4:	2e00      	cmp	r6, #0
 800fda6:	dd03      	ble.n	800fdb0 <__multiply+0x8c>
 800fda8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d055      	beq.n	800fe5c <__multiply+0x138>
 800fdb0:	6106      	str	r6, [r0, #16]
 800fdb2:	b005      	add	sp, #20
 800fdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb8:	f843 2b04 	str.w	r2, [r3], #4
 800fdbc:	e7d9      	b.n	800fd72 <__multiply+0x4e>
 800fdbe:	f8b1 a000 	ldrh.w	sl, [r1]
 800fdc2:	f1ba 0f00 	cmp.w	sl, #0
 800fdc6:	d01f      	beq.n	800fe08 <__multiply+0xe4>
 800fdc8:	46c4      	mov	ip, r8
 800fdca:	46a1      	mov	r9, r4
 800fdcc:	2700      	movs	r7, #0
 800fdce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fdd2:	f8d9 3000 	ldr.w	r3, [r9]
 800fdd6:	fa1f fb82 	uxth.w	fp, r2
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	fb0a 330b 	mla	r3, sl, fp, r3
 800fde0:	443b      	add	r3, r7
 800fde2:	f8d9 7000 	ldr.w	r7, [r9]
 800fde6:	0c12      	lsrs	r2, r2, #16
 800fde8:	0c3f      	lsrs	r7, r7, #16
 800fdea:	fb0a 7202 	mla	r2, sl, r2, r7
 800fdee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdf8:	4565      	cmp	r5, ip
 800fdfa:	f849 3b04 	str.w	r3, [r9], #4
 800fdfe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fe02:	d8e4      	bhi.n	800fdce <__multiply+0xaa>
 800fe04:	9b01      	ldr	r3, [sp, #4]
 800fe06:	50e7      	str	r7, [r4, r3]
 800fe08:	9b03      	ldr	r3, [sp, #12]
 800fe0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe0e:	3104      	adds	r1, #4
 800fe10:	f1b9 0f00 	cmp.w	r9, #0
 800fe14:	d020      	beq.n	800fe58 <__multiply+0x134>
 800fe16:	6823      	ldr	r3, [r4, #0]
 800fe18:	4647      	mov	r7, r8
 800fe1a:	46a4      	mov	ip, r4
 800fe1c:	f04f 0a00 	mov.w	sl, #0
 800fe20:	f8b7 b000 	ldrh.w	fp, [r7]
 800fe24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fe28:	fb09 220b 	mla	r2, r9, fp, r2
 800fe2c:	4452      	add	r2, sl
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe34:	f84c 3b04 	str.w	r3, [ip], #4
 800fe38:	f857 3b04 	ldr.w	r3, [r7], #4
 800fe3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe40:	f8bc 3000 	ldrh.w	r3, [ip]
 800fe44:	fb09 330a 	mla	r3, r9, sl, r3
 800fe48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fe4c:	42bd      	cmp	r5, r7
 800fe4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe52:	d8e5      	bhi.n	800fe20 <__multiply+0xfc>
 800fe54:	9a01      	ldr	r2, [sp, #4]
 800fe56:	50a3      	str	r3, [r4, r2]
 800fe58:	3404      	adds	r4, #4
 800fe5a:	e79f      	b.n	800fd9c <__multiply+0x78>
 800fe5c:	3e01      	subs	r6, #1
 800fe5e:	e7a1      	b.n	800fda4 <__multiply+0x80>
 800fe60:	08011180 	.word	0x08011180
 800fe64:	08011191 	.word	0x08011191

0800fe68 <__pow5mult>:
 800fe68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe6c:	4615      	mov	r5, r2
 800fe6e:	f012 0203 	ands.w	r2, r2, #3
 800fe72:	4607      	mov	r7, r0
 800fe74:	460e      	mov	r6, r1
 800fe76:	d007      	beq.n	800fe88 <__pow5mult+0x20>
 800fe78:	4c25      	ldr	r4, [pc, #148]	@ (800ff10 <__pow5mult+0xa8>)
 800fe7a:	3a01      	subs	r2, #1
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe82:	f7ff fea7 	bl	800fbd4 <__multadd>
 800fe86:	4606      	mov	r6, r0
 800fe88:	10ad      	asrs	r5, r5, #2
 800fe8a:	d03d      	beq.n	800ff08 <__pow5mult+0xa0>
 800fe8c:	69fc      	ldr	r4, [r7, #28]
 800fe8e:	b97c      	cbnz	r4, 800feb0 <__pow5mult+0x48>
 800fe90:	2010      	movs	r0, #16
 800fe92:	f7ff fd87 	bl	800f9a4 <malloc>
 800fe96:	4602      	mov	r2, r0
 800fe98:	61f8      	str	r0, [r7, #28]
 800fe9a:	b928      	cbnz	r0, 800fea8 <__pow5mult+0x40>
 800fe9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ff14 <__pow5mult+0xac>)
 800fe9e:	481e      	ldr	r0, [pc, #120]	@ (800ff18 <__pow5mult+0xb0>)
 800fea0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fea4:	f000 fbdc 	bl	8010660 <__assert_func>
 800fea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800feac:	6004      	str	r4, [r0, #0]
 800feae:	60c4      	str	r4, [r0, #12]
 800feb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800feb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800feb8:	b94c      	cbnz	r4, 800fece <__pow5mult+0x66>
 800feba:	f240 2171 	movw	r1, #625	@ 0x271
 800febe:	4638      	mov	r0, r7
 800fec0:	f7ff ff1a 	bl	800fcf8 <__i2b>
 800fec4:	2300      	movs	r3, #0
 800fec6:	f8c8 0008 	str.w	r0, [r8, #8]
 800feca:	4604      	mov	r4, r0
 800fecc:	6003      	str	r3, [r0, #0]
 800fece:	f04f 0900 	mov.w	r9, #0
 800fed2:	07eb      	lsls	r3, r5, #31
 800fed4:	d50a      	bpl.n	800feec <__pow5mult+0x84>
 800fed6:	4631      	mov	r1, r6
 800fed8:	4622      	mov	r2, r4
 800feda:	4638      	mov	r0, r7
 800fedc:	f7ff ff22 	bl	800fd24 <__multiply>
 800fee0:	4631      	mov	r1, r6
 800fee2:	4680      	mov	r8, r0
 800fee4:	4638      	mov	r0, r7
 800fee6:	f7ff fe53 	bl	800fb90 <_Bfree>
 800feea:	4646      	mov	r6, r8
 800feec:	106d      	asrs	r5, r5, #1
 800feee:	d00b      	beq.n	800ff08 <__pow5mult+0xa0>
 800fef0:	6820      	ldr	r0, [r4, #0]
 800fef2:	b938      	cbnz	r0, 800ff04 <__pow5mult+0x9c>
 800fef4:	4622      	mov	r2, r4
 800fef6:	4621      	mov	r1, r4
 800fef8:	4638      	mov	r0, r7
 800fefa:	f7ff ff13 	bl	800fd24 <__multiply>
 800fefe:	6020      	str	r0, [r4, #0]
 800ff00:	f8c0 9000 	str.w	r9, [r0]
 800ff04:	4604      	mov	r4, r0
 800ff06:	e7e4      	b.n	800fed2 <__pow5mult+0x6a>
 800ff08:	4630      	mov	r0, r6
 800ff0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff0e:	bf00      	nop
 800ff10:	08011244 	.word	0x08011244
 800ff14:	08011111 	.word	0x08011111
 800ff18:	08011191 	.word	0x08011191

0800ff1c <__lshift>:
 800ff1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff20:	460c      	mov	r4, r1
 800ff22:	6849      	ldr	r1, [r1, #4]
 800ff24:	6923      	ldr	r3, [r4, #16]
 800ff26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff2a:	68a3      	ldr	r3, [r4, #8]
 800ff2c:	4607      	mov	r7, r0
 800ff2e:	4691      	mov	r9, r2
 800ff30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff34:	f108 0601 	add.w	r6, r8, #1
 800ff38:	42b3      	cmp	r3, r6
 800ff3a:	db0b      	blt.n	800ff54 <__lshift+0x38>
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	f7ff fde7 	bl	800fb10 <_Balloc>
 800ff42:	4605      	mov	r5, r0
 800ff44:	b948      	cbnz	r0, 800ff5a <__lshift+0x3e>
 800ff46:	4602      	mov	r2, r0
 800ff48:	4b28      	ldr	r3, [pc, #160]	@ (800ffec <__lshift+0xd0>)
 800ff4a:	4829      	ldr	r0, [pc, #164]	@ (800fff0 <__lshift+0xd4>)
 800ff4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ff50:	f000 fb86 	bl	8010660 <__assert_func>
 800ff54:	3101      	adds	r1, #1
 800ff56:	005b      	lsls	r3, r3, #1
 800ff58:	e7ee      	b.n	800ff38 <__lshift+0x1c>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f100 0114 	add.w	r1, r0, #20
 800ff60:	f100 0210 	add.w	r2, r0, #16
 800ff64:	4618      	mov	r0, r3
 800ff66:	4553      	cmp	r3, sl
 800ff68:	db33      	blt.n	800ffd2 <__lshift+0xb6>
 800ff6a:	6920      	ldr	r0, [r4, #16]
 800ff6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff70:	f104 0314 	add.w	r3, r4, #20
 800ff74:	f019 091f 	ands.w	r9, r9, #31
 800ff78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff80:	d02b      	beq.n	800ffda <__lshift+0xbe>
 800ff82:	f1c9 0e20 	rsb	lr, r9, #32
 800ff86:	468a      	mov	sl, r1
 800ff88:	2200      	movs	r2, #0
 800ff8a:	6818      	ldr	r0, [r3, #0]
 800ff8c:	fa00 f009 	lsl.w	r0, r0, r9
 800ff90:	4310      	orrs	r0, r2
 800ff92:	f84a 0b04 	str.w	r0, [sl], #4
 800ff96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff9a:	459c      	cmp	ip, r3
 800ff9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffa0:	d8f3      	bhi.n	800ff8a <__lshift+0x6e>
 800ffa2:	ebac 0304 	sub.w	r3, ip, r4
 800ffa6:	3b15      	subs	r3, #21
 800ffa8:	f023 0303 	bic.w	r3, r3, #3
 800ffac:	3304      	adds	r3, #4
 800ffae:	f104 0015 	add.w	r0, r4, #21
 800ffb2:	4560      	cmp	r0, ip
 800ffb4:	bf88      	it	hi
 800ffb6:	2304      	movhi	r3, #4
 800ffb8:	50ca      	str	r2, [r1, r3]
 800ffba:	b10a      	cbz	r2, 800ffc0 <__lshift+0xa4>
 800ffbc:	f108 0602 	add.w	r6, r8, #2
 800ffc0:	3e01      	subs	r6, #1
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	612e      	str	r6, [r5, #16]
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	f7ff fde2 	bl	800fb90 <_Bfree>
 800ffcc:	4628      	mov	r0, r5
 800ffce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	e7c5      	b.n	800ff66 <__lshift+0x4a>
 800ffda:	3904      	subs	r1, #4
 800ffdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffe4:	459c      	cmp	ip, r3
 800ffe6:	d8f9      	bhi.n	800ffdc <__lshift+0xc0>
 800ffe8:	e7ea      	b.n	800ffc0 <__lshift+0xa4>
 800ffea:	bf00      	nop
 800ffec:	08011180 	.word	0x08011180
 800fff0:	08011191 	.word	0x08011191

0800fff4 <__mcmp>:
 800fff4:	690a      	ldr	r2, [r1, #16]
 800fff6:	4603      	mov	r3, r0
 800fff8:	6900      	ldr	r0, [r0, #16]
 800fffa:	1a80      	subs	r0, r0, r2
 800fffc:	b530      	push	{r4, r5, lr}
 800fffe:	d10e      	bne.n	801001e <__mcmp+0x2a>
 8010000:	3314      	adds	r3, #20
 8010002:	3114      	adds	r1, #20
 8010004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801000c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010014:	4295      	cmp	r5, r2
 8010016:	d003      	beq.n	8010020 <__mcmp+0x2c>
 8010018:	d205      	bcs.n	8010026 <__mcmp+0x32>
 801001a:	f04f 30ff 	mov.w	r0, #4294967295
 801001e:	bd30      	pop	{r4, r5, pc}
 8010020:	42a3      	cmp	r3, r4
 8010022:	d3f3      	bcc.n	801000c <__mcmp+0x18>
 8010024:	e7fb      	b.n	801001e <__mcmp+0x2a>
 8010026:	2001      	movs	r0, #1
 8010028:	e7f9      	b.n	801001e <__mcmp+0x2a>
	...

0801002c <__mdiff>:
 801002c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010030:	4689      	mov	r9, r1
 8010032:	4606      	mov	r6, r0
 8010034:	4611      	mov	r1, r2
 8010036:	4648      	mov	r0, r9
 8010038:	4614      	mov	r4, r2
 801003a:	f7ff ffdb 	bl	800fff4 <__mcmp>
 801003e:	1e05      	subs	r5, r0, #0
 8010040:	d112      	bne.n	8010068 <__mdiff+0x3c>
 8010042:	4629      	mov	r1, r5
 8010044:	4630      	mov	r0, r6
 8010046:	f7ff fd63 	bl	800fb10 <_Balloc>
 801004a:	4602      	mov	r2, r0
 801004c:	b928      	cbnz	r0, 801005a <__mdiff+0x2e>
 801004e:	4b3f      	ldr	r3, [pc, #252]	@ (801014c <__mdiff+0x120>)
 8010050:	f240 2137 	movw	r1, #567	@ 0x237
 8010054:	483e      	ldr	r0, [pc, #248]	@ (8010150 <__mdiff+0x124>)
 8010056:	f000 fb03 	bl	8010660 <__assert_func>
 801005a:	2301      	movs	r3, #1
 801005c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010060:	4610      	mov	r0, r2
 8010062:	b003      	add	sp, #12
 8010064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010068:	bfbc      	itt	lt
 801006a:	464b      	movlt	r3, r9
 801006c:	46a1      	movlt	r9, r4
 801006e:	4630      	mov	r0, r6
 8010070:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010074:	bfba      	itte	lt
 8010076:	461c      	movlt	r4, r3
 8010078:	2501      	movlt	r5, #1
 801007a:	2500      	movge	r5, #0
 801007c:	f7ff fd48 	bl	800fb10 <_Balloc>
 8010080:	4602      	mov	r2, r0
 8010082:	b918      	cbnz	r0, 801008c <__mdiff+0x60>
 8010084:	4b31      	ldr	r3, [pc, #196]	@ (801014c <__mdiff+0x120>)
 8010086:	f240 2145 	movw	r1, #581	@ 0x245
 801008a:	e7e3      	b.n	8010054 <__mdiff+0x28>
 801008c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010090:	6926      	ldr	r6, [r4, #16]
 8010092:	60c5      	str	r5, [r0, #12]
 8010094:	f109 0310 	add.w	r3, r9, #16
 8010098:	f109 0514 	add.w	r5, r9, #20
 801009c:	f104 0e14 	add.w	lr, r4, #20
 80100a0:	f100 0b14 	add.w	fp, r0, #20
 80100a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80100a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80100ac:	9301      	str	r3, [sp, #4]
 80100ae:	46d9      	mov	r9, fp
 80100b0:	f04f 0c00 	mov.w	ip, #0
 80100b4:	9b01      	ldr	r3, [sp, #4]
 80100b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80100ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80100be:	9301      	str	r3, [sp, #4]
 80100c0:	fa1f f38a 	uxth.w	r3, sl
 80100c4:	4619      	mov	r1, r3
 80100c6:	b283      	uxth	r3, r0
 80100c8:	1acb      	subs	r3, r1, r3
 80100ca:	0c00      	lsrs	r0, r0, #16
 80100cc:	4463      	add	r3, ip
 80100ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80100d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80100dc:	4576      	cmp	r6, lr
 80100de:	f849 3b04 	str.w	r3, [r9], #4
 80100e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100e6:	d8e5      	bhi.n	80100b4 <__mdiff+0x88>
 80100e8:	1b33      	subs	r3, r6, r4
 80100ea:	3b15      	subs	r3, #21
 80100ec:	f023 0303 	bic.w	r3, r3, #3
 80100f0:	3415      	adds	r4, #21
 80100f2:	3304      	adds	r3, #4
 80100f4:	42a6      	cmp	r6, r4
 80100f6:	bf38      	it	cc
 80100f8:	2304      	movcc	r3, #4
 80100fa:	441d      	add	r5, r3
 80100fc:	445b      	add	r3, fp
 80100fe:	461e      	mov	r6, r3
 8010100:	462c      	mov	r4, r5
 8010102:	4544      	cmp	r4, r8
 8010104:	d30e      	bcc.n	8010124 <__mdiff+0xf8>
 8010106:	f108 0103 	add.w	r1, r8, #3
 801010a:	1b49      	subs	r1, r1, r5
 801010c:	f021 0103 	bic.w	r1, r1, #3
 8010110:	3d03      	subs	r5, #3
 8010112:	45a8      	cmp	r8, r5
 8010114:	bf38      	it	cc
 8010116:	2100      	movcc	r1, #0
 8010118:	440b      	add	r3, r1
 801011a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801011e:	b191      	cbz	r1, 8010146 <__mdiff+0x11a>
 8010120:	6117      	str	r7, [r2, #16]
 8010122:	e79d      	b.n	8010060 <__mdiff+0x34>
 8010124:	f854 1b04 	ldr.w	r1, [r4], #4
 8010128:	46e6      	mov	lr, ip
 801012a:	0c08      	lsrs	r0, r1, #16
 801012c:	fa1c fc81 	uxtah	ip, ip, r1
 8010130:	4471      	add	r1, lr
 8010132:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010136:	b289      	uxth	r1, r1
 8010138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801013c:	f846 1b04 	str.w	r1, [r6], #4
 8010140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010144:	e7dd      	b.n	8010102 <__mdiff+0xd6>
 8010146:	3f01      	subs	r7, #1
 8010148:	e7e7      	b.n	801011a <__mdiff+0xee>
 801014a:	bf00      	nop
 801014c:	08011180 	.word	0x08011180
 8010150:	08011191 	.word	0x08011191

08010154 <__d2b>:
 8010154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010158:	460f      	mov	r7, r1
 801015a:	2101      	movs	r1, #1
 801015c:	ec59 8b10 	vmov	r8, r9, d0
 8010160:	4616      	mov	r6, r2
 8010162:	f7ff fcd5 	bl	800fb10 <_Balloc>
 8010166:	4604      	mov	r4, r0
 8010168:	b930      	cbnz	r0, 8010178 <__d2b+0x24>
 801016a:	4602      	mov	r2, r0
 801016c:	4b23      	ldr	r3, [pc, #140]	@ (80101fc <__d2b+0xa8>)
 801016e:	4824      	ldr	r0, [pc, #144]	@ (8010200 <__d2b+0xac>)
 8010170:	f240 310f 	movw	r1, #783	@ 0x30f
 8010174:	f000 fa74 	bl	8010660 <__assert_func>
 8010178:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801017c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010180:	b10d      	cbz	r5, 8010186 <__d2b+0x32>
 8010182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010186:	9301      	str	r3, [sp, #4]
 8010188:	f1b8 0300 	subs.w	r3, r8, #0
 801018c:	d023      	beq.n	80101d6 <__d2b+0x82>
 801018e:	4668      	mov	r0, sp
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	f7ff fd84 	bl	800fc9e <__lo0bits>
 8010196:	e9dd 1200 	ldrd	r1, r2, [sp]
 801019a:	b1d0      	cbz	r0, 80101d2 <__d2b+0x7e>
 801019c:	f1c0 0320 	rsb	r3, r0, #32
 80101a0:	fa02 f303 	lsl.w	r3, r2, r3
 80101a4:	430b      	orrs	r3, r1
 80101a6:	40c2      	lsrs	r2, r0
 80101a8:	6163      	str	r3, [r4, #20]
 80101aa:	9201      	str	r2, [sp, #4]
 80101ac:	9b01      	ldr	r3, [sp, #4]
 80101ae:	61a3      	str	r3, [r4, #24]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	bf0c      	ite	eq
 80101b4:	2201      	moveq	r2, #1
 80101b6:	2202      	movne	r2, #2
 80101b8:	6122      	str	r2, [r4, #16]
 80101ba:	b1a5      	cbz	r5, 80101e6 <__d2b+0x92>
 80101bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80101c0:	4405      	add	r5, r0
 80101c2:	603d      	str	r5, [r7, #0]
 80101c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80101c8:	6030      	str	r0, [r6, #0]
 80101ca:	4620      	mov	r0, r4
 80101cc:	b003      	add	sp, #12
 80101ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d2:	6161      	str	r1, [r4, #20]
 80101d4:	e7ea      	b.n	80101ac <__d2b+0x58>
 80101d6:	a801      	add	r0, sp, #4
 80101d8:	f7ff fd61 	bl	800fc9e <__lo0bits>
 80101dc:	9b01      	ldr	r3, [sp, #4]
 80101de:	6163      	str	r3, [r4, #20]
 80101e0:	3020      	adds	r0, #32
 80101e2:	2201      	movs	r2, #1
 80101e4:	e7e8      	b.n	80101b8 <__d2b+0x64>
 80101e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80101ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80101ee:	6038      	str	r0, [r7, #0]
 80101f0:	6918      	ldr	r0, [r3, #16]
 80101f2:	f7ff fd35 	bl	800fc60 <__hi0bits>
 80101f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80101fa:	e7e5      	b.n	80101c8 <__d2b+0x74>
 80101fc:	08011180 	.word	0x08011180
 8010200:	08011191 	.word	0x08011191

08010204 <__ssputs_r>:
 8010204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010208:	688e      	ldr	r6, [r1, #8]
 801020a:	461f      	mov	r7, r3
 801020c:	42be      	cmp	r6, r7
 801020e:	680b      	ldr	r3, [r1, #0]
 8010210:	4682      	mov	sl, r0
 8010212:	460c      	mov	r4, r1
 8010214:	4690      	mov	r8, r2
 8010216:	d82d      	bhi.n	8010274 <__ssputs_r+0x70>
 8010218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801021c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010220:	d026      	beq.n	8010270 <__ssputs_r+0x6c>
 8010222:	6965      	ldr	r5, [r4, #20]
 8010224:	6909      	ldr	r1, [r1, #16]
 8010226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801022a:	eba3 0901 	sub.w	r9, r3, r1
 801022e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010232:	1c7b      	adds	r3, r7, #1
 8010234:	444b      	add	r3, r9
 8010236:	106d      	asrs	r5, r5, #1
 8010238:	429d      	cmp	r5, r3
 801023a:	bf38      	it	cc
 801023c:	461d      	movcc	r5, r3
 801023e:	0553      	lsls	r3, r2, #21
 8010240:	d527      	bpl.n	8010292 <__ssputs_r+0x8e>
 8010242:	4629      	mov	r1, r5
 8010244:	f7ff fbd8 	bl	800f9f8 <_malloc_r>
 8010248:	4606      	mov	r6, r0
 801024a:	b360      	cbz	r0, 80102a6 <__ssputs_r+0xa2>
 801024c:	6921      	ldr	r1, [r4, #16]
 801024e:	464a      	mov	r2, r9
 8010250:	f7fe fcf5 	bl	800ec3e <memcpy>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801025a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801025e:	81a3      	strh	r3, [r4, #12]
 8010260:	6126      	str	r6, [r4, #16]
 8010262:	6165      	str	r5, [r4, #20]
 8010264:	444e      	add	r6, r9
 8010266:	eba5 0509 	sub.w	r5, r5, r9
 801026a:	6026      	str	r6, [r4, #0]
 801026c:	60a5      	str	r5, [r4, #8]
 801026e:	463e      	mov	r6, r7
 8010270:	42be      	cmp	r6, r7
 8010272:	d900      	bls.n	8010276 <__ssputs_r+0x72>
 8010274:	463e      	mov	r6, r7
 8010276:	6820      	ldr	r0, [r4, #0]
 8010278:	4632      	mov	r2, r6
 801027a:	4641      	mov	r1, r8
 801027c:	f000 f9c6 	bl	801060c <memmove>
 8010280:	68a3      	ldr	r3, [r4, #8]
 8010282:	1b9b      	subs	r3, r3, r6
 8010284:	60a3      	str	r3, [r4, #8]
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	4433      	add	r3, r6
 801028a:	6023      	str	r3, [r4, #0]
 801028c:	2000      	movs	r0, #0
 801028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010292:	462a      	mov	r2, r5
 8010294:	f000 fa28 	bl	80106e8 <_realloc_r>
 8010298:	4606      	mov	r6, r0
 801029a:	2800      	cmp	r0, #0
 801029c:	d1e0      	bne.n	8010260 <__ssputs_r+0x5c>
 801029e:	6921      	ldr	r1, [r4, #16]
 80102a0:	4650      	mov	r0, sl
 80102a2:	f7ff fb35 	bl	800f910 <_free_r>
 80102a6:	230c      	movs	r3, #12
 80102a8:	f8ca 3000 	str.w	r3, [sl]
 80102ac:	89a3      	ldrh	r3, [r4, #12]
 80102ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102b2:	81a3      	strh	r3, [r4, #12]
 80102b4:	f04f 30ff 	mov.w	r0, #4294967295
 80102b8:	e7e9      	b.n	801028e <__ssputs_r+0x8a>
	...

080102bc <_svfiprintf_r>:
 80102bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c0:	4698      	mov	r8, r3
 80102c2:	898b      	ldrh	r3, [r1, #12]
 80102c4:	061b      	lsls	r3, r3, #24
 80102c6:	b09d      	sub	sp, #116	@ 0x74
 80102c8:	4607      	mov	r7, r0
 80102ca:	460d      	mov	r5, r1
 80102cc:	4614      	mov	r4, r2
 80102ce:	d510      	bpl.n	80102f2 <_svfiprintf_r+0x36>
 80102d0:	690b      	ldr	r3, [r1, #16]
 80102d2:	b973      	cbnz	r3, 80102f2 <_svfiprintf_r+0x36>
 80102d4:	2140      	movs	r1, #64	@ 0x40
 80102d6:	f7ff fb8f 	bl	800f9f8 <_malloc_r>
 80102da:	6028      	str	r0, [r5, #0]
 80102dc:	6128      	str	r0, [r5, #16]
 80102de:	b930      	cbnz	r0, 80102ee <_svfiprintf_r+0x32>
 80102e0:	230c      	movs	r3, #12
 80102e2:	603b      	str	r3, [r7, #0]
 80102e4:	f04f 30ff 	mov.w	r0, #4294967295
 80102e8:	b01d      	add	sp, #116	@ 0x74
 80102ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ee:	2340      	movs	r3, #64	@ 0x40
 80102f0:	616b      	str	r3, [r5, #20]
 80102f2:	2300      	movs	r3, #0
 80102f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80102f6:	2320      	movs	r3, #32
 80102f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010300:	2330      	movs	r3, #48	@ 0x30
 8010302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80104a0 <_svfiprintf_r+0x1e4>
 8010306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801030a:	f04f 0901 	mov.w	r9, #1
 801030e:	4623      	mov	r3, r4
 8010310:	469a      	mov	sl, r3
 8010312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010316:	b10a      	cbz	r2, 801031c <_svfiprintf_r+0x60>
 8010318:	2a25      	cmp	r2, #37	@ 0x25
 801031a:	d1f9      	bne.n	8010310 <_svfiprintf_r+0x54>
 801031c:	ebba 0b04 	subs.w	fp, sl, r4
 8010320:	d00b      	beq.n	801033a <_svfiprintf_r+0x7e>
 8010322:	465b      	mov	r3, fp
 8010324:	4622      	mov	r2, r4
 8010326:	4629      	mov	r1, r5
 8010328:	4638      	mov	r0, r7
 801032a:	f7ff ff6b 	bl	8010204 <__ssputs_r>
 801032e:	3001      	adds	r0, #1
 8010330:	f000 80a7 	beq.w	8010482 <_svfiprintf_r+0x1c6>
 8010334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010336:	445a      	add	r2, fp
 8010338:	9209      	str	r2, [sp, #36]	@ 0x24
 801033a:	f89a 3000 	ldrb.w	r3, [sl]
 801033e:	2b00      	cmp	r3, #0
 8010340:	f000 809f 	beq.w	8010482 <_svfiprintf_r+0x1c6>
 8010344:	2300      	movs	r3, #0
 8010346:	f04f 32ff 	mov.w	r2, #4294967295
 801034a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801034e:	f10a 0a01 	add.w	sl, sl, #1
 8010352:	9304      	str	r3, [sp, #16]
 8010354:	9307      	str	r3, [sp, #28]
 8010356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801035a:	931a      	str	r3, [sp, #104]	@ 0x68
 801035c:	4654      	mov	r4, sl
 801035e:	2205      	movs	r2, #5
 8010360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010364:	484e      	ldr	r0, [pc, #312]	@ (80104a0 <_svfiprintf_r+0x1e4>)
 8010366:	f7ef ff5b 	bl	8000220 <memchr>
 801036a:	9a04      	ldr	r2, [sp, #16]
 801036c:	b9d8      	cbnz	r0, 80103a6 <_svfiprintf_r+0xea>
 801036e:	06d0      	lsls	r0, r2, #27
 8010370:	bf44      	itt	mi
 8010372:	2320      	movmi	r3, #32
 8010374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010378:	0711      	lsls	r1, r2, #28
 801037a:	bf44      	itt	mi
 801037c:	232b      	movmi	r3, #43	@ 0x2b
 801037e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010382:	f89a 3000 	ldrb.w	r3, [sl]
 8010386:	2b2a      	cmp	r3, #42	@ 0x2a
 8010388:	d015      	beq.n	80103b6 <_svfiprintf_r+0xfa>
 801038a:	9a07      	ldr	r2, [sp, #28]
 801038c:	4654      	mov	r4, sl
 801038e:	2000      	movs	r0, #0
 8010390:	f04f 0c0a 	mov.w	ip, #10
 8010394:	4621      	mov	r1, r4
 8010396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801039a:	3b30      	subs	r3, #48	@ 0x30
 801039c:	2b09      	cmp	r3, #9
 801039e:	d94b      	bls.n	8010438 <_svfiprintf_r+0x17c>
 80103a0:	b1b0      	cbz	r0, 80103d0 <_svfiprintf_r+0x114>
 80103a2:	9207      	str	r2, [sp, #28]
 80103a4:	e014      	b.n	80103d0 <_svfiprintf_r+0x114>
 80103a6:	eba0 0308 	sub.w	r3, r0, r8
 80103aa:	fa09 f303 	lsl.w	r3, r9, r3
 80103ae:	4313      	orrs	r3, r2
 80103b0:	9304      	str	r3, [sp, #16]
 80103b2:	46a2      	mov	sl, r4
 80103b4:	e7d2      	b.n	801035c <_svfiprintf_r+0xa0>
 80103b6:	9b03      	ldr	r3, [sp, #12]
 80103b8:	1d19      	adds	r1, r3, #4
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	9103      	str	r1, [sp, #12]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	bfbb      	ittet	lt
 80103c2:	425b      	neglt	r3, r3
 80103c4:	f042 0202 	orrlt.w	r2, r2, #2
 80103c8:	9307      	strge	r3, [sp, #28]
 80103ca:	9307      	strlt	r3, [sp, #28]
 80103cc:	bfb8      	it	lt
 80103ce:	9204      	strlt	r2, [sp, #16]
 80103d0:	7823      	ldrb	r3, [r4, #0]
 80103d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80103d4:	d10a      	bne.n	80103ec <_svfiprintf_r+0x130>
 80103d6:	7863      	ldrb	r3, [r4, #1]
 80103d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80103da:	d132      	bne.n	8010442 <_svfiprintf_r+0x186>
 80103dc:	9b03      	ldr	r3, [sp, #12]
 80103de:	1d1a      	adds	r2, r3, #4
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	9203      	str	r2, [sp, #12]
 80103e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103e8:	3402      	adds	r4, #2
 80103ea:	9305      	str	r3, [sp, #20]
 80103ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80104b0 <_svfiprintf_r+0x1f4>
 80103f0:	7821      	ldrb	r1, [r4, #0]
 80103f2:	2203      	movs	r2, #3
 80103f4:	4650      	mov	r0, sl
 80103f6:	f7ef ff13 	bl	8000220 <memchr>
 80103fa:	b138      	cbz	r0, 801040c <_svfiprintf_r+0x150>
 80103fc:	9b04      	ldr	r3, [sp, #16]
 80103fe:	eba0 000a 	sub.w	r0, r0, sl
 8010402:	2240      	movs	r2, #64	@ 0x40
 8010404:	4082      	lsls	r2, r0
 8010406:	4313      	orrs	r3, r2
 8010408:	3401      	adds	r4, #1
 801040a:	9304      	str	r3, [sp, #16]
 801040c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010410:	4824      	ldr	r0, [pc, #144]	@ (80104a4 <_svfiprintf_r+0x1e8>)
 8010412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010416:	2206      	movs	r2, #6
 8010418:	f7ef ff02 	bl	8000220 <memchr>
 801041c:	2800      	cmp	r0, #0
 801041e:	d036      	beq.n	801048e <_svfiprintf_r+0x1d2>
 8010420:	4b21      	ldr	r3, [pc, #132]	@ (80104a8 <_svfiprintf_r+0x1ec>)
 8010422:	bb1b      	cbnz	r3, 801046c <_svfiprintf_r+0x1b0>
 8010424:	9b03      	ldr	r3, [sp, #12]
 8010426:	3307      	adds	r3, #7
 8010428:	f023 0307 	bic.w	r3, r3, #7
 801042c:	3308      	adds	r3, #8
 801042e:	9303      	str	r3, [sp, #12]
 8010430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010432:	4433      	add	r3, r6
 8010434:	9309      	str	r3, [sp, #36]	@ 0x24
 8010436:	e76a      	b.n	801030e <_svfiprintf_r+0x52>
 8010438:	fb0c 3202 	mla	r2, ip, r2, r3
 801043c:	460c      	mov	r4, r1
 801043e:	2001      	movs	r0, #1
 8010440:	e7a8      	b.n	8010394 <_svfiprintf_r+0xd8>
 8010442:	2300      	movs	r3, #0
 8010444:	3401      	adds	r4, #1
 8010446:	9305      	str	r3, [sp, #20]
 8010448:	4619      	mov	r1, r3
 801044a:	f04f 0c0a 	mov.w	ip, #10
 801044e:	4620      	mov	r0, r4
 8010450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010454:	3a30      	subs	r2, #48	@ 0x30
 8010456:	2a09      	cmp	r2, #9
 8010458:	d903      	bls.n	8010462 <_svfiprintf_r+0x1a6>
 801045a:	2b00      	cmp	r3, #0
 801045c:	d0c6      	beq.n	80103ec <_svfiprintf_r+0x130>
 801045e:	9105      	str	r1, [sp, #20]
 8010460:	e7c4      	b.n	80103ec <_svfiprintf_r+0x130>
 8010462:	fb0c 2101 	mla	r1, ip, r1, r2
 8010466:	4604      	mov	r4, r0
 8010468:	2301      	movs	r3, #1
 801046a:	e7f0      	b.n	801044e <_svfiprintf_r+0x192>
 801046c:	ab03      	add	r3, sp, #12
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	462a      	mov	r2, r5
 8010472:	4b0e      	ldr	r3, [pc, #56]	@ (80104ac <_svfiprintf_r+0x1f0>)
 8010474:	a904      	add	r1, sp, #16
 8010476:	4638      	mov	r0, r7
 8010478:	f7fd fe28 	bl	800e0cc <_printf_float>
 801047c:	1c42      	adds	r2, r0, #1
 801047e:	4606      	mov	r6, r0
 8010480:	d1d6      	bne.n	8010430 <_svfiprintf_r+0x174>
 8010482:	89ab      	ldrh	r3, [r5, #12]
 8010484:	065b      	lsls	r3, r3, #25
 8010486:	f53f af2d 	bmi.w	80102e4 <_svfiprintf_r+0x28>
 801048a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801048c:	e72c      	b.n	80102e8 <_svfiprintf_r+0x2c>
 801048e:	ab03      	add	r3, sp, #12
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	462a      	mov	r2, r5
 8010494:	4b05      	ldr	r3, [pc, #20]	@ (80104ac <_svfiprintf_r+0x1f0>)
 8010496:	a904      	add	r1, sp, #16
 8010498:	4638      	mov	r0, r7
 801049a:	f7fe f8af 	bl	800e5fc <_printf_i>
 801049e:	e7ed      	b.n	801047c <_svfiprintf_r+0x1c0>
 80104a0:	080111ea 	.word	0x080111ea
 80104a4:	080111f4 	.word	0x080111f4
 80104a8:	0800e0cd 	.word	0x0800e0cd
 80104ac:	08010205 	.word	0x08010205
 80104b0:	080111f0 	.word	0x080111f0

080104b4 <__sflush_r>:
 80104b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80104b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104bc:	0716      	lsls	r6, r2, #28
 80104be:	4605      	mov	r5, r0
 80104c0:	460c      	mov	r4, r1
 80104c2:	d454      	bmi.n	801056e <__sflush_r+0xba>
 80104c4:	684b      	ldr	r3, [r1, #4]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	dc02      	bgt.n	80104d0 <__sflush_r+0x1c>
 80104ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	dd48      	ble.n	8010562 <__sflush_r+0xae>
 80104d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104d2:	2e00      	cmp	r6, #0
 80104d4:	d045      	beq.n	8010562 <__sflush_r+0xae>
 80104d6:	2300      	movs	r3, #0
 80104d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80104dc:	682f      	ldr	r7, [r5, #0]
 80104de:	6a21      	ldr	r1, [r4, #32]
 80104e0:	602b      	str	r3, [r5, #0]
 80104e2:	d030      	beq.n	8010546 <__sflush_r+0x92>
 80104e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80104e6:	89a3      	ldrh	r3, [r4, #12]
 80104e8:	0759      	lsls	r1, r3, #29
 80104ea:	d505      	bpl.n	80104f8 <__sflush_r+0x44>
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	1ad2      	subs	r2, r2, r3
 80104f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80104f2:	b10b      	cbz	r3, 80104f8 <__sflush_r+0x44>
 80104f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80104f6:	1ad2      	subs	r2, r2, r3
 80104f8:	2300      	movs	r3, #0
 80104fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104fc:	6a21      	ldr	r1, [r4, #32]
 80104fe:	4628      	mov	r0, r5
 8010500:	47b0      	blx	r6
 8010502:	1c43      	adds	r3, r0, #1
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	d106      	bne.n	8010516 <__sflush_r+0x62>
 8010508:	6829      	ldr	r1, [r5, #0]
 801050a:	291d      	cmp	r1, #29
 801050c:	d82b      	bhi.n	8010566 <__sflush_r+0xb2>
 801050e:	4a2a      	ldr	r2, [pc, #168]	@ (80105b8 <__sflush_r+0x104>)
 8010510:	40ca      	lsrs	r2, r1
 8010512:	07d6      	lsls	r6, r2, #31
 8010514:	d527      	bpl.n	8010566 <__sflush_r+0xb2>
 8010516:	2200      	movs	r2, #0
 8010518:	6062      	str	r2, [r4, #4]
 801051a:	04d9      	lsls	r1, r3, #19
 801051c:	6922      	ldr	r2, [r4, #16]
 801051e:	6022      	str	r2, [r4, #0]
 8010520:	d504      	bpl.n	801052c <__sflush_r+0x78>
 8010522:	1c42      	adds	r2, r0, #1
 8010524:	d101      	bne.n	801052a <__sflush_r+0x76>
 8010526:	682b      	ldr	r3, [r5, #0]
 8010528:	b903      	cbnz	r3, 801052c <__sflush_r+0x78>
 801052a:	6560      	str	r0, [r4, #84]	@ 0x54
 801052c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801052e:	602f      	str	r7, [r5, #0]
 8010530:	b1b9      	cbz	r1, 8010562 <__sflush_r+0xae>
 8010532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010536:	4299      	cmp	r1, r3
 8010538:	d002      	beq.n	8010540 <__sflush_r+0x8c>
 801053a:	4628      	mov	r0, r5
 801053c:	f7ff f9e8 	bl	800f910 <_free_r>
 8010540:	2300      	movs	r3, #0
 8010542:	6363      	str	r3, [r4, #52]	@ 0x34
 8010544:	e00d      	b.n	8010562 <__sflush_r+0xae>
 8010546:	2301      	movs	r3, #1
 8010548:	4628      	mov	r0, r5
 801054a:	47b0      	blx	r6
 801054c:	4602      	mov	r2, r0
 801054e:	1c50      	adds	r0, r2, #1
 8010550:	d1c9      	bne.n	80104e6 <__sflush_r+0x32>
 8010552:	682b      	ldr	r3, [r5, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d0c6      	beq.n	80104e6 <__sflush_r+0x32>
 8010558:	2b1d      	cmp	r3, #29
 801055a:	d001      	beq.n	8010560 <__sflush_r+0xac>
 801055c:	2b16      	cmp	r3, #22
 801055e:	d11e      	bne.n	801059e <__sflush_r+0xea>
 8010560:	602f      	str	r7, [r5, #0]
 8010562:	2000      	movs	r0, #0
 8010564:	e022      	b.n	80105ac <__sflush_r+0xf8>
 8010566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801056a:	b21b      	sxth	r3, r3
 801056c:	e01b      	b.n	80105a6 <__sflush_r+0xf2>
 801056e:	690f      	ldr	r7, [r1, #16]
 8010570:	2f00      	cmp	r7, #0
 8010572:	d0f6      	beq.n	8010562 <__sflush_r+0xae>
 8010574:	0793      	lsls	r3, r2, #30
 8010576:	680e      	ldr	r6, [r1, #0]
 8010578:	bf08      	it	eq
 801057a:	694b      	ldreq	r3, [r1, #20]
 801057c:	600f      	str	r7, [r1, #0]
 801057e:	bf18      	it	ne
 8010580:	2300      	movne	r3, #0
 8010582:	eba6 0807 	sub.w	r8, r6, r7
 8010586:	608b      	str	r3, [r1, #8]
 8010588:	f1b8 0f00 	cmp.w	r8, #0
 801058c:	dde9      	ble.n	8010562 <__sflush_r+0xae>
 801058e:	6a21      	ldr	r1, [r4, #32]
 8010590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010592:	4643      	mov	r3, r8
 8010594:	463a      	mov	r2, r7
 8010596:	4628      	mov	r0, r5
 8010598:	47b0      	blx	r6
 801059a:	2800      	cmp	r0, #0
 801059c:	dc08      	bgt.n	80105b0 <__sflush_r+0xfc>
 801059e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105a6:	81a3      	strh	r3, [r4, #12]
 80105a8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b0:	4407      	add	r7, r0
 80105b2:	eba8 0800 	sub.w	r8, r8, r0
 80105b6:	e7e7      	b.n	8010588 <__sflush_r+0xd4>
 80105b8:	20400001 	.word	0x20400001

080105bc <_fflush_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	690b      	ldr	r3, [r1, #16]
 80105c0:	4605      	mov	r5, r0
 80105c2:	460c      	mov	r4, r1
 80105c4:	b913      	cbnz	r3, 80105cc <_fflush_r+0x10>
 80105c6:	2500      	movs	r5, #0
 80105c8:	4628      	mov	r0, r5
 80105ca:	bd38      	pop	{r3, r4, r5, pc}
 80105cc:	b118      	cbz	r0, 80105d6 <_fflush_r+0x1a>
 80105ce:	6a03      	ldr	r3, [r0, #32]
 80105d0:	b90b      	cbnz	r3, 80105d6 <_fflush_r+0x1a>
 80105d2:	f7fe f9bd 	bl	800e950 <__sinit>
 80105d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d0f3      	beq.n	80105c6 <_fflush_r+0xa>
 80105de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80105e0:	07d0      	lsls	r0, r2, #31
 80105e2:	d404      	bmi.n	80105ee <_fflush_r+0x32>
 80105e4:	0599      	lsls	r1, r3, #22
 80105e6:	d402      	bmi.n	80105ee <_fflush_r+0x32>
 80105e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105ea:	f7fe fb26 	bl	800ec3a <__retarget_lock_acquire_recursive>
 80105ee:	4628      	mov	r0, r5
 80105f0:	4621      	mov	r1, r4
 80105f2:	f7ff ff5f 	bl	80104b4 <__sflush_r>
 80105f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105f8:	07da      	lsls	r2, r3, #31
 80105fa:	4605      	mov	r5, r0
 80105fc:	d4e4      	bmi.n	80105c8 <_fflush_r+0xc>
 80105fe:	89a3      	ldrh	r3, [r4, #12]
 8010600:	059b      	lsls	r3, r3, #22
 8010602:	d4e1      	bmi.n	80105c8 <_fflush_r+0xc>
 8010604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010606:	f7fe fb19 	bl	800ec3c <__retarget_lock_release_recursive>
 801060a:	e7dd      	b.n	80105c8 <_fflush_r+0xc>

0801060c <memmove>:
 801060c:	4288      	cmp	r0, r1
 801060e:	b510      	push	{r4, lr}
 8010610:	eb01 0402 	add.w	r4, r1, r2
 8010614:	d902      	bls.n	801061c <memmove+0x10>
 8010616:	4284      	cmp	r4, r0
 8010618:	4623      	mov	r3, r4
 801061a:	d807      	bhi.n	801062c <memmove+0x20>
 801061c:	1e43      	subs	r3, r0, #1
 801061e:	42a1      	cmp	r1, r4
 8010620:	d008      	beq.n	8010634 <memmove+0x28>
 8010622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010626:	f803 2f01 	strb.w	r2, [r3, #1]!
 801062a:	e7f8      	b.n	801061e <memmove+0x12>
 801062c:	4402      	add	r2, r0
 801062e:	4601      	mov	r1, r0
 8010630:	428a      	cmp	r2, r1
 8010632:	d100      	bne.n	8010636 <memmove+0x2a>
 8010634:	bd10      	pop	{r4, pc}
 8010636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801063a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801063e:	e7f7      	b.n	8010630 <memmove+0x24>

08010640 <_sbrk_r>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	4d06      	ldr	r5, [pc, #24]	@ (801065c <_sbrk_r+0x1c>)
 8010644:	2300      	movs	r3, #0
 8010646:	4604      	mov	r4, r0
 8010648:	4608      	mov	r0, r1
 801064a:	602b      	str	r3, [r5, #0]
 801064c:	f7f1 fbd2 	bl	8001df4 <_sbrk>
 8010650:	1c43      	adds	r3, r0, #1
 8010652:	d102      	bne.n	801065a <_sbrk_r+0x1a>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	b103      	cbz	r3, 801065a <_sbrk_r+0x1a>
 8010658:	6023      	str	r3, [r4, #0]
 801065a:	bd38      	pop	{r3, r4, r5, pc}
 801065c:	2000a6c4 	.word	0x2000a6c4

08010660 <__assert_func>:
 8010660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010662:	4614      	mov	r4, r2
 8010664:	461a      	mov	r2, r3
 8010666:	4b09      	ldr	r3, [pc, #36]	@ (801068c <__assert_func+0x2c>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4605      	mov	r5, r0
 801066c:	68d8      	ldr	r0, [r3, #12]
 801066e:	b14c      	cbz	r4, 8010684 <__assert_func+0x24>
 8010670:	4b07      	ldr	r3, [pc, #28]	@ (8010690 <__assert_func+0x30>)
 8010672:	9100      	str	r1, [sp, #0]
 8010674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010678:	4906      	ldr	r1, [pc, #24]	@ (8010694 <__assert_func+0x34>)
 801067a:	462b      	mov	r3, r5
 801067c:	f000 f870 	bl	8010760 <fiprintf>
 8010680:	f000 f880 	bl	8010784 <abort>
 8010684:	4b04      	ldr	r3, [pc, #16]	@ (8010698 <__assert_func+0x38>)
 8010686:	461c      	mov	r4, r3
 8010688:	e7f3      	b.n	8010672 <__assert_func+0x12>
 801068a:	bf00      	nop
 801068c:	20000194 	.word	0x20000194
 8010690:	08011205 	.word	0x08011205
 8010694:	08011212 	.word	0x08011212
 8010698:	08011240 	.word	0x08011240

0801069c <_calloc_r>:
 801069c:	b570      	push	{r4, r5, r6, lr}
 801069e:	fba1 5402 	umull	r5, r4, r1, r2
 80106a2:	b934      	cbnz	r4, 80106b2 <_calloc_r+0x16>
 80106a4:	4629      	mov	r1, r5
 80106a6:	f7ff f9a7 	bl	800f9f8 <_malloc_r>
 80106aa:	4606      	mov	r6, r0
 80106ac:	b928      	cbnz	r0, 80106ba <_calloc_r+0x1e>
 80106ae:	4630      	mov	r0, r6
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
 80106b2:	220c      	movs	r2, #12
 80106b4:	6002      	str	r2, [r0, #0]
 80106b6:	2600      	movs	r6, #0
 80106b8:	e7f9      	b.n	80106ae <_calloc_r+0x12>
 80106ba:	462a      	mov	r2, r5
 80106bc:	4621      	mov	r1, r4
 80106be:	f7fe f9e1 	bl	800ea84 <memset>
 80106c2:	e7f4      	b.n	80106ae <_calloc_r+0x12>

080106c4 <__ascii_mbtowc>:
 80106c4:	b082      	sub	sp, #8
 80106c6:	b901      	cbnz	r1, 80106ca <__ascii_mbtowc+0x6>
 80106c8:	a901      	add	r1, sp, #4
 80106ca:	b142      	cbz	r2, 80106de <__ascii_mbtowc+0x1a>
 80106cc:	b14b      	cbz	r3, 80106e2 <__ascii_mbtowc+0x1e>
 80106ce:	7813      	ldrb	r3, [r2, #0]
 80106d0:	600b      	str	r3, [r1, #0]
 80106d2:	7812      	ldrb	r2, [r2, #0]
 80106d4:	1e10      	subs	r0, r2, #0
 80106d6:	bf18      	it	ne
 80106d8:	2001      	movne	r0, #1
 80106da:	b002      	add	sp, #8
 80106dc:	4770      	bx	lr
 80106de:	4610      	mov	r0, r2
 80106e0:	e7fb      	b.n	80106da <__ascii_mbtowc+0x16>
 80106e2:	f06f 0001 	mvn.w	r0, #1
 80106e6:	e7f8      	b.n	80106da <__ascii_mbtowc+0x16>

080106e8 <_realloc_r>:
 80106e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ec:	4607      	mov	r7, r0
 80106ee:	4614      	mov	r4, r2
 80106f0:	460d      	mov	r5, r1
 80106f2:	b921      	cbnz	r1, 80106fe <_realloc_r+0x16>
 80106f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106f8:	4611      	mov	r1, r2
 80106fa:	f7ff b97d 	b.w	800f9f8 <_malloc_r>
 80106fe:	b92a      	cbnz	r2, 801070c <_realloc_r+0x24>
 8010700:	f7ff f906 	bl	800f910 <_free_r>
 8010704:	4625      	mov	r5, r4
 8010706:	4628      	mov	r0, r5
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	f000 f841 	bl	8010792 <_malloc_usable_size_r>
 8010710:	4284      	cmp	r4, r0
 8010712:	4606      	mov	r6, r0
 8010714:	d802      	bhi.n	801071c <_realloc_r+0x34>
 8010716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801071a:	d8f4      	bhi.n	8010706 <_realloc_r+0x1e>
 801071c:	4621      	mov	r1, r4
 801071e:	4638      	mov	r0, r7
 8010720:	f7ff f96a 	bl	800f9f8 <_malloc_r>
 8010724:	4680      	mov	r8, r0
 8010726:	b908      	cbnz	r0, 801072c <_realloc_r+0x44>
 8010728:	4645      	mov	r5, r8
 801072a:	e7ec      	b.n	8010706 <_realloc_r+0x1e>
 801072c:	42b4      	cmp	r4, r6
 801072e:	4622      	mov	r2, r4
 8010730:	4629      	mov	r1, r5
 8010732:	bf28      	it	cs
 8010734:	4632      	movcs	r2, r6
 8010736:	f7fe fa82 	bl	800ec3e <memcpy>
 801073a:	4629      	mov	r1, r5
 801073c:	4638      	mov	r0, r7
 801073e:	f7ff f8e7 	bl	800f910 <_free_r>
 8010742:	e7f1      	b.n	8010728 <_realloc_r+0x40>

08010744 <__ascii_wctomb>:
 8010744:	4603      	mov	r3, r0
 8010746:	4608      	mov	r0, r1
 8010748:	b141      	cbz	r1, 801075c <__ascii_wctomb+0x18>
 801074a:	2aff      	cmp	r2, #255	@ 0xff
 801074c:	d904      	bls.n	8010758 <__ascii_wctomb+0x14>
 801074e:	228a      	movs	r2, #138	@ 0x8a
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	f04f 30ff 	mov.w	r0, #4294967295
 8010756:	4770      	bx	lr
 8010758:	700a      	strb	r2, [r1, #0]
 801075a:	2001      	movs	r0, #1
 801075c:	4770      	bx	lr
	...

08010760 <fiprintf>:
 8010760:	b40e      	push	{r1, r2, r3}
 8010762:	b503      	push	{r0, r1, lr}
 8010764:	4601      	mov	r1, r0
 8010766:	ab03      	add	r3, sp, #12
 8010768:	4805      	ldr	r0, [pc, #20]	@ (8010780 <fiprintf+0x20>)
 801076a:	f853 2b04 	ldr.w	r2, [r3], #4
 801076e:	6800      	ldr	r0, [r0, #0]
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	f000 f83f 	bl	80107f4 <_vfiprintf_r>
 8010776:	b002      	add	sp, #8
 8010778:	f85d eb04 	ldr.w	lr, [sp], #4
 801077c:	b003      	add	sp, #12
 801077e:	4770      	bx	lr
 8010780:	20000194 	.word	0x20000194

08010784 <abort>:
 8010784:	b508      	push	{r3, lr}
 8010786:	2006      	movs	r0, #6
 8010788:	f000 fa08 	bl	8010b9c <raise>
 801078c:	2001      	movs	r0, #1
 801078e:	f7f1 fab9 	bl	8001d04 <_exit>

08010792 <_malloc_usable_size_r>:
 8010792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010796:	1f18      	subs	r0, r3, #4
 8010798:	2b00      	cmp	r3, #0
 801079a:	bfbc      	itt	lt
 801079c:	580b      	ldrlt	r3, [r1, r0]
 801079e:	18c0      	addlt	r0, r0, r3
 80107a0:	4770      	bx	lr

080107a2 <__sfputc_r>:
 80107a2:	6893      	ldr	r3, [r2, #8]
 80107a4:	3b01      	subs	r3, #1
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	b410      	push	{r4}
 80107aa:	6093      	str	r3, [r2, #8]
 80107ac:	da08      	bge.n	80107c0 <__sfputc_r+0x1e>
 80107ae:	6994      	ldr	r4, [r2, #24]
 80107b0:	42a3      	cmp	r3, r4
 80107b2:	db01      	blt.n	80107b8 <__sfputc_r+0x16>
 80107b4:	290a      	cmp	r1, #10
 80107b6:	d103      	bne.n	80107c0 <__sfputc_r+0x1e>
 80107b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107bc:	f000 b932 	b.w	8010a24 <__swbuf_r>
 80107c0:	6813      	ldr	r3, [r2, #0]
 80107c2:	1c58      	adds	r0, r3, #1
 80107c4:	6010      	str	r0, [r2, #0]
 80107c6:	7019      	strb	r1, [r3, #0]
 80107c8:	4608      	mov	r0, r1
 80107ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <__sfputs_r>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	4606      	mov	r6, r0
 80107d4:	460f      	mov	r7, r1
 80107d6:	4614      	mov	r4, r2
 80107d8:	18d5      	adds	r5, r2, r3
 80107da:	42ac      	cmp	r4, r5
 80107dc:	d101      	bne.n	80107e2 <__sfputs_r+0x12>
 80107de:	2000      	movs	r0, #0
 80107e0:	e007      	b.n	80107f2 <__sfputs_r+0x22>
 80107e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107e6:	463a      	mov	r2, r7
 80107e8:	4630      	mov	r0, r6
 80107ea:	f7ff ffda 	bl	80107a2 <__sfputc_r>
 80107ee:	1c43      	adds	r3, r0, #1
 80107f0:	d1f3      	bne.n	80107da <__sfputs_r+0xa>
 80107f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107f4 <_vfiprintf_r>:
 80107f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f8:	460d      	mov	r5, r1
 80107fa:	b09d      	sub	sp, #116	@ 0x74
 80107fc:	4614      	mov	r4, r2
 80107fe:	4698      	mov	r8, r3
 8010800:	4606      	mov	r6, r0
 8010802:	b118      	cbz	r0, 801080c <_vfiprintf_r+0x18>
 8010804:	6a03      	ldr	r3, [r0, #32]
 8010806:	b90b      	cbnz	r3, 801080c <_vfiprintf_r+0x18>
 8010808:	f7fe f8a2 	bl	800e950 <__sinit>
 801080c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801080e:	07d9      	lsls	r1, r3, #31
 8010810:	d405      	bmi.n	801081e <_vfiprintf_r+0x2a>
 8010812:	89ab      	ldrh	r3, [r5, #12]
 8010814:	059a      	lsls	r2, r3, #22
 8010816:	d402      	bmi.n	801081e <_vfiprintf_r+0x2a>
 8010818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801081a:	f7fe fa0e 	bl	800ec3a <__retarget_lock_acquire_recursive>
 801081e:	89ab      	ldrh	r3, [r5, #12]
 8010820:	071b      	lsls	r3, r3, #28
 8010822:	d501      	bpl.n	8010828 <_vfiprintf_r+0x34>
 8010824:	692b      	ldr	r3, [r5, #16]
 8010826:	b99b      	cbnz	r3, 8010850 <_vfiprintf_r+0x5c>
 8010828:	4629      	mov	r1, r5
 801082a:	4630      	mov	r0, r6
 801082c:	f000 f938 	bl	8010aa0 <__swsetup_r>
 8010830:	b170      	cbz	r0, 8010850 <_vfiprintf_r+0x5c>
 8010832:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010834:	07dc      	lsls	r4, r3, #31
 8010836:	d504      	bpl.n	8010842 <_vfiprintf_r+0x4e>
 8010838:	f04f 30ff 	mov.w	r0, #4294967295
 801083c:	b01d      	add	sp, #116	@ 0x74
 801083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010842:	89ab      	ldrh	r3, [r5, #12]
 8010844:	0598      	lsls	r0, r3, #22
 8010846:	d4f7      	bmi.n	8010838 <_vfiprintf_r+0x44>
 8010848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801084a:	f7fe f9f7 	bl	800ec3c <__retarget_lock_release_recursive>
 801084e:	e7f3      	b.n	8010838 <_vfiprintf_r+0x44>
 8010850:	2300      	movs	r3, #0
 8010852:	9309      	str	r3, [sp, #36]	@ 0x24
 8010854:	2320      	movs	r3, #32
 8010856:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801085a:	f8cd 800c 	str.w	r8, [sp, #12]
 801085e:	2330      	movs	r3, #48	@ 0x30
 8010860:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010a10 <_vfiprintf_r+0x21c>
 8010864:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010868:	f04f 0901 	mov.w	r9, #1
 801086c:	4623      	mov	r3, r4
 801086e:	469a      	mov	sl, r3
 8010870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010874:	b10a      	cbz	r2, 801087a <_vfiprintf_r+0x86>
 8010876:	2a25      	cmp	r2, #37	@ 0x25
 8010878:	d1f9      	bne.n	801086e <_vfiprintf_r+0x7a>
 801087a:	ebba 0b04 	subs.w	fp, sl, r4
 801087e:	d00b      	beq.n	8010898 <_vfiprintf_r+0xa4>
 8010880:	465b      	mov	r3, fp
 8010882:	4622      	mov	r2, r4
 8010884:	4629      	mov	r1, r5
 8010886:	4630      	mov	r0, r6
 8010888:	f7ff ffa2 	bl	80107d0 <__sfputs_r>
 801088c:	3001      	adds	r0, #1
 801088e:	f000 80a7 	beq.w	80109e0 <_vfiprintf_r+0x1ec>
 8010892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010894:	445a      	add	r2, fp
 8010896:	9209      	str	r2, [sp, #36]	@ 0x24
 8010898:	f89a 3000 	ldrb.w	r3, [sl]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f000 809f 	beq.w	80109e0 <_vfiprintf_r+0x1ec>
 80108a2:	2300      	movs	r3, #0
 80108a4:	f04f 32ff 	mov.w	r2, #4294967295
 80108a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108ac:	f10a 0a01 	add.w	sl, sl, #1
 80108b0:	9304      	str	r3, [sp, #16]
 80108b2:	9307      	str	r3, [sp, #28]
 80108b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80108b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80108ba:	4654      	mov	r4, sl
 80108bc:	2205      	movs	r2, #5
 80108be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c2:	4853      	ldr	r0, [pc, #332]	@ (8010a10 <_vfiprintf_r+0x21c>)
 80108c4:	f7ef fcac 	bl	8000220 <memchr>
 80108c8:	9a04      	ldr	r2, [sp, #16]
 80108ca:	b9d8      	cbnz	r0, 8010904 <_vfiprintf_r+0x110>
 80108cc:	06d1      	lsls	r1, r2, #27
 80108ce:	bf44      	itt	mi
 80108d0:	2320      	movmi	r3, #32
 80108d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108d6:	0713      	lsls	r3, r2, #28
 80108d8:	bf44      	itt	mi
 80108da:	232b      	movmi	r3, #43	@ 0x2b
 80108dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108e0:	f89a 3000 	ldrb.w	r3, [sl]
 80108e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80108e6:	d015      	beq.n	8010914 <_vfiprintf_r+0x120>
 80108e8:	9a07      	ldr	r2, [sp, #28]
 80108ea:	4654      	mov	r4, sl
 80108ec:	2000      	movs	r0, #0
 80108ee:	f04f 0c0a 	mov.w	ip, #10
 80108f2:	4621      	mov	r1, r4
 80108f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108f8:	3b30      	subs	r3, #48	@ 0x30
 80108fa:	2b09      	cmp	r3, #9
 80108fc:	d94b      	bls.n	8010996 <_vfiprintf_r+0x1a2>
 80108fe:	b1b0      	cbz	r0, 801092e <_vfiprintf_r+0x13a>
 8010900:	9207      	str	r2, [sp, #28]
 8010902:	e014      	b.n	801092e <_vfiprintf_r+0x13a>
 8010904:	eba0 0308 	sub.w	r3, r0, r8
 8010908:	fa09 f303 	lsl.w	r3, r9, r3
 801090c:	4313      	orrs	r3, r2
 801090e:	9304      	str	r3, [sp, #16]
 8010910:	46a2      	mov	sl, r4
 8010912:	e7d2      	b.n	80108ba <_vfiprintf_r+0xc6>
 8010914:	9b03      	ldr	r3, [sp, #12]
 8010916:	1d19      	adds	r1, r3, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	9103      	str	r1, [sp, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	bfbb      	ittet	lt
 8010920:	425b      	neglt	r3, r3
 8010922:	f042 0202 	orrlt.w	r2, r2, #2
 8010926:	9307      	strge	r3, [sp, #28]
 8010928:	9307      	strlt	r3, [sp, #28]
 801092a:	bfb8      	it	lt
 801092c:	9204      	strlt	r2, [sp, #16]
 801092e:	7823      	ldrb	r3, [r4, #0]
 8010930:	2b2e      	cmp	r3, #46	@ 0x2e
 8010932:	d10a      	bne.n	801094a <_vfiprintf_r+0x156>
 8010934:	7863      	ldrb	r3, [r4, #1]
 8010936:	2b2a      	cmp	r3, #42	@ 0x2a
 8010938:	d132      	bne.n	80109a0 <_vfiprintf_r+0x1ac>
 801093a:	9b03      	ldr	r3, [sp, #12]
 801093c:	1d1a      	adds	r2, r3, #4
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	9203      	str	r2, [sp, #12]
 8010942:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010946:	3402      	adds	r4, #2
 8010948:	9305      	str	r3, [sp, #20]
 801094a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010a20 <_vfiprintf_r+0x22c>
 801094e:	7821      	ldrb	r1, [r4, #0]
 8010950:	2203      	movs	r2, #3
 8010952:	4650      	mov	r0, sl
 8010954:	f7ef fc64 	bl	8000220 <memchr>
 8010958:	b138      	cbz	r0, 801096a <_vfiprintf_r+0x176>
 801095a:	9b04      	ldr	r3, [sp, #16]
 801095c:	eba0 000a 	sub.w	r0, r0, sl
 8010960:	2240      	movs	r2, #64	@ 0x40
 8010962:	4082      	lsls	r2, r0
 8010964:	4313      	orrs	r3, r2
 8010966:	3401      	adds	r4, #1
 8010968:	9304      	str	r3, [sp, #16]
 801096a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801096e:	4829      	ldr	r0, [pc, #164]	@ (8010a14 <_vfiprintf_r+0x220>)
 8010970:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010974:	2206      	movs	r2, #6
 8010976:	f7ef fc53 	bl	8000220 <memchr>
 801097a:	2800      	cmp	r0, #0
 801097c:	d03f      	beq.n	80109fe <_vfiprintf_r+0x20a>
 801097e:	4b26      	ldr	r3, [pc, #152]	@ (8010a18 <_vfiprintf_r+0x224>)
 8010980:	bb1b      	cbnz	r3, 80109ca <_vfiprintf_r+0x1d6>
 8010982:	9b03      	ldr	r3, [sp, #12]
 8010984:	3307      	adds	r3, #7
 8010986:	f023 0307 	bic.w	r3, r3, #7
 801098a:	3308      	adds	r3, #8
 801098c:	9303      	str	r3, [sp, #12]
 801098e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010990:	443b      	add	r3, r7
 8010992:	9309      	str	r3, [sp, #36]	@ 0x24
 8010994:	e76a      	b.n	801086c <_vfiprintf_r+0x78>
 8010996:	fb0c 3202 	mla	r2, ip, r2, r3
 801099a:	460c      	mov	r4, r1
 801099c:	2001      	movs	r0, #1
 801099e:	e7a8      	b.n	80108f2 <_vfiprintf_r+0xfe>
 80109a0:	2300      	movs	r3, #0
 80109a2:	3401      	adds	r4, #1
 80109a4:	9305      	str	r3, [sp, #20]
 80109a6:	4619      	mov	r1, r3
 80109a8:	f04f 0c0a 	mov.w	ip, #10
 80109ac:	4620      	mov	r0, r4
 80109ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109b2:	3a30      	subs	r2, #48	@ 0x30
 80109b4:	2a09      	cmp	r2, #9
 80109b6:	d903      	bls.n	80109c0 <_vfiprintf_r+0x1cc>
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d0c6      	beq.n	801094a <_vfiprintf_r+0x156>
 80109bc:	9105      	str	r1, [sp, #20]
 80109be:	e7c4      	b.n	801094a <_vfiprintf_r+0x156>
 80109c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80109c4:	4604      	mov	r4, r0
 80109c6:	2301      	movs	r3, #1
 80109c8:	e7f0      	b.n	80109ac <_vfiprintf_r+0x1b8>
 80109ca:	ab03      	add	r3, sp, #12
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	462a      	mov	r2, r5
 80109d0:	4b12      	ldr	r3, [pc, #72]	@ (8010a1c <_vfiprintf_r+0x228>)
 80109d2:	a904      	add	r1, sp, #16
 80109d4:	4630      	mov	r0, r6
 80109d6:	f7fd fb79 	bl	800e0cc <_printf_float>
 80109da:	4607      	mov	r7, r0
 80109dc:	1c78      	adds	r0, r7, #1
 80109de:	d1d6      	bne.n	801098e <_vfiprintf_r+0x19a>
 80109e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109e2:	07d9      	lsls	r1, r3, #31
 80109e4:	d405      	bmi.n	80109f2 <_vfiprintf_r+0x1fe>
 80109e6:	89ab      	ldrh	r3, [r5, #12]
 80109e8:	059a      	lsls	r2, r3, #22
 80109ea:	d402      	bmi.n	80109f2 <_vfiprintf_r+0x1fe>
 80109ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109ee:	f7fe f925 	bl	800ec3c <__retarget_lock_release_recursive>
 80109f2:	89ab      	ldrh	r3, [r5, #12]
 80109f4:	065b      	lsls	r3, r3, #25
 80109f6:	f53f af1f 	bmi.w	8010838 <_vfiprintf_r+0x44>
 80109fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109fc:	e71e      	b.n	801083c <_vfiprintf_r+0x48>
 80109fe:	ab03      	add	r3, sp, #12
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	462a      	mov	r2, r5
 8010a04:	4b05      	ldr	r3, [pc, #20]	@ (8010a1c <_vfiprintf_r+0x228>)
 8010a06:	a904      	add	r1, sp, #16
 8010a08:	4630      	mov	r0, r6
 8010a0a:	f7fd fdf7 	bl	800e5fc <_printf_i>
 8010a0e:	e7e4      	b.n	80109da <_vfiprintf_r+0x1e6>
 8010a10:	080111ea 	.word	0x080111ea
 8010a14:	080111f4 	.word	0x080111f4
 8010a18:	0800e0cd 	.word	0x0800e0cd
 8010a1c:	080107d1 	.word	0x080107d1
 8010a20:	080111f0 	.word	0x080111f0

08010a24 <__swbuf_r>:
 8010a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a26:	460e      	mov	r6, r1
 8010a28:	4614      	mov	r4, r2
 8010a2a:	4605      	mov	r5, r0
 8010a2c:	b118      	cbz	r0, 8010a36 <__swbuf_r+0x12>
 8010a2e:	6a03      	ldr	r3, [r0, #32]
 8010a30:	b90b      	cbnz	r3, 8010a36 <__swbuf_r+0x12>
 8010a32:	f7fd ff8d 	bl	800e950 <__sinit>
 8010a36:	69a3      	ldr	r3, [r4, #24]
 8010a38:	60a3      	str	r3, [r4, #8]
 8010a3a:	89a3      	ldrh	r3, [r4, #12]
 8010a3c:	071a      	lsls	r2, r3, #28
 8010a3e:	d501      	bpl.n	8010a44 <__swbuf_r+0x20>
 8010a40:	6923      	ldr	r3, [r4, #16]
 8010a42:	b943      	cbnz	r3, 8010a56 <__swbuf_r+0x32>
 8010a44:	4621      	mov	r1, r4
 8010a46:	4628      	mov	r0, r5
 8010a48:	f000 f82a 	bl	8010aa0 <__swsetup_r>
 8010a4c:	b118      	cbz	r0, 8010a56 <__swbuf_r+0x32>
 8010a4e:	f04f 37ff 	mov.w	r7, #4294967295
 8010a52:	4638      	mov	r0, r7
 8010a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a56:	6823      	ldr	r3, [r4, #0]
 8010a58:	6922      	ldr	r2, [r4, #16]
 8010a5a:	1a98      	subs	r0, r3, r2
 8010a5c:	6963      	ldr	r3, [r4, #20]
 8010a5e:	b2f6      	uxtb	r6, r6
 8010a60:	4283      	cmp	r3, r0
 8010a62:	4637      	mov	r7, r6
 8010a64:	dc05      	bgt.n	8010a72 <__swbuf_r+0x4e>
 8010a66:	4621      	mov	r1, r4
 8010a68:	4628      	mov	r0, r5
 8010a6a:	f7ff fda7 	bl	80105bc <_fflush_r>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d1ed      	bne.n	8010a4e <__swbuf_r+0x2a>
 8010a72:	68a3      	ldr	r3, [r4, #8]
 8010a74:	3b01      	subs	r3, #1
 8010a76:	60a3      	str	r3, [r4, #8]
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	1c5a      	adds	r2, r3, #1
 8010a7c:	6022      	str	r2, [r4, #0]
 8010a7e:	701e      	strb	r6, [r3, #0]
 8010a80:	6962      	ldr	r2, [r4, #20]
 8010a82:	1c43      	adds	r3, r0, #1
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d004      	beq.n	8010a92 <__swbuf_r+0x6e>
 8010a88:	89a3      	ldrh	r3, [r4, #12]
 8010a8a:	07db      	lsls	r3, r3, #31
 8010a8c:	d5e1      	bpl.n	8010a52 <__swbuf_r+0x2e>
 8010a8e:	2e0a      	cmp	r6, #10
 8010a90:	d1df      	bne.n	8010a52 <__swbuf_r+0x2e>
 8010a92:	4621      	mov	r1, r4
 8010a94:	4628      	mov	r0, r5
 8010a96:	f7ff fd91 	bl	80105bc <_fflush_r>
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	d0d9      	beq.n	8010a52 <__swbuf_r+0x2e>
 8010a9e:	e7d6      	b.n	8010a4e <__swbuf_r+0x2a>

08010aa0 <__swsetup_r>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4b29      	ldr	r3, [pc, #164]	@ (8010b48 <__swsetup_r+0xa8>)
 8010aa4:	4605      	mov	r5, r0
 8010aa6:	6818      	ldr	r0, [r3, #0]
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	b118      	cbz	r0, 8010ab4 <__swsetup_r+0x14>
 8010aac:	6a03      	ldr	r3, [r0, #32]
 8010aae:	b90b      	cbnz	r3, 8010ab4 <__swsetup_r+0x14>
 8010ab0:	f7fd ff4e 	bl	800e950 <__sinit>
 8010ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab8:	0719      	lsls	r1, r3, #28
 8010aba:	d422      	bmi.n	8010b02 <__swsetup_r+0x62>
 8010abc:	06da      	lsls	r2, r3, #27
 8010abe:	d407      	bmi.n	8010ad0 <__swsetup_r+0x30>
 8010ac0:	2209      	movs	r2, #9
 8010ac2:	602a      	str	r2, [r5, #0]
 8010ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ac8:	81a3      	strh	r3, [r4, #12]
 8010aca:	f04f 30ff 	mov.w	r0, #4294967295
 8010ace:	e033      	b.n	8010b38 <__swsetup_r+0x98>
 8010ad0:	0758      	lsls	r0, r3, #29
 8010ad2:	d512      	bpl.n	8010afa <__swsetup_r+0x5a>
 8010ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ad6:	b141      	cbz	r1, 8010aea <__swsetup_r+0x4a>
 8010ad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010adc:	4299      	cmp	r1, r3
 8010ade:	d002      	beq.n	8010ae6 <__swsetup_r+0x46>
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	f7fe ff15 	bl	800f910 <_free_r>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	6363      	str	r3, [r4, #52]	@ 0x34
 8010aea:	89a3      	ldrh	r3, [r4, #12]
 8010aec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010af0:	81a3      	strh	r3, [r4, #12]
 8010af2:	2300      	movs	r3, #0
 8010af4:	6063      	str	r3, [r4, #4]
 8010af6:	6923      	ldr	r3, [r4, #16]
 8010af8:	6023      	str	r3, [r4, #0]
 8010afa:	89a3      	ldrh	r3, [r4, #12]
 8010afc:	f043 0308 	orr.w	r3, r3, #8
 8010b00:	81a3      	strh	r3, [r4, #12]
 8010b02:	6923      	ldr	r3, [r4, #16]
 8010b04:	b94b      	cbnz	r3, 8010b1a <__swsetup_r+0x7a>
 8010b06:	89a3      	ldrh	r3, [r4, #12]
 8010b08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b10:	d003      	beq.n	8010b1a <__swsetup_r+0x7a>
 8010b12:	4621      	mov	r1, r4
 8010b14:	4628      	mov	r0, r5
 8010b16:	f000 f883 	bl	8010c20 <__smakebuf_r>
 8010b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b1e:	f013 0201 	ands.w	r2, r3, #1
 8010b22:	d00a      	beq.n	8010b3a <__swsetup_r+0x9a>
 8010b24:	2200      	movs	r2, #0
 8010b26:	60a2      	str	r2, [r4, #8]
 8010b28:	6962      	ldr	r2, [r4, #20]
 8010b2a:	4252      	negs	r2, r2
 8010b2c:	61a2      	str	r2, [r4, #24]
 8010b2e:	6922      	ldr	r2, [r4, #16]
 8010b30:	b942      	cbnz	r2, 8010b44 <__swsetup_r+0xa4>
 8010b32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010b36:	d1c5      	bne.n	8010ac4 <__swsetup_r+0x24>
 8010b38:	bd38      	pop	{r3, r4, r5, pc}
 8010b3a:	0799      	lsls	r1, r3, #30
 8010b3c:	bf58      	it	pl
 8010b3e:	6962      	ldrpl	r2, [r4, #20]
 8010b40:	60a2      	str	r2, [r4, #8]
 8010b42:	e7f4      	b.n	8010b2e <__swsetup_r+0x8e>
 8010b44:	2000      	movs	r0, #0
 8010b46:	e7f7      	b.n	8010b38 <__swsetup_r+0x98>
 8010b48:	20000194 	.word	0x20000194

08010b4c <_raise_r>:
 8010b4c:	291f      	cmp	r1, #31
 8010b4e:	b538      	push	{r3, r4, r5, lr}
 8010b50:	4605      	mov	r5, r0
 8010b52:	460c      	mov	r4, r1
 8010b54:	d904      	bls.n	8010b60 <_raise_r+0x14>
 8010b56:	2316      	movs	r3, #22
 8010b58:	6003      	str	r3, [r0, #0]
 8010b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b5e:	bd38      	pop	{r3, r4, r5, pc}
 8010b60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010b62:	b112      	cbz	r2, 8010b6a <_raise_r+0x1e>
 8010b64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b68:	b94b      	cbnz	r3, 8010b7e <_raise_r+0x32>
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f000 f830 	bl	8010bd0 <_getpid_r>
 8010b70:	4622      	mov	r2, r4
 8010b72:	4601      	mov	r1, r0
 8010b74:	4628      	mov	r0, r5
 8010b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b7a:	f000 b817 	b.w	8010bac <_kill_r>
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	d00a      	beq.n	8010b98 <_raise_r+0x4c>
 8010b82:	1c59      	adds	r1, r3, #1
 8010b84:	d103      	bne.n	8010b8e <_raise_r+0x42>
 8010b86:	2316      	movs	r3, #22
 8010b88:	6003      	str	r3, [r0, #0]
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	e7e7      	b.n	8010b5e <_raise_r+0x12>
 8010b8e:	2100      	movs	r1, #0
 8010b90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b94:	4620      	mov	r0, r4
 8010b96:	4798      	blx	r3
 8010b98:	2000      	movs	r0, #0
 8010b9a:	e7e0      	b.n	8010b5e <_raise_r+0x12>

08010b9c <raise>:
 8010b9c:	4b02      	ldr	r3, [pc, #8]	@ (8010ba8 <raise+0xc>)
 8010b9e:	4601      	mov	r1, r0
 8010ba0:	6818      	ldr	r0, [r3, #0]
 8010ba2:	f7ff bfd3 	b.w	8010b4c <_raise_r>
 8010ba6:	bf00      	nop
 8010ba8:	20000194 	.word	0x20000194

08010bac <_kill_r>:
 8010bac:	b538      	push	{r3, r4, r5, lr}
 8010bae:	4d07      	ldr	r5, [pc, #28]	@ (8010bcc <_kill_r+0x20>)
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	4608      	mov	r0, r1
 8010bb6:	4611      	mov	r1, r2
 8010bb8:	602b      	str	r3, [r5, #0]
 8010bba:	f7f1 f893 	bl	8001ce4 <_kill>
 8010bbe:	1c43      	adds	r3, r0, #1
 8010bc0:	d102      	bne.n	8010bc8 <_kill_r+0x1c>
 8010bc2:	682b      	ldr	r3, [r5, #0]
 8010bc4:	b103      	cbz	r3, 8010bc8 <_kill_r+0x1c>
 8010bc6:	6023      	str	r3, [r4, #0]
 8010bc8:	bd38      	pop	{r3, r4, r5, pc}
 8010bca:	bf00      	nop
 8010bcc:	2000a6c4 	.word	0x2000a6c4

08010bd0 <_getpid_r>:
 8010bd0:	f7f1 b880 	b.w	8001cd4 <_getpid>

08010bd4 <__swhatbuf_r>:
 8010bd4:	b570      	push	{r4, r5, r6, lr}
 8010bd6:	460c      	mov	r4, r1
 8010bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bdc:	2900      	cmp	r1, #0
 8010bde:	b096      	sub	sp, #88	@ 0x58
 8010be0:	4615      	mov	r5, r2
 8010be2:	461e      	mov	r6, r3
 8010be4:	da0d      	bge.n	8010c02 <__swhatbuf_r+0x2e>
 8010be6:	89a3      	ldrh	r3, [r4, #12]
 8010be8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bec:	f04f 0100 	mov.w	r1, #0
 8010bf0:	bf14      	ite	ne
 8010bf2:	2340      	movne	r3, #64	@ 0x40
 8010bf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	6031      	str	r1, [r6, #0]
 8010bfc:	602b      	str	r3, [r5, #0]
 8010bfe:	b016      	add	sp, #88	@ 0x58
 8010c00:	bd70      	pop	{r4, r5, r6, pc}
 8010c02:	466a      	mov	r2, sp
 8010c04:	f000 f848 	bl	8010c98 <_fstat_r>
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	dbec      	blt.n	8010be6 <__swhatbuf_r+0x12>
 8010c0c:	9901      	ldr	r1, [sp, #4]
 8010c0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c16:	4259      	negs	r1, r3
 8010c18:	4159      	adcs	r1, r3
 8010c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c1e:	e7eb      	b.n	8010bf8 <__swhatbuf_r+0x24>

08010c20 <__smakebuf_r>:
 8010c20:	898b      	ldrh	r3, [r1, #12]
 8010c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c24:	079d      	lsls	r5, r3, #30
 8010c26:	4606      	mov	r6, r0
 8010c28:	460c      	mov	r4, r1
 8010c2a:	d507      	bpl.n	8010c3c <__smakebuf_r+0x1c>
 8010c2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c30:	6023      	str	r3, [r4, #0]
 8010c32:	6123      	str	r3, [r4, #16]
 8010c34:	2301      	movs	r3, #1
 8010c36:	6163      	str	r3, [r4, #20]
 8010c38:	b003      	add	sp, #12
 8010c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c3c:	ab01      	add	r3, sp, #4
 8010c3e:	466a      	mov	r2, sp
 8010c40:	f7ff ffc8 	bl	8010bd4 <__swhatbuf_r>
 8010c44:	9f00      	ldr	r7, [sp, #0]
 8010c46:	4605      	mov	r5, r0
 8010c48:	4639      	mov	r1, r7
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f7fe fed4 	bl	800f9f8 <_malloc_r>
 8010c50:	b948      	cbnz	r0, 8010c66 <__smakebuf_r+0x46>
 8010c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c56:	059a      	lsls	r2, r3, #22
 8010c58:	d4ee      	bmi.n	8010c38 <__smakebuf_r+0x18>
 8010c5a:	f023 0303 	bic.w	r3, r3, #3
 8010c5e:	f043 0302 	orr.w	r3, r3, #2
 8010c62:	81a3      	strh	r3, [r4, #12]
 8010c64:	e7e2      	b.n	8010c2c <__smakebuf_r+0xc>
 8010c66:	89a3      	ldrh	r3, [r4, #12]
 8010c68:	6020      	str	r0, [r4, #0]
 8010c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	9b01      	ldr	r3, [sp, #4]
 8010c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c76:	b15b      	cbz	r3, 8010c90 <__smakebuf_r+0x70>
 8010c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	f000 f81d 	bl	8010cbc <_isatty_r>
 8010c82:	b128      	cbz	r0, 8010c90 <__smakebuf_r+0x70>
 8010c84:	89a3      	ldrh	r3, [r4, #12]
 8010c86:	f023 0303 	bic.w	r3, r3, #3
 8010c8a:	f043 0301 	orr.w	r3, r3, #1
 8010c8e:	81a3      	strh	r3, [r4, #12]
 8010c90:	89a3      	ldrh	r3, [r4, #12]
 8010c92:	431d      	orrs	r5, r3
 8010c94:	81a5      	strh	r5, [r4, #12]
 8010c96:	e7cf      	b.n	8010c38 <__smakebuf_r+0x18>

08010c98 <_fstat_r>:
 8010c98:	b538      	push	{r3, r4, r5, lr}
 8010c9a:	4d07      	ldr	r5, [pc, #28]	@ (8010cb8 <_fstat_r+0x20>)
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	4608      	mov	r0, r1
 8010ca2:	4611      	mov	r1, r2
 8010ca4:	602b      	str	r3, [r5, #0]
 8010ca6:	f7f1 f87d 	bl	8001da4 <_fstat>
 8010caa:	1c43      	adds	r3, r0, #1
 8010cac:	d102      	bne.n	8010cb4 <_fstat_r+0x1c>
 8010cae:	682b      	ldr	r3, [r5, #0]
 8010cb0:	b103      	cbz	r3, 8010cb4 <_fstat_r+0x1c>
 8010cb2:	6023      	str	r3, [r4, #0]
 8010cb4:	bd38      	pop	{r3, r4, r5, pc}
 8010cb6:	bf00      	nop
 8010cb8:	2000a6c4 	.word	0x2000a6c4

08010cbc <_isatty_r>:
 8010cbc:	b538      	push	{r3, r4, r5, lr}
 8010cbe:	4d06      	ldr	r5, [pc, #24]	@ (8010cd8 <_isatty_r+0x1c>)
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	4608      	mov	r0, r1
 8010cc6:	602b      	str	r3, [r5, #0]
 8010cc8:	f7f1 f87c 	bl	8001dc4 <_isatty>
 8010ccc:	1c43      	adds	r3, r0, #1
 8010cce:	d102      	bne.n	8010cd6 <_isatty_r+0x1a>
 8010cd0:	682b      	ldr	r3, [r5, #0]
 8010cd2:	b103      	cbz	r3, 8010cd6 <_isatty_r+0x1a>
 8010cd4:	6023      	str	r3, [r4, #0]
 8010cd6:	bd38      	pop	{r3, r4, r5, pc}
 8010cd8:	2000a6c4 	.word	0x2000a6c4

08010cdc <_init>:
 8010cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cde:	bf00      	nop
 8010ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ce2:	bc08      	pop	{r3}
 8010ce4:	469e      	mov	lr, r3
 8010ce6:	4770      	bx	lr

08010ce8 <_fini>:
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	bf00      	nop
 8010cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cee:	bc08      	pop	{r3}
 8010cf0:	469e      	mov	lr, r3
 8010cf2:	4770      	bx	lr
