
PowerBoard25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010be4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  08010dc8  08010dc8  00011dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011504  08011504  00013350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011504  08011504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801150c  0801150c  00013350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801150c  0801150c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011510  08011510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08011514  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a378  20000350  08011864  00013350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a6c8  08011864  000136c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d7a8  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f5e  00000000  00000000  00040b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024b8  00000000  00000000  00046a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c55  00000000  00000000  00048f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002626e  00000000  00000000  0004ab95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb44  00000000  00000000  00070e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7c5a  00000000  00000000  0009c947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001845a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad54  00000000  00000000  001845e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0018f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010dac 	.word	0x08010dac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08010dac 	.word	0x08010dac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <CLTC2990_Init>:
  * @brief  Initialize the LTC2990 Chip
  * @param  Pointer to the LTC2990 handle
  * @param  Pointer to the HAL I2C HandleTypeDef
  * @retval HAL status
  */
int CLTC2990_Init(CLTC2990_Handle_t *handle, I2C_HandleTypeDef *hi2c, uint8_t address) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]
	int8_t ack;

	handle->hi2c = hi2c;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	601a      	str	r2, [r3, #0]

	//Initialize voltages to NAN
	//Can this be changed so that it is in the struct
	//i.e. last_voltages = {NAN, NAN, NAN, NAN}
	for (int i = 0; i < 4; i++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e005      	b.n	8000fea <CLTC2990_Init+0x26>
		handle->current = NAN;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <CLTC2990_Init+0x90>)
 8000fe2:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 4; i++) {
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	ddf6      	ble.n	8000fde <CLTC2990_Init+0x1a>
	}

	handle->i2c_address = address;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	711a      	strb	r2, [r3, #4]

	ack = CLTC2990_Set_Mode(handle, V1DV2_V3DV4, VOLTAGE_MODE_MASK);
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	2106      	movs	r1, #6
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f8da 	bl	80011b4 <CLTC2990_Set_Mode>
 8001000:	4603      	mov	r3, r0
 8001002:	74fb      	strb	r3, [r7, #19]

	if(ack != 0) {
 8001004:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <CLTC2990_Init+0x52>
		CDC_Transmit_Print("Failed to set in Differential Voltage Mode \n");
 800100c:	4812      	ldr	r0, [pc, #72]	@ (8001058 <CLTC2990_Init+0x94>)
 800100e:	f000 fa53 	bl	80014b8 <CDC_Transmit_Print>
		while(1);
 8001012:	bf00      	nop
 8001014:	e7fd      	b.n	8001012 <CLTC2990_Init+0x4e>
	}


	// Enable all voltage channels
	ack = CLTC2990_Enable_V1DV2_V3DV4(handle);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f8bd 	bl	8001196 <CLTC2990_Enable_V1DV2_V3DV4>
 800101c:	4603      	mov	r3, r0
 800101e:	74fb      	strb	r3, [r7, #19]
	if(ack != 0) {
 8001020:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <CLTC2990_Init+0x74>
		HAL_Delay(50);
 8001028:	2032      	movs	r0, #50	@ 0x32
 800102a:	f000 ffd9 	bl	8001fe0 <HAL_Delay>
		CDC_Transmit_Print("Failed to enable all voltage channels. \n");
 800102e:	480b      	ldr	r0, [pc, #44]	@ (800105c <CLTC2990_Init+0x98>)
 8001030:	f000 fa42 	bl	80014b8 <CDC_Transmit_Print>
		while(1);
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <CLTC2990_Init+0x70>
	}

	HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	@ 0x64
 800103a:	f000 ffd1 	bl	8001fe0 <HAL_Delay>
	CDC_Transmit_Print("LTC2990 configured for Differential Voltage Monitoring. \n");
 800103e:	4808      	ldr	r0, [pc, #32]	@ (8001060 <CLTC2990_Init+0x9c>)
 8001040:	f000 fa3a 	bl	80014b8 <CDC_Transmit_Print>

	//Initial data reading
	CLTC2990_Step(handle);
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f80d 	bl	8001064 <CLTC2990_Step>

	return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	7fc00000 	.word	0x7fc00000
 8001058:	08010dc8 	.word	0x08010dc8
 800105c:	08010df8 	.word	0x08010df8
 8001060:	08010e24 	.word	0x08010e24

08001064 <CLTC2990_Step>:
/**
  * @brief  Tell the LTC2990 chip to refresh voltage readings,
  * 		This does not return the voltage(s) read, use LTC2990_Get_Voltage to do so
  * @param  Pointer to the LTC2990 handle
  */
void CLTC2990_Step(CLTC2990_Handle_t *handle) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	int8_t ack;
	int16_t adc_code;
	int8_t data_valid;
	//Trigger Conversion
	ack = CLTC2990_Trigger_Conversion(handle);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f8e5 	bl	800123c <CLTC2990_Trigger_Conversion>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
	if(ack != 0) {
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <CLTC2990_Step+0x22>
		CDC_Transmit_Print("Failed to trigger conversion.");
 800107e:	4839      	ldr	r0, [pc, #228]	@ (8001164 <CLTC2990_Step+0x100>)
 8001080:	f000 fa1a 	bl	80014b8 <CDC_Transmit_Print>
 8001084:	e06b      	b.n	800115e <CLTC2990_Step+0xfa>
		return;
	}

	// Allow time for conversion
	HAL_Delay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f000 ffaa 	bl	8001fe0 <HAL_Delay>

	// Read differential voltages V1-V2 and V3-V4

	uint8_t msb_registers[2] = {V1DV2_MSB_REG, V3DV4_MSB_REG};
 800108c:	f640 0306 	movw	r3, #2054	@ 0x806
 8001090:	813b      	strh	r3, [r7, #8]
	ack = CLTC2990_ADC_Read_New_Data(handle, msb_registers[0], &adc_code, &data_valid);
 8001092:	7a39      	ldrb	r1, [r7, #8]
 8001094:	f107 030b 	add.w	r3, r7, #11
 8001098:	f107 020c 	add.w	r2, r7, #12
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f8db 	bl	8001258 <CLTC2990_ADC_Read_New_Data>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <CLTC2990_Step+0x52>
 80010ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d014      	beq.n	80010e0 <CLTC2990_Step+0x7c>
		CDC_Transmit_Print("Error reading Register %x \n", msb_registers[0]);
 80010b6:	7a3b      	ldrb	r3, [r7, #8]
 80010b8:	4619      	mov	r1, r3
 80010ba:	482b      	ldr	r0, [pc, #172]	@ (8001168 <CLTC2990_Step+0x104>)
 80010bc:	f000 f9fc 	bl	80014b8 <CDC_Transmit_Print>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4829      	ldr	r0, [pc, #164]	@ (800116c <CLTC2990_Step+0x108>)
 80010c8:	f000 f9f6 	bl	80014b8 <CDC_Transmit_Print>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 80010cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4827      	ldr	r0, [pc, #156]	@ (8001170 <CLTC2990_Step+0x10c>)
 80010d4:	f000 f9f0 	bl	80014b8 <CDC_Transmit_Print>
		handle->current = NAN;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a26      	ldr	r2, [pc, #152]	@ (8001174 <CLTC2990_Step+0x110>)
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	e00b      	b.n	80010f8 <CLTC2990_Step+0x94>
	} else {
		handle->current = CLTC2990_Code_To_Differential_Current(handle, adc_code);
 80010e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4619      	mov	r1, r3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f939 	bl	8001360 <CLTC2990_Code_To_Differential_Current>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	ack = CLTC2990_ADC_Read_New_Data(handle, msb_registers[1], &adc_code, &data_valid);
 80010f8:	7a79      	ldrb	r1, [r7, #9]
 80010fa:	f107 030b 	add.w	r3, r7, #11
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f8a8 	bl	8001258 <CLTC2990_ADC_Read_New_Data>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
	if(ack != 0 || data_valid != 1) {
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <CLTC2990_Step+0xb8>
 8001114:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d014      	beq.n	8001146 <CLTC2990_Step+0xe2>
		CDC_Transmit_Print("Error reading Register %x \n", msb_registers[1]);
 800111c:	7a7b      	ldrb	r3, [r7, #9]
 800111e:	4619      	mov	r1, r3
 8001120:	4811      	ldr	r0, [pc, #68]	@ (8001168 <CLTC2990_Step+0x104>)
 8001122:	f000 f9c9 	bl	80014b8 <CDC_Transmit_Print>
		CDC_Transmit_Print("This is the ack: %d \n", ack);
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4619      	mov	r1, r3
 800112c:	480f      	ldr	r0, [pc, #60]	@ (800116c <CLTC2990_Step+0x108>)
 800112e:	f000 f9c3 	bl	80014b8 <CDC_Transmit_Print>
		CDC_Transmit_Print("This is the data valid: %d \n", data_valid);
 8001132:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001136:	4619      	mov	r1, r3
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <CLTC2990_Step+0x10c>)
 800113a:	f000 f9bd 	bl	80014b8 <CDC_Transmit_Print>
		handle->current = NAN;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <CLTC2990_Step+0x110>)
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e00b      	b.n	800115e <CLTC2990_Step+0xfa>
	} else {
		handle->current = CLTC2990_Code_To_Differential_Current(handle, adc_code);
 8001146:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800114a:	b29b      	uxth	r3, r3
 800114c:	4619      	mov	r1, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f906 	bl	8001360 <CLTC2990_Code_To_Differential_Current>
 8001154:	eef0 7a40 	vmov.f32	s15, s0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edc3 7a02 	vstr	s15, [r3, #8]
	}


}
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08010e60 	.word	0x08010e60
 8001168:	08010e80 	.word	0x08010e80
 800116c:	08010e9c 	.word	0x08010e9c
 8001170:	08010eb4 	.word	0x08010eb4
 8001174:	7fc00000 	.word	0x7fc00000

08001178 <CLTC2990_Get_Current>:
/**
  * @brief  Puts the latest voltage readings in the array passed
  * @param  Pointer to the LTC2990 handle
  * @param 	Pointer to the array to store voltage values to
  */
float CLTC2990_Get_Current(CLTC2990_Handle_t* handle) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	return handle->current;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	ee07 3a90 	vmov	s15, r3
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <CLTC2990_Enable_V1DV2_V3DV4>:


inline int8_t CLTC2990_Enable_V1DV2_V3DV4(CLTC2990_Handle_t *handle) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	return CLTC2990_Set_Mode(handle, ENABLE_ALL, TEMP_MEAS_MODE_MASK);
 800119e:	2218      	movs	r2, #24
 80011a0:	2118      	movs	r1, #24
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f806 	bl	80011b4 <CLTC2990_Set_Mode>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <CLTC2990_Set_Mode>:


int8_t CLTC2990_Set_Mode(CLTC2990_Handle_t *handle, uint8_t bits_to_set, uint8_t bits_to_clear) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
 80011c0:	4613      	mov	r3, r2
 80011c2:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_data;
	int8_t ack;

	// Read current CONTROL_REG
	ack = CLTC2990_Read_Register(handle, CONTROL_REG, &reg_data);
 80011c4:	f107 030e 	add.w	r3, r7, #14
 80011c8:	461a      	mov	r2, r3
 80011ca:	2101      	movs	r1, #1
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f919 	bl	8001404 <CLTC2990_Read_Register>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <CLTC2990_Set_Mode+0x36>
		CDC_Transmit_Print("Failed to Read_Register in Set_Mode\n");
 80011de:	4815      	ldr	r0, [pc, #84]	@ (8001234 <CLTC2990_Set_Mode+0x80>)
 80011e0:	f000 f96a 	bl	80014b8 <CDC_Transmit_Print>
		return ack;
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	e01f      	b.n	800122a <CLTC2990_Set_Mode+0x76>
	}

	//Modify bits
	reg_data &= ~bits_to_clear;
 80011ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4013      	ands	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	73bb      	strb	r3, [r7, #14]
	reg_data |= bits_to_set;
 80011fe:	7bba      	ldrb	r2, [r7, #14]
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	4313      	orrs	r3, r2
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73bb      	strb	r3, [r7, #14]

	//Write back to CONTROL_REG
	ack = CLTC2990_Write_Register(handle, CONTROL_REG, reg_data);
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	461a      	mov	r2, r3
 800120c:	2101      	movs	r1, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f924 	bl	800145c <CLTC2990_Write_Register>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
	if (ack != 0) {
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <CLTC2990_Set_Mode+0x72>
		CDC_Transmit_Print("Failed to Write_Register in Set_Mode\n");
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <CLTC2990_Set_Mode+0x84>)
 8001222:	f000 f949 	bl	80014b8 <CDC_Transmit_Print>
	}
	return ack;
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	08010ed4 	.word	0x08010ed4
 8001238:	08010efc 	.word	0x08010efc

0800123c <CLTC2990_Trigger_Conversion>:

int8_t CLTC2990_Trigger_Conversion(CLTC2990_Handle_t *handle) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	return CLTC2990_Write_Register(handle, TRIGGER_REG, 0x00);
 8001244:	2200      	movs	r2, #0
 8001246:	2102      	movs	r1, #2
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f907 	bl	800145c <CLTC2990_Write_Register>
 800124e:	4603      	mov	r3, r0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <CLTC2990_ADC_Read_New_Data>:


uint8_t CLTC2990_ADC_Read_New_Data(CLTC2990_Handle_t *handle, uint8_t msb_register_address, int16_t* adc_code, int8_t* data_valid) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	460b      	mov	r3, r1
 8001266:	72fb      	strb	r3, [r7, #11]
	uint16_t timeout = TIMEOUT;
 8001268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126c:	83fb      	strh	r3, [r7, #30]
	int8_t ack;
	uint8_t status;
	uint8_t status_bit = (msb_register_address / 2) - 1;
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3b01      	subs	r3, #1
 8001276:	777b      	strb	r3, [r7, #29]

	// Wait for new data
	while (--timeout) {
 8001278:	e01a      	b.n	80012b0 <CLTC2990_ADC_Read_New_Data+0x58>
		ack = CLTC2990_Read_Register(handle, STATUS_REG, &status);
 800127a:	f107 0319 	add.w	r3, r7, #25
 800127e:	461a      	mov	r2, r3
 8001280:	2100      	movs	r1, #0
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 f8be 	bl	8001404 <CLTC2990_Read_Register>
 8001288:	4603      	mov	r3, r0
 800128a:	773b      	strb	r3, [r7, #28]

		if (ack != 0) {
 800128c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <CLTC2990_ADC_Read_New_Data+0x40>
			return ack;
 8001294:	7f3b      	ldrb	r3, [r7, #28]
 8001296:	e05c      	b.n	8001352 <CLTC2990_ADC_Read_New_Data+0xfa>
		}

		if (((status >> status_bit) & 0x01) == 1) {
 8001298:	7e7b      	ldrb	r3, [r7, #25]
 800129a:	461a      	mov	r2, r3
 800129c:	7f7b      	ldrb	r3, [r7, #29]
 800129e:	fa42 f303 	asr.w	r3, r2, r3
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d109      	bne.n	80012be <CLTC2990_ADC_Read_New_Data+0x66>
			break;
		}

		//
		HAL_Delay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fe98 	bl	8001fe0 <HAL_Delay>
	while (--timeout) {
 80012b0:	8bfb      	ldrh	r3, [r7, #30]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	83fb      	strh	r3, [r7, #30]
 80012b6:	8bfb      	ldrh	r3, [r7, #30]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1de      	bne.n	800127a <CLTC2990_ADC_Read_New_Data+0x22>
 80012bc:	e000      	b.n	80012c0 <CLTC2990_ADC_Read_New_Data+0x68>
			break;
 80012be:	bf00      	nop
	}


	if (timeout == 0) {
 80012c0:	8bfb      	ldrh	r3, [r7, #30]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d104      	bne.n	80012d0 <CLTC2990_ADC_Read_New_Data+0x78>
		CDC_Transmit_Print("LTC2990 TIMED OUT \n");
 80012c6:	4825      	ldr	r0, [pc, #148]	@ (800135c <CLTC2990_ADC_Read_New_Data+0x104>)
 80012c8:	f000 f8f6 	bl	80014b8 <CDC_Transmit_Print>
		return 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e040      	b.n	8001352 <CLTC2990_ADC_Read_New_Data+0xfa>
	}

	//Read ADC data
	uint8_t msb;
	uint8_t lsb;
	ack = CLTC2990_Read_Register(handle, msb_register_address, &msb);
 80012d0:	f107 0218 	add.w	r2, r7, #24
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f893 	bl	8001404 <CLTC2990_Read_Register>
 80012de:	4603      	mov	r3, r0
 80012e0:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 80012e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <CLTC2990_ADC_Read_New_Data+0x96>
		return ack;
 80012ea:	7f3b      	ldrb	r3, [r7, #28]
 80012ec:	e031      	b.n	8001352 <CLTC2990_ADC_Read_New_Data+0xfa>
	}

	ack = CLTC2990_Read_Register(handle, msb_register_address + 1, &lsb);
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f107 0217 	add.w	r2, r7, #23
 80012f8:	4619      	mov	r1, r3
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 f882 	bl	8001404 <CLTC2990_Read_Register>
 8001300:	4603      	mov	r3, r0
 8001302:	773b      	strb	r3, [r7, #28]
	if(ack != 0) {
 8001304:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <CLTC2990_ADC_Read_New_Data+0xb8>
		return ack;
 800130c:	7f3b      	ldrb	r3, [r7, #28]
 800130e:	e020      	b.n	8001352 <CLTC2990_ADC_Read_New_Data+0xfa>
	}


	uint16_t code = ((uint16_t)msb << 8) | lsb;
 8001310:	7e3b      	ldrb	r3, [r7, #24]
 8001312:	b21b      	sxth	r3, r3
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	837b      	strh	r3, [r7, #26]
	*data_valid = (code >> 15) & 0x01;  // Data valid bit
 8001322:	8b7b      	ldrh	r3, [r7, #26]
 8001324:	0bdb      	lsrs	r3, r3, #15
 8001326:	b29b      	uxth	r3, r3
 8001328:	b25b      	sxtb	r3, r3
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	b25a      	sxtb	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	701a      	strb	r2, [r3, #0]
	*adc_code = code & 0x3FFF;
 8001334:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001338:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800133c:	b21a      	sxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	801a      	strh	r2, [r3, #0]

	return (*data_valid == 1) ? 0 : 1;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	f993 3000 	ldrsb.w	r3, [r3]
 8001348:	2b01      	cmp	r3, #1
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
	//In the actual code, it should NEVER reach this point, as this would be the timeout
	//ran out but got messed up
	CDC_Transmit_Print("the thing I said wouldn't happen \n");
	return 2;

}
 8001352:	4618      	mov	r0, r3
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	08010f24 	.word	0x08010f24

08001360 <CLTC2990_Code_To_Differential_Current>:

float CLTC2990_Code_To_Differential_Current(CLTC2990_Handle_t *handle, uint16_t adc_code) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
	float current;
	int16_t sign = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	81fb      	strh	r3, [r7, #14]


	if(adc_code & 0x4000) { //If the code is negative
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <CLTC2990_Code_To_Differential_Current+0x30>
		adc_code = (adc_code ^ 0x7FFF) + 1;// Two's compliment
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	f483 43ff 	eor.w	r3, r3, #32640	@ 0x7f80
 8001380:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8001384:	b29b      	uxth	r3, r3
 8001386:	3301      	adds	r3, #1
 8001388:	807b      	strh	r3, [r7, #2]
		sign = -1;
 800138a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138e:	81fb      	strh	r3, [r7, #14]
	}

	adc_code &= 0x3FFF;
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001396:	807b      	strh	r3, [r7, #2]
	current = ((float)adc_code) * CSINGLE_ENDED_LSB;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001400 <CLTC2990_Code_To_Differential_Current+0xa0>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013aa:	edc7 7a02 	vstr	s15, [r7, #8]
	current /= RSENSE;
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff f8f2 	bl	8000598 <__aeabi_f2d>
 80013b4:	a310      	add	r3, pc, #64	@ (adr r3, 80013f8 <CLTC2990_Code_To_Differential_Current+0x98>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff fa6f 	bl	800089c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fc17 	bl	8000bf8 <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	60bb      	str	r3, [r7, #8]
	current *= sign;
 80013ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	ed97 7a02 	vldr	s14, [r7, #8]
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	edc7 7a02 	vstr	s15, [r7, #8]

	return current;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	47ae147b 	.word	0x47ae147b
 80013fc:	3f747ae1 	.word	0x3f747ae1
 8001400:	37a2d0e5 	.word	0x37a2d0e5

08001404 <CLTC2990_Read_Register>:

int8_t CLTC2990_Read_Register(CLTC2990_Handle_t *handle, uint8_t reg_address, uint8_t* data) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af04      	add	r7, sp, #16
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	460b      	mov	r3, r1
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(handle->hi2c, handle->i2c_address << 1, reg_address, 1, data, 1, TIMEOUT);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	b299      	uxth	r1, r3
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	b29a      	uxth	r2, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	2301      	movs	r3, #1
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	f001 fc1f 	bl	8002c74 <HAL_I2C_Mem_Read>
 8001436:	4603      	mov	r3, r0
 8001438:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK) {
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <CLTC2990_Read_Register+0x40>
		return 0;
 8001440:	2300      	movs	r3, #0
 8001442:	e005      	b.n	8001450 <CLTC2990_Read_Register+0x4c>
	}
	CDC_Transmit_Print("I2C Read Register failed, status: %d\n", status);
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	4619      	mov	r1, r3
 8001448:	4803      	ldr	r0, [pc, #12]	@ (8001458 <CLTC2990_Read_Register+0x54>)
 800144a:	f000 f835 	bl	80014b8 <CDC_Transmit_Print>
	return 1;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08010f38 	.word	0x08010f38

0800145c <CLTC2990_Write_Register>:
//	}
//	return 0;
//}


int8_t CLTC2990_Write_Register(CLTC2990_Handle_t *handle, uint8_t reg_address, uint8_t data) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af04      	add	r7, sp, #16
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
 8001468:	4613      	mov	r3, r2
 800146a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(handle->hi2c, handle->i2c_address << 1, (uint16_t)reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, TIMEOUT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	b299      	uxth	r1, r3
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	b29a      	uxth	r2, r3
 800147c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2301      	movs	r3, #1
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	f001 fade 	bl	8002a4c <HAL_I2C_Mem_Write>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK) {
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <CLTC2990_Write_Register+0x42>
		return 0;
 800149a:	2300      	movs	r3, #0
 800149c:	e005      	b.n	80014aa <CLTC2990_Write_Register+0x4e>
	}
	CDC_Transmit_Print("I2C Write Register failed, status: %d\n", status);
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <CLTC2990_Write_Register+0x58>)
 80014a4:	f000 f808 	bl	80014b8 <CDC_Transmit_Print>

	return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08010f60 	.word	0x08010f60

080014b8 <CDC_Transmit_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CDC_Transmit_Print(const char *format, ...)
{
 80014b8:	b40f      	push	{r0, r1, r2, r3}
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b09c      	sub	sp, #112	@ 0x70
 80014be:	af00      	add	r7, sp, #0
  char buf[PRINT_BUFFER_SIZE];
  va_list args;
  va_start(args, format);
 80014c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80014c4:	607b      	str	r3, [r7, #4]
  int n = vsprintf(buf, format, args);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00d fb36 	bl	800eb40 <vsiprintf>
 80014d4:	66f8      	str	r0, [r7, #108]	@ 0x6c
  va_end(args);
  CDC_Transmit_FS(buf, n);
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80014dc:	4618      	mov	r0, r3
 80014de:	f00c f971 	bl	800d7c4 <CDC_Transmit_FS>
}
 80014e2:	bf00      	nop
 80014e4:	3770      	adds	r7, #112	@ 0x70
 80014e6:	46bd      	mov	sp, r7
 80014e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014ec:	b004      	add	sp, #16
 80014ee:	4770      	bx	lr

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f4:	f000 fd3d 	bl	8001f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f8:	f000 f874 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fc:	f000 f988 	bl	8001810 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8001500:	f000 f8b2 	bl	8001668 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8001504:	f000 f8f8 	bl	80016f8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001508:	f000 f936 	bl	8001778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan2);
 800150c:	4820      	ldr	r0, [pc, #128]	@ (8001590 <main+0xa0>)
 800150e:	f000 ffc3 	bl	8002498 <HAL_FDCAN_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001512:	f009 fa3d 	bl	800a990 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorQueue */
  sensorQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &sensorQueue_attributes);
 8001516:	4a1f      	ldr	r2, [pc, #124]	@ (8001594 <main+0xa4>)
 8001518:	2102      	movs	r1, #2
 800151a:	2010      	movs	r0, #16
 800151c:	f009 fb30 	bl	800ab80 <osMessageQueueNew>
 8001520:	4603      	mov	r3, r0
 8001522:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <main+0xa8>)
 8001524:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLED */
  blinkLEDHandle = osThreadNew(StartBlink, NULL, &blinkLED_attributes);
 8001526:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <main+0xac>)
 8001528:	2100      	movs	r1, #0
 800152a:	481d      	ldr	r0, [pc, #116]	@ (80015a0 <main+0xb0>)
 800152c:	f009 fa7a 	bl	800aa24 <osThreadNew>
 8001530:	4603      	mov	r3, r0
 8001532:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <main+0xb4>)
 8001534:	6013      	str	r3, [r2, #0]

  /* creation of readVoltageTask */
  readVoltageTaskHandle = osThreadNew(startReadVoltageTask, NULL, &readVoltageTask_attributes);
 8001536:	4a1c      	ldr	r2, [pc, #112]	@ (80015a8 <main+0xb8>)
 8001538:	2100      	movs	r1, #0
 800153a:	481c      	ldr	r0, [pc, #112]	@ (80015ac <main+0xbc>)
 800153c:	f009 fa72 	bl	800aa24 <osThreadNew>
 8001540:	4603      	mov	r3, r0
 8001542:	4a1b      	ldr	r2, [pc, #108]	@ (80015b0 <main+0xc0>)
 8001544:	6013      	str	r3, [r2, #0]

  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8001546:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <main+0xc4>)
 8001548:	2100      	movs	r1, #0
 800154a:	481b      	ldr	r0, [pc, #108]	@ (80015b8 <main+0xc8>)
 800154c:	f009 fa6a 	bl	800aa24 <osThreadNew>
 8001550:	4603      	mov	r3, r0
 8001552:	4a1a      	ldr	r2, [pc, #104]	@ (80015bc <main+0xcc>)
 8001554:	6013      	str	r3, [r2, #0]

  /* creation of readCurrentTask */
  readCurrentTaskHandle = osThreadNew(startReadCurrentTask, NULL, &readCurrentTask_attributes);
 8001556:	4a1a      	ldr	r2, [pc, #104]	@ (80015c0 <main+0xd0>)
 8001558:	2100      	movs	r1, #0
 800155a:	481a      	ldr	r0, [pc, #104]	@ (80015c4 <main+0xd4>)
 800155c:	f009 fa62 	bl	800aa24 <osThreadNew>
 8001560:	4603      	mov	r3, r0
 8001562:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <main+0xd8>)
 8001564:	6013      	str	r3, [r2, #0]

  /* creation of printCurrent */
  printCurrentHandle = osThreadNew(startPrintCurrent, NULL, &printCurrent_attributes);
 8001566:	4a19      	ldr	r2, [pc, #100]	@ (80015cc <main+0xdc>)
 8001568:	2100      	movs	r1, #0
 800156a:	4819      	ldr	r0, [pc, #100]	@ (80015d0 <main+0xe0>)
 800156c:	f009 fa5a 	bl	800aa24 <osThreadNew>
 8001570:	4603      	mov	r3, r0
 8001572:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <main+0xe4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* creation of printVoltage */
  printVoltageHandle = osThreadNew(startPrintVoltage, NULL, &printVoltage_attributes);
 8001576:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <main+0xe8>)
 8001578:	2100      	movs	r1, #0
 800157a:	4818      	ldr	r0, [pc, #96]	@ (80015dc <main+0xec>)
 800157c:	f009 fa52 	bl	800aa24 <osThreadNew>
 8001580:	4603      	mov	r3, r0
 8001582:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <main+0xf0>)
 8001584:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001586:	f009 fa27 	bl	800a9d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800158a:	bf00      	nop
 800158c:	e7fd      	b.n	800158a <main+0x9a>
 800158e:	bf00      	nop
 8001590:	2000036c 	.word	0x2000036c
 8001594:	08011138 	.word	0x08011138
 8001598:	200004d0 	.word	0x200004d0
 800159c:	08011060 	.word	0x08011060
 80015a0:	080018d1 	.word	0x080018d1
 80015a4:	200004b8 	.word	0x200004b8
 80015a8:	08011084 	.word	0x08011084
 80015ac:	08001901 	.word	0x08001901
 80015b0:	200004bc 	.word	0x200004bc
 80015b4:	080110a8 	.word	0x080110a8
 80015b8:	08001911 	.word	0x08001911
 80015bc:	200004c0 	.word	0x200004c0
 80015c0:	080110cc 	.word	0x080110cc
 80015c4:	08001921 	.word	0x08001921
 80015c8:	200004c4 	.word	0x200004c4
 80015cc:	080110f0 	.word	0x080110f0
 80015d0:	08001959 	.word	0x08001959
 80015d4:	200004c8 	.word	0x200004c8
 80015d8:	08011114 	.word	0x08011114
 80015dc:	0800198d 	.word	0x0800198d
 80015e0:	200004cc 	.word	0x200004cc

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2238      	movs	r2, #56	@ 0x38
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00d faae 	bl	800eb54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800160a:	f003 fca7 	bl	8004f5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800160e:	2322      	movs	r3, #34	@ 0x22
 8001610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001618:	2340      	movs	r3, #64	@ 0x40
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fd4b 	bl	80050c4 <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001634:	f000 f9c4 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800163c:	2301      	movs	r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f004 f849 	bl	80056e8 <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800165c:	f000 f9b0 	bl	80019c0 <Error_Handler>
  }
}
 8001660:	bf00      	nop
 8001662:	3750      	adds	r7, #80	@ 0x50
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 800166e:	4a21      	ldr	r2, [pc, #132]	@ (80016f4 <MX_FDCAN2_Init+0x8c>)
 8001670:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 800167a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800167e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 8001688:	2200      	movs	r2, #0
 800168a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 800168e:	2200      	movs	r2, #0
 8001690:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 8001694:	2200      	movs	r2, #0
 8001696:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 800169a:	2201      	movs	r2, #1
 800169c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016a6:	223f      	movs	r2, #63	@ 0x3f
 80016a8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016ac:	2210      	movs	r2, #16
 80016ae:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016be:	220d      	movs	r2, #13
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016c4:	2202      	movs	r2, #2
 80016c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_FDCAN2_Init+0x88>)
 80016dc:	f000 fd82 	bl	80021e4 <HAL_FDCAN_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 80016e6:	f000 f96b 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000036c 	.word	0x2000036c
 80016f4:	40006800 	.word	0x40006800

080016f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_I2C2_Init+0x74>)
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <MX_I2C2_Init+0x78>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <MX_I2C2_Init+0x74>)
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <MX_I2C2_Init+0x7c>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_I2C2_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <MX_I2C2_Init+0x74>)
 8001710:	2201      	movs	r2, #1
 8001712:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_I2C2_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800171a:	4b14      	ldr	r3, [pc, #80]	@ (800176c <MX_I2C2_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_I2C2_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_I2C2_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_I2C2_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001732:	480e      	ldr	r0, [pc, #56]	@ (800176c <MX_I2C2_Init+0x74>)
 8001734:	f001 f8ee 	bl	8002914 <HAL_I2C_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800173e:	f000 f93f 	bl	80019c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4809      	ldr	r0, [pc, #36]	@ (800176c <MX_I2C2_Init+0x74>)
 8001746:	f001 fe71 	bl	800342c <HAL_I2CEx_ConfigAnalogFilter>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001750:	f000 f936 	bl	80019c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_I2C2_Init+0x74>)
 8001758:	f001 feb3 	bl	80034c2 <HAL_I2CEx_ConfigDigitalFilter>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 f92d 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003d0 	.word	0x200003d0
 8001770:	40005800 	.word	0x40005800
 8001774:	00503d58 	.word	0x00503d58

08001778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 800177e:	4a23      	ldr	r2, [pc, #140]	@ (800180c <MX_USART2_UART_Init+0x94>)
 8001780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c0:	4811      	ldr	r0, [pc, #68]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017c2:	f004 ff55 	bl	8006670 <HAL_UART_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017cc:	f000 f8f8 	bl	80019c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d0:	2100      	movs	r1, #0
 80017d2:	480d      	ldr	r0, [pc, #52]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017d4:	f005 fcf0 	bl	80071b8 <HAL_UARTEx_SetTxFifoThreshold>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017de:	f000 f8ef 	bl	80019c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017e6:	f005 fd25 	bl	8007234 <HAL_UARTEx_SetRxFifoThreshold>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017f0:	f000 f8e6 	bl	80019c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <MX_USART2_UART_Init+0x90>)
 80017f6:	f005 fca6 	bl	8007146 <HAL_UARTEx_DisableFifoMode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001800:	f000 f8de 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000424 	.word	0x20000424
 800180c:	40004400 	.word	0x40004400

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a26      	ldr	r2, [pc, #152]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a1a      	ldr	r2, [pc, #104]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <MX_GPIO_Init+0xb4>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FRONT_LED_Pin|BACKLIGHT_LEDS_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800188c:	480e      	ldr	r0, [pc, #56]	@ (80018c8 <MX_GPIO_Init+0xb8>)
 800188e:	f001 f80f 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRONT_LED_Pin BACKLIGHT_LEDS_Pin */
  GPIO_InitStruct.Pin = FRONT_LED_Pin|BACKLIGHT_LEDS_Pin;
 8001892:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <MX_GPIO_Init+0xb8>)
 80018ac:	f000 fe7e 	bl	80025ac <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_GPIO_Init+0xbc>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <MX_GPIO_Init+0xbc>)
 80018b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018ba:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	@ 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48000400 	.word	0x48000400
 80018cc:	40010000 	.word	0x40010000

080018d0 <StartBlink>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80018d8:	f00b feb6 	bl	800d648 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(GPIOB, BACKLIGHT_LEDS_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018e2:	4806      	ldr	r0, [pc, #24]	@ (80018fc <StartBlink+0x2c>)
 80018e4:	f000 ffe4 	bl	80028b0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for (;;)
  {

    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 80018e8:	2120      	movs	r1, #32
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <StartBlink+0x2c>)
 80018ec:	f000 fff8 	bl	80028e0 <HAL_GPIO_TogglePin>
    osDelay(100);
 80018f0:	2064      	movs	r0, #100	@ 0x64
 80018f2:	f009 f92a 	bl	800ab4a <osDelay>
    HAL_GPIO_TogglePin(FRONT_LED_GPIO_Port, FRONT_LED_Pin);
 80018f6:	bf00      	nop
 80018f8:	e7f6      	b.n	80018e8 <StartBlink+0x18>
 80018fa:	bf00      	nop
 80018fc:	48000400 	.word	0x48000400

08001900 <startReadVoltageTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startReadVoltageTask */
void startReadVoltageTask(void *argument)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
//    for (int i = 0; i < 4; i++)
//    {
//      payload.voltages[i] = raw[i] * multipliers[i];
//    }
//    osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
    osDelay(50);
 8001908:	2032      	movs	r0, #50	@ 0x32
 800190a:	f009 f91e 	bl	800ab4a <osDelay>
 800190e:	e7fb      	b.n	8001908 <startReadVoltageTask+0x8>

08001910 <StartSendMessage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
//    memcpy(txBuf, &payload, sizeof(payload));
//    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf) != HAL_OK)
//    {
//      CDC_Transmit_Print("Error!\r\n");
//    }
    osDelay(100);
 8001918:	2064      	movs	r0, #100	@ 0x64
 800191a:	f009 f916 	bl	800ab4a <osDelay>
 800191e:	e7fb      	b.n	8001918 <StartSendMessage+0x8>

08001920 <startReadCurrentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadCurrentTask */
void startReadCurrentTask(void *argument)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadCurrentTask */
  /* Infinite loop */
//	MX_USB_Device_Init();
	CLTC2990_Init(&CLTC2990_Handle, &hi2c2, CLTC2990_I2C_ADDRESS);
 8001928:	224d      	movs	r2, #77	@ 0x4d
 800192a:	4909      	ldr	r1, [pc, #36]	@ (8001950 <startReadCurrentTask+0x30>)
 800192c:	4809      	ldr	r0, [pc, #36]	@ (8001954 <startReadCurrentTask+0x34>)
 800192e:	f7ff fb49 	bl	8000fc4 <CLTC2990_Init>
  for(;;)
  {
	  instrumentationPayload_t payload;
	  CLTC2990_Step(&CLTC2990_Handle);
 8001932:	4808      	ldr	r0, [pc, #32]	@ (8001954 <startReadCurrentTask+0x34>)
 8001934:	f7ff fb96 	bl	8001064 <CLTC2990_Step>
	  payload.current = CLTC2990_Get_Current(&CLTC2990_Handle);
 8001938:	4806      	ldr	r0, [pc, #24]	@ (8001954 <startReadCurrentTask+0x34>)
 800193a:	f7ff fc1d 	bl	8001178 <CLTC2990_Get_Current>
 800193e:	eef0 7a40 	vmov.f32	s15, s0
 8001942:	edc7 7a07 	vstr	s15, [r7, #28]
//	  osMessageQueuePut(sensorQueueHandle, &payload, 0, osWaitForever);
	  osDelay(150);
 8001946:	2096      	movs	r0, #150	@ 0x96
 8001948:	f009 f8ff 	bl	800ab4a <osDelay>
  {
 800194c:	bf00      	nop
 800194e:	e7f0      	b.n	8001932 <startReadCurrentTask+0x12>
 8001950:	200003d0 	.word	0x200003d0
 8001954:	200004d4 	.word	0x200004d4

08001958 <startPrintCurrent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintCurrent */
void startPrintCurrent(void *argument)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPrintCurrent */
  /* Infinite loop */
	//MX_USB_Device_Init();
  for(;;)
  {
	CDC_Transmit_Print("Current is: %f \n", CLTC2990_Get_Current(&CLTC2990_Handle));
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <startPrintCurrent+0x2c>)
 8001962:	f7ff fc09 	bl	8001178 <CLTC2990_Get_Current>
 8001966:	ee10 3a10 	vmov	r3, s0
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe14 	bl	8000598 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <startPrintCurrent+0x30>)
 8001976:	f7ff fd9f 	bl	80014b8 <CDC_Transmit_Print>
    osDelay(100);
 800197a:	2064      	movs	r0, #100	@ 0x64
 800197c:	f009 f8e5 	bl	800ab4a <osDelay>
	CDC_Transmit_Print("Current is: %f \n", CLTC2990_Get_Current(&CLTC2990_Handle));
 8001980:	bf00      	nop
 8001982:	e7ed      	b.n	8001960 <startPrintCurrent+0x8>
 8001984:	200004d4 	.word	0x200004d4
 8001988:	08010fec 	.word	0x08010fec

0800198c <startPrintVoltage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintVoltage */
void startPrintVoltage(void *argument)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
//	  float voltages[4];
//	  LTC2990_Get_Voltage(&LTC2990_Handle, voltages);
//	  for (int i = 0; i < 4; i++) {
//		CDC_Transmit_Print("Voltage %d: %f \r\n", i + 1, voltages[i] * multipliers[i]);
//	  }
    osDelay(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f009 f8d8 	bl	800ab4a <osDelay>
 800199a:	e7fb      	b.n	8001994 <startPrintVoltage+0x8>

0800199c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ae:	f000 faf9 	bl	8001fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <Error_Handler+0x8>

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_MspInit+0x50>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d6:	4a11      	ldr	r2, [pc, #68]	@ (8001a1c <HAL_MspInit+0x50>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <HAL_MspInit+0x50>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_MspInit+0x50>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_MspInit+0x50>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_MspInit+0x50>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	210f      	movs	r1, #15
 8001a06:	f06f 0001 	mvn.w	r0, #1
 8001a0a:	f000 fbc3 	bl	8002194 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a0e:	f003 fb49 	bl	80050a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09e      	sub	sp, #120	@ 0x78
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2250      	movs	r2, #80	@ 0x50
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00d f887 	bl	800eb54 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a20      	ldr	r2, [pc, #128]	@ (8001acc <HAL_FDCAN_MspInit+0xac>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d138      	bne.n	8001ac2 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a54:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 f88f 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001a6c:	f7ff ffa8 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	4a16      	ldr	r2, [pc, #88]	@ (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_FDCAN_MspInit+0xb0>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001aa0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001aa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <HAL_FDCAN_MspInit+0xb4>)
 8001abe:	f000 fd75 	bl	80025ac <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3778      	adds	r7, #120	@ 0x78
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40006800 	.word	0x40006800
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b09e      	sub	sp, #120	@ 0x78
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2250      	movs	r2, #80	@ 0x50
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00d f82b 	bl	800eb54 <memset>
  if(hi2c->Instance==I2C2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	@ (8001b80 <HAL_I2C_MspInit+0xa8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d137      	bne.n	8001b78 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 f835 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b20:	f7ff ff4e 	bl	80019c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b28:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b40:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b42:	2312      	movs	r3, #18
 8001b44:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5c:	f000 fd26 	bl	80025ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	4a07      	ldr	r2, [pc, #28]	@ (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001b78:	bf00      	nop
 8001b7a:	3778      	adds	r7, #120	@ 0x78
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40005800 	.word	0x40005800
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b09e      	sub	sp, #120	@ 0x78
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2250      	movs	r2, #80	@ 0x50
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00c ffd3 	bl	800eb54 <memset>
  if(huart->Instance==USART2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c30 <HAL_UART_MspInit+0xa8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d136      	bne.n	8001c26 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 ffdd 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bd0:	f7ff fef6 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <HAL_UART_MspInit+0xac>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	4a16      	ldr	r2, [pc, #88]	@ (8001c34 <HAL_UART_MspInit+0xac>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_UART_MspInit+0xac>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_UART_MspInit+0xac>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf0:	4a10      	ldr	r2, [pc, #64]	@ (8001c34 <HAL_UART_MspInit+0xac>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_UART_MspInit+0xac>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c04:	230c      	movs	r3, #12
 8001c06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c14:	2307      	movs	r3, #7
 8001c16:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c22:	f000 fcc3 	bl	80025ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c26:	bf00      	nop
 8001c28:	3778      	adds	r7, #120	@ 0x78
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	@ 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c48:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <HAL_InitTick+0xc4>)
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cfc <HAL_InitTick+0xc4>)
 8001c4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c52:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c54:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <HAL_InitTick+0xc4>)
 8001c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c60:	f107 020c 	add.w	r2, r7, #12
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 ff12 	bl	8005a94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c70:	f003 fefa 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8001c74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c78:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <HAL_InitTick+0xc8>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9b      	lsrs	r3, r3, #18
 8001c80:	3b01      	subs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <HAL_InitTick+0xcc>)
 8001c86:	4a20      	ldr	r2, [pc, #128]	@ (8001d08 <HAL_InitTick+0xd0>)
 8001c88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <HAL_InitTick+0xcc>)
 8001c8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c92:	4a1c      	ldr	r2, [pc, #112]	@ (8001d04 <HAL_InitTick+0xcc>)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_InitTick+0xcc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <HAL_InitTick+0xcc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001ca4:	4817      	ldr	r0, [pc, #92]	@ (8001d04 <HAL_InitTick+0xcc>)
 8001ca6:	f004 f9a9 	bl	8005ffc <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cb8:	4812      	ldr	r0, [pc, #72]	@ (8001d04 <HAL_InitTick+0xcc>)
 8001cba:	f004 fa01 	bl	80060c0 <HAL_TIM_Base_Start_IT>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ccc:	2019      	movs	r0, #25
 8001cce:	f000 fa7b 	bl	80021c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d808      	bhi.n	8001cea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	2019      	movs	r0, #25
 8001cde:	f000 fa59 	bl	8002194 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <HAL_InitTick+0xd4>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e002      	b.n	8001cf0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3730      	adds	r7, #48	@ 0x30
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	431bde83 	.word	0x431bde83
 8001d04:	200004e0 	.word	0x200004e0
 8001d08:	40012c00 	.word	0x40012c00
 8001d0c:	20000004 	.word	0x20000004

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <NMI_Handler+0x4>

08001d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <USB_LP_IRQHandler+0x10>)
 8001d4e:	f001 fcf4 	bl	800373a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000a080 	.word	0x2000a080

08001d5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d62:	f004 fa1d 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200004e0 	.word	0x200004e0

08001d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return 1;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_kill>:

int _kill(int pid, int sig)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d8a:	f00c ff93 	bl	800ecb4 <__errno>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2216      	movs	r2, #22
 8001d92:	601a      	str	r2, [r3, #0]
  return -1;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_exit>:

void _exit (int status)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffe7 	bl	8001d80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001db2:	bf00      	nop
 8001db4:	e7fd      	b.n	8001db2 <_exit+0x12>

08001db6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e00a      	b.n	8001dde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dc8:	f3af 8000 	nop.w
 8001dcc:	4601      	mov	r1, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	60ba      	str	r2, [r7, #8]
 8001dd4:	b2ca      	uxtb	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbf0      	blt.n	8001dc8 <_read+0x12>
  }

  return len;
 8001de6:	687b      	ldr	r3, [r7, #4]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e009      	b.n	8001e16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	60ba      	str	r2, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dbf1      	blt.n	8001e02 <_write+0x12>
  }
  return len;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_close>:

int _close(int file)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e50:	605a      	str	r2, [r3, #4]
  return 0;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_isatty>:

int _isatty(int file)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e98:	4a14      	ldr	r2, [pc, #80]	@ (8001eec <_sbrk+0x5c>)
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <_sbrk+0x60>)
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <_sbrk+0x64>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <_sbrk+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d207      	bcs.n	8001ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec0:	f00c fef8 	bl	800ecb4 <__errno>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e009      	b.n	8001ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <_sbrk+0x64>)
 8001ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2001c000 	.word	0x2001c000
 8001ef0:	00000400 	.word	0x00000400
 8001ef4:	2000052c 	.word	0x2000052c
 8001ef8:	2000a6c8 	.word	0x2000a6c8

08001efc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <SystemInit+0x20>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <SystemInit+0x20>)
 8001f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f20:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f24:	f7ff ffea 	bl	8001efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	@ (8001f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <LoopForever+0xe>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	@ (8001f6c <LoopForever+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f00c feb7 	bl	800ecc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f52:	f7ff facd 	bl	80014f0 <main>

08001f56 <LoopForever>:

LoopForever:
    b LoopForever
 8001f56:	e7fe      	b.n	8001f56 <LoopForever>
  ldr   r0, =_estack
 8001f58:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001f64:	08011514 	.word	0x08011514
  ldr r2, =_sbss
 8001f68:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001f6c:	2000a6c8 	.word	0x2000a6c8

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>

08001f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 f8fe 	bl	800217e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f82:	200f      	movs	r0, #15
 8001f84:	f7ff fe58 	bl	8001c38 <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
 8001f92:	e001      	b.n	8001f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f94:	f7ff fd1a 	bl	80019cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f98:	79fb      	ldrb	r3, [r7, #7]

}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_IncTick+0x1c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_IncTick+0x20>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a03      	ldr	r2, [pc, #12]	@ (8001fc0 <HAL_IncTick+0x1c>)
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	20000530 	.word	0x20000530
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000530 	.word	0x20000530

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d004      	beq.n	8002004 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_Delay+0x40>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002004:	bf00      	nop
 8002006:	f7ff ffdf 	bl	8001fc8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	429a      	cmp	r2, r3
 8002014:	d8f7      	bhi.n	8002006 <HAL_Delay+0x26>
  {
  }
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000008 	.word	0x20000008

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	@ (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	@ (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	@ (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff4c 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a2:	f7ff ff63 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	6978      	ldr	r0, [r7, #20]
 80021ae:	f7ff ffb3 	bl	8002118 <NVIC_EncodePriority>
 80021b2:	4602      	mov	r2, r0
 80021b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff82 	bl	80020c4 <__NVIC_SetPriority>
}
 80021c0:	bf00      	nop
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff56 	bl	8002088 <__NVIC_EnableIRQ>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e147      	b.n	8002486 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fc08 	bl	8001a20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0210 	bic.w	r2, r2, #16
 800221e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002220:	f7ff fed2 	bl	8001fc8 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002226:	e012      	b.n	800224e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002228:	f7ff fece 	bl	8001fc8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b0a      	cmp	r3, #10
 8002234:	d90b      	bls.n	800224e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e11b      	b.n	8002486 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b08      	cmp	r3, #8
 800225a:	d0e5      	beq.n	8002228 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800226c:	f7ff feac 	bl	8001fc8 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002272:	e012      	b.n	800229a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002274:	f7ff fea8 	bl	8001fc8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b0a      	cmp	r3, #10
 8002280:	d90b      	bls.n	800229a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2203      	movs	r2, #3
 8002292:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0f5      	b.n	8002486 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0e5      	beq.n	8002274 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0202 	orr.w	r2, r2, #2
 80022b6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a74      	ldr	r2, [pc, #464]	@ (8002490 <HAL_FDCAN_Init+0x2ac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d103      	bne.n	80022ca <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80022c2:	4a74      	ldr	r2, [pc, #464]	@ (8002494 <HAL_FDCAN_Init+0x2b0>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7c1b      	ldrb	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e0:	619a      	str	r2, [r3, #24]
 80022e2:	e007      	b.n	80022f4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7c5b      	ldrb	r3, [r3, #17]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800230a:	619a      	str	r2, [r3, #24]
 800230c:	e007      	b.n	800231e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800231c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7c9b      	ldrb	r3, [r3, #18]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002334:	619a      	str	r2, [r3, #24]
 8002336:	e007      	b.n	8002348 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002346:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800236c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0210 	bic.w	r2, r2, #16
 800237c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0204 	orr.w	r2, r2, #4
 8002394:	619a      	str	r2, [r3, #24]
 8002396:	e02c      	b.n	80023f2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d028      	beq.n	80023f2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d01c      	beq.n	80023e2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023b6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0210 	orr.w	r2, r2, #16
 80023c6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d110      	bne.n	80023f2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	619a      	str	r2, [r3, #24]
 80023e0:	e007      	b.n	80023f2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0220 	orr.w	r2, r2, #32
 80023f0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	3b01      	subs	r3, #1
 8002400:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002402:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800240a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	3b01      	subs	r3, #1
 8002414:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800241a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800241c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002426:	d115      	bne.n	8002454 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	3b01      	subs	r3, #1
 8002434:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002436:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	3b01      	subs	r3, #1
 800243e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002440:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	3b01      	subs	r3, #1
 800244a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002450:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002452:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f83c 	bl	80024e8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40006400 	.word	0x40006400
 8002494:	40006500 	.word	0x40006500

08002498 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d110      	bne.n	80024ce <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e006      	b.n	80024dc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80024f2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2b      	ldr	r2, [pc, #172]	@ (80025a8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d103      	bne.n	8002506 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002504:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002514:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251c:	041a      	lsls	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800253a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002542:	061a      	lsls	r2, r3, #24
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e005      	b.n	8002588 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3304      	adds	r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d3f3      	bcc.n	800257c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	4000a400 	.word	0x4000a400
 80025a8:	40006800 	.word	0x40006800

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ba:	e15a      	b.n	8002872 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 814c 	beq.w	800286c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d005      	beq.n	80025ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d130      	bne.n	800264e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002622:	2201      	movs	r2, #1
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0201 	and.w	r2, r3, #1
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b03      	cmp	r3, #3
 8002658:	d017      	beq.n	800268a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d123      	bne.n	80026de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	6939      	ldr	r1, [r7, #16]
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0203 	and.w	r2, r3, #3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a6 	beq.w	800286c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002720:	4b5b      	ldr	r3, [pc, #364]	@ (8002890 <HAL_GPIO_Init+0x2e4>)
 8002722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002724:	4a5a      	ldr	r2, [pc, #360]	@ (8002890 <HAL_GPIO_Init+0x2e4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6613      	str	r3, [r2, #96]	@ 0x60
 800272c:	4b58      	ldr	r3, [pc, #352]	@ (8002890 <HAL_GPIO_Init+0x2e4>)
 800272e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002738:	4a56      	ldr	r2, [pc, #344]	@ (8002894 <HAL_GPIO_Init+0x2e8>)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002762:	d01f      	beq.n	80027a4 <HAL_GPIO_Init+0x1f8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a4c      	ldr	r2, [pc, #304]	@ (8002898 <HAL_GPIO_Init+0x2ec>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d019      	beq.n	80027a0 <HAL_GPIO_Init+0x1f4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a4b      	ldr	r2, [pc, #300]	@ (800289c <HAL_GPIO_Init+0x2f0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_GPIO_Init+0x1f0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a4a      	ldr	r2, [pc, #296]	@ (80028a0 <HAL_GPIO_Init+0x2f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00d      	beq.n	8002798 <HAL_GPIO_Init+0x1ec>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a49      	ldr	r2, [pc, #292]	@ (80028a4 <HAL_GPIO_Init+0x2f8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <HAL_GPIO_Init+0x1e8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a48      	ldr	r2, [pc, #288]	@ (80028a8 <HAL_GPIO_Init+0x2fc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_GPIO_Init+0x1e4>
 800278c:	2305      	movs	r3, #5
 800278e:	e00a      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 8002790:	2306      	movs	r3, #6
 8002792:	e008      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 8002794:	2304      	movs	r3, #4
 8002796:	e006      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 8002798:	2303      	movs	r3, #3
 800279a:	e004      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 800279c:	2302      	movs	r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_GPIO_Init+0x1fa>
 80027a4:	2300      	movs	r3, #0
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4093      	lsls	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b6:	4937      	ldr	r1, [pc, #220]	@ (8002894 <HAL_GPIO_Init+0x2e8>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c4:	4b39      	ldr	r3, [pc, #228]	@ (80028ac <HAL_GPIO_Init+0x300>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e8:	4a30      	ldr	r2, [pc, #192]	@ (80028ac <HAL_GPIO_Init+0x300>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ee:	4b2f      	ldr	r3, [pc, #188]	@ (80028ac <HAL_GPIO_Init+0x300>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002812:	4a26      	ldr	r2, [pc, #152]	@ (80028ac <HAL_GPIO_Init+0x300>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_GPIO_Init+0x300>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800283c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_GPIO_Init+0x300>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002842:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <HAL_GPIO_Init+0x300>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002866:	4a11      	ldr	r2, [pc, #68]	@ (80028ac <HAL_GPIO_Init+0x300>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f ae9d 	bne.w	80025bc <HAL_GPIO_Init+0x10>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	40010000 	.word	0x40010000
 8002898:	48000400 	.word	0x48000400
 800289c:	48000800 	.word	0x48000800
 80028a0:	48000c00 	.word	0x48000c00
 80028a4:	48001000 	.word	0x48001000
 80028a8:	48001400 	.word	0x48001400
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43d9      	mvns	r1, r3
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	400b      	ands	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e08d      	b.n	8002a42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff f8cc 	bl	8001ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002964:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002974:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e006      	b.n	800299c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800299a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d108      	bne.n	80029b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e007      	b.n	80029c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1a      	ldr	r2, [r3, #32]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	813b      	strh	r3, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	f040 80f9 	bne.w	8002c66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_I2C_Mem_Write+0x34>
 8002a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0ed      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_I2C_Mem_Write+0x4e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0e6      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aa2:	f7ff fa91 	bl	8001fc8 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2319      	movs	r3, #25
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fac3 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d1      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	@ 0x21
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aec:	88f8      	ldrh	r0, [r7, #6]
 8002aee:	893a      	ldrh	r2, [r7, #8]
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4603      	mov	r3, r0
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f9d3 	bl	8002ea8 <I2C_RequestMemoryWrite>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0a9      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2bff      	cmp	r3, #255	@ 0xff
 8002b1c:	d90e      	bls.n	8002b3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	22ff      	movs	r2, #255	@ 0xff
 8002b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	8979      	ldrh	r1, [r7, #10]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fc47 	bl	80033c8 <I2C_TransferConfig>
 8002b3a:	e00f      	b.n	8002b5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	8979      	ldrh	r1, [r7, #10]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fc36 	bl	80033c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fac6 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e07b      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d034      	beq.n	8002c14 <HAL_I2C_Mem_Write+0x1c8>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d130      	bne.n	8002c14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fa3f 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e04d      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2bff      	cmp	r3, #255	@ 0xff
 8002bd4:	d90e      	bls.n	8002bf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	22ff      	movs	r2, #255	@ 0xff
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	8979      	ldrh	r1, [r7, #10]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fbeb 	bl	80033c8 <I2C_TransferConfig>
 8002bf2:	e00f      	b.n	8002c14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	8979      	ldrh	r1, [r7, #10]
 8002c06:	2300      	movs	r3, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fbda 	bl	80033c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d19e      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 faac 	bl	8003180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e01a      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_I2C_Mem_Write+0x224>)
 8002c46:	400b      	ands	r3, r1
 8002c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	fe00e800 	.word	0xfe00e800

08002c74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	817b      	strh	r3, [r7, #10]
 8002c86:	460b      	mov	r3, r1
 8002c88:	813b      	strh	r3, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	f040 80fd 	bne.w	8002e96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x34>
 8002ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0f1      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x4e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0ea      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cca:	f7ff f97d 	bl	8001fc8 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2319      	movs	r3, #25
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f9af 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d5      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2222      	movs	r2, #34	@ 0x22
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2240      	movs	r2, #64	@ 0x40
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d14:	88f8      	ldrh	r0, [r7, #6]
 8002d16:	893a      	ldrh	r2, [r7, #8]
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4603      	mov	r3, r0
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f913 	bl	8002f50 <I2C_RequestMemoryRead>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ad      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2bff      	cmp	r3, #255	@ 0xff
 8002d44:	d90e      	bls.n	8002d64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	@ 0xff
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	8979      	ldrh	r1, [r7, #10]
 8002d54:	4b52      	ldr	r3, [pc, #328]	@ (8002ea0 <HAL_I2C_Mem_Read+0x22c>)
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fb33 	bl	80033c8 <I2C_TransferConfig>
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea0 <HAL_I2C_Mem_Read+0x22c>)
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fb22 	bl	80033c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f956 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07c      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d034      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x1d0>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d130      	bne.n	8002e44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	@ 0x80
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f927 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e04d      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2bff      	cmp	r3, #255	@ 0xff
 8002e04:	d90e      	bls.n	8002e24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	22ff      	movs	r2, #255	@ 0xff
 8002e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	8979      	ldrh	r1, [r7, #10]
 8002e14:	2300      	movs	r3, #0
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fad3 	bl	80033c8 <I2C_TransferConfig>
 8002e22:	e00f      	b.n	8002e44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fac2 	bl	80033c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d19a      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f994 	bl	8003180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e01a      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2220      	movs	r2, #32
 8002e68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_I2C_Mem_Read+0x230>)
 8002e76:	400b      	ands	r3, r1
 8002e78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	80002400 	.word	0x80002400
 8002ea4:	fe00e800 	.word	0xfe00e800

08002ea8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	817b      	strh	r3, [r7, #10]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	813b      	strh	r3, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <I2C_RequestMemoryWrite+0xa4>)
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa79 	bl	80033c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	69b9      	ldr	r1, [r7, #24]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f909 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e02c      	b.n	8002f44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002efa:	e015      	b.n	8002f28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f8ef 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e012      	b.n	8002f44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1e:	893b      	ldrh	r3, [r7, #8]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f884 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	80002000 	.word	0x80002000

08002f50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	817b      	strh	r3, [r7, #10]
 8002f62:	460b      	mov	r3, r1
 8002f64:	813b      	strh	r3, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	8979      	ldrh	r1, [r7, #10]
 8002f70:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <I2C_RequestMemoryRead+0xa4>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa26 	bl	80033c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f8b6 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e02c      	b.n	8002fea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f96:	893b      	ldrh	r3, [r7, #8]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fa0:	e015      	b.n	8002fce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa2:	893b      	ldrh	r3, [r7, #8]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f89c 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e012      	b.n	8002fea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc4:	893b      	ldrh	r3, [r7, #8]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2140      	movs	r1, #64	@ 0x40
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f831 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	80002000 	.word	0x80002000

08002ff8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d103      	bne.n	8003016 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d007      	beq.n	8003034 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	619a      	str	r2, [r3, #24]
  }
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003050:	e03b      	b.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8d6 	bl	8003208 <I2C_IsErrorOccurred>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d02d      	beq.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe ffab 	bl	8001fc8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnFlagUntilTimeout+0x44>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d122      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	429a      	cmp	r2, r3
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d113      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00f      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d0b4      	beq.n	8003052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030fe:	e033      	b.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f87f 	bl	8003208 <I2C_IsErrorOccurred>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e031      	b.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d025      	beq.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311c:	f7fe ff54 	bl	8001fc8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d302      	bcc.n	8003132 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11a      	bne.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b02      	cmp	r3, #2
 800313e:	d013      	beq.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d1c4      	bne.n	8003100 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318c:	e02f      	b.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f838 	bl	8003208 <I2C_IsErrorOccurred>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e02d      	b.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7fe ff11 	bl	8001fc8 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11a      	bne.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d013      	beq.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e007      	b.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d1c8      	bne.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d068      	beq.n	8003306 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2210      	movs	r2, #16
 800323a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800323c:	e049      	b.n	80032d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d045      	beq.n	80032d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe febf 	bl	8001fc8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_IsErrorOccurred+0x54>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d13a      	bne.n	80032d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003266:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800326e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800327a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800327e:	d121      	bne.n	80032c4 <I2C_IsErrorOccurred+0xbc>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003286:	d01d      	beq.n	80032c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d01a      	beq.n	80032c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800329c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800329e:	f7fe fe93 	bl	8001fc8 <HAL_GetTick>
 80032a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a4:	e00e      	b.n	80032c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032a6:	f7fe fe8f 	bl	8001fc8 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b19      	cmp	r3, #25
 80032b2:	d907      	bls.n	80032c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	f043 0320 	orr.w	r3, r3, #32
 80032ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032c2:	e006      	b.n	80032d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d1e9      	bne.n	80032a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d003      	beq.n	80032e8 <I2C_IsErrorOccurred+0xe0>
 80032e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0aa      	beq.n	800323e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003328:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800334a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fe3b 	bl	8002ff8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <I2C_IsErrorOccurred+0x1bc>)
 800338e:	400b      	ands	r3, r1
 8003390:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3728      	adds	r7, #40	@ 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	fe00e800 	.word	0xfe00e800

080033c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	817b      	strh	r3, [r7, #10]
 80033d6:	4613      	mov	r3, r2
 80033d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e0:	7a7b      	ldrb	r3, [r7, #9]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	0d5b      	lsrs	r3, r3, #21
 8003402:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <I2C_TransferConfig+0x60>)
 8003408:	430b      	orrs	r3, r1
 800340a:	43db      	mvns	r3, r3
 800340c:	ea02 0103 	and.w	r1, r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	03ff63ff 	.word	0x03ff63ff

0800342c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	d138      	bne.n	80034b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800344c:	2302      	movs	r3, #2
 800344e:	e032      	b.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800347e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d139      	bne.n	800354c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e033      	b.n	800354e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2224      	movs	r2, #36	@ 0x24
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0c0      	b.n	80036ee <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f00a fa67 	bl	800da54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2203      	movs	r2, #3
 800358a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 fef1 	bl	800737a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e03e      	b.n	800361c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	3311      	adds	r3, #17
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	440b      	add	r3, r1
 80035c0:	3310      	adds	r3, #16
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	440b      	add	r3, r1
 80035d4:	3313      	adds	r3, #19
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	440b      	add	r3, r1
 80035e8:	3320      	adds	r3, #32
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	3324      	adds	r3, #36	@ 0x24
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3301      	adds	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	791b      	ldrb	r3, [r3, #4]
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3bb      	bcc.n	800359e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	e044      	b.n	80036b6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	440b      	add	r3, r1
 8003650:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	440b      	add	r3, r1
 8003692:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	3301      	adds	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	791b      	ldrb	r3, [r3, #4]
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3b5      	bcc.n	800362c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036cc:	f003 fe70 	bl	80073b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7a9b      	ldrb	r3, [r3, #10]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f001 fc0e 	bl	8004f08 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_PCD_Start+0x16>
 8003708:	2302      	movs	r3, #2
 800370a:	e012      	b.n	8003732 <HAL_PCD_Start+0x3c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fe17 	bl	800734c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f005 fbf4 	bl	8008f10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f005 fbf9 	bl	8008f3e <USB_ReadInterrupts>
 800374c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fb06 	bl	8003d6a <PCD_EP_ISR_Handler>

    return;
 800375e:	e110      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003766:	2b00      	cmp	r3, #0
 8003768:	d013      	beq.n	8003792 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377c:	b292      	uxth	r2, r2
 800377e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f00a f9f7 	bl	800db76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003788:	2100      	movs	r1, #0
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8fc 	bl	8003988 <HAL_PCD_SetAddress>

    return;
 8003790:	e0f7      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037ae:	b292      	uxth	r2, r2
 80037b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037b4:	e0e5      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037d2:	b292      	uxth	r2, r2
 80037d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037d8:	e0d3      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d034      	beq.n	800384e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	b292      	uxth	r2, r2
 80037f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0208 	bic.w	r2, r2, #8
 800380e:	b292      	uxth	r2, r2
 8003810:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003826:	2100      	movs	r1, #0
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f00a fb97 	bl	800df5c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f00a f9da 	bl	800dbe8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003846:	b292      	uxth	r2, r2
 8003848:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800384c:	e099      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003854:	2b00      	cmp	r3, #0
 8003856:	d027      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	b292      	uxth	r2, r2
 800386c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003882:	b292      	uxth	r2, r2
 8003884:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0204 	orr.w	r2, r2, #4
 800389a:	b292      	uxth	r2, r2
 800389c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f00a f987 	bl	800dbb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038a6:	e06c      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d040      	beq.n	8003934 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c4:	b292      	uxth	r2, r2
 80038c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d12b      	bne.n	800392c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038dc:	b29a      	uxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0204 	orr.w	r2, r2, #4
 80038e6:	b292      	uxth	r2, r2
 80038e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0208 	orr.w	r2, r2, #8
 80038fe:	b292      	uxth	r2, r2
 8003900:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003914:	b29b      	uxth	r3, r3
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003922:	2101      	movs	r1, #1
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f00a fb19 	bl	800df5c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800392a:	e02a      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f00a f941 	bl	800dbb4 <HAL_PCD_SuspendCallback>
    return;
 8003932:	e026      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00f      	beq.n	800395e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003950:	b292      	uxth	r2, r2
 8003952:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f00a f8ff 	bl	800db5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800395c:	e011      	b.n	8003982 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800397a:	b292      	uxth	r2, r2
 800397c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003980:	bf00      	nop
  }
}
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_PCD_SetAddress+0x1a>
 800399e:	2302      	movs	r3, #2
 80039a0:	e012      	b.n	80039c8 <HAL_PCD_SetAddress+0x40>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f005 fa95 	bl	8008ee8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	70fb      	strb	r3, [r7, #3]
 80039e2:	460b      	mov	r3, r1
 80039e4:	803b      	strh	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da0e      	bge.n	8003a14 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 0207 	and.w	r2, r3, #7
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	3310      	adds	r3, #16
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	705a      	strb	r2, [r3, #1]
 8003a12:	e00e      	b.n	8003a32 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 0207 	and.w	r2, r3, #7
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a3e:	883b      	ldrh	r3, [r7, #0]
 8003a40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	78ba      	ldrb	r2, [r7, #2]
 8003a4c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a4e:	78bb      	ldrb	r3, [r7, #2]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d102      	bne.n	8003a5a <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_EP_Open+0x98>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e00e      	b.n	8003a86 <HAL_PCD_EP_Open+0xb6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 fcb8 	bl	80073ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a84:	7afb      	ldrb	r3, [r7, #11]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	da0e      	bge.n	8003ac0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 0207 	and.w	r2, r3, #7
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	705a      	strb	r2, [r3, #1]
 8003abe:	e00e      	b.n	8003ade <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 0207 	and.w	r2, r3, #7
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_PCD_EP_Close+0x6a>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e00e      	b.n	8003b16 <HAL_PCD_EP_Close+0x88>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68f9      	ldr	r1, [r7, #12]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 f958 	bl	8007dbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
 8003b30:	f003 0207 	and.w	r2, r3, #7
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6979      	ldr	r1, [r7, #20]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f004 fb10 	bl	8008196 <USB_EPStartXfer>

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	f003 0207 	and.w	r2, r3, #7
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	3310      	adds	r3, #16
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6979      	ldr	r1, [r7, #20]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f004 fac1 	bl	8008196 <USB_EPStartXfer>

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	7912      	ldrb	r2, [r2, #4]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e03e      	b.n	8003cba <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	da0e      	bge.n	8003c62 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	f003 0207 	and.w	r2, r3, #7
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	3310      	adds	r3, #16
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	4413      	add	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	705a      	strb	r2, [r3, #1]
 8003c60:	e00c      	b.n	8003c7c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_PCD_EP_SetStall+0x7e>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e00e      	b.n	8003cba <HAL_PCD_EP_SetStall+0x9c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f005 f822 	bl	8008cf4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	7912      	ldrb	r2, [r2, #4]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e040      	b.n	8003d62 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da0e      	bge.n	8003d06 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	f003 0207 	and.w	r2, r3, #7
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	705a      	strb	r2, [r3, #1]
 8003d04:	e00e      	b.n	8003d24 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 0207 	and.w	r2, r3, #7
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_PCD_EP_ClrStall+0x82>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e00e      	b.n	8003d62 <HAL_PCD_EP_ClrStall+0xa0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f005 f81f 	bl	8008d96 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b092      	sub	sp, #72	@ 0x48
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d72:	e333      	b.n	80043dc <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d7c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003d8a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 8108 	bne.w	8003fa4 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d94:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d14c      	bne.n	8003e38 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dae:	813b      	strh	r3, [r7, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3310      	adds	r3, #16
 8003dc6:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	441a      	add	r2, r3
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dfc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f009 fe90 	bl	800db26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7b1b      	ldrb	r3, [r3, #12]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 82e5 	beq.w	80043dc <PCD_EP_ISR_Handler+0x672>
 8003e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 82e0 	bne.w	80043dc <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	7b1b      	ldrb	r3, [r3, #12]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	731a      	strb	r2, [r3, #12]
 8003e36:	e2d1      	b.n	80043dc <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e3e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d032      	beq.n	8003eb8 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f005 f8a9 	bl	8008fe4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	817b      	strh	r3, [r7, #10]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	897a      	ldrh	r2, [r7, #10]
 8003ea8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eac:	b292      	uxth	r2, r2
 8003eae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f009 fe0b 	bl	800dacc <HAL_PCD_SetupStageCallback>
 8003eb6:	e291      	b.n	80043dc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003eb8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f280 828d 	bge.w	80043dc <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ece:	4013      	ands	r3, r2
 8003ed0:	81fb      	strh	r3, [r7, #14]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	89fa      	ldrh	r2, [r7, #14]
 8003ed8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003edc:	b292      	uxth	r2, r2
 8003ede:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d019      	beq.n	8003f44 <PCD_EP_ISR_Handler+0x1da>
 8003f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d015      	beq.n	8003f44 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1e:	6959      	ldr	r1, [r3, #20]
 8003f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f005 f85b 	bl	8008fe4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	441a      	add	r2, r3
 8003f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f009 fdd6 	bl	800daf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 8242 	bne.w	80043dc <PCD_EP_ISR_Handler+0x672>
 8003f58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f62:	f000 823b 	beq.w	80043dc <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	81bb      	strh	r3, [r7, #12]
 8003f78:	89bb      	ldrh	r3, [r7, #12]
 8003f7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f7e:	81bb      	strh	r3, [r7, #12]
 8003f80:	89bb      	ldrh	r3, [r7, #12]
 8003f82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f86:	81bb      	strh	r3, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	89bb      	ldrh	r3, [r7, #12]
 8003f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8013      	strh	r3, [r2, #0]
 8003fa2:	e21b      	b.n	80043dc <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fb6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f280 80f1 	bge.w	80041a2 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fee:	b292      	uxth	r2, r2
 8003ff0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ff2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800400a:	7b1b      	ldrb	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d123      	bne.n	8004058 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004018:	b29b      	uxth	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4413      	add	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	4413      	add	r3, r2
 800402a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004034:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 808b 	beq.w	8004158 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004048:	6959      	ldr	r1, [r3, #20]
 800404a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800404c:	88da      	ldrh	r2, [r3, #6]
 800404e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004052:	f004 ffc7 	bl	8008fe4 <USB_ReadPMA>
 8004056:	e07f      	b.n	8004158 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d109      	bne.n	8004074 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004060:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004062:	461a      	mov	r2, r3
 8004064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9c6 	bl	80043f8 <HAL_PCD_EP_DB_Receive>
 800406c:	4603      	mov	r3, r0
 800406e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004072:	e071      	b.n	8004158 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800408a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80040a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d022      	beq.n	8004114 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80040f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d02c      	beq.n	8004158 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004104:	6959      	ldr	r1, [r3, #20]
 8004106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004108:	891a      	ldrh	r2, [r3, #8]
 800410a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800410e:	f004 ff69 	bl	8008fe4 <USB_ReadPMA>
 8004112:	e021      	b.n	8004158 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	4413      	add	r3, r2
 800412e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004138:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800413c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800414a:	6959      	ldr	r1, [r3, #20]
 800414c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800414e:	895a      	ldrh	r2, [r3, #10]
 8004150:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004154:	f004 ff46 	bl	8008fe4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004160:	441a      	add	r2, r3
 8004162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004164:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800416e:	441a      	add	r2, r3
 8004170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004172:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <PCD_EP_ISR_Handler+0x41e>
 800417c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	429a      	cmp	r2, r3
 8004186:	d206      	bcs.n	8004196 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f009 fcae 	bl	800daf0 <HAL_PCD_DataOutStageCallback>
 8004194:	e005      	b.n	80041a2 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800419c:	4618      	mov	r0, r3
 800419e:	f003 fffa 	bl	8008196 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80041a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8117 	beq.w	80043dc <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80041ae:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	3310      	adds	r3, #16
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80041ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80041fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041fc:	78db      	ldrb	r3, [r3, #3]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f040 80a1 	bne.w	8004346 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004206:	2200      	movs	r2, #0
 8004208:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800420a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800420c:	7b1b      	ldrb	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8092 	beq.w	8004338 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004214:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d046      	beq.n	80042ac <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800421e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d126      	bne.n	8004274 <PCD_EP_ISR_Handler+0x50a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004234:	b29b      	uxth	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	00da      	lsls	r2, r3, #3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004258:	b29a      	uxth	r2, r3
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426c:	b29a      	uxth	r2, r3
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	e061      	b.n	8004338 <PCD_EP_ISR_Handler+0x5ce>
 8004274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004276:	785b      	ldrb	r3, [r3, #1]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d15d      	bne.n	8004338 <PCD_EP_ISR_Handler+0x5ce>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800428a:	b29b      	uxth	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	00da      	lsls	r2, r3, #3
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2200      	movs	r2, #0
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	e045      	b.n	8004338 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d126      	bne.n	8004308 <PCD_EP_ISR_Handler+0x59e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	4413      	add	r3, r2
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	00da      	lsls	r2, r3, #3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	4413      	add	r3, r2
 80042dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004300:	b29a      	uxth	r2, r3
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	e017      	b.n	8004338 <PCD_EP_ISR_Handler+0x5ce>
 8004308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d113      	bne.n	8004338 <PCD_EP_ISR_Handler+0x5ce>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004318:	b29b      	uxth	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	4413      	add	r3, r2
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	00da      	lsls	r2, r3, #3
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	4413      	add	r3, r2
 800432c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004334:	2200      	movs	r2, #0
 8004336:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f009 fbf1 	bl	800db26 <HAL_PCD_DataInStageCallback>
 8004344:	e04a      	b.n	80043dc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004346:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d13f      	bne.n	80043d0 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004358:	b29b      	uxth	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	4413      	add	r3, r2
 800436a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004374:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800437c:	429a      	cmp	r2, r3
 800437e:	d906      	bls.n	800438e <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8004380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004386:	1ad2      	subs	r2, r2, r3
 8004388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800438a:	619a      	str	r2, [r3, #24]
 800438c:	e002      	b.n	8004394 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800438e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800439c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f009 fbbf 	bl	800db26 <HAL_PCD_DataInStageCallback>
 80043a8:	e018      	b.n	80043dc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80043aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043b0:	441a      	add	r2, r3
 80043b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80043b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043bc:	441a      	add	r2, r3
 80043be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 fee4 	bl	8008196 <USB_EPStartXfer>
 80043ce:	e005      	b.n	80043dc <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80043d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043d2:	461a      	mov	r2, r3
 80043d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f917 	bl	800460a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	b21b      	sxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f6ff acc3 	blt.w	8003d74 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3748      	adds	r7, #72	@ 0x48
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d07c      	beq.n	800450a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004418:	b29b      	uxth	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	4413      	add	r3, r2
 800442a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004434:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	8b7b      	ldrh	r3, [r7, #26]
 800443c:	429a      	cmp	r2, r3
 800443e:	d306      	bcc.n	800444e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	8b7b      	ldrh	r3, [r7, #26]
 8004446:	1ad2      	subs	r2, r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	619a      	str	r2, [r3, #24]
 800444c:	e002      	b.n	8004454 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d123      	bne.n	80044a4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004476:	833b      	strh	r3, [r7, #24]
 8004478:	8b3b      	ldrh	r3, [r7, #24]
 800447a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800447e:	833b      	strh	r3, [r7, #24]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	8b3b      	ldrh	r3, [r7, #24]
 8004490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800449c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01f      	beq.n	80044ee <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c8:	82fb      	strh	r3, [r7, #22]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	8afb      	ldrh	r3, [r7, #22]
 80044da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044ee:	8b7b      	ldrh	r3, [r7, #26]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8085 	beq.w	8004600 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6959      	ldr	r1, [r3, #20]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	891a      	ldrh	r2, [r3, #8]
 8004502:	8b7b      	ldrh	r3, [r7, #26]
 8004504:	f004 fd6e 	bl	8008fe4 <USB_ReadPMA>
 8004508:	e07a      	b.n	8004600 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	4413      	add	r3, r2
 8004524:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800452e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	8b7b      	ldrh	r3, [r7, #26]
 8004536:	429a      	cmp	r2, r3
 8004538:	d306      	bcc.n	8004548 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	8b7b      	ldrh	r3, [r7, #26]
 8004540:	1ad2      	subs	r2, r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	619a      	str	r2, [r3, #24]
 8004546:	e002      	b.n	800454e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d123      	bne.n	800459e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800456c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004570:	83fb      	strh	r3, [r7, #30]
 8004572:	8bfb      	ldrh	r3, [r7, #30]
 8004574:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004578:	83fb      	strh	r3, [r7, #30]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8bfb      	ldrh	r3, [r7, #30]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d11f      	bne.n	80045e8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c2:	83bb      	strh	r3, [r7, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	8bbb      	ldrh	r3, [r7, #28]
 80045d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045e8:	8b7b      	ldrh	r3, [r7, #26]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6959      	ldr	r1, [r3, #20]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	895a      	ldrh	r2, [r3, #10]
 80045fa:	8b7b      	ldrh	r3, [r7, #26]
 80045fc:	f004 fcf2 	bl	8008fe4 <USB_ReadPMA>
    }
  }

  return count;
 8004600:	8b7b      	ldrh	r3, [r7, #26]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b0a6      	sub	sp, #152	@ 0x98
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 81f7 	beq.w	8004a12 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800462c:	b29b      	uxth	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4413      	add	r3, r2
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	4413      	add	r3, r2
 800463e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004648:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004654:	429a      	cmp	r2, r3
 8004656:	d907      	bls.n	8004668 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004660:	1ad2      	subs	r2, r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	619a      	str	r2, [r3, #24]
 8004666:	e002      	b.n	800466e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 80e1 	bne.w	800483a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d126      	bne.n	80046ce <HAL_PCD_EP_DB_Transmit+0xc4>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	633b      	str	r3, [r7, #48]	@ 0x30
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800468e:	b29b      	uxth	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	4413      	add	r3, r2
 8004696:	633b      	str	r3, [r7, #48]	@ 0x30
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	00da      	lsls	r2, r3, #3
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	4413      	add	r3, r2
 80046a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	e01a      	b.n	8004704 <HAL_PCD_EP_DB_Transmit+0xfa>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d116      	bne.n	8004704 <HAL_PCD_EP_DB_Transmit+0xfa>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ea:	4413      	add	r3, r2
 80046ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	00da      	lsls	r2, r3, #3
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	4413      	add	r3, r2
 80046f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004700:	2200      	movs	r2, #0
 8004702:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	785b      	ldrb	r3, [r3, #1]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d126      	bne.n	8004760 <HAL_PCD_EP_DB_Transmit+0x156>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	623b      	str	r3, [r7, #32]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004720:	b29b      	uxth	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	4413      	add	r3, r2
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	00da      	lsls	r2, r3, #3
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	4413      	add	r3, r2
 8004734:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004744:	b29a      	uxth	r2, r3
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	801a      	strh	r2, [r3, #0]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004758:	b29a      	uxth	r2, r3
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	801a      	strh	r2, [r3, #0]
 800475e:	e017      	b.n	8004790 <HAL_PCD_EP_DB_Transmit+0x186>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d113      	bne.n	8004790 <HAL_PCD_EP_DB_Transmit+0x186>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	4413      	add	r3, r2
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	00da      	lsls	r2, r3, #3
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	4413      	add	r3, r2
 8004784:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	2200      	movs	r2, #0
 800478e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	78db      	ldrb	r3, [r3, #3]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d123      	bne.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b2:	837b      	strh	r3, [r7, #26]
 80047b4:	8b7b      	ldrh	r3, [r7, #26]
 80047b6:	f083 0320 	eor.w	r3, r3, #32
 80047ba:	837b      	strh	r3, [r7, #26]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	8b7b      	ldrh	r3, [r7, #26]
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	4619      	mov	r1, r3
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f009 f99d 	bl	800db26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01f      	beq.n	8004836 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004810:	833b      	strh	r3, [r7, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8b3b      	ldrh	r3, [r7, #24]
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800482e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e31f      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d021      	beq.n	8004888 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800485a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800487c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800488e:	2b01      	cmp	r3, #1
 8004890:	f040 82ca 	bne.w	8004e28 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800489c:	441a      	add	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80048aa:	441a      	add	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d309      	bcc.n	80048d0 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c8:	1ad2      	subs	r2, r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	621a      	str	r2, [r3, #32]
 80048ce:	e015      	b.n	80048fc <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80048d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80048dc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80048e6:	e009      	b.n	80048fc <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2200      	movs	r2, #0
 80048fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d15f      	bne.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	643b      	str	r3, [r7, #64]	@ 0x40
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004918:	4413      	add	r3, r2
 800491a:	643b      	str	r3, [r7, #64]	@ 0x40
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	00da      	lsls	r2, r3, #3
 8004922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004924:	4413      	add	r3, r2
 8004926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800492c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004936:	b29a      	uxth	r2, r3
 8004938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <HAL_PCD_EP_DB_Transmit+0x34e>
 8004942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800494c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004950:	b29a      	uxth	r2, r3
 8004952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004954:	801a      	strh	r2, [r3, #0]
 8004956:	e051      	b.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800495a:	2b3e      	cmp	r3, #62	@ 0x3e
 800495c:	d816      	bhi.n	800498c <HAL_PCD_EP_DB_Transmit+0x382>
 800495e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	653b      	str	r3, [r7, #80]	@ 0x50
 8004964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_PCD_EP_DB_Transmit+0x36a>
 800496e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004970:	3301      	adds	r3, #1
 8004972:	653b      	str	r3, [r7, #80]	@ 0x50
 8004974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29a      	uxth	r2, r3
 800497a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800497c:	b29b      	uxth	r3, r3
 800497e:	029b      	lsls	r3, r3, #10
 8004980:	b29b      	uxth	r3, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	b29a      	uxth	r2, r3
 8004986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	e037      	b.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3f2>
 800498c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	653b      	str	r3, [r7, #80]	@ 0x50
 8004992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_PCD_EP_DB_Transmit+0x398>
 800499c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499e:	3b01      	subs	r3, #1
 80049a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	029b      	lsls	r3, r3, #10
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e01b      	b.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d117      	bne.n	80049fc <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e0:	4413      	add	r3, r2
 80049e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	00da      	lsls	r2, r3, #3
 80049ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6959      	ldr	r1, [r3, #20]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	891a      	ldrh	r2, [r3, #8]
 8004a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f004 faa7 	bl	8008f5e <USB_WritePMA>
 8004a10:	e20a      	b.n	8004e28 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4413      	add	r3, r2
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a36:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d307      	bcc.n	8004a56 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a4e:	1ad2      	subs	r2, r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	619a      	str	r2, [r3, #24]
 8004a54:	e002      	b.n	8004a5c <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 80f6 	bne.w	8004c52 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d126      	bne.n	8004abc <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a82:	4413      	add	r3, r2
 8004a84:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	00da      	lsls	r2, r3, #3
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8e:	4413      	add	r3, r2
 8004a90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a94:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	e01a      	b.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d116      	bne.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ad8:	4413      	add	r3, r2
 8004ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	00da      	lsls	r2, r3, #3
 8004ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004aea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004aec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aee:	2200      	movs	r2, #0
 8004af0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d12f      	bne.n	8004b62 <HAL_PCD_EP_DB_Transmit+0x558>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	00da      	lsls	r2, r3, #3
 8004b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b5e:	801a      	strh	r2, [r3, #0]
 8004b60:	e01c      	b.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x592>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d118      	bne.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x592>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	00da      	lsls	r2, r3, #3
 8004b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b98:	2200      	movs	r2, #0
 8004b9a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	78db      	ldrb	r3, [r3, #3]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d127      	bne.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bbe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004bc2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004bc6:	f083 0320 	eor.w	r3, r3, #32
 8004bca:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f008 ff93 	bl	800db26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d121      	bne.n	8004c4e <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c24:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	441a      	add	r2, r3
 8004c36:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e113      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d121      	bne.n	8004ca0 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	441a      	add	r2, r3
 8004c88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	f040 80be 	bne.w	8004e28 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004cc2:	441a      	add	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d309      	bcc.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ce0:	1ad2      	subs	r2, r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	621a      	str	r2, [r3, #32]
 8004ce6:	e015      	b.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004cf0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004cfe:	e009      	b.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d15f      	bne.n	8004de2 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d36:	4413      	add	r3, r2
 8004d38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	00da      	lsls	r2, r3, #3
 8004d40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d42:	4413      	add	r3, r2
 8004d44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	e04e      	b.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d78:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d7a:	d816      	bhi.n	8004daa <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_PCD_EP_DB_Transmit+0x788>
 8004d8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d8e:	3301      	adds	r3, #1
 8004d90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e034      	b.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8004db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	029b      	lsls	r3, r3, #10
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e018      	b.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d114      	bne.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004df8:	4413      	add	r3, r2
 8004dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	00da      	lsls	r2, r3, #3
 8004e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e04:	4413      	add	r3, r2
 8004e06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e12:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6959      	ldr	r1, [r3, #20]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	895a      	ldrh	r2, [r3, #10]
 8004e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f004 f89b 	bl	8008f5e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e42:	82fb      	strh	r3, [r7, #22]
 8004e44:	8afb      	ldrh	r3, [r7, #22]
 8004e46:	f083 0310 	eor.w	r3, r3, #16
 8004e4a:	82fb      	strh	r3, [r7, #22]
 8004e4c:	8afb      	ldrh	r3, [r7, #22]
 8004e4e:	f083 0320 	eor.w	r3, r3, #32
 8004e52:	82fb      	strh	r3, [r7, #22]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	441a      	add	r2, r3
 8004e62:	8afb      	ldrh	r3, [r7, #22]
 8004e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3798      	adds	r7, #152	@ 0x98
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b087      	sub	sp, #28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	817b      	strh	r3, [r7, #10]
 8004e90:	4613      	mov	r3, r2
 8004e92:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e94:	897b      	ldrh	r3, [r7, #10]
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea0:	897b      	ldrh	r3, [r7, #10]
 8004ea2:	f003 0207 	and.w	r2, r3, #7
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	3310      	adds	r3, #16
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e009      	b.n	8004ecc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004eb8:	897a      	ldrh	r2, [r7, #10]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ecc:	893b      	ldrh	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	80da      	strh	r2, [r3, #6]
 8004ee0:	e00b      	b.n	8004efa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f043 0302 	orr.w	r3, r3, #2
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d141      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f76:	d131      	bne.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f78:	4b47      	ldr	r3, [pc, #284]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7e:	4a46      	ldr	r2, [pc, #280]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f88:	4b43      	ldr	r3, [pc, #268]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f90:	4a41      	ldr	r2, [pc, #260]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f98:	4b40      	ldr	r3, [pc, #256]	@ (800509c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2232      	movs	r2, #50	@ 0x32
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	0c9b      	lsrs	r3, r3, #18
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fae:	e002      	b.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb6:	4b38      	ldr	r3, [pc, #224]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc2:	d102      	bne.n	8004fca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f2      	bne.n	8004fb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fca:	4b33      	ldr	r3, [pc, #204]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd6:	d158      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e057      	b.n	800508c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fec:	e04d      	b.n	800508a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff4:	d141      	bne.n	800507a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ff6:	4b28      	ldr	r3, [pc, #160]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005002:	d131      	bne.n	8005068 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005004:	4b24      	ldr	r3, [pc, #144]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500a:	4a23      	ldr	r2, [pc, #140]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005014:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800501c:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005024:	4b1d      	ldr	r3, [pc, #116]	@ (800509c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2232      	movs	r2, #50	@ 0x32
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	0c9b      	lsrs	r3, r3, #18
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800503a:	e002      	b.n	8005042 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3b01      	subs	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005042:	4b15      	ldr	r3, [pc, #84]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504e:	d102      	bne.n	8005056 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f2      	bne.n	800503c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005056:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005062:	d112      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e011      	b.n	800508c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005068:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800506e:	4a0a      	ldr	r2, [pc, #40]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005078:	e007      	b.n	800508a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005082:	4a05      	ldr	r2, [pc, #20]	@ (8005098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005084:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005088:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40007000 	.word	0x40007000
 800509c:	20000000 	.word	0x20000000
 80050a0:	431bde83 	.word	0x431bde83

080050a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a04      	ldr	r2, [pc, #16]	@ (80050c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050b2:	6093      	str	r3, [r2, #8]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40007000 	.word	0x40007000

080050c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e2fe      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d075      	beq.n	80051ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e2:	4b97      	ldr	r3, [pc, #604]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050ec:	4b94      	ldr	r3, [pc, #592]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	d102      	bne.n	8005102 <HAL_RCC_OscConfig+0x3e>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d002      	beq.n	8005108 <HAL_RCC_OscConfig+0x44>
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d10b      	bne.n	8005120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	4b8d      	ldr	r3, [pc, #564]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05b      	beq.n	80051cc <HAL_RCC_OscConfig+0x108>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d157      	bne.n	80051cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e2d9      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005128:	d106      	bne.n	8005138 <HAL_RCC_OscConfig+0x74>
 800512a:	4b85      	ldr	r3, [pc, #532]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a84      	ldr	r2, [pc, #528]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e01d      	b.n	8005174 <HAL_RCC_OscConfig+0xb0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005140:	d10c      	bne.n	800515c <HAL_RCC_OscConfig+0x98>
 8005142:	4b7f      	ldr	r3, [pc, #508]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7e      	ldr	r2, [pc, #504]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b7c      	ldr	r3, [pc, #496]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a7b      	ldr	r2, [pc, #492]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e00b      	b.n	8005174 <HAL_RCC_OscConfig+0xb0>
 800515c:	4b78      	ldr	r3, [pc, #480]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a77      	ldr	r2, [pc, #476]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b75      	ldr	r3, [pc, #468]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a74      	ldr	r2, [pc, #464]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800516e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d013      	beq.n	80051a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fc ff24 	bl	8001fc8 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fc ff20 	bl	8001fc8 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	@ 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e29e      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005196:	4b6a      	ldr	r3, [pc, #424]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0xc0>
 80051a2:	e014      	b.n	80051ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fc ff10 	bl	8001fc8 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ac:	f7fc ff0c 	bl	8001fc8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	@ 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e28a      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051be:	4b60      	ldr	r3, [pc, #384]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0xe8>
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d075      	beq.n	80052c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051da:	4b59      	ldr	r3, [pc, #356]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e4:	4b56      	ldr	r3, [pc, #344]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d102      	bne.n	80051fa <HAL_RCC_OscConfig+0x136>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d002      	beq.n	8005200 <HAL_RCC_OscConfig+0x13c>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d11f      	bne.n	8005240 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005200:	4b4f      	ldr	r3, [pc, #316]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCC_OscConfig+0x154>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e25d      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005218:	4b49      	ldr	r3, [pc, #292]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	4946      	ldr	r1, [pc, #280]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800522c:	4b45      	ldr	r3, [pc, #276]	@ (8005344 <HAL_RCC_OscConfig+0x280>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fc fd01 	bl	8001c38 <HAL_InitTick>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d043      	beq.n	80052c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e249      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d023      	beq.n	8005290 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005248:	4b3d      	ldr	r3, [pc, #244]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3c      	ldr	r2, [pc, #240]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800524e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fc feb8 	bl	8001fc8 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525c:	f7fc feb4 	bl	8001fc8 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e232      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800526e:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527a:	4b31      	ldr	r3, [pc, #196]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	061b      	lsls	r3, r3, #24
 8005288:	492d      	ldr	r1, [pc, #180]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]
 800528e:	e01a      	b.n	80052c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005290:	4b2b      	ldr	r3, [pc, #172]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2a      	ldr	r2, [pc, #168]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800529a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fc fe94 	bl	8001fc8 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a4:	f7fc fe90 	bl	8001fc8 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e20e      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b6:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x1e0>
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d041      	beq.n	8005356 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01c      	beq.n	8005314 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052da:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80052dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e0:	4a17      	ldr	r2, [pc, #92]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fc fe6d 	bl	8001fc8 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f2:	f7fc fe69 	bl	8001fc8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e1e7      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005304:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ef      	beq.n	80052f2 <HAL_RCC_OscConfig+0x22e>
 8005312:	e020      	b.n	8005356 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005314:	4b0a      	ldr	r3, [pc, #40]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_RCC_OscConfig+0x27c>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fc fe50 	bl	8001fc8 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800532a:	e00d      	b.n	8005348 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800532c:	f7fc fe4c 	bl	8001fc8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d906      	bls.n	8005348 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1ca      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005348:	4b8c      	ldr	r3, [pc, #560]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1ea      	bne.n	800532c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80a6 	beq.w	80054b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005364:	2300      	movs	r3, #0
 8005366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005368:	4b84      	ldr	r3, [pc, #528]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800536a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_OscConfig+0x2b4>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x2b6>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537e:	4b7f      	ldr	r3, [pc, #508]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	4a7e      	ldr	r2, [pc, #504]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005388:	6593      	str	r3, [r2, #88]	@ 0x58
 800538a:	4b7c      	ldr	r3, [pc, #496]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005396:	2301      	movs	r3, #1
 8005398:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800539a:	4b79      	ldr	r3, [pc, #484]	@ (8005580 <HAL_RCC_OscConfig+0x4bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d118      	bne.n	80053d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053a6:	4b76      	ldr	r3, [pc, #472]	@ (8005580 <HAL_RCC_OscConfig+0x4bc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a75      	ldr	r2, [pc, #468]	@ (8005580 <HAL_RCC_OscConfig+0x4bc>)
 80053ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b2:	f7fc fe09 	bl	8001fc8 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ba:	f7fc fe05 	bl	8001fc8 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e183      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005580 <HAL_RCC_OscConfig+0x4bc>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d108      	bne.n	80053f2 <HAL_RCC_OscConfig+0x32e>
 80053e0:	4b66      	ldr	r3, [pc, #408]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e6:	4a65      	ldr	r2, [pc, #404]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053f0:	e024      	b.n	800543c <HAL_RCC_OscConfig+0x378>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d110      	bne.n	800541c <HAL_RCC_OscConfig+0x358>
 80053fa:	4b60      	ldr	r3, [pc, #384]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005400:	4a5e      	ldr	r2, [pc, #376]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005402:	f043 0304 	orr.w	r3, r3, #4
 8005406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800540a:	4b5c      	ldr	r3, [pc, #368]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005410:	4a5a      	ldr	r2, [pc, #360]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800541a:	e00f      	b.n	800543c <HAL_RCC_OscConfig+0x378>
 800541c:	4b57      	ldr	r3, [pc, #348]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	4a56      	ldr	r2, [pc, #344]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800542c:	4b53      	ldr	r3, [pc, #332]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	4a52      	ldr	r2, [pc, #328]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005434:	f023 0304 	bic.w	r3, r3, #4
 8005438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d016      	beq.n	8005472 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005444:	f7fc fdc0 	bl	8001fc8 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544a:	e00a      	b.n	8005462 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fc fdbc 	bl	8001fc8 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e138      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005462:	4b46      	ldr	r3, [pc, #280]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0ed      	beq.n	800544c <HAL_RCC_OscConfig+0x388>
 8005470:	e015      	b.n	800549e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005472:	f7fc fda9 	bl	8001fc8 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005478:	e00a      	b.n	8005490 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547a:	f7fc fda5 	bl	8001fc8 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e121      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005490:	4b3a      	ldr	r3, [pc, #232]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1ed      	bne.n	800547a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800549e:	7ffb      	ldrb	r3, [r7, #31]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d105      	bne.n	80054b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a4:	4b35      	ldr	r3, [pc, #212]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	4a34      	ldr	r2, [pc, #208]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80054aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d03c      	beq.n	8005536 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01c      	beq.n	80054fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054c4:	4b2d      	ldr	r3, [pc, #180]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054ca:	4a2c      	ldr	r2, [pc, #176]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7fc fd78 	bl	8001fc8 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054dc:	f7fc fd74 	bl	8001fc8 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e0f2      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054ee:	4b23      	ldr	r3, [pc, #140]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 80054f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0ef      	beq.n	80054dc <HAL_RCC_OscConfig+0x418>
 80054fc:	e01b      	b.n	8005536 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054fe:	4b1f      	ldr	r3, [pc, #124]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005504:	4a1d      	ldr	r2, [pc, #116]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550e:	f7fc fd5b 	bl	8001fc8 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005516:	f7fc fd57 	bl	8001fc8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e0d5      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005528:	4b14      	ldr	r3, [pc, #80]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800552a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ef      	bne.n	8005516 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80c9 	beq.w	80056d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005540:	4b0e      	ldr	r3, [pc, #56]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	2b0c      	cmp	r3, #12
 800554a:	f000 8083 	beq.w	8005654 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d15e      	bne.n	8005614 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005556:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a08      	ldr	r2, [pc, #32]	@ (800557c <HAL_RCC_OscConfig+0x4b8>)
 800555c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005562:	f7fc fd31 	bl	8001fc8 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005568:	e00c      	b.n	8005584 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556a:	f7fc fd2d 	bl	8001fc8 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d905      	bls.n	8005584 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0ab      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
 800557c:	40021000 	.word	0x40021000
 8005580:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005584:	4b55      	ldr	r3, [pc, #340]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ec      	bne.n	800556a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005590:	4b52      	ldr	r3, [pc, #328]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	4b52      	ldr	r3, [pc, #328]	@ (80056e0 <HAL_RCC_OscConfig+0x61c>)
 8005596:	4013      	ands	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6a11      	ldr	r1, [r2, #32]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80055aa:	0212      	lsls	r2, r2, #8
 80055ac:	4311      	orrs	r1, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055b2:	0852      	lsrs	r2, r2, #1
 80055b4:	3a01      	subs	r2, #1
 80055b6:	0552      	lsls	r2, r2, #21
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055be:	0852      	lsrs	r2, r2, #1
 80055c0:	3a01      	subs	r2, #1
 80055c2:	0652      	lsls	r2, r2, #25
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055ca:	06d2      	lsls	r2, r2, #27
 80055cc:	430a      	orrs	r2, r1
 80055ce:	4943      	ldr	r1, [pc, #268]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d4:	4b41      	ldr	r3, [pc, #260]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a40      	ldr	r2, [pc, #256]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 80055da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e0:	4b3e      	ldr	r3, [pc, #248]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a3d      	ldr	r2, [pc, #244]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 80055e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fc fcec 	bl	8001fc8 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f4:	f7fc fce8 	bl	8001fc8 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e066      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	4b35      	ldr	r3, [pc, #212]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0x530>
 8005612:	e05e      	b.n	80056d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005614:	4b31      	ldr	r3, [pc, #196]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a30      	ldr	r2, [pc, #192]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 800561a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800561e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fc fcd2 	bl	8001fc8 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005628:	f7fc fcce 	bl	8001fc8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e04c      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800563a:	4b28      	ldr	r3, [pc, #160]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005646:	4b25      	ldr	r3, [pc, #148]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	4924      	ldr	r1, [pc, #144]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 800564c:	4b25      	ldr	r3, [pc, #148]	@ (80056e4 <HAL_RCC_OscConfig+0x620>)
 800564e:	4013      	ands	r3, r2
 8005650:	60cb      	str	r3, [r1, #12]
 8005652:	e03e      	b.n	80056d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e039      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005660:	4b1e      	ldr	r3, [pc, #120]	@ (80056dc <HAL_RCC_OscConfig+0x618>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 0203 	and.w	r2, r3, #3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	429a      	cmp	r2, r3
 8005672:	d12c      	bne.n	80056ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	3b01      	subs	r3, #1
 8005680:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d123      	bne.n	80056ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005690:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d11b      	bne.n	80056ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d113      	bne.n	80056ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	3b01      	subs	r3, #1
 80056b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d109      	bne.n	80056ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	3b01      	subs	r3, #1
 80056c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d001      	beq.n	80056d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021000 	.word	0x40021000
 80056e0:	019f800c 	.word	0x019f800c
 80056e4:	feeefffc 	.word	0xfeeefffc

080056e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e11e      	b.n	800593e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005700:	4b91      	ldr	r3, [pc, #580]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d910      	bls.n	8005730 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b8e      	ldr	r3, [pc, #568]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 020f 	bic.w	r2, r3, #15
 8005716:	498c      	ldr	r1, [pc, #560]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b8a      	ldr	r3, [pc, #552]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e106      	b.n	800593e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d073      	beq.n	8005824 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d129      	bne.n	8005798 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005744:	4b81      	ldr	r3, [pc, #516]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0f4      	b.n	800593e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005754:	f000 f9d0 	bl	8005af8 <RCC_GetSysClockFreqFromPLLSource>
 8005758:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4a7c      	ldr	r2, [pc, #496]	@ (8005950 <HAL_RCC_ClockConfig+0x268>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d93f      	bls.n	80057e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005762:	4b7a      	ldr	r3, [pc, #488]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005776:	2b00      	cmp	r3, #0
 8005778:	d033      	beq.n	80057e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800577e:	2b00      	cmp	r3, #0
 8005780:	d12f      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005782:	4b72      	ldr	r3, [pc, #456]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800578a:	4a70      	ldr	r2, [pc, #448]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 800578c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005790:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005792:	2380      	movs	r3, #128	@ 0x80
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e024      	b.n	80057e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d107      	bne.n	80057b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a0:	4b6a      	ldr	r3, [pc, #424]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0c6      	b.n	800593e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b0:	4b66      	ldr	r3, [pc, #408]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0be      	b.n	800593e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057c0:	f000 f8ce 	bl	8005960 <HAL_RCC_GetSysClockFreq>
 80057c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4a61      	ldr	r2, [pc, #388]	@ (8005950 <HAL_RCC_ClockConfig+0x268>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d909      	bls.n	80057e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ce:	4b5f      	ldr	r3, [pc, #380]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057d6:	4a5d      	ldr	r2, [pc, #372]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80057d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057de:	2380      	movs	r3, #128	@ 0x80
 80057e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057e2:	4b5a      	ldr	r3, [pc, #360]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 0203 	bic.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4957      	ldr	r1, [pc, #348]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f4:	f7fc fbe8 	bl	8001fc8 <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fc:	f7fc fbe4 	bl	8001fc8 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e095      	b.n	800593e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	4b4e      	ldr	r3, [pc, #312]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 020c 	and.w	r2, r3, #12
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	429a      	cmp	r2, r3
 8005822:	d1eb      	bne.n	80057fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d023      	beq.n	8005878 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800583c:	4b43      	ldr	r3, [pc, #268]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a42      	ldr	r2, [pc, #264]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005842:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005846:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005854:	4b3d      	ldr	r3, [pc, #244]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800585c:	4a3b      	ldr	r2, [pc, #236]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 800585e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005862:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005864:	4b39      	ldr	r3, [pc, #228]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4936      	ldr	r1, [pc, #216]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]
 8005876:	e008      	b.n	800588a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b80      	cmp	r3, #128	@ 0x80
 800587c:	d105      	bne.n	800588a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800587e:	4b33      	ldr	r3, [pc, #204]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4a32      	ldr	r2, [pc, #200]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005884:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005888:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800588a:	4b2f      	ldr	r3, [pc, #188]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d21d      	bcs.n	80058d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005898:	4b2b      	ldr	r3, [pc, #172]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f023 020f 	bic.w	r2, r3, #15
 80058a0:	4929      	ldr	r1, [pc, #164]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058a8:	f7fc fb8e 	bl	8001fc8 <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	e00a      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b0:	f7fc fb8a 	bl	8001fc8 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e03b      	b.n	800593e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c6:	4b20      	ldr	r3, [pc, #128]	@ (8005948 <HAL_RCC_ClockConfig+0x260>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d1ed      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e0:	4b1a      	ldr	r3, [pc, #104]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4917      	ldr	r1, [pc, #92]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058fe:	4b13      	ldr	r3, [pc, #76]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	490f      	ldr	r1, [pc, #60]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005912:	f000 f825 	bl	8005960 <HAL_RCC_GetSysClockFreq>
 8005916:	4602      	mov	r2, r0
 8005918:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <HAL_RCC_ClockConfig+0x264>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	490c      	ldr	r1, [pc, #48]	@ (8005954 <HAL_RCC_ClockConfig+0x26c>)
 8005924:	5ccb      	ldrb	r3, [r1, r3]
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	4a0a      	ldr	r2, [pc, #40]	@ (8005958 <HAL_RCC_ClockConfig+0x270>)
 8005930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005932:	4b0a      	ldr	r3, [pc, #40]	@ (800595c <HAL_RCC_ClockConfig+0x274>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7fc f97e 	bl	8001c38 <HAL_InitTick>
 800593c:	4603      	mov	r3, r0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40022000 	.word	0x40022000
 800594c:	40021000 	.word	0x40021000
 8005950:	04c4b400 	.word	0x04c4b400
 8005954:	08011150 	.word	0x08011150
 8005958:	20000000 	.word	0x20000000
 800595c:	20000004 	.word	0x20000004

08005960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005966:	4b2c      	ldr	r3, [pc, #176]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 030c 	and.w	r3, r3, #12
 800596e:	2b04      	cmp	r3, #4
 8005970:	d102      	bne.n	8005978 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005972:	4b2a      	ldr	r3, [pc, #168]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e047      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005978:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 030c 	and.w	r3, r3, #12
 8005980:	2b08      	cmp	r3, #8
 8005982:	d102      	bne.n	800598a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005984:	4b26      	ldr	r3, [pc, #152]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e03e      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800598a:	4b23      	ldr	r3, [pc, #140]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b0c      	cmp	r3, #12
 8005994:	d136      	bne.n	8005a04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005996:	4b20      	ldr	r3, [pc, #128]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3301      	adds	r3, #1
 80059ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d10c      	bne.n	80059ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	4a16      	ldr	r2, [pc, #88]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059be:	68d2      	ldr	r2, [r2, #12]
 80059c0:	0a12      	lsrs	r2, r2, #8
 80059c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	617b      	str	r3, [r7, #20]
      break;
 80059cc:	e00c      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059ce:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d6:	4a10      	ldr	r2, [pc, #64]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d8:	68d2      	ldr	r2, [r2, #12]
 80059da:	0a12      	lsrs	r2, r2, #8
 80059dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059e0:	fb02 f303 	mul.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
      break;
 80059e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	0e5b      	lsrs	r3, r3, #25
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	3301      	adds	r3, #1
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	e001      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a08:	693b      	ldr	r3, [r7, #16]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	00f42400 	.word	0x00f42400
 8005a20:	007a1200 	.word	0x007a1200

08005a24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a28:	4b03      	ldr	r3, [pc, #12]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000000 	.word	0x20000000

08005a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a40:	f7ff fff0 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4904      	ldr	r1, [pc, #16]	@ (8005a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	08011160 	.word	0x08011160

08005a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a6c:	f7ff ffda 	bl	8005a24 <HAL_RCC_GetHCLKFreq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	0adb      	lsrs	r3, r3, #11
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	4904      	ldr	r1, [pc, #16]	@ (8005a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a7e:	5ccb      	ldrb	r3, [r1, r3]
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	08011160 	.word	0x08011160

08005a94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	220f      	movs	r2, #15
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005aa4:	4b12      	ldr	r3, [pc, #72]	@ (8005af0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0203 	and.w	r2, r3, #3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8005af0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005abc:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <HAL_RCC_GetClockConfig+0x5c>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ac8:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	08db      	lsrs	r3, r3, #3
 8005ace:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005ad6:	4b07      	ldr	r3, [pc, #28]	@ (8005af4 <HAL_RCC_GetClockConfig+0x60>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 020f 	and.w	r2, r3, #15
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40022000 	.word	0x40022000

08005af8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005afe:	4b1e      	ldr	r3, [pc, #120]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d10c      	bne.n	8005b36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b1c:	4a17      	ldr	r2, [pc, #92]	@ (8005b7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	4a14      	ldr	r2, [pc, #80]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b26:	68d2      	ldr	r2, [r2, #12]
 8005b28:	0a12      	lsrs	r2, r2, #8
 8005b2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	617b      	str	r3, [r7, #20]
    break;
 8005b34:	e00c      	b.n	8005b50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b36:	4a12      	ldr	r2, [pc, #72]	@ (8005b80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b40:	68d2      	ldr	r2, [r2, #12]
 8005b42:	0a12      	lsrs	r2, r2, #8
 8005b44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b48:	fb02 f303 	mul.w	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]
    break;
 8005b4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b50:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	0e5b      	lsrs	r3, r3, #25
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b6a:	687b      	ldr	r3, [r7, #4]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	007a1200 	.word	0x007a1200
 8005b80:	00f42400 	.word	0x00f42400

08005b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b90:	2300      	movs	r3, #0
 8005b92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8098 	beq.w	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ba6:	4b43      	ldr	r3, [pc, #268]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb2:	4b40      	ldr	r3, [pc, #256]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bce:	4b3a      	ldr	r3, [pc, #232]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a39      	ldr	r2, [pc, #228]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bda:	f7fc f9f5 	bl	8001fc8 <HAL_GetTick>
 8005bde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be0:	e009      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be2:	f7fc f9f1 	bl	8001fc8 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d902      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	74fb      	strb	r3, [r7, #19]
        break;
 8005bf4:	e005      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf6:	4b30      	ldr	r3, [pc, #192]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0ef      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d159      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c08:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01e      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d019      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c24:	4b23      	ldr	r3, [pc, #140]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c30:	4b20      	ldr	r3, [pc, #128]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c36:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c40:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c50:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d016      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fc f9b1 	bl	8001fc8 <HAL_GetTick>
 8005c66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c68:	e00b      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6a:	f7fc f9ad 	bl	8001fc8 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d902      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c80:	e006      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0ec      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c90:	7cfb      	ldrb	r3, [r7, #19]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c96:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca4:	4903      	ldr	r1, [pc, #12]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cac:	e008      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cae:	7cfb      	ldrb	r3, [r7, #19]
 8005cb0:	74bb      	strb	r3, [r7, #18]
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	7cfb      	ldrb	r3, [r7, #19]
 8005cbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc0:	7c7b      	ldrb	r3, [r7, #17]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d105      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc6:	4ba7      	ldr	r3, [pc, #668]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cca:	4aa6      	ldr	r2, [pc, #664]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cde:	4ba1      	ldr	r3, [pc, #644]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce4:	f023 0203 	bic.w	r2, r3, #3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	499d      	ldr	r1, [pc, #628]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d00:	4b98      	ldr	r3, [pc, #608]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	f023 020c 	bic.w	r2, r3, #12
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4995      	ldr	r1, [pc, #596]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d22:	4b90      	ldr	r3, [pc, #576]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	498c      	ldr	r1, [pc, #560]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d44:	4b87      	ldr	r3, [pc, #540]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	4984      	ldr	r1, [pc, #528]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d66:	4b7f      	ldr	r3, [pc, #508]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	497b      	ldr	r1, [pc, #492]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d88:	4b76      	ldr	r3, [pc, #472]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	4973      	ldr	r1, [pc, #460]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005daa:	4b6e      	ldr	r3, [pc, #440]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	496a      	ldr	r1, [pc, #424]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dcc:	4b65      	ldr	r3, [pc, #404]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	4962      	ldr	r1, [pc, #392]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dee:	4b5d      	ldr	r3, [pc, #372]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	4959      	ldr	r1, [pc, #356]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e10:	4b54      	ldr	r3, [pc, #336]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e16:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1e:	4951      	ldr	r1, [pc, #324]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e32:	4b4c      	ldr	r3, [pc, #304]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	4948      	ldr	r1, [pc, #288]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e50:	d105      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e52:	4b44      	ldr	r3, [pc, #272]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4a43      	ldr	r2, [pc, #268]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e5c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d015      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	493a      	ldr	r1, [pc, #232]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e88:	d105      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e8a:	4b36      	ldr	r3, [pc, #216]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	4a35      	ldr	r2, [pc, #212]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e94:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d015      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ea2:	4b30      	ldr	r3, [pc, #192]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb0:	492c      	ldr	r1, [pc, #176]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ec0:	d105      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec2:	4b28      	ldr	r3, [pc, #160]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4a27      	ldr	r2, [pc, #156]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ecc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d015      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eda:	4b22      	ldr	r3, [pc, #136]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	491e      	ldr	r1, [pc, #120]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef8:	d105      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005efa:	4b1a      	ldr	r3, [pc, #104]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	4a19      	ldr	r2, [pc, #100]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f04:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d015      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f12:	4b14      	ldr	r3, [pc, #80]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	4910      	ldr	r1, [pc, #64]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f30:	d105      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f32:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	4a0b      	ldr	r2, [pc, #44]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f4a:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f50:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f58:	4902      	ldr	r1, [pc, #8]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	e001      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f64:	40021000 	.word	0x40021000
 8005f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f70:	4b21      	ldr	r3, [pc, #132]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a20      	ldr	r2, [pc, #128]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f88:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	4918      	ldr	r1, [pc, #96]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fa8:	4b13      	ldr	r3, [pc, #76]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a12      	ldr	r2, [pc, #72]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d015      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fce:	490a      	ldr	r1, [pc, #40]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fde:	d105      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe0:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a04      	ldr	r2, [pc, #16]	@ (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005fec:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000

08005ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e049      	b.n	80060a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f841 	bl	80060aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fa28 	bl	8006490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e04f      	b.n	8006178 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a23      	ldr	r2, [pc, #140]	@ (8006184 <HAL_TIM_Base_Start_IT+0xc4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01d      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x76>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006102:	d018      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x76>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1f      	ldr	r2, [pc, #124]	@ (8006188 <HAL_TIM_Base_Start_IT+0xc8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x76>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1e      	ldr	r2, [pc, #120]	@ (800618c <HAL_TIM_Base_Start_IT+0xcc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00e      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x76>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1c      	ldr	r2, [pc, #112]	@ (8006190 <HAL_TIM_Base_Start_IT+0xd0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x76>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1b      	ldr	r2, [pc, #108]	@ (8006194 <HAL_TIM_Base_Start_IT+0xd4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_TIM_Base_Start_IT+0x76>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a19      	ldr	r2, [pc, #100]	@ (8006198 <HAL_TIM_Base_Start_IT+0xd8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d115      	bne.n	8006162 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	4b17      	ldr	r3, [pc, #92]	@ (800619c <HAL_TIM_Base_Start_IT+0xdc>)
 800613e:	4013      	ands	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b06      	cmp	r3, #6
 8006146:	d015      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0xb4>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614e:	d011      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	e008      	b.n	8006174 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0201 	orr.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e000      	b.n	8006176 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006174:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40013400 	.word	0x40013400
 8006194:	40014000 	.word	0x40014000
 8006198:	40015000 	.word	0x40015000
 800619c:	00010007 	.word	0x00010007

080061a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0202 	mvn.w	r2, #2
 80061d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f931 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f923 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f934 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d020      	beq.n	8006250 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01b      	beq.n	8006250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0204 	mvn.w	r2, #4
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f90b 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8fd 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f90e 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d020      	beq.n	800629c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01b      	beq.n	800629c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0208 	mvn.w	r2, #8
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f8e5 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8d7 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8e8 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d020      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0210 	mvn.w	r2, #16
 80062b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2208      	movs	r2, #8
 80062be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f8bf 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8b1 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8c2 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0201 	mvn.w	r2, #1
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fb48 	bl	800199c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00c      	beq.n	800633a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f95f 	bl	80065f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f957 	bl	800660c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800637a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f87c 	bl	800647a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0220 	mvn.w	r2, #32
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f91f 	bl	80065e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f92b 	bl	8006620 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00c      	beq.n	80063ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80063e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f923 	bl	8006634 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800640a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f91b 	bl	8006648 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00c      	beq.n	8006436 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800642e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f913 	bl	800665c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a48      	ldr	r2, [pc, #288]	@ (80065c4 <TIM_Base_SetConfig+0x134>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ae:	d00f      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a45      	ldr	r2, [pc, #276]	@ (80065c8 <TIM_Base_SetConfig+0x138>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a44      	ldr	r2, [pc, #272]	@ (80065cc <TIM_Base_SetConfig+0x13c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a43      	ldr	r2, [pc, #268]	@ (80065d0 <TIM_Base_SetConfig+0x140>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a42      	ldr	r2, [pc, #264]	@ (80065d4 <TIM_Base_SetConfig+0x144>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d108      	bne.n	80064e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a37      	ldr	r2, [pc, #220]	@ (80065c4 <TIM_Base_SetConfig+0x134>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01f      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f0:	d01b      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a34      	ldr	r2, [pc, #208]	@ (80065c8 <TIM_Base_SetConfig+0x138>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d017      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a33      	ldr	r2, [pc, #204]	@ (80065cc <TIM_Base_SetConfig+0x13c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a32      	ldr	r2, [pc, #200]	@ (80065d0 <TIM_Base_SetConfig+0x140>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00f      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a32      	ldr	r2, [pc, #200]	@ (80065d8 <TIM_Base_SetConfig+0x148>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00b      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a31      	ldr	r2, [pc, #196]	@ (80065dc <TIM_Base_SetConfig+0x14c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a30      	ldr	r2, [pc, #192]	@ (80065e0 <TIM_Base_SetConfig+0x150>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_Base_SetConfig+0x9a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2b      	ldr	r2, [pc, #172]	@ (80065d4 <TIM_Base_SetConfig+0x144>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d108      	bne.n	800653c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a18      	ldr	r2, [pc, #96]	@ (80065c4 <TIM_Base_SetConfig+0x134>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_Base_SetConfig+0x100>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a19      	ldr	r2, [pc, #100]	@ (80065d0 <TIM_Base_SetConfig+0x140>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0x100>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <TIM_Base_SetConfig+0x148>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x100>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a18      	ldr	r2, [pc, #96]	@ (80065dc <TIM_Base_SetConfig+0x14c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x100>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a17      	ldr	r2, [pc, #92]	@ (80065e0 <TIM_Base_SetConfig+0x150>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x100>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a12      	ldr	r2, [pc, #72]	@ (80065d4 <TIM_Base_SetConfig+0x144>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d103      	bne.n	8006598 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d105      	bne.n	80065b6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	611a      	str	r2, [r3, #16]
  }
}
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40015000 	.word	0x40015000
 80065d8:	40014000 	.word	0x40014000
 80065dc:	40014400 	.word	0x40014400
 80065e0:	40014800 	.word	0x40014800

080065e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e042      	b.n	8006708 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fb fa77 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2224      	movs	r2, #36	@ 0x24
 800669e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0201 	bic.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fb24 	bl	8006d08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f825 	bl	8006710 <UART_SetConfig>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e01b      	b.n	8006708 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fba3 	bl	8006e4c <UART_CheckIdleState>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006714:	b08c      	sub	sp, #48	@ 0x30
 8006716:	af00      	add	r7, sp, #0
 8006718:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	431a      	orrs	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	431a      	orrs	r2, r3
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	4313      	orrs	r3, r2
 8006736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4baa      	ldr	r3, [pc, #680]	@ (80069e8 <UART_SetConfig+0x2d8>)
 8006740:	4013      	ands	r3, r2
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006748:	430b      	orrs	r3, r1
 800674a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a9f      	ldr	r2, [pc, #636]	@ (80069ec <UART_SetConfig+0x2dc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006778:	4313      	orrs	r3, r2
 800677a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006786:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006790:	430b      	orrs	r3, r1
 8006792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	f023 010f 	bic.w	r1, r3, #15
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a90      	ldr	r2, [pc, #576]	@ (80069f0 <UART_SetConfig+0x2e0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d125      	bne.n	8006800 <UART_SetConfig+0xf0>
 80067b4:	4b8f      	ldr	r3, [pc, #572]	@ (80069f4 <UART_SetConfig+0x2e4>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d81a      	bhi.n	80067f8 <UART_SetConfig+0xe8>
 80067c2:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0xb8>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067e1 	.word	0x080067e1
 80067d4:	080067f1 	.word	0x080067f1
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067de:	e116      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80067e0:	2302      	movs	r3, #2
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e6:	e112      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ee:	e10e      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f6:	e10a      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067fe:	e106      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a7c      	ldr	r2, [pc, #496]	@ (80069f8 <UART_SetConfig+0x2e8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d138      	bne.n	800687c <UART_SetConfig+0x16c>
 800680a:	4b7a      	ldr	r3, [pc, #488]	@ (80069f4 <UART_SetConfig+0x2e4>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006810:	f003 030c 	and.w	r3, r3, #12
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d82d      	bhi.n	8006874 <UART_SetConfig+0x164>
 8006818:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <UART_SetConfig+0x110>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006855 	.word	0x08006855
 8006824:	08006875 	.word	0x08006875
 8006828:	08006875 	.word	0x08006875
 800682c:	08006875 	.word	0x08006875
 8006830:	08006865 	.word	0x08006865
 8006834:	08006875 	.word	0x08006875
 8006838:	08006875 	.word	0x08006875
 800683c:	08006875 	.word	0x08006875
 8006840:	0800685d 	.word	0x0800685d
 8006844:	08006875 	.word	0x08006875
 8006848:	08006875 	.word	0x08006875
 800684c:	08006875 	.word	0x08006875
 8006850:	0800686d 	.word	0x0800686d
 8006854:	2300      	movs	r3, #0
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685a:	e0d8      	b.n	8006a0e <UART_SetConfig+0x2fe>
 800685c:	2302      	movs	r3, #2
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006862:	e0d4      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686a:	e0d0      	b.n	8006a0e <UART_SetConfig+0x2fe>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006872:	e0cc      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687a:	e0c8      	b.n	8006a0e <UART_SetConfig+0x2fe>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a5e      	ldr	r2, [pc, #376]	@ (80069fc <UART_SetConfig+0x2ec>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d125      	bne.n	80068d2 <UART_SetConfig+0x1c2>
 8006886:	4b5b      	ldr	r3, [pc, #364]	@ (80069f4 <UART_SetConfig+0x2e4>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006890:	2b30      	cmp	r3, #48	@ 0x30
 8006892:	d016      	beq.n	80068c2 <UART_SetConfig+0x1b2>
 8006894:	2b30      	cmp	r3, #48	@ 0x30
 8006896:	d818      	bhi.n	80068ca <UART_SetConfig+0x1ba>
 8006898:	2b20      	cmp	r3, #32
 800689a:	d00a      	beq.n	80068b2 <UART_SetConfig+0x1a2>
 800689c:	2b20      	cmp	r3, #32
 800689e:	d814      	bhi.n	80068ca <UART_SetConfig+0x1ba>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <UART_SetConfig+0x19a>
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d008      	beq.n	80068ba <UART_SetConfig+0x1aa>
 80068a8:	e00f      	b.n	80068ca <UART_SetConfig+0x1ba>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b0:	e0ad      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80068b2:	2302      	movs	r3, #2
 80068b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b8:	e0a9      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80068ba:	2304      	movs	r3, #4
 80068bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c0:	e0a5      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80068c2:	2308      	movs	r3, #8
 80068c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c8:	e0a1      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80068ca:	2310      	movs	r3, #16
 80068cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d0:	e09d      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006a00 <UART_SetConfig+0x2f0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d125      	bne.n	8006928 <UART_SetConfig+0x218>
 80068dc:	4b45      	ldr	r3, [pc, #276]	@ (80069f4 <UART_SetConfig+0x2e4>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068e8:	d016      	beq.n	8006918 <UART_SetConfig+0x208>
 80068ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80068ec:	d818      	bhi.n	8006920 <UART_SetConfig+0x210>
 80068ee:	2b80      	cmp	r3, #128	@ 0x80
 80068f0:	d00a      	beq.n	8006908 <UART_SetConfig+0x1f8>
 80068f2:	2b80      	cmp	r3, #128	@ 0x80
 80068f4:	d814      	bhi.n	8006920 <UART_SetConfig+0x210>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <UART_SetConfig+0x1f0>
 80068fa:	2b40      	cmp	r3, #64	@ 0x40
 80068fc:	d008      	beq.n	8006910 <UART_SetConfig+0x200>
 80068fe:	e00f      	b.n	8006920 <UART_SetConfig+0x210>
 8006900:	2300      	movs	r3, #0
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006906:	e082      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006908:	2302      	movs	r3, #2
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800690e:	e07e      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006910:	2304      	movs	r3, #4
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006916:	e07a      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006918:	2308      	movs	r3, #8
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800691e:	e076      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006920:	2310      	movs	r3, #16
 8006922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006926:	e072      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a35      	ldr	r2, [pc, #212]	@ (8006a04 <UART_SetConfig+0x2f4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d12a      	bne.n	8006988 <UART_SetConfig+0x278>
 8006932:	4b30      	ldr	r3, [pc, #192]	@ (80069f4 <UART_SetConfig+0x2e4>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800693c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006940:	d01a      	beq.n	8006978 <UART_SetConfig+0x268>
 8006942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006946:	d81b      	bhi.n	8006980 <UART_SetConfig+0x270>
 8006948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800694c:	d00c      	beq.n	8006968 <UART_SetConfig+0x258>
 800694e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006952:	d815      	bhi.n	8006980 <UART_SetConfig+0x270>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <UART_SetConfig+0x250>
 8006958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695c:	d008      	beq.n	8006970 <UART_SetConfig+0x260>
 800695e:	e00f      	b.n	8006980 <UART_SetConfig+0x270>
 8006960:	2300      	movs	r3, #0
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006966:	e052      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006968:	2302      	movs	r3, #2
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696e:	e04e      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006976:	e04a      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697e:	e046      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006986:	e042      	b.n	8006a0e <UART_SetConfig+0x2fe>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a17      	ldr	r2, [pc, #92]	@ (80069ec <UART_SetConfig+0x2dc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d13a      	bne.n	8006a08 <UART_SetConfig+0x2f8>
 8006992:	4b18      	ldr	r3, [pc, #96]	@ (80069f4 <UART_SetConfig+0x2e4>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800699c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069a0:	d01a      	beq.n	80069d8 <UART_SetConfig+0x2c8>
 80069a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069a6:	d81b      	bhi.n	80069e0 <UART_SetConfig+0x2d0>
 80069a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ac:	d00c      	beq.n	80069c8 <UART_SetConfig+0x2b8>
 80069ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b2:	d815      	bhi.n	80069e0 <UART_SetConfig+0x2d0>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <UART_SetConfig+0x2b0>
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069bc:	d008      	beq.n	80069d0 <UART_SetConfig+0x2c0>
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x2d0>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c6:	e022      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e01e      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d6:	e01a      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069de:	e016      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e012      	b.n	8006a0e <UART_SetConfig+0x2fe>
 80069e8:	cfff69f3 	.word	0xcfff69f3
 80069ec:	40008000 	.word	0x40008000
 80069f0:	40013800 	.word	0x40013800
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40004400 	.word	0x40004400
 80069fc:	40004800 	.word	0x40004800
 8006a00:	40004c00 	.word	0x40004c00
 8006a04:	40005000 	.word	0x40005000
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4aae      	ldr	r2, [pc, #696]	@ (8006ccc <UART_SetConfig+0x5bc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	f040 8097 	bne.w	8006b48 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d823      	bhi.n	8006a6a <UART_SetConfig+0x35a>
 8006a22:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0x318>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a6b 	.word	0x08006a6b
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a6b 	.word	0x08006a6b
 8006a38:	08006a5b 	.word	0x08006a5b
 8006a3c:	08006a6b 	.word	0x08006a6b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a6b 	.word	0x08006a6b
 8006a48:	08006a63 	.word	0x08006a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a4c:	f7fe fff6 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 8006a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a52:	e010      	b.n	8006a76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a54:	4b9e      	ldr	r3, [pc, #632]	@ (8006cd0 <UART_SetConfig+0x5c0>)
 8006a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a58:	e00d      	b.n	8006a76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a5a:	f7fe ff81 	bl	8005960 <HAL_RCC_GetSysClockFreq>
 8006a5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a60:	e009      	b.n	8006a76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a68:	e005      	b.n	8006a76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8130 	beq.w	8006cde <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a82:	4a94      	ldr	r2, [pc, #592]	@ (8006cd4 <UART_SetConfig+0x5c4>)
 8006a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d305      	bcc.n	8006aae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d903      	bls.n	8006ab6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ab4:	e113      	b.n	8006cde <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	2200      	movs	r2, #0
 8006aba:	60bb      	str	r3, [r7, #8]
 8006abc:	60fa      	str	r2, [r7, #12]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac2:	4a84      	ldr	r2, [pc, #528]	@ (8006cd4 <UART_SetConfig+0x5c4>)
 8006ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2200      	movs	r2, #0
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ad8:	f7fa f8de 	bl	8000c98 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	020b      	lsls	r3, r1, #8
 8006aee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006af2:	0202      	lsls	r2, r0, #8
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	6849      	ldr	r1, [r1, #4]
 8006af8:	0849      	lsrs	r1, r1, #1
 8006afa:	2000      	movs	r0, #0
 8006afc:	460c      	mov	r4, r1
 8006afe:	4605      	mov	r5, r0
 8006b00:	eb12 0804 	adds.w	r8, r2, r4
 8006b04:	eb43 0905 	adc.w	r9, r3, r5
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	469a      	mov	sl, r3
 8006b10:	4693      	mov	fp, r2
 8006b12:	4652      	mov	r2, sl
 8006b14:	465b      	mov	r3, fp
 8006b16:	4640      	mov	r0, r8
 8006b18:	4649      	mov	r1, r9
 8006b1a:	f7fa f8bd 	bl	8000c98 <__aeabi_uldivmod>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4613      	mov	r3, r2
 8006b24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2c:	d308      	bcc.n	8006b40 <UART_SetConfig+0x430>
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b34:	d204      	bcs.n	8006b40 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a3a      	ldr	r2, [r7, #32]
 8006b3c:	60da      	str	r2, [r3, #12]
 8006b3e:	e0ce      	b.n	8006cde <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b46:	e0ca      	b.n	8006cde <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b50:	d166      	bne.n	8006c20 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d827      	bhi.n	8006baa <UART_SetConfig+0x49a>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <UART_SetConfig+0x450>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b85 	.word	0x08006b85
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	08006bab 	.word	0x08006bab
 8006b70:	08006b9b 	.word	0x08006b9b
 8006b74:	08006bab 	.word	0x08006bab
 8006b78:	08006bab 	.word	0x08006bab
 8006b7c:	08006bab 	.word	0x08006bab
 8006b80:	08006ba3 	.word	0x08006ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7fe ff5a 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 8006b88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b8a:	e014      	b.n	8006bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b8c:	f7fe ff6c 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8006b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b92:	e010      	b.n	8006bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b94:	4b4e      	ldr	r3, [pc, #312]	@ (8006cd0 <UART_SetConfig+0x5c0>)
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b98:	e00d      	b.n	8006bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9a:	f7fe fee1 	bl	8005960 <HAL_RCC_GetSysClockFreq>
 8006b9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ba0:	e009      	b.n	8006bb6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ba8:	e005      	b.n	8006bb6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8090 	beq.w	8006cde <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	4a44      	ldr	r2, [pc, #272]	@ (8006cd4 <UART_SetConfig+0x5c4>)
 8006bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd0:	005a      	lsls	r2, r3, #1
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	441a      	add	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2b0f      	cmp	r3, #15
 8006be8:	d916      	bls.n	8006c18 <UART_SetConfig+0x508>
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf0:	d212      	bcs.n	8006c18 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f023 030f 	bic.w	r3, r3, #15
 8006bfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	085b      	lsrs	r3, r3, #1
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	8bfb      	ldrh	r3, [r7, #30]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	8bfa      	ldrh	r2, [r7, #30]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	e062      	b.n	8006cde <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c1e:	e05e      	b.n	8006cde <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d828      	bhi.n	8006c7a <UART_SetConfig+0x56a>
 8006c28:	a201      	add	r2, pc, #4	@ (adr r2, 8006c30 <UART_SetConfig+0x520>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c5d 	.word	0x08006c5d
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	08006c7b 	.word	0x08006c7b
 8006c40:	08006c6b 	.word	0x08006c6b
 8006c44:	08006c7b 	.word	0x08006c7b
 8006c48:	08006c7b 	.word	0x08006c7b
 8006c4c:	08006c7b 	.word	0x08006c7b
 8006c50:	08006c73 	.word	0x08006c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c54:	f7fe fef2 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 8006c58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c5a:	e014      	b.n	8006c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c5c:	f7fe ff04 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8006c60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c62:	e010      	b.n	8006c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <UART_SetConfig+0x5c0>)
 8006c66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c68:	e00d      	b.n	8006c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6a:	f7fe fe79 	bl	8005960 <HAL_RCC_GetSysClockFreq>
 8006c6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c70:	e009      	b.n	8006c86 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c78:	e005      	b.n	8006c86 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c84:	bf00      	nop
    }

    if (pclk != 0U)
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d028      	beq.n	8006cde <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	4a10      	ldr	r2, [pc, #64]	@ (8006cd4 <UART_SetConfig+0x5c4>)
 8006c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c96:	461a      	mov	r2, r3
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	441a      	add	r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	2b0f      	cmp	r3, #15
 8006cb4:	d910      	bls.n	8006cd8 <UART_SetConfig+0x5c8>
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cbc:	d20c      	bcs.n	8006cd8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60da      	str	r2, [r3, #12]
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0x5ce>
 8006cca:	bf00      	nop
 8006ccc:	40008000 	.word	0x40008000
 8006cd0:	00f42400 	.word	0x00f42400
 8006cd4:	08011168 	.word	0x08011168
      }
      else
      {
        ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cfa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3730      	adds	r7, #48	@ 0x30
 8006d02:	46bd      	mov	sp, r7
 8006d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e06:	d10a      	bne.n	8006e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b098      	sub	sp, #96	@ 0x60
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e5c:	f7fb f8b4 	bl	8001fc8 <HAL_GetTick>
 8006e60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d12f      	bne.n	8006ed0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f88e 	bl	8006fa0 <UART_WaitOnFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d022      	beq.n	8006ed0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eaa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e6      	bne.n	8006e8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e063      	b.n	8006f98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d149      	bne.n	8006f72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ede:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f857 	bl	8006fa0 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d03c      	beq.n	8006f72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	623b      	str	r3, [r7, #32]
   return(result);
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f4a:	61fa      	str	r2, [r7, #28]
 8006f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	69b9      	ldr	r1, [r7, #24]
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	617b      	str	r3, [r7, #20]
   return(result);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e012      	b.n	8006f98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3758      	adds	r7, #88	@ 0x58
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	4613      	mov	r3, r2
 8006fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb0:	e04f      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d04b      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fba:	f7fb f805 	bl	8001fc8 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d302      	bcc.n	8006fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e04e      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d037      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b80      	cmp	r3, #128	@ 0x80
 8006fe6:	d034      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b40      	cmp	r3, #64	@ 0x40
 8006fec:	d031      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d110      	bne.n	800701e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2208      	movs	r2, #8
 8007002:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f838 	bl	800707a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2208      	movs	r2, #8
 800700e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e029      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800702c:	d111      	bne.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007036:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f81e 	bl	800707a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e00f      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	bf0c      	ite	eq
 8007062:	2301      	moveq	r3, #1
 8007064:	2300      	movne	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	429a      	cmp	r2, r3
 800706e:	d0a0      	beq.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707a:	b480      	push	{r7}
 800707c:	b095      	sub	sp, #84	@ 0x54
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e6      	bne.n	8007082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3308      	adds	r3, #8
 80070ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e3      	bne.n	80070b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d118      	bne.n	8007126 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	60bb      	str	r3, [r7, #8]
   return(result);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 0310 	bic.w	r3, r3, #16
 8007108:	647b      	str	r3, [r7, #68]	@ 0x44
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6979      	ldr	r1, [r7, #20]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	613b      	str	r3, [r7, #16]
   return(result);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800713a:	bf00      	nop
 800713c:	3754      	adds	r7, #84	@ 0x54
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_UARTEx_DisableFifoMode+0x16>
 8007158:	2302      	movs	r3, #2
 800715a:	e027      	b.n	80071ac <HAL_UARTEx_DisableFifoMode+0x66>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2224      	movs	r2, #36	@ 0x24
 8007168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800718a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e02d      	b.n	800722c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2224      	movs	r2, #36	@ 0x24
 80071dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f84f 	bl	80072b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007248:	2302      	movs	r3, #2
 800724a:	e02d      	b.n	80072a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2224      	movs	r2, #36	@ 0x24
 8007258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f811 	bl	80072b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d108      	bne.n	80072d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072d0:	e031      	b.n	8007336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072d2:	2308      	movs	r3, #8
 80072d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072d6:	2308      	movs	r3, #8
 80072d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	0e5b      	lsrs	r3, r3, #25
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	0f5b      	lsrs	r3, r3, #29
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	7b3a      	ldrb	r2, [r7, #12]
 80072fe:	4911      	ldr	r1, [pc, #68]	@ (8007344 <UARTEx_SetNbDataToProcess+0x94>)
 8007300:	5c8a      	ldrb	r2, [r1, r2]
 8007302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007306:	7b3a      	ldrb	r2, [r7, #12]
 8007308:	490f      	ldr	r1, [pc, #60]	@ (8007348 <UARTEx_SetNbDataToProcess+0x98>)
 800730a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800730c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	7b7a      	ldrb	r2, [r7, #13]
 800731c:	4909      	ldr	r1, [pc, #36]	@ (8007344 <UARTEx_SetNbDataToProcess+0x94>)
 800731e:	5c8a      	ldrb	r2, [r1, r2]
 8007320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007324:	7b7a      	ldrb	r2, [r7, #13]
 8007326:	4908      	ldr	r1, [pc, #32]	@ (8007348 <UARTEx_SetNbDataToProcess+0x98>)
 8007328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800732a:	fb93 f3f2 	sdiv	r3, r3, r2
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	08011180 	.word	0x08011180
 8007348:	08011188 	.word	0x08011188

0800734c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800735c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007360:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007382:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007386:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	b29b      	uxth	r3, r3
 8007394:	43db      	mvns	r3, r3
 8007396:	b29b      	uxth	r3, r3
 8007398:	4013      	ands	r3, r2
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	1d3b      	adds	r3, r7, #4
 80073ba:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b0a7      	sub	sp, #156	@ 0x9c
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	b29b      	uxth	r3, r3
 800740a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800740e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007412:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	78db      	ldrb	r3, [r3, #3]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d81f      	bhi.n	800745e <USB_ActivateEndpoint+0x72>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <USB_ActivateEndpoint+0x38>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007435 	.word	0x08007435
 8007428:	08007451 	.word	0x08007451
 800742c:	08007467 	.word	0x08007467
 8007430:	08007443 	.word	0x08007443
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007434:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007438:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800743c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007440:	e012      	b.n	8007468 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007442:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007446:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800744a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800744e:	e00b      	b.n	8007468 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007450:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007454:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007458:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800745c:	e004      	b.n	8007468 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007464:	e000      	b.n	8007468 <USB_ActivateEndpoint+0x7c>
      break;
 8007466:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	441a      	add	r2, r3
 8007472:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	b29b      	uxth	r3, r3
 8007498:	b21b      	sxth	r3, r3
 800749a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800749e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a2:	b21a      	sxth	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b21b      	sxth	r3, r3
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b21b      	sxth	r3, r3
 80074ae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	441a      	add	r2, r3
 80074bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	7b1b      	ldrb	r3, [r3, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f040 8180 	bne.w	80077de <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 8084 	beq.w	80075f0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	461a      	mov	r2, r3
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	4413      	add	r3, r2
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	00da      	lsls	r2, r3, #3
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	88db      	ldrh	r3, [r3, #6]
 8007510:	085b      	lsrs	r3, r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	827b      	strh	r3, [r7, #18]
 800752a:	8a7b      	ldrh	r3, [r7, #18]
 800752c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01b      	beq.n	800756c <USB_ActivateEndpoint+0x180>
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800754a:	823b      	strh	r3, [r7, #16]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	441a      	add	r2, r3
 8007556:	8a3b      	ldrh	r3, [r7, #16]
 8007558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800755c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007564:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007568:	b29b      	uxth	r3, r3
 800756a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	78db      	ldrb	r3, [r3, #3]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d020      	beq.n	80075b6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800758a:	81bb      	strh	r3, [r7, #12]
 800758c:	89bb      	ldrh	r3, [r7, #12]
 800758e:	f083 0320 	eor.w	r3, r3, #32
 8007592:	81bb      	strh	r3, [r7, #12]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	441a      	add	r2, r3
 800759e:	89bb      	ldrh	r3, [r7, #12]
 80075a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	8013      	strh	r3, [r2, #0]
 80075b4:	e3f9      	b.n	8007daa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075cc:	81fb      	strh	r3, [r7, #14]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	441a      	add	r2, r3
 80075d8:	89fb      	ldrh	r3, [r7, #14]
 80075da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	8013      	strh	r3, [r2, #0]
 80075ee:	e3dc      	b.n	8007daa <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	4413      	add	r3, r2
 8007602:	633b      	str	r3, [r7, #48]	@ 0x30
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	00da      	lsls	r2, r3, #3
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	4413      	add	r3, r2
 800760e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	88db      	ldrh	r3, [r3, #6]
 8007618:	085b      	lsrs	r3, r3, #1
 800761a:	b29b      	uxth	r3, r3
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800762e:	b29b      	uxth	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	4413      	add	r3, r2
 8007636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	00da      	lsls	r2, r3, #3
 800763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007640:	4413      	add	r3, r2
 8007642:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007652:	b29a      	uxth	r2, r3
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	801a      	strh	r2, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <USB_ActivateEndpoint+0x28a>
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766e:	b29a      	uxth	r2, r3
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	e041      	b.n	80076fa <USB_ActivateEndpoint+0x30e>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b3e      	cmp	r3, #62	@ 0x3e
 800767c:	d81c      	bhi.n	80076b8 <USB_ActivateEndpoint+0x2cc>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <USB_ActivateEndpoint+0x2b2>
 8007694:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007698:	3301      	adds	r3, #1
 800769a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	029b      	lsls	r3, r3, #10
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4313      	orrs	r3, r2
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	e020      	b.n	80076fa <USB_ActivateEndpoint+0x30e>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 031f 	and.w	r3, r3, #31
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d104      	bne.n	80076d8 <USB_ActivateEndpoint+0x2ec>
 80076ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076d2:	3b01      	subs	r3, #1
 80076d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29a      	uxth	r2, r3
 80076de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	4313      	orrs	r3, r2
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007708:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800770a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d01b      	beq.n	800774a <USB_ActivateEndpoint+0x35e>
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007728:	843b      	strh	r3, [r7, #32]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	441a      	add	r2, r3
 8007734:	8c3b      	ldrh	r3, [r7, #32]
 8007736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800773a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800773e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007746:	b29b      	uxth	r3, r3
 8007748:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d124      	bne.n	800779c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007768:	83bb      	strh	r3, [r7, #28]
 800776a:	8bbb      	ldrh	r3, [r7, #28]
 800776c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007770:	83bb      	strh	r3, [r7, #28]
 8007772:	8bbb      	ldrh	r3, [r7, #28]
 8007774:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007778:	83bb      	strh	r3, [r7, #28]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	8bbb      	ldrh	r3, [r7, #28]
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
 800779a:	e306      	b.n	8007daa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b2:	83fb      	strh	r3, [r7, #30]
 80077b4:	8bfb      	ldrh	r3, [r7, #30]
 80077b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077ba:	83fb      	strh	r3, [r7, #30]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	8bfb      	ldrh	r3, [r7, #30]
 80077c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d8:	b29b      	uxth	r3, r3
 80077da:	8013      	strh	r3, [r2, #0]
 80077dc:	e2e5      	b.n	8007daa <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	78db      	ldrb	r3, [r3, #3]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d11e      	bne.n	8007824 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	441a      	add	r2, r3
 800780a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800780e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007816:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800781a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781e:	b29b      	uxth	r3, r3
 8007820:	8013      	strh	r3, [r2, #0]
 8007822:	e01d      	b.n	8007860 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	441a      	add	r2, r3
 8007848:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800784c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800785c:	b29b      	uxth	r3, r3
 800785e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800786a:	b29b      	uxth	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007870:	4413      	add	r3, r2
 8007872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	00da      	lsls	r2, r3, #3
 800787a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800787c:	4413      	add	r3, r2
 800787e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007882:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	891b      	ldrh	r3, [r3, #8]
 8007888:	085b      	lsrs	r3, r3, #1
 800788a:	b29b      	uxth	r3, r3
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	677b      	str	r3, [r7, #116]	@ 0x74
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078a4:	4413      	add	r3, r2
 80078a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	00da      	lsls	r2, r3, #3
 80078ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078b0:	4413      	add	r3, r2
 80078b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	895b      	ldrh	r3, [r3, #10]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078c6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 81af 	bne.w	8007c30 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80078e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80078e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01d      	beq.n	800792a <USB_ActivateEndpoint+0x53e>
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007904:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800791e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800793a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800793e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01d      	beq.n	8007982 <USB_ActivateEndpoint+0x596>
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	441a      	add	r2, r3
 800796a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800796e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800797a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800797e:	b29b      	uxth	r3, r3
 8007980:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d16b      	bne.n	8007a62 <USB_ActivateEndpoint+0x676>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007994:	b29b      	uxth	r3, r3
 8007996:	461a      	mov	r2, r3
 8007998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800799a:	4413      	add	r3, r2
 800799c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	00da      	lsls	r2, r3, #3
 80079a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079a6:	4413      	add	r3, r2
 80079a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079bc:	801a      	strh	r2, [r3, #0]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <USB_ActivateEndpoint+0x5f0>
 80079c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e05d      	b.n	8007a98 <USB_ActivateEndpoint+0x6ac>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80079e2:	d81c      	bhi.n	8007a1e <USB_ActivateEndpoint+0x632>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <USB_ActivateEndpoint+0x618>
 80079fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079fe:	3301      	adds	r3, #1
 8007a00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e03c      	b.n	8007a98 <USB_ActivateEndpoint+0x6ac>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 031f 	and.w	r3, r3, #31
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <USB_ActivateEndpoint+0x652>
 8007a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	029b      	lsls	r3, r3, #10
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	e01a      	b.n	8007a98 <USB_ActivateEndpoint+0x6ac>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d116      	bne.n	8007a98 <USB_ActivateEndpoint+0x6ac>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	461a      	mov	r2, r3
 8007a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a7a:	4413      	add	r3, r2
 8007a7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	00da      	lsls	r2, r3, #3
 8007a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a86:	4413      	add	r3, r2
 8007a88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a96:	801a      	strh	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d16b      	bne.n	8007b7c <USB_ActivateEndpoint+0x790>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab4:	4413      	add	r3, r2
 8007ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	00da      	lsls	r2, r3, #3
 8007abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <USB_ActivateEndpoint+0x70a>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	e05b      	b.n	8007bae <USB_ActivateEndpoint+0x7c2>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b3e      	cmp	r3, #62	@ 0x3e
 8007afc:	d81c      	bhi.n	8007b38 <USB_ActivateEndpoint+0x74c>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <USB_ActivateEndpoint+0x732>
 8007b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	029b      	lsls	r3, r3, #10
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e03a      	b.n	8007bae <USB_ActivateEndpoint+0x7c2>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <USB_ActivateEndpoint+0x76c>
 8007b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b52:	3b01      	subs	r3, #1
 8007b54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	029b      	lsls	r3, r3, #10
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e018      	b.n	8007bae <USB_ActivateEndpoint+0x7c2>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d114      	bne.n	8007bae <USB_ActivateEndpoint+0x7c2>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b90:	4413      	add	r3, r2
 8007b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	00da      	lsls	r2, r3, #3
 8007b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bac:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007bc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bc8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007bce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c0c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
 8007c2e:	e0bc      	b.n	8007daa <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007c40:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01d      	beq.n	8007c88 <USB_ActivateEndpoint+0x89c>
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c62:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	441a      	add	r2, r3
 8007c70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007c98:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01d      	beq.n	8007ce0 <USB_ActivateEndpoint+0x8f4>
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cba:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	78db      	ldrb	r3, [r3, #3]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d024      	beq.n	8007d32 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cfe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d06:	f083 0320 	eor.w	r3, r3, #32
 8007d0a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	441a      	add	r2, r3
 8007d18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	8013      	strh	r3, [r2, #0]
 8007d30:	e01d      	b.n	8007d6e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d48:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d84:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	441a      	add	r2, r3
 8007d92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007d96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007daa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	379c      	adds	r7, #156	@ 0x9c
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop

08007dbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b08d      	sub	sp, #52	@ 0x34
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	7b1b      	ldrb	r3, [r3, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 808e 	bne.w	8007eec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d044      	beq.n	8007e62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	81bb      	strh	r3, [r7, #12]
 8007de6:	89bb      	ldrh	r3, [r7, #12]
 8007de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01b      	beq.n	8007e28 <USB_DeactivateEndpoint+0x6c>
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e06:	817b      	strh	r3, [r7, #10]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	441a      	add	r2, r3
 8007e12:	897b      	ldrh	r3, [r7, #10]
 8007e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e3e:	813b      	strh	r3, [r7, #8]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	441a      	add	r2, r3
 8007e4a:	893b      	ldrh	r3, [r7, #8]
 8007e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	8013      	strh	r3, [r2, #0]
 8007e60:	e192      	b.n	8008188 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	827b      	strh	r3, [r7, #18]
 8007e70:	8a7b      	ldrh	r3, [r7, #18]
 8007e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01b      	beq.n	8007eb2 <USB_DeactivateEndpoint+0xf6>
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e90:	823b      	strh	r3, [r7, #16]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	441a      	add	r2, r3
 8007e9c:	8a3b      	ldrh	r3, [r7, #16]
 8007e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec8:	81fb      	strh	r3, [r7, #14]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	441a      	add	r2, r3
 8007ed4:	89fb      	ldrh	r3, [r7, #14]
 8007ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	8013      	strh	r3, [r2, #0]
 8007eea:	e14d      	b.n	8008188 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 80a5 	bne.w	8008040 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	843b      	strh	r3, [r7, #32]
 8007f04:	8c3b      	ldrh	r3, [r7, #32]
 8007f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01b      	beq.n	8007f46 <USB_DeactivateEndpoint+0x18a>
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f24:	83fb      	strh	r3, [r7, #30]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	8bfb      	ldrh	r3, [r7, #30]
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	83bb      	strh	r3, [r7, #28]
 8007f54:	8bbb      	ldrh	r3, [r7, #28]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01b      	beq.n	8007f96 <USB_DeactivateEndpoint+0x1da>
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f74:	837b      	strh	r3, [r7, #26]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	8b7b      	ldrh	r3, [r7, #26]
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fac:	833b      	strh	r3, [r7, #24]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	441a      	add	r2, r3
 8007fb8:	8b3b      	ldrh	r3, [r7, #24]
 8007fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe4:	82fb      	strh	r3, [r7, #22]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	441a      	add	r2, r3
 8007ff0:	8afb      	ldrh	r3, [r7, #22]
 8007ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008002:	b29b      	uxth	r3, r3
 8008004:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800801c:	82bb      	strh	r3, [r7, #20]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	441a      	add	r2, r3
 8008028:	8abb      	ldrh	r3, [r7, #20]
 800802a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800802e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803a:	b29b      	uxth	r3, r3
 800803c:	8013      	strh	r3, [r2, #0]
 800803e:	e0a3      	b.n	8008188 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800804e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <USB_DeactivateEndpoint+0x2d4>
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800806a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	441a      	add	r2, r3
 800807a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800807c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008084:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808c:	b29b      	uxth	r3, r3
 800808e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800809e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80080a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <USB_DeactivateEndpoint+0x324>
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	441a      	add	r2, r3
 80080ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80080cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080dc:	b29b      	uxth	r3, r3
 80080de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	441a      	add	r2, r3
 8008102:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800810c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008114:	b29b      	uxth	r3, r3
 8008116:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800812a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800812e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800813c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800814c:	b29b      	uxth	r3, r3
 800814e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008166:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	441a      	add	r2, r3
 8008172:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800817c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008184:	b29b      	uxth	r3, r3
 8008186:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3734      	adds	r7, #52	@ 0x34
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b0ac      	sub	sp, #176	@ 0xb0
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	785b      	ldrb	r3, [r3, #1]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	f040 84ca 	bne.w	8008b3e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d904      	bls.n	80081c0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081be:	e003      	b.n	80081c8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	7b1b      	ldrb	r3, [r3, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d122      	bne.n	8008216 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	6959      	ldr	r1, [r3, #20]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	88da      	ldrh	r2, [r3, #6]
 80081d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081dc:	b29b      	uxth	r3, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 febd 	bl	8008f5e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	4413      	add	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	00da      	lsls	r2, r3, #3
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	4413      	add	r3, r2
 8008202:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800820c:	b29a      	uxth	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	f000 bc6f 	b.w	8008af4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	78db      	ldrb	r3, [r3, #3]
 800821a:	2b02      	cmp	r3, #2
 800821c:	f040 831e 	bne.w	800885c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	6a1a      	ldr	r2, [r3, #32]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	429a      	cmp	r2, r3
 800822a:	f240 82cf 	bls.w	80087cc <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008244:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	441a      	add	r2, r3
 8008252:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800825a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800825e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008266:	b29b      	uxth	r3, r3
 8008268:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	6a1a      	ldr	r2, [r3, #32]
 800826e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 814f 	beq.w	800852e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	633b      	str	r3, [r7, #48]	@ 0x30
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d16b      	bne.n	8008374 <USB_EPStartXfer+0x1de>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ac:	4413      	add	r3, r2
 80082ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	00da      	lsls	r2, r3, #3
 80082b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b8:	4413      	add	r3, r2
 80082ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082be:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <USB_EPStartXfer+0x158>
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	e05b      	b.n	80083a6 <USB_EPStartXfer+0x210>
 80082ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80082f4:	d81c      	bhi.n	8008330 <USB_EPStartXfer+0x19a>
 80082f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d004      	beq.n	8008316 <USB_EPStartXfer+0x180>
 800830c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008310:	3301      	adds	r3, #1
 8008312:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29a      	uxth	r2, r3
 800831c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008320:	b29b      	uxth	r3, r3
 8008322:	029b      	lsls	r3, r3, #10
 8008324:	b29b      	uxth	r3, r3
 8008326:	4313      	orrs	r3, r2
 8008328:	b29a      	uxth	r2, r3
 800832a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	e03a      	b.n	80083a6 <USB_EPStartXfer+0x210>
 8008330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800833a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800833e:	f003 031f 	and.w	r3, r3, #31
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <USB_EPStartXfer+0x1ba>
 8008346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800834a:	3b01      	subs	r3, #1
 800834c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29a      	uxth	r2, r3
 8008356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800835a:	b29b      	uxth	r3, r3
 800835c:	029b      	lsls	r3, r3, #10
 800835e:	b29b      	uxth	r3, r3
 8008360:	4313      	orrs	r3, r2
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836c:	b29a      	uxth	r2, r3
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	e018      	b.n	80083a6 <USB_EPStartXfer+0x210>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d114      	bne.n	80083a6 <USB_EPStartXfer+0x210>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008382:	b29b      	uxth	r3, r3
 8008384:	461a      	mov	r2, r3
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	4413      	add	r3, r2
 800838a:	633b      	str	r3, [r7, #48]	@ 0x30
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	00da      	lsls	r2, r3, #3
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	4413      	add	r3, r2
 8008396:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800839a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800839c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	895b      	ldrh	r3, [r3, #10]
 80083aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6959      	ldr	r1, [r3, #20]
 80083b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fdce 	bl	8008f5e <USB_WritePMA>
            ep->xfer_buff += len;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695a      	ldr	r2, [r3, #20]
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ca:	441a      	add	r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d907      	bls.n	80083ec <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	621a      	str	r2, [r3, #32]
 80083ea:	e006      	b.n	80083fa <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2200      	movs	r2, #0
 80083f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d16b      	bne.n	80084da <USB_EPStartXfer+0x344>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	61bb      	str	r3, [r7, #24]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800840c:	b29b      	uxth	r3, r3
 800840e:	461a      	mov	r2, r3
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	4413      	add	r3, r2
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	00da      	lsls	r2, r3, #3
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	4413      	add	r3, r2
 8008420:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008430:	b29a      	uxth	r2, r3
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <USB_EPStartXfer+0x2be>
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800844c:	b29a      	uxth	r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	e05d      	b.n	8008510 <USB_EPStartXfer+0x37a>
 8008454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008458:	2b3e      	cmp	r3, #62	@ 0x3e
 800845a:	d81c      	bhi.n	8008496 <USB_EPStartXfer+0x300>
 800845c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <USB_EPStartXfer+0x2e6>
 8008472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008476:	3301      	adds	r3, #1
 8008478:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008486:	b29b      	uxth	r3, r3
 8008488:	029b      	lsls	r3, r3, #10
 800848a:	b29b      	uxth	r3, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	b29a      	uxth	r2, r3
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	e03c      	b.n	8008510 <USB_EPStartXfer+0x37a>
 8008496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <USB_EPStartXfer+0x320>
 80084ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084b0:	3b01      	subs	r3, #1
 80084b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	029b      	lsls	r3, r3, #10
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	801a      	strh	r2, [r3, #0]
 80084d8:	e01a      	b.n	8008510 <USB_EPStartXfer+0x37a>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d116      	bne.n	8008510 <USB_EPStartXfer+0x37a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	623b      	str	r3, [r7, #32]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	4413      	add	r3, r2
 80084f4:	623b      	str	r3, [r7, #32]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	00da      	lsls	r2, r3, #3
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	4413      	add	r3, r2
 8008500:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800850a:	b29a      	uxth	r2, r3
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	891b      	ldrh	r3, [r3, #8]
 8008514:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	6959      	ldr	r1, [r3, #20]
 800851c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008520:	b29b      	uxth	r3, r3
 8008522:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fd19 	bl	8008f5e <USB_WritePMA>
 800852c:	e2e2      	b.n	8008af4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d16b      	bne.n	800860e <USB_EPStartXfer+0x478>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008540:	b29b      	uxth	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008546:	4413      	add	r3, r2
 8008548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	00da      	lsls	r2, r3, #3
 8008550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008552:	4413      	add	r3, r2
 8008554:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008558:	647b      	str	r3, [r7, #68]	@ 0x44
 800855a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008564:	b29a      	uxth	r2, r3
 8008566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <USB_EPStartXfer+0x3f2>
 8008572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008580:	b29a      	uxth	r2, r3
 8008582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008584:	801a      	strh	r2, [r3, #0]
 8008586:	e05d      	b.n	8008644 <USB_EPStartXfer+0x4ae>
 8008588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800858c:	2b3e      	cmp	r3, #62	@ 0x3e
 800858e:	d81c      	bhi.n	80085ca <USB_EPStartXfer+0x434>
 8008590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800859a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <USB_EPStartXfer+0x41a>
 80085a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085aa:	3301      	adds	r3, #1
 80085ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	029b      	lsls	r3, r3, #10
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e03c      	b.n	8008644 <USB_EPStartXfer+0x4ae>
 80085ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ce:	095b      	lsrs	r3, r3, #5
 80085d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USB_EPStartXfer+0x454>
 80085e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	029b      	lsls	r3, r3, #10
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008606:	b29a      	uxth	r2, r3
 8008608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800860a:	801a      	strh	r2, [r3, #0]
 800860c:	e01a      	b.n	8008644 <USB_EPStartXfer+0x4ae>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d116      	bne.n	8008644 <USB_EPStartXfer+0x4ae>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	653b      	str	r3, [r7, #80]	@ 0x50
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008620:	b29b      	uxth	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008626:	4413      	add	r3, r2
 8008628:	653b      	str	r3, [r7, #80]	@ 0x50
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	00da      	lsls	r2, r3, #3
 8008630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008632:	4413      	add	r3, r2
 8008634:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800863a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800863e:	b29a      	uxth	r2, r3
 8008640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008642:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	891b      	ldrh	r3, [r3, #8]
 8008648:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	6959      	ldr	r1, [r3, #20]
 8008650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008654:	b29b      	uxth	r3, r3
 8008656:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fc7f 	bl	8008f5e <USB_WritePMA>
            ep->xfer_buff += len;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008668:	441a      	add	r2, r3
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	6a1a      	ldr	r2, [r3, #32]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	429a      	cmp	r2, r3
 8008678:	d907      	bls.n	800868a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6a1a      	ldr	r2, [r3, #32]
 800867e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	621a      	str	r2, [r3, #32]
 8008688:	e006      	b.n	8008698 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	643b      	str	r3, [r7, #64]	@ 0x40
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d16b      	bne.n	800877c <USB_EPStartXfer+0x5e6>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	461a      	mov	r2, r3
 80086b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b4:	4413      	add	r3, r2
 80086b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	00da      	lsls	r2, r3, #3
 80086be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c0:	4413      	add	r3, r2
 80086c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <USB_EPStartXfer+0x560>
 80086e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	e05b      	b.n	80087ae <USB_EPStartXfer+0x618>
 80086f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80086fc:	d81c      	bhi.n	8008738 <USB_EPStartXfer+0x5a2>
 80086fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008702:	085b      	lsrs	r3, r3, #1
 8008704:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <USB_EPStartXfer+0x588>
 8008714:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008718:	3301      	adds	r3, #1
 800871a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800871e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29a      	uxth	r2, r3
 8008724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008728:	b29b      	uxth	r3, r3
 800872a:	029b      	lsls	r3, r3, #10
 800872c:	b29b      	uxth	r3, r3
 800872e:	4313      	orrs	r3, r2
 8008730:	b29a      	uxth	r2, r3
 8008732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008734:	801a      	strh	r2, [r3, #0]
 8008736:	e03a      	b.n	80087ae <USB_EPStartXfer+0x618>
 8008738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008746:	f003 031f 	and.w	r3, r3, #31
 800874a:	2b00      	cmp	r3, #0
 800874c:	d104      	bne.n	8008758 <USB_EPStartXfer+0x5c2>
 800874e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008752:	3b01      	subs	r3, #1
 8008754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29a      	uxth	r2, r3
 800875e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008762:	b29b      	uxth	r3, r3
 8008764:	029b      	lsls	r3, r3, #10
 8008766:	b29b      	uxth	r3, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008774:	b29a      	uxth	r2, r3
 8008776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e018      	b.n	80087ae <USB_EPStartXfer+0x618>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d114      	bne.n	80087ae <USB_EPStartXfer+0x618>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800878a:	b29b      	uxth	r3, r3
 800878c:	461a      	mov	r2, r3
 800878e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008790:	4413      	add	r3, r2
 8008792:	643b      	str	r3, [r7, #64]	@ 0x40
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	00da      	lsls	r2, r3, #3
 800879a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800879c:	4413      	add	r3, r2
 800879e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	895b      	ldrh	r3, [r3, #10]
 80087b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6959      	ldr	r1, [r3, #20]
 80087ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fbca 	bl	8008f5e <USB_WritePMA>
 80087ca:	e193      	b.n	8008af4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80087e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	441a      	add	r2, r3
 80087f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80087fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880c:	b29b      	uxth	r3, r3
 800880e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800881a:	b29b      	uxth	r3, r3
 800881c:	461a      	mov	r2, r3
 800881e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008820:	4413      	add	r3, r2
 8008822:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	00da      	lsls	r2, r3, #3
 800882a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800882c:	4413      	add	r3, r2
 800882e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008838:	b29a      	uxth	r2, r3
 800883a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800883c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	891b      	ldrh	r3, [r3, #8]
 8008842:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	6959      	ldr	r1, [r3, #20]
 800884a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800884e:	b29b      	uxth	r3, r3
 8008850:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fb82 	bl	8008f5e <USB_WritePMA>
 800885a:	e14b      	b.n	8008af4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	6a1a      	ldr	r2, [r3, #32]
 8008860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008864:	1ad2      	subs	r2, r2, r3
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29b      	uxth	r3, r3
 8008878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 809a 	beq.w	80089b6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	673b      	str	r3, [r7, #112]	@ 0x70
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d16b      	bne.n	8008966 <USB_EPStartXfer+0x7d0>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008898:	b29b      	uxth	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800889e:	4413      	add	r3, r2
 80088a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	00da      	lsls	r2, r3, #3
 80088a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088aa:	4413      	add	r3, r2
 80088ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80088b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088bc:	b29a      	uxth	r2, r3
 80088be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088c0:	801a      	strh	r2, [r3, #0]
 80088c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <USB_EPStartXfer+0x74a>
 80088ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d8:	b29a      	uxth	r2, r3
 80088da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088dc:	801a      	strh	r2, [r3, #0]
 80088de:	e05b      	b.n	8008998 <USB_EPStartXfer+0x802>
 80088e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80088e6:	d81c      	bhi.n	8008922 <USB_EPStartXfer+0x78c>
 80088e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ec:	085b      	lsrs	r3, r3, #1
 80088ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d004      	beq.n	8008908 <USB_EPStartXfer+0x772>
 80088fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008902:	3301      	adds	r3, #1
 8008904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29a      	uxth	r2, r3
 800890e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008912:	b29b      	uxth	r3, r3
 8008914:	029b      	lsls	r3, r3, #10
 8008916:	b29b      	uxth	r3, r3
 8008918:	4313      	orrs	r3, r2
 800891a:	b29a      	uxth	r2, r3
 800891c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800891e:	801a      	strh	r2, [r3, #0]
 8008920:	e03a      	b.n	8008998 <USB_EPStartXfer+0x802>
 8008922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800892c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <USB_EPStartXfer+0x7ac>
 8008938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800893c:	3b01      	subs	r3, #1
 800893e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29a      	uxth	r2, r3
 8008948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800894c:	b29b      	uxth	r3, r3
 800894e:	029b      	lsls	r3, r3, #10
 8008950:	b29b      	uxth	r3, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	b29b      	uxth	r3, r3
 8008956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895e:	b29a      	uxth	r2, r3
 8008960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	e018      	b.n	8008998 <USB_EPStartXfer+0x802>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	785b      	ldrb	r3, [r3, #1]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d114      	bne.n	8008998 <USB_EPStartXfer+0x802>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008974:	b29b      	uxth	r3, r3
 8008976:	461a      	mov	r2, r3
 8008978:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800897a:	4413      	add	r3, r2
 800897c:	673b      	str	r3, [r7, #112]	@ 0x70
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	00da      	lsls	r2, r3, #3
 8008984:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008986:	4413      	add	r3, r2
 8008988:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800898c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800898e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008992:	b29a      	uxth	r2, r3
 8008994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008996:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	895b      	ldrh	r3, [r3, #10]
 800899c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	6959      	ldr	r1, [r3, #20]
 80089a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fad5 	bl	8008f5e <USB_WritePMA>
 80089b4:	e09e      	b.n	8008af4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d16b      	bne.n	8008a96 <USB_EPStartXfer+0x900>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089ce:	4413      	add	r3, r2
 80089d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	00da      	lsls	r2, r3, #3
 80089d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089da:	4413      	add	r3, r2
 80089dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <USB_EPStartXfer+0x87a>
 80089fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	e063      	b.n	8008ad8 <USB_EPStartXfer+0x942>
 8008a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a14:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a16:	d81c      	bhi.n	8008a52 <USB_EPStartXfer+0x8bc>
 8008a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a1c:	085b      	lsrs	r3, r3, #1
 8008a1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <USB_EPStartXfer+0x8a2>
 8008a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a32:	3301      	adds	r3, #1
 8008a34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	029b      	lsls	r3, r3, #10
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	e042      	b.n	8008ad8 <USB_EPStartXfer+0x942>
 8008a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a56:	095b      	lsrs	r3, r3, #5
 8008a58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d104      	bne.n	8008a72 <USB_EPStartXfer+0x8dc>
 8008a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	029b      	lsls	r3, r3, #10
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a92:	801a      	strh	r2, [r3, #0]
 8008a94:	e020      	b.n	8008ad8 <USB_EPStartXfer+0x942>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d11c      	bne.n	8008ad8 <USB_EPStartXfer+0x942>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	00da      	lsls	r2, r3, #3
 8008abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ad6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	891b      	ldrh	r3, [r3, #8]
 8008adc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6959      	ldr	r1, [r3, #20]
 8008ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa35 	bl	8008f5e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b0a:	817b      	strh	r3, [r7, #10]
 8008b0c:	897b      	ldrh	r3, [r7, #10]
 8008b0e:	f083 0310 	eor.w	r3, r3, #16
 8008b12:	817b      	strh	r3, [r7, #10]
 8008b14:	897b      	ldrh	r3, [r7, #10]
 8008b16:	f083 0320 	eor.w	r3, r3, #32
 8008b1a:	817b      	strh	r3, [r7, #10]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	441a      	add	r2, r3
 8008b26:	897b      	ldrh	r3, [r7, #10]
 8008b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	8013      	strh	r3, [r2, #0]
 8008b3c:	e0d5      	b.n	8008cea <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	7b1b      	ldrb	r3, [r3, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d156      	bne.n	8008bf4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d122      	bne.n	8008b94 <USB_EPStartXfer+0x9fe>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	78db      	ldrb	r3, [r3, #3]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d11e      	bne.n	8008b94 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	441a      	add	r2, r3
 8008b7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	8013      	strh	r3, [r2, #0]
 8008b92:	e01d      	b.n	8008bd0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008baa:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	441a      	add	r2, r3
 8008bb8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	699a      	ldr	r2, [r3, #24]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d907      	bls.n	8008bec <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699a      	ldr	r2, [r3, #24]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	1ad2      	subs	r2, r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	619a      	str	r2, [r3, #24]
 8008bea:	e054      	b.n	8008c96 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	619a      	str	r2, [r3, #24]
 8008bf2:	e050      	b.n	8008c96 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	78db      	ldrb	r3, [r3, #3]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d142      	bne.n	8008c82 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d048      	beq.n	8008c96 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c14:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <USB_EPStartXfer+0xa96>
 8008c20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10b      	bne.n	8008c44 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c2c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d12e      	bne.n	8008c96 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c38:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d128      	bne.n	8008c96 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	441a      	add	r2, r3
 8008c68:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	8013      	strh	r3, [r2, #0]
 8008c80:	e009      	b.n	8008c96 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	78db      	ldrb	r3, [r3, #3]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d103      	bne.n	8008c92 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	619a      	str	r2, [r3, #24]
 8008c90:	e001      	b.n	8008c96 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e02a      	b.n	8008cec <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008cb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008cb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cb8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008cbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008cc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008cc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	441a      	add	r2, r3
 8008cd2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	37b0      	adds	r7, #176	@ 0xb0
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d020      	beq.n	8008d48 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d1c:	81bb      	strh	r3, [r7, #12]
 8008d1e:	89bb      	ldrh	r3, [r7, #12]
 8008d20:	f083 0310 	eor.w	r3, r3, #16
 8008d24:	81bb      	strh	r3, [r7, #12]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	441a      	add	r2, r3
 8008d30:	89bb      	ldrh	r3, [r7, #12]
 8008d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	8013      	strh	r3, [r2, #0]
 8008d46:	e01f      	b.n	8008d88 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d5e:	81fb      	strh	r3, [r7, #14]
 8008d60:	89fb      	ldrh	r3, [r7, #14]
 8008d62:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d66:	81fb      	strh	r3, [r7, #14]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	441a      	add	r2, r3
 8008d72:	89fb      	ldrh	r3, [r7, #14]
 8008d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b087      	sub	sp, #28
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d04c      	beq.n	8008e42 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	823b      	strh	r3, [r7, #16]
 8008db6:	8a3b      	ldrh	r3, [r7, #16]
 8008db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01b      	beq.n	8008df8 <USB_EPClearStall+0x62>
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd6:	81fb      	strh	r3, [r7, #14]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	441a      	add	r2, r3
 8008de2:	89fb      	ldrh	r3, [r7, #14]
 8008de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008df0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	78db      	ldrb	r3, [r3, #3]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d06c      	beq.n	8008eda <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e16:	81bb      	strh	r3, [r7, #12]
 8008e18:	89bb      	ldrh	r3, [r7, #12]
 8008e1a:	f083 0320 	eor.w	r3, r3, #32
 8008e1e:	81bb      	strh	r3, [r7, #12]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	89bb      	ldrh	r3, [r7, #12]
 8008e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	8013      	strh	r3, [r2, #0]
 8008e40:	e04b      	b.n	8008eda <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	82fb      	strh	r3, [r7, #22]
 8008e50:	8afb      	ldrh	r3, [r7, #22]
 8008e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01b      	beq.n	8008e92 <USB_EPClearStall+0xfc>
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e70:	82bb      	strh	r3, [r7, #20]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	441a      	add	r2, r3
 8008e7c:	8abb      	ldrh	r3, [r7, #20]
 8008e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea8:	827b      	strh	r3, [r7, #18]
 8008eaa:	8a7b      	ldrh	r3, [r7, #18]
 8008eac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008eb0:	827b      	strh	r3, [r7, #18]
 8008eb2:	8a7b      	ldrh	r3, [r7, #18]
 8008eb4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008eb8:	827b      	strh	r3, [r7, #18]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	441a      	add	r2, r3
 8008ec4:	8a7b      	ldrh	r3, [r7, #18]
 8008ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d103      	bne.n	8008f02 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2280      	movs	r2, #128	@ 0x80
 8008efe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b085      	sub	sp, #20
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f50:	68fb      	ldr	r3, [r7, #12]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b08b      	sub	sp, #44	@ 0x2c
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	4611      	mov	r1, r2
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	80fb      	strh	r3, [r7, #6]
 8008f70:	4613      	mov	r3, r2
 8008f72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f74:	88bb      	ldrh	r3, [r7, #4]
 8008f76:	3301      	adds	r3, #1
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f84:	88fa      	ldrh	r2, [r7, #6]
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f8e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f94:	e01c      	b.n	8008fd0 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b21b      	sxth	r3, r3
 8008fa4:	021b      	lsls	r3, r3, #8
 8008fa6:	b21a      	sxth	r2, r3
 8008fa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	b21b      	sxth	r3, r3
 8008fb0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	8a7a      	ldrh	r2, [r7, #18]
 8008fb6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	3302      	adds	r3, #2
 8008fbc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1df      	bne.n	8008f96 <USB_WritePMA+0x38>
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	bf00      	nop
 8008fda:	372c      	adds	r7, #44	@ 0x2c
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b08b      	sub	sp, #44	@ 0x2c
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4611      	mov	r1, r2
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	80fb      	strh	r3, [r7, #6]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ffa:	88bb      	ldrh	r3, [r7, #4]
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800900a:	88fa      	ldrh	r2, [r7, #6]
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009014:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	627b      	str	r3, [r7, #36]	@ 0x24
 800901a:	e018      	b.n	800904e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	3302      	adds	r3, #2
 8009028:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	3301      	adds	r3, #1
 8009036:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	b2da      	uxtb	r2, r3
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	3301      	adds	r3, #1
 8009046:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	3b01      	subs	r3, #1
 800904c:	627b      	str	r3, [r7, #36]	@ 0x24
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e3      	bne.n	800901c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009054:	88bb      	ldrh	r3, [r7, #4]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	b29b      	uxth	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d007      	beq.n	8009070 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	b2da      	uxtb	r2, r3
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	701a      	strb	r2, [r3, #0]
  }
}
 8009070:	bf00      	nop
 8009072:	372c      	adds	r7, #44	@ 0x2c
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009088:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800908c:	f004 ff9c 	bl	800dfc8 <USBD_static_malloc>
 8009090:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80090a0:	2302      	movs	r3, #2
 80090a2:	e066      	b.n	8009172 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7c1b      	ldrb	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d119      	bne.n	80090e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090b8:	2202      	movs	r2, #2
 80090ba:	2181      	movs	r1, #129	@ 0x81
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f004 fe2a 	bl	800dd16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090cc:	2202      	movs	r2, #2
 80090ce:	2101      	movs	r1, #1
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f004 fe20 	bl	800dd16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2210      	movs	r2, #16
 80090e2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80090e6:	e016      	b.n	8009116 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090e8:	2340      	movs	r3, #64	@ 0x40
 80090ea:	2202      	movs	r2, #2
 80090ec:	2181      	movs	r1, #129	@ 0x81
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f004 fe11 	bl	800dd16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090fa:	2340      	movs	r3, #64	@ 0x40
 80090fc:	2202      	movs	r2, #2
 80090fe:	2101      	movs	r1, #1
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f004 fe08 	bl	800dd16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2210      	movs	r2, #16
 8009112:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009116:	2308      	movs	r3, #8
 8009118:	2203      	movs	r2, #3
 800911a:	2182      	movs	r1, #130	@ 0x82
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f004 fdfa 	bl	800dd16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7c1b      	ldrb	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009152:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009156:	2101      	movs	r1, #1
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f004 fecb 	bl	800def4 <USBD_LL_PrepareReceive>
 800915e:	e007      	b.n	8009170 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009166:	2340      	movs	r3, #64	@ 0x40
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f004 fec2 	bl	800def4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009186:	2181      	movs	r1, #129	@ 0x81
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f004 fdea 	bl	800dd62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009194:	2101      	movs	r1, #1
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f004 fde3 	bl	800dd62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091a4:	2182      	movs	r1, #130	@ 0x82
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f004 fddb 	bl	800dd62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00e      	beq.n	80091e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091d6:	4618      	mov	r0, r3
 80091d8:	f004 ff04 	bl	800dfe4 <USBD_static_free>
    pdev->pClassData = NULL;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009200:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009214:	2303      	movs	r3, #3
 8009216:	e0af      	b.n	8009378 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009220:	2b00      	cmp	r3, #0
 8009222:	d03f      	beq.n	80092a4 <USBD_CDC_Setup+0xb4>
 8009224:	2b20      	cmp	r3, #32
 8009226:	f040 809f 	bne.w	8009368 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	88db      	ldrh	r3, [r3, #6]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d02e      	beq.n	8009290 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b25b      	sxtb	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	da16      	bge.n	800926a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009248:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	88d2      	ldrh	r2, [r2, #6]
 800924e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	88db      	ldrh	r3, [r3, #6]
 8009254:	2b07      	cmp	r3, #7
 8009256:	bf28      	it	cs
 8009258:	2307      	movcs	r3, #7
 800925a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	89fa      	ldrh	r2, [r7, #14]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 facf 	bl	800a806 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009268:	e085      	b.n	8009376 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	785a      	ldrb	r2, [r3, #1]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	88db      	ldrh	r3, [r3, #6]
 8009278:	b2da      	uxtb	r2, r3
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009280:	6939      	ldr	r1, [r7, #16]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	88db      	ldrh	r3, [r3, #6]
 8009286:	461a      	mov	r2, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fae8 	bl	800a85e <USBD_CtlPrepareRx>
      break;
 800928e:	e072      	b.n	8009376 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	7850      	ldrb	r0, [r2, #1]
 800929c:	2200      	movs	r2, #0
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	4798      	blx	r3
      break;
 80092a2:	e068      	b.n	8009376 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b0b      	cmp	r3, #11
 80092aa:	d852      	bhi.n	8009352 <USBD_CDC_Setup+0x162>
 80092ac:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <USBD_CDC_Setup+0xc4>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	080092e5 	.word	0x080092e5
 80092b8:	08009361 	.word	0x08009361
 80092bc:	08009353 	.word	0x08009353
 80092c0:	08009353 	.word	0x08009353
 80092c4:	08009353 	.word	0x08009353
 80092c8:	08009353 	.word	0x08009353
 80092cc:	08009353 	.word	0x08009353
 80092d0:	08009353 	.word	0x08009353
 80092d4:	08009353 	.word	0x08009353
 80092d8:	08009353 	.word	0x08009353
 80092dc:	0800930f 	.word	0x0800930f
 80092e0:	08009339 	.word	0x08009339
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d107      	bne.n	8009300 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092f0:	f107 030a 	add.w	r3, r7, #10
 80092f4:	2202      	movs	r2, #2
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 fa84 	bl	800a806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092fe:	e032      	b.n	8009366 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 fa0e 	bl	800a724 <USBD_CtlError>
            ret = USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	75fb      	strb	r3, [r7, #23]
          break;
 800930c:	e02b      	b.n	8009366 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b03      	cmp	r3, #3
 8009318:	d107      	bne.n	800932a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800931a:	f107 030d 	add.w	r3, r7, #13
 800931e:	2201      	movs	r2, #1
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fa6f 	bl	800a806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009328:	e01d      	b.n	8009366 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 f9f9 	bl	800a724 <USBD_CtlError>
            ret = USBD_FAIL;
 8009332:	2303      	movs	r3, #3
 8009334:	75fb      	strb	r3, [r7, #23]
          break;
 8009336:	e016      	b.n	8009366 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b03      	cmp	r3, #3
 8009342:	d00f      	beq.n	8009364 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 f9ec 	bl	800a724 <USBD_CtlError>
            ret = USBD_FAIL;
 800934c:	2303      	movs	r3, #3
 800934e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009350:	e008      	b.n	8009364 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f9e5 	bl	800a724 <USBD_CtlError>
          ret = USBD_FAIL;
 800935a:	2303      	movs	r3, #3
 800935c:	75fb      	strb	r3, [r7, #23]
          break;
 800935e:	e002      	b.n	8009366 <USBD_CDC_Setup+0x176>
          break;
 8009360:	bf00      	nop
 8009362:	e008      	b.n	8009376 <USBD_CDC_Setup+0x186>
          break;
 8009364:	bf00      	nop
      }
      break;
 8009366:	e006      	b.n	8009376 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 f9da 	bl	800a724 <USBD_CtlError>
      ret = USBD_FAIL;
 8009370:	2303      	movs	r3, #3
 8009372:	75fb      	strb	r3, [r7, #23]
      break;
 8009374:	bf00      	nop
  }

  return (uint8_t)ret;
 8009376:	7dfb      	ldrb	r3, [r7, #23]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	e04f      	b.n	8009442 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	3318      	adds	r3, #24
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d029      	beq.n	8009414 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80093c0:	78fa      	ldrb	r2, [r7, #3]
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	3318      	adds	r3, #24
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	78f9      	ldrb	r1, [r7, #3]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	460b      	mov	r3, r1
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4403      	add	r3, r0
 80093e0:	3320      	adds	r3, #32
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80093e8:	fb01 f303 	mul.w	r3, r1, r3
 80093ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d110      	bne.n	8009414 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	440b      	add	r3, r1
 8009400:	3318      	adds	r3, #24
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009406:	78f9      	ldrb	r1, [r7, #3]
 8009408:	2300      	movs	r3, #0
 800940a:	2200      	movs	r2, #0
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f004 fd50 	bl	800deb2 <USBD_LL_Transmit>
 8009412:	e015      	b.n	8009440 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800945c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	e015      	b.n	8009498 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f004 fd60 	bl	800df36 <USBD_LL_GetRxDataSize>
 8009476:	4602      	mov	r2, r0
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009492:	4611      	mov	r1, r2
 8009494:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e01a      	b.n	80094f0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d014      	beq.n	80094ee <USBD_CDC_EP0_RxReady+0x4e>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80094ca:	2bff      	cmp	r3, #255	@ 0xff
 80094cc:	d00f      	beq.n	80094ee <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80094dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	22ff      	movs	r2, #255	@ 0xff
 80094ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2243      	movs	r2, #67	@ 0x43
 8009504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009506:	4b03      	ldr	r3, [pc, #12]	@ (8009514 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	20000094 	.word	0x20000094

08009518 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2243      	movs	r2, #67	@ 0x43
 8009524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009526:	4b03      	ldr	r3, [pc, #12]	@ (8009534 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	20000050 	.word	0x20000050

08009538 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2243      	movs	r2, #67	@ 0x43
 8009544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009546:	4b03      	ldr	r3, [pc, #12]	@ (8009554 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	200000d8 	.word	0x200000d8

08009558 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	220a      	movs	r2, #10
 8009564:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009566:	4b03      	ldr	r3, [pc, #12]	@ (8009574 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	2000000c 	.word	0x2000000c

08009578 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009588:	2303      	movs	r3, #3
 800958a:	e004      	b.n	8009596 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b087      	sub	sp, #28
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80095bc:	2303      	movs	r3, #3
 80095be:	e008      	b.n	80095d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80095de:	b480      	push	{r7}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e004      	b.n	8009604 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800961e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009620:	2301      	movs	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800962e:	2303      	movs	r3, #3
 8009630:	e01a      	b.n	8009668 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009638:	2b00      	cmp	r3, #0
 800963a:	d114      	bne.n	8009666 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2201      	movs	r2, #1
 8009640:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800965a:	2181      	movs	r1, #129	@ 0x81
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f004 fc28 	bl	800deb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800967e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800968a:	2303      	movs	r3, #3
 800968c:	e016      	b.n	80096bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	7c1b      	ldrb	r3, [r3, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800969c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096a0:	2101      	movs	r1, #1
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f004 fc26 	bl	800def4 <USBD_LL_PrepareReceive>
 80096a8:	e007      	b.n	80096ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096b0:	2340      	movs	r3, #64	@ 0x40
 80096b2:	2101      	movs	r1, #1
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f004 fc1d 	bl	800def4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80096d8:	2303      	movs	r3, #3
 80096da:	e01f      	b.n	800971c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	79fa      	ldrb	r2, [r7, #7]
 800970e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f004 fa85 	bl	800dc20 <USBD_LL_Init>
 8009716:	4603      	mov	r3, r0
 8009718:	75fb      	strb	r3, [r7, #23]

  return ret;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009738:	2303      	movs	r3, #3
 800973a:	e016      	b.n	800976a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800974a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009758:	f107 020e 	add.w	r2, r7, #14
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	4602      	mov	r2, r0
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f004 fab0 	bl	800dce0 <USBD_LL_Start>
 8009780:	4603      	mov	r3, r0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80097ac:	2303      	movs	r3, #3
 80097ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d009      	beq.n	80097ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	78fa      	ldrb	r2, [r7, #3]
 80097c4:	4611      	mov	r1, r2
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	4798      	blx	r3
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	78fa      	ldrb	r2, [r7, #3]
 80097f8:	4611      	mov	r1, r2
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
  }

  return USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 ff48 	bl	800a6b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800982e:	461a      	mov	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800983c:	f003 031f 	and.w	r3, r3, #31
 8009840:	2b02      	cmp	r3, #2
 8009842:	d01a      	beq.n	800987a <USBD_LL_SetupStage+0x72>
 8009844:	2b02      	cmp	r3, #2
 8009846:	d822      	bhi.n	800988e <USBD_LL_SetupStage+0x86>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <USBD_LL_SetupStage+0x4a>
 800984c:	2b01      	cmp	r3, #1
 800984e:	d00a      	beq.n	8009866 <USBD_LL_SetupStage+0x5e>
 8009850:	e01d      	b.n	800988e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f9f0 	bl	8009c40 <USBD_StdDevReq>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
      break;
 8009864:	e020      	b.n	80098a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa54 	bl	8009d1c <USBD_StdItfReq>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
      break;
 8009878:	e016      	b.n	80098a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa93 	bl	8009dae <USBD_StdEPReq>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
      break;
 800988c:	e00c      	b.n	80098a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009894:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009898:	b2db      	uxtb	r3, r3
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f004 fa7f 	bl	800dda0 <USBD_LL_StallEP>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
      break;
 80098a6:	bf00      	nop
  }

  return ret;
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	460b      	mov	r3, r1
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80098c0:	7afb      	ldrb	r3, [r7, #11]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d138      	bne.n	8009938 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80098cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d14a      	bne.n	800996e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d913      	bls.n	800990c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	1ad2      	subs	r2, r2, r3
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	68da      	ldr	r2, [r3, #12]
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	bf28      	it	cs
 80098fe:	4613      	movcs	r3, r2
 8009900:	461a      	mov	r2, r3
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 ffc7 	bl	800a898 <USBD_CtlContinueRx>
 800990a:	e030      	b.n	800996e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b03      	cmp	r3, #3
 8009916:	d10b      	bne.n	8009930 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 ffc2 	bl	800a8ba <USBD_CtlSendStatus>
 8009936:	e01a      	b.n	800996e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b03      	cmp	r3, #3
 8009942:	d114      	bne.n	800996e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	7afa      	ldrb	r2, [r7, #11]
 800995a:	4611      	mov	r1, r2
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	4798      	blx	r3
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	e000      	b.n	8009970 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	460b      	mov	r3, r1
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d16b      	bne.n	8009a64 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3314      	adds	r3, #20
 8009990:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009998:	2b02      	cmp	r3, #2
 800999a:	d156      	bne.n	8009a4a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d914      	bls.n	80099d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	1ad2      	subs	r2, r2, r3
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 ff3c 	bl	800a83c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099c4:	2300      	movs	r3, #0
 80099c6:	2200      	movs	r2, #0
 80099c8:	2100      	movs	r1, #0
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f004 fa92 	bl	800def4 <USBD_LL_PrepareReceive>
 80099d0:	e03b      	b.n	8009a4a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d11c      	bne.n	8009a18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d316      	bcc.n	8009a18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d20f      	bcs.n	8009a18 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099f8:	2200      	movs	r2, #0
 80099fa:	2100      	movs	r1, #0
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 ff1d 	bl	800a83c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2100      	movs	r1, #0
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f004 fa6f 	bl	800def4 <USBD_LL_PrepareReceive>
 8009a16:	e018      	b.n	8009a4a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d10b      	bne.n	8009a3c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a3c:	2180      	movs	r1, #128	@ 0x80
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f004 f9ae 	bl	800dda0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 ff4b 	bl	800a8e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d122      	bne.n	8009a9a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f7ff fe98 	bl	800978a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a62:	e01a      	b.n	8009a9a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d114      	bne.n	8009a9a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00e      	beq.n	8009a9a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	7afa      	ldrb	r2, [r7, #11]
 8009a86:	4611      	mov	r1, r2
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	4798      	blx	r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	e000      	b.n	8009a9c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e02f      	b.n	8009b38 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00f      	beq.n	8009b02 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d009      	beq.n	8009b02 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6852      	ldr	r2, [r2, #4]
 8009afa:	b2d2      	uxtb	r2, r2
 8009afc:	4611      	mov	r1, r2
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b02:	2340      	movs	r3, #64	@ 0x40
 8009b04:	2200      	movs	r2, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f004 f904 	bl	800dd16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2240      	movs	r2, #64	@ 0x40
 8009b1a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b1e:	2340      	movs	r3, #64	@ 0x40
 8009b20:	2200      	movs	r2, #0
 8009b22:	2180      	movs	r1, #128	@ 0x80
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f004 f8f6 	bl	800dd16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2240      	movs	r2, #64	@ 0x40
 8009b34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	78fa      	ldrb	r2, [r7, #3]
 8009b50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2204      	movs	r2, #4
 8009b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d106      	bne.n	8009bae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e012      	b.n	8009bf8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d10b      	bne.n	8009bf6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d005      	beq.n	8009bf6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	3301      	adds	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	b21a      	sxth	r2, r3
 8009c26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	b21b      	sxth	r3, r3
 8009c2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c30:	89fb      	ldrh	r3, [r7, #14]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	371c      	adds	r7, #28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
	...

08009c40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c56:	2b40      	cmp	r3, #64	@ 0x40
 8009c58:	d005      	beq.n	8009c66 <USBD_StdDevReq+0x26>
 8009c5a:	2b40      	cmp	r3, #64	@ 0x40
 8009c5c:	d853      	bhi.n	8009d06 <USBD_StdDevReq+0xc6>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00b      	beq.n	8009c7a <USBD_StdDevReq+0x3a>
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	d14f      	bne.n	8009d06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	4798      	blx	r3
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
      break;
 8009c78:	e04a      	b.n	8009d10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b09      	cmp	r3, #9
 8009c80:	d83b      	bhi.n	8009cfa <USBD_StdDevReq+0xba>
 8009c82:	a201      	add	r2, pc, #4	@ (adr r2, 8009c88 <USBD_StdDevReq+0x48>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009cf1 	.word	0x08009cf1
 8009c90:	08009cfb 	.word	0x08009cfb
 8009c94:	08009ce7 	.word	0x08009ce7
 8009c98:	08009cfb 	.word	0x08009cfb
 8009c9c:	08009cbb 	.word	0x08009cbb
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cfb 	.word	0x08009cfb
 8009ca8:	08009cd3 	.word	0x08009cd3
 8009cac:	08009cc5 	.word	0x08009cc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f9de 	bl	800a074 <USBD_GetDescriptor>
          break;
 8009cb8:	e024      	b.n	8009d04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fb6d 	bl	800a39c <USBD_SetAddress>
          break;
 8009cc2:	e01f      	b.n	8009d04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fbac 	bl	800a424 <USBD_SetConfig>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]
          break;
 8009cd0:	e018      	b.n	8009d04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fc4b 	bl	800a570 <USBD_GetConfig>
          break;
 8009cda:	e013      	b.n	8009d04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fc7c 	bl	800a5dc <USBD_GetStatus>
          break;
 8009ce4:	e00e      	b.n	8009d04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fcab 	bl	800a644 <USBD_SetFeature>
          break;
 8009cee:	e009      	b.n	8009d04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fcba 	bl	800a66c <USBD_ClrFeature>
          break;
 8009cf8:	e004      	b.n	8009d04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fd11 	bl	800a724 <USBD_CtlError>
          break;
 8009d02:	bf00      	nop
      }
      break;
 8009d04:	e004      	b.n	8009d10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fd0b 	bl	800a724 <USBD_CtlError>
      break;
 8009d0e:	bf00      	nop
  }

  return ret;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop

08009d1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d32:	2b40      	cmp	r3, #64	@ 0x40
 8009d34:	d005      	beq.n	8009d42 <USBD_StdItfReq+0x26>
 8009d36:	2b40      	cmp	r3, #64	@ 0x40
 8009d38:	d82f      	bhi.n	8009d9a <USBD_StdItfReq+0x7e>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <USBD_StdItfReq+0x26>
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	d12b      	bne.n	8009d9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d81d      	bhi.n	8009d8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	889b      	ldrh	r3, [r3, #4]
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d813      	bhi.n	8009d82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	4798      	blx	r3
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	88db      	ldrh	r3, [r3, #6]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d110      	bne.n	8009d96 <USBD_StdItfReq+0x7a>
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10d      	bne.n	8009d96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fd9d 	bl	800a8ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d80:	e009      	b.n	8009d96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fccd 	bl	800a724 <USBD_CtlError>
          break;
 8009d8a:	e004      	b.n	8009d96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fcc8 	bl	800a724 <USBD_CtlError>
          break;
 8009d94:	e000      	b.n	8009d98 <USBD_StdItfReq+0x7c>
          break;
 8009d96:	bf00      	nop
      }
      break;
 8009d98:	e004      	b.n	8009da4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fcc1 	bl	800a724 <USBD_CtlError>
      break;
 8009da2:	bf00      	nop
  }

  return ret;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	889b      	ldrh	r3, [r3, #4]
 8009dc0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dca:	2b40      	cmp	r3, #64	@ 0x40
 8009dcc:	d007      	beq.n	8009dde <USBD_StdEPReq+0x30>
 8009dce:	2b40      	cmp	r3, #64	@ 0x40
 8009dd0:	f200 8145 	bhi.w	800a05e <USBD_StdEPReq+0x2b0>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00c      	beq.n	8009df2 <USBD_StdEPReq+0x44>
 8009dd8:	2b20      	cmp	r3, #32
 8009dda:	f040 8140 	bne.w	800a05e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	6839      	ldr	r1, [r7, #0]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	4798      	blx	r3
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]
      break;
 8009df0:	e13a      	b.n	800a068 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	785b      	ldrb	r3, [r3, #1]
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d007      	beq.n	8009e0a <USBD_StdEPReq+0x5c>
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	f300 8129 	bgt.w	800a052 <USBD_StdEPReq+0x2a4>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d07f      	beq.n	8009f04 <USBD_StdEPReq+0x156>
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d03c      	beq.n	8009e82 <USBD_StdEPReq+0xd4>
 8009e08:	e123      	b.n	800a052 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d002      	beq.n	8009e1c <USBD_StdEPReq+0x6e>
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d016      	beq.n	8009e48 <USBD_StdEPReq+0x9a>
 8009e1a:	e02c      	b.n	8009e76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00d      	beq.n	8009e3e <USBD_StdEPReq+0x90>
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b80      	cmp	r3, #128	@ 0x80
 8009e26:	d00a      	beq.n	8009e3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f003 ffb7 	bl	800dda0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e32:	2180      	movs	r1, #128	@ 0x80
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f003 ffb3 	bl	800dda0 <USBD_LL_StallEP>
 8009e3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e3c:	e020      	b.n	8009e80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fc6f 	bl	800a724 <USBD_CtlError>
              break;
 8009e46:	e01b      	b.n	8009e80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	885b      	ldrh	r3, [r3, #2]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10e      	bne.n	8009e6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00b      	beq.n	8009e6e <USBD_StdEPReq+0xc0>
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b80      	cmp	r3, #128	@ 0x80
 8009e5a:	d008      	beq.n	8009e6e <USBD_StdEPReq+0xc0>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	88db      	ldrh	r3, [r3, #6]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f003 ff99 	bl	800dda0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fd23 	bl	800a8ba <USBD_CtlSendStatus>

              break;
 8009e74:	e004      	b.n	8009e80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fc53 	bl	800a724 <USBD_CtlError>
              break;
 8009e7e:	bf00      	nop
          }
          break;
 8009e80:	e0ec      	b.n	800a05c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d002      	beq.n	8009e94 <USBD_StdEPReq+0xe6>
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d016      	beq.n	8009ec0 <USBD_StdEPReq+0x112>
 8009e92:	e030      	b.n	8009ef6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00d      	beq.n	8009eb6 <USBD_StdEPReq+0x108>
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b80      	cmp	r3, #128	@ 0x80
 8009e9e:	d00a      	beq.n	8009eb6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f003 ff7b 	bl	800dda0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eaa:	2180      	movs	r1, #128	@ 0x80
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f003 ff77 	bl	800dda0 <USBD_LL_StallEP>
 8009eb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009eb4:	e025      	b.n	8009f02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fc33 	bl	800a724 <USBD_CtlError>
              break;
 8009ebe:	e020      	b.n	8009f02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	885b      	ldrh	r3, [r3, #2]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d11b      	bne.n	8009f00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ec8:	7bbb      	ldrb	r3, [r7, #14]
 8009eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d004      	beq.n	8009edc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f003 ff81 	bl	800ddde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fcec 	bl	800a8ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	4798      	blx	r3
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009ef4:	e004      	b.n	8009f00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fc13 	bl	800a724 <USBD_CtlError>
              break;
 8009efe:	e000      	b.n	8009f02 <USBD_StdEPReq+0x154>
              break;
 8009f00:	bf00      	nop
          }
          break;
 8009f02:	e0ab      	b.n	800a05c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d002      	beq.n	8009f16 <USBD_StdEPReq+0x168>
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d032      	beq.n	8009f7a <USBD_StdEPReq+0x1cc>
 8009f14:	e097      	b.n	800a046 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d007      	beq.n	8009f2c <USBD_StdEPReq+0x17e>
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b80      	cmp	r3, #128	@ 0x80
 8009f20:	d004      	beq.n	8009f2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fbfd 	bl	800a724 <USBD_CtlError>
                break;
 8009f2a:	e091      	b.n	800a050 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	da0b      	bge.n	8009f4c <USBD_StdEPReq+0x19e>
 8009f34:	7bbb      	ldrb	r3, [r7, #14]
 8009f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	3310      	adds	r3, #16
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	4413      	add	r3, r2
 8009f48:	3304      	adds	r3, #4
 8009f4a:	e00b      	b.n	8009f64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	3304      	adds	r3, #4
 8009f64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fc47 	bl	800a806 <USBD_CtlSendData>
              break;
 8009f78:	e06a      	b.n	800a050 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da11      	bge.n	8009fa6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	f003 020f 	and.w	r2, r3, #15
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	3324      	adds	r3, #36	@ 0x24
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d117      	bne.n	8009fcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fbc0 	bl	800a724 <USBD_CtlError>
                  break;
 8009fa4:	e054      	b.n	800a050 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	f003 020f 	and.w	r2, r3, #15
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d104      	bne.n	8009fcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fbad 	bl	800a724 <USBD_CtlError>
                  break;
 8009fca:	e041      	b.n	800a050 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	da0b      	bge.n	8009fec <USBD_StdEPReq+0x23e>
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	3310      	adds	r3, #16
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	3304      	adds	r3, #4
 8009fea:	e00b      	b.n	800a004 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	4413      	add	r3, r2
 800a002:	3304      	adds	r3, #4
 800a004:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <USBD_StdEPReq+0x264>
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	2b80      	cmp	r3, #128	@ 0x80
 800a010:	d103      	bne.n	800a01a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	e00e      	b.n	800a038 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f003 fefc 	bl	800de1c <USBD_LL_IsStallEP>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2201      	movs	r2, #1
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	e002      	b.n	800a038 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2202      	movs	r2, #2
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fbe1 	bl	800a806 <USBD_CtlSendData>
              break;
 800a044:	e004      	b.n	800a050 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fb6b 	bl	800a724 <USBD_CtlError>
              break;
 800a04e:	bf00      	nop
          }
          break;
 800a050:	e004      	b.n	800a05c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fb65 	bl	800a724 <USBD_CtlError>
          break;
 800a05a:	bf00      	nop
      }
      break;
 800a05c:	e004      	b.n	800a068 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fb5f 	bl	800a724 <USBD_CtlError>
      break;
 800a066:	bf00      	nop
  }

  return ret;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a07e:	2300      	movs	r3, #0
 800a080:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	885b      	ldrh	r3, [r3, #2]
 800a08e:	0a1b      	lsrs	r3, r3, #8
 800a090:	b29b      	uxth	r3, r3
 800a092:	3b01      	subs	r3, #1
 800a094:	2b0e      	cmp	r3, #14
 800a096:	f200 8152 	bhi.w	800a33e <USBD_GetDescriptor+0x2ca>
 800a09a:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a0 <USBD_GetDescriptor+0x2c>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a111 	.word	0x0800a111
 800a0a4:	0800a129 	.word	0x0800a129
 800a0a8:	0800a169 	.word	0x0800a169
 800a0ac:	0800a33f 	.word	0x0800a33f
 800a0b0:	0800a33f 	.word	0x0800a33f
 800a0b4:	0800a2df 	.word	0x0800a2df
 800a0b8:	0800a30b 	.word	0x0800a30b
 800a0bc:	0800a33f 	.word	0x0800a33f
 800a0c0:	0800a33f 	.word	0x0800a33f
 800a0c4:	0800a33f 	.word	0x0800a33f
 800a0c8:	0800a33f 	.word	0x0800a33f
 800a0cc:	0800a33f 	.word	0x0800a33f
 800a0d0:	0800a33f 	.word	0x0800a33f
 800a0d4:	0800a33f 	.word	0x0800a33f
 800a0d8:	0800a0dd 	.word	0x0800a0dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	7c12      	ldrb	r2, [r2, #16]
 800a0f4:	f107 0108 	add.w	r1, r7, #8
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	4798      	blx	r3
 800a0fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0fe:	e126      	b.n	800a34e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fb0e 	bl	800a724 <USBD_CtlError>
        err++;
 800a108:	7afb      	ldrb	r3, [r7, #11]
 800a10a:	3301      	adds	r3, #1
 800a10c:	72fb      	strb	r3, [r7, #11]
      break;
 800a10e:	e11e      	b.n	800a34e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	7c12      	ldrb	r2, [r2, #16]
 800a11c:	f107 0108 	add.w	r1, r7, #8
 800a120:	4610      	mov	r0, r2
 800a122:	4798      	blx	r3
 800a124:	60f8      	str	r0, [r7, #12]
      break;
 800a126:	e112      	b.n	800a34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7c1b      	ldrb	r3, [r3, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10d      	bne.n	800a14c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a138:	f107 0208 	add.w	r2, r7, #8
 800a13c:	4610      	mov	r0, r2
 800a13e:	4798      	blx	r3
 800a140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	3301      	adds	r3, #1
 800a146:	2202      	movs	r2, #2
 800a148:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a14a:	e100      	b.n	800a34e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a154:	f107 0208 	add.w	r2, r7, #8
 800a158:	4610      	mov	r0, r2
 800a15a:	4798      	blx	r3
 800a15c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3301      	adds	r3, #1
 800a162:	2202      	movs	r2, #2
 800a164:	701a      	strb	r2, [r3, #0]
      break;
 800a166:	e0f2      	b.n	800a34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	885b      	ldrh	r3, [r3, #2]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b05      	cmp	r3, #5
 800a170:	f200 80ac 	bhi.w	800a2cc <USBD_GetDescriptor+0x258>
 800a174:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <USBD_GetDescriptor+0x108>)
 800a176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17a:	bf00      	nop
 800a17c:	0800a195 	.word	0x0800a195
 800a180:	0800a1c9 	.word	0x0800a1c9
 800a184:	0800a1fd 	.word	0x0800a1fd
 800a188:	0800a231 	.word	0x0800a231
 800a18c:	0800a265 	.word	0x0800a265
 800a190:	0800a299 	.word	0x0800a299
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00b      	beq.n	800a1b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	7c12      	ldrb	r2, [r2, #16]
 800a1ac:	f107 0108 	add.w	r1, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1b6:	e091      	b.n	800a2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fab2 	bl	800a724 <USBD_CtlError>
            err++;
 800a1c0:	7afb      	ldrb	r3, [r7, #11]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1c6:	e089      	b.n	800a2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7c12      	ldrb	r2, [r2, #16]
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ea:	e077      	b.n	800a2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa98 	bl	800a724 <USBD_CtlError>
            err++;
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1fa:	e06f      	b.n	800a2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7c12      	ldrb	r2, [r2, #16]
 800a214:	f107 0108 	add.w	r1, r7, #8
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21e:	e05d      	b.n	800a2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fa7e 	bl	800a724 <USBD_CtlError>
            err++;
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	3301      	adds	r3, #1
 800a22c:	72fb      	strb	r3, [r7, #11]
          break;
 800a22e:	e055      	b.n	800a2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	7c12      	ldrb	r2, [r2, #16]
 800a248:	f107 0108 	add.w	r1, r7, #8
 800a24c:	4610      	mov	r0, r2
 800a24e:	4798      	blx	r3
 800a250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a252:	e043      	b.n	800a2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa64 	bl	800a724 <USBD_CtlError>
            err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
          break;
 800a262:	e03b      	b.n	800a2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	7c12      	ldrb	r2, [r2, #16]
 800a27c:	f107 0108 	add.w	r1, r7, #8
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a286:	e029      	b.n	800a2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa4a 	bl	800a724 <USBD_CtlError>
            err++;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	3301      	adds	r3, #1
 800a294:	72fb      	strb	r3, [r7, #11]
          break;
 800a296:	e021      	b.n	800a2dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	7c12      	ldrb	r2, [r2, #16]
 800a2b0:	f107 0108 	add.w	r1, r7, #8
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ba:	e00f      	b.n	800a2dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa30 	bl	800a724 <USBD_CtlError>
            err++;
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ca:	e007      	b.n	800a2dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa28 	bl	800a724 <USBD_CtlError>
          err++;
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a2da:	bf00      	nop
      }
      break;
 800a2dc:	e037      	b.n	800a34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	7c1b      	ldrb	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d109      	bne.n	800a2fa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ee:	f107 0208 	add.w	r2, r7, #8
 800a2f2:	4610      	mov	r0, r2
 800a2f4:	4798      	blx	r3
 800a2f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2f8:	e029      	b.n	800a34e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fa11 	bl	800a724 <USBD_CtlError>
        err++;
 800a302:	7afb      	ldrb	r3, [r7, #11]
 800a304:	3301      	adds	r3, #1
 800a306:	72fb      	strb	r3, [r7, #11]
      break;
 800a308:	e021      	b.n	800a34e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7c1b      	ldrb	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10d      	bne.n	800a32e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31a:	f107 0208 	add.w	r2, r7, #8
 800a31e:	4610      	mov	r0, r2
 800a320:	4798      	blx	r3
 800a322:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3301      	adds	r3, #1
 800a328:	2207      	movs	r2, #7
 800a32a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a32c:	e00f      	b.n	800a34e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f9f7 	bl	800a724 <USBD_CtlError>
        err++;
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	3301      	adds	r3, #1
 800a33a:	72fb      	strb	r3, [r7, #11]
      break;
 800a33c:	e007      	b.n	800a34e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f9ef 	bl	800a724 <USBD_CtlError>
      err++;
 800a346:	7afb      	ldrb	r3, [r7, #11]
 800a348:	3301      	adds	r3, #1
 800a34a:	72fb      	strb	r3, [r7, #11]
      break;
 800a34c:	bf00      	nop
  }

  if (err != 0U)
 800a34e:	7afb      	ldrb	r3, [r7, #11]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d11e      	bne.n	800a392 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	88db      	ldrh	r3, [r3, #6]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d016      	beq.n	800a38a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a35c:	893b      	ldrh	r3, [r7, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00e      	beq.n	800a380 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	88da      	ldrh	r2, [r3, #6]
 800a366:	893b      	ldrh	r3, [r7, #8]
 800a368:	4293      	cmp	r3, r2
 800a36a:	bf28      	it	cs
 800a36c:	4613      	movcs	r3, r2
 800a36e:	b29b      	uxth	r3, r3
 800a370:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a372:	893b      	ldrh	r3, [r7, #8]
 800a374:	461a      	mov	r2, r3
 800a376:	68f9      	ldr	r1, [r7, #12]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fa44 	bl	800a806 <USBD_CtlSendData>
 800a37e:	e009      	b.n	800a394 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f9ce 	bl	800a724 <USBD_CtlError>
 800a388:	e004      	b.n	800a394 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fa95 	bl	800a8ba <USBD_CtlSendStatus>
 800a390:	e000      	b.n	800a394 <USBD_GetDescriptor+0x320>
    return;
 800a392:	bf00      	nop
  }
}
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop

0800a39c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	889b      	ldrh	r3, [r3, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d131      	bne.n	800a412 <USBD_SetAddress+0x76>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	88db      	ldrh	r3, [r3, #6]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d12d      	bne.n	800a412 <USBD_SetAddress+0x76>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	885b      	ldrh	r3, [r3, #2]
 800a3ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3bc:	d829      	bhi.n	800a412 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	885b      	ldrh	r3, [r3, #2]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d104      	bne.n	800a3e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f9a3 	bl	800a724 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3de:	e01d      	b.n	800a41c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7bfa      	ldrb	r2, [r7, #15]
 800a3e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f003 fd41 	bl	800de74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fa61 	bl	800a8ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d004      	beq.n	800a408 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2202      	movs	r2, #2
 800a402:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a406:	e009      	b.n	800a41c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a410:	e004      	b.n	800a41c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f985 	bl	800a724 <USBD_CtlError>
  }
}
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	885b      	ldrh	r3, [r3, #2]
 800a436:	b2da      	uxtb	r2, r3
 800a438:	4b4c      	ldr	r3, [pc, #304]	@ (800a56c <USBD_SetConfig+0x148>)
 800a43a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a43c:	4b4b      	ldr	r3, [pc, #300]	@ (800a56c <USBD_SetConfig+0x148>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d905      	bls.n	800a450 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f96c 	bl	800a724 <USBD_CtlError>
    return USBD_FAIL;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e088      	b.n	800a562 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d002      	beq.n	800a462 <USBD_SetConfig+0x3e>
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d025      	beq.n	800a4ac <USBD_SetConfig+0x88>
 800a460:	e071      	b.n	800a546 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a462:	4b42      	ldr	r3, [pc, #264]	@ (800a56c <USBD_SetConfig+0x148>)
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d01c      	beq.n	800a4a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a46a:	4b40      	ldr	r3, [pc, #256]	@ (800a56c <USBD_SetConfig+0x148>)
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a474:	4b3d      	ldr	r3, [pc, #244]	@ (800a56c <USBD_SetConfig+0x148>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff f990 	bl	80097a0 <USBD_SetClassConfig>
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d004      	beq.n	800a494 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f949 	bl	800a724 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a492:	e065      	b.n	800a560 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fa10 	bl	800a8ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2203      	movs	r2, #3
 800a49e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4a2:	e05d      	b.n	800a560 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fa08 	bl	800a8ba <USBD_CtlSendStatus>
      break;
 800a4aa:	e059      	b.n	800a560 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4ac:	4b2f      	ldr	r3, [pc, #188]	@ (800a56c <USBD_SetConfig+0x148>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d112      	bne.n	800a4da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a4bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a56c <USBD_SetConfig+0x148>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4c6:	4b29      	ldr	r3, [pc, #164]	@ (800a56c <USBD_SetConfig+0x148>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff f983 	bl	80097d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f9f1 	bl	800a8ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4d8:	e042      	b.n	800a560 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a4da:	4b24      	ldr	r3, [pc, #144]	@ (800a56c <USBD_SetConfig+0x148>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d02a      	beq.n	800a53e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff f971 	bl	80097d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800a56c <USBD_SetConfig+0x148>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a500:	4b1a      	ldr	r3, [pc, #104]	@ (800a56c <USBD_SetConfig+0x148>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff f94a 	bl	80097a0 <USBD_SetClassConfig>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00f      	beq.n	800a536 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f903 	bl	800a724 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	b2db      	uxtb	r3, r3
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff f956 	bl	80097d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a534:	e014      	b.n	800a560 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9bf 	bl	800a8ba <USBD_CtlSendStatus>
      break;
 800a53c:	e010      	b.n	800a560 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f9bb 	bl	800a8ba <USBD_CtlSendStatus>
      break;
 800a544:	e00c      	b.n	800a560 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f8eb 	bl	800a724 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a54e:	4b07      	ldr	r3, [pc, #28]	@ (800a56c <USBD_SetConfig+0x148>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff f93f 	bl	80097d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a55a:	2303      	movs	r3, #3
 800a55c:	73fb      	strb	r3, [r7, #15]
      break;
 800a55e:	bf00      	nop
  }

  return ret;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000534 	.word	0x20000534

0800a570 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	88db      	ldrh	r3, [r3, #6]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d004      	beq.n	800a58c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f8cd 	bl	800a724 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a58a:	e023      	b.n	800a5d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b02      	cmp	r3, #2
 800a596:	dc02      	bgt.n	800a59e <USBD_GetConfig+0x2e>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dc03      	bgt.n	800a5a4 <USBD_GetConfig+0x34>
 800a59c:	e015      	b.n	800a5ca <USBD_GetConfig+0x5a>
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d00b      	beq.n	800a5ba <USBD_GetConfig+0x4a>
 800a5a2:	e012      	b.n	800a5ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f927 	bl	800a806 <USBD_CtlSendData>
        break;
 800a5b8:	e00c      	b.n	800a5d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	2201      	movs	r2, #1
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f91f 	bl	800a806 <USBD_CtlSendData>
        break;
 800a5c8:	e004      	b.n	800a5d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f8a9 	bl	800a724 <USBD_CtlError>
        break;
 800a5d2:	bf00      	nop
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d81e      	bhi.n	800a632 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	88db      	ldrh	r3, [r3, #6]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d004      	beq.n	800a606 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f890 	bl	800a724 <USBD_CtlError>
        break;
 800a604:	e01a      	b.n	800a63c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f043 0202 	orr.w	r2, r3, #2
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	330c      	adds	r3, #12
 800a626:	2202      	movs	r2, #2
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f8eb 	bl	800a806 <USBD_CtlSendData>
      break;
 800a630:	e004      	b.n	800a63c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f875 	bl	800a724 <USBD_CtlError>
      break;
 800a63a:	bf00      	nop
  }
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	885b      	ldrh	r3, [r3, #2]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d106      	bne.n	800a664 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f92b 	bl	800a8ba <USBD_CtlSendStatus>
  }
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	3b01      	subs	r3, #1
 800a680:	2b02      	cmp	r3, #2
 800a682:	d80b      	bhi.n	800a69c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	885b      	ldrh	r3, [r3, #2]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d10c      	bne.n	800a6a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f910 	bl	800a8ba <USBD_CtlSendStatus>
      }
      break;
 800a69a:	e004      	b.n	800a6a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f840 	bl	800a724 <USBD_CtlError>
      break;
 800a6a4:	e000      	b.n	800a6a8 <USBD_ClrFeature+0x3c>
      break;
 800a6a6:	bf00      	nop
  }
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	781a      	ldrb	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	781a      	ldrb	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff fa90 	bl	8009c00 <SWAPBYTE>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f7ff fa83 	bl	8009c00 <SWAPBYTE>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3301      	adds	r3, #1
 800a706:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3301      	adds	r3, #1
 800a70c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff fa76 	bl	8009c00 <SWAPBYTE>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	80da      	strh	r2, [r3, #6]
}
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a72e:	2180      	movs	r1, #128	@ 0x80
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f003 fb35 	bl	800dda0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a736:	2100      	movs	r1, #0
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f003 fb31 	bl	800dda0 <USBD_LL_StallEP>
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b086      	sub	sp, #24
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d036      	beq.n	800a7ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a760:	6938      	ldr	r0, [r7, #16]
 800a762:	f000 f836 	bl	800a7d2 <USBD_GetLen>
 800a766:	4603      	mov	r3, r0
 800a768:	3301      	adds	r3, #1
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	4413      	add	r3, r2
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	7812      	ldrb	r2, [r2, #0]
 800a77e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a780:	7dfb      	ldrb	r3, [r7, #23]
 800a782:	3301      	adds	r3, #1
 800a784:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	4413      	add	r3, r2
 800a78c:	2203      	movs	r2, #3
 800a78e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	3301      	adds	r3, #1
 800a794:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a796:	e013      	b.n	800a7c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4413      	add	r3, r2
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	7812      	ldrb	r2, [r2, #0]
 800a7a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	613b      	str	r3, [r7, #16]
    idx++;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a7b0:	7dfb      	ldrb	r3, [r7, #23]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	701a      	strb	r2, [r3, #0]
    idx++;
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1e7      	bne.n	800a798 <USBD_GetString+0x52>
 800a7c8:	e000      	b.n	800a7cc <USBD_GetString+0x86>
    return;
 800a7ca:	bf00      	nop
  }
}
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b085      	sub	sp, #20
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7e2:	e005      	b.n	800a7f0 <USBD_GetLen+0x1e>
  {
    len++;
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1f5      	bne.n	800a7e4 <USBD_GetLen+0x12>
  }

  return len;
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2202      	movs	r2, #2
 800a816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	2100      	movs	r1, #0
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f003 fb40 	bl	800deb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	2100      	movs	r1, #0
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f003 fb2f 	bl	800deb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2203      	movs	r2, #3
 800a86e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	2100      	movs	r1, #0
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f003 fb33 	bl	800def4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f003 fb22 	bl	800def4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2204      	movs	r2, #4
 800a8c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f003 faee 	bl	800deb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2205      	movs	r2, #5
 800a8ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f003 fafc 	bl	800def4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <__NVIC_SetPriority>:
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db0a      	blt.n	800a932 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	490c      	ldr	r1, [pc, #48]	@ (800a954 <__NVIC_SetPriority+0x4c>)
 800a922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a926:	0112      	lsls	r2, r2, #4
 800a928:	b2d2      	uxtb	r2, r2
 800a92a:	440b      	add	r3, r1
 800a92c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a930:	e00a      	b.n	800a948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	b2da      	uxtb	r2, r3
 800a936:	4908      	ldr	r1, [pc, #32]	@ (800a958 <__NVIC_SetPriority+0x50>)
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	f003 030f 	and.w	r3, r3, #15
 800a93e:	3b04      	subs	r3, #4
 800a940:	0112      	lsls	r2, r2, #4
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	440b      	add	r3, r1
 800a946:	761a      	strb	r2, [r3, #24]
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	e000e100 	.word	0xe000e100
 800a958:	e000ed00 	.word	0xe000ed00

0800a95c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a960:	4b05      	ldr	r3, [pc, #20]	@ (800a978 <SysTick_Handler+0x1c>)
 800a962:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a964:	f001 fdf6 	bl	800c554 <xTaskGetSchedulerState>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d001      	beq.n	800a972 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a96e:	f002 fbeb 	bl	800d148 <xPortSysTickHandler>
  }
}
 800a972:	bf00      	nop
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	e000e010 	.word	0xe000e010

0800a97c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a980:	2100      	movs	r1, #0
 800a982:	f06f 0004 	mvn.w	r0, #4
 800a986:	f7ff ffbf 	bl	800a908 <__NVIC_SetPriority>
#endif
}
 800a98a:	bf00      	nop
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a996:	f3ef 8305 	mrs	r3, IPSR
 800a99a:	603b      	str	r3, [r7, #0]
  return(result);
 800a99c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a9a2:	f06f 0305 	mvn.w	r3, #5
 800a9a6:	607b      	str	r3, [r7, #4]
 800a9a8:	e00c      	b.n	800a9c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a9d4 <osKernelInitialize+0x44>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d105      	bne.n	800a9be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9b2:	4b08      	ldr	r3, [pc, #32]	@ (800a9d4 <osKernelInitialize+0x44>)
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	e002      	b.n	800a9c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9c4:	687b      	ldr	r3, [r7, #4]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	20000538 	.word	0x20000538

0800a9d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9de:	f3ef 8305 	mrs	r3, IPSR
 800a9e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a9e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a9ea:	f06f 0305 	mvn.w	r3, #5
 800a9ee:	607b      	str	r3, [r7, #4]
 800a9f0:	e010      	b.n	800aa14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800aa20 <osKernelStart+0x48>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d109      	bne.n	800aa0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a9fa:	f7ff ffbf 	bl	800a97c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a9fe:	4b08      	ldr	r3, [pc, #32]	@ (800aa20 <osKernelStart+0x48>)
 800aa00:	2202      	movs	r2, #2
 800aa02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa04:	f001 f942 	bl	800bc8c <vTaskStartScheduler>
      stat = osOK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	e002      	b.n	800aa14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa0e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa14:	687b      	ldr	r3, [r7, #4]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000538 	.word	0x20000538

0800aa24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08e      	sub	sp, #56	@ 0x38
 800aa28:	af04      	add	r7, sp, #16
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa34:	f3ef 8305 	mrs	r3, IPSR
 800aa38:	617b      	str	r3, [r7, #20]
  return(result);
 800aa3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d17f      	bne.n	800ab40 <osThreadNew+0x11c>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d07c      	beq.n	800ab40 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800aa46:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800aa4a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aa4c:	2318      	movs	r3, #24
 800aa4e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aa50:	2300      	movs	r3, #0
 800aa52:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d045      	beq.n	800aaec <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <osThreadNew+0x4a>
        name = attr->name;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d002      	beq.n	800aa7c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d008      	beq.n	800aa94 <osThreadNew+0x70>
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	2b38      	cmp	r3, #56	@ 0x38
 800aa86:	d805      	bhi.n	800aa94 <osThreadNew+0x70>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <osThreadNew+0x74>
        return (NULL);
 800aa94:	2300      	movs	r3, #0
 800aa96:	e054      	b.n	800ab42 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d003      	beq.n	800aaa8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	089b      	lsrs	r3, r3, #2
 800aaa6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00e      	beq.n	800aace <osThreadNew+0xaa>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	2ba7      	cmp	r3, #167	@ 0xa7
 800aab6:	d90a      	bls.n	800aace <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d006      	beq.n	800aace <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <osThreadNew+0xaa>
        mem = 1;
 800aac8:	2301      	movs	r3, #1
 800aaca:	61bb      	str	r3, [r7, #24]
 800aacc:	e010      	b.n	800aaf0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10c      	bne.n	800aaf0 <osThreadNew+0xcc>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d108      	bne.n	800aaf0 <osThreadNew+0xcc>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d104      	bne.n	800aaf0 <osThreadNew+0xcc>
          mem = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61bb      	str	r3, [r7, #24]
 800aaea:	e001      	b.n	800aaf0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d110      	bne.n	800ab18 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aafe:	9202      	str	r2, [sp, #8]
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6a3a      	ldr	r2, [r7, #32]
 800ab0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 fec9 	bl	800b8a4 <xTaskCreateStatic>
 800ab12:	4603      	mov	r3, r0
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	e013      	b.n	800ab40 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d110      	bne.n	800ab40 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	f107 0310 	add.w	r3, r7, #16
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 ff17 	bl	800b964 <xTaskCreate>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d001      	beq.n	800ab40 <osThreadNew+0x11c>
            hTask = NULL;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab40:	693b      	ldr	r3, [r7, #16]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3728      	adds	r7, #40	@ 0x28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab52:	f3ef 8305 	mrs	r3, IPSR
 800ab56:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <osDelay+0x1c>
    stat = osErrorISR;
 800ab5e:	f06f 0305 	mvn.w	r3, #5
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e007      	b.n	800ab76 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 f855 	bl	800bc20 <vTaskDelay>
    }
  }

  return (stat);
 800ab76:	68fb      	ldr	r3, [r7, #12]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08a      	sub	sp, #40	@ 0x28
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab90:	f3ef 8305 	mrs	r3, IPSR
 800ab94:	613b      	str	r3, [r7, #16]
  return(result);
 800ab96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d15f      	bne.n	800ac5c <osMessageQueueNew+0xdc>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d05c      	beq.n	800ac5c <osMessageQueueNew+0xdc>
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d059      	beq.n	800ac5c <osMessageQueueNew+0xdc>
    mem = -1;
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295
 800abac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d029      	beq.n	800ac08 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d012      	beq.n	800abe2 <osMessageQueueNew+0x62>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b4f      	cmp	r3, #79	@ 0x4f
 800abc2:	d90e      	bls.n	800abe2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00a      	beq.n	800abe2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	695a      	ldr	r2, [r3, #20]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	429a      	cmp	r2, r3
 800abda:	d302      	bcc.n	800abe2 <osMessageQueueNew+0x62>
        mem = 1;
 800abdc:	2301      	movs	r3, #1
 800abde:	61bb      	str	r3, [r7, #24]
 800abe0:	e014      	b.n	800ac0c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d110      	bne.n	800ac0c <osMessageQueueNew+0x8c>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10c      	bne.n	800ac0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d108      	bne.n	800ac0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d104      	bne.n	800ac0c <osMessageQueueNew+0x8c>
          mem = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	61bb      	str	r3, [r7, #24]
 800ac06:	e001      	b.n	800ac0c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d10b      	bne.n	800ac2a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	691a      	ldr	r2, [r3, #16]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	9100      	str	r1, [sp, #0]
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 f973 	bl	800af0c <xQueueGenericCreateStatic>
 800ac26:	61f8      	str	r0, [r7, #28]
 800ac28:	e008      	b.n	800ac3c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ac30:	2200      	movs	r2, #0
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f000 f9e6 	bl	800b006 <xQueueGenericCreate>
 800ac3a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00c      	beq.n	800ac5c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	617b      	str	r3, [r7, #20]
 800ac4e:	e001      	b.n	800ac54 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac54:	6979      	ldr	r1, [r7, #20]
 800ac56:	69f8      	ldr	r0, [r7, #28]
 800ac58:	f000 fdc6 	bl	800b7e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac5c:	69fb      	ldr	r3, [r7, #28]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3720      	adds	r7, #32
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4a07      	ldr	r2, [pc, #28]	@ (800ac94 <vApplicationGetIdleTaskMemory+0x2c>)
 800ac78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	4a06      	ldr	r2, [pc, #24]	@ (800ac98 <vApplicationGetIdleTaskMemory+0x30>)
 800ac7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800ac86:	601a      	str	r2, [r3, #0]
}
 800ac88:	bf00      	nop
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	2000053c 	.word	0x2000053c
 800ac98:	200005e4 	.word	0x200005e4

0800ac9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	4a07      	ldr	r2, [pc, #28]	@ (800acc8 <vApplicationGetTimerTaskMemory+0x2c>)
 800acac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	4a06      	ldr	r2, [pc, #24]	@ (800accc <vApplicationGetTimerTaskMemory+0x30>)
 800acb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 800acba:	601a      	str	r2, [r3, #0]
}
 800acbc:	bf00      	nop
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	200010d4 	.word	0x200010d4
 800accc:	2000117c 	.word	0x2000117c

0800acd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f103 0208 	add.w	r2, r3, #8
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295
 800ace8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f103 0208 	add.w	r2, r3, #8
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f103 0208 	add.w	r2, r3, #8
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad1e:	bf00      	nop
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b085      	sub	sp, #20
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	601a      	str	r2, [r3, #0]
}
 800ad66:	bf00      	nop
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad72:	b480      	push	{r7}
 800ad74:	b085      	sub	sp, #20
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad88:	d103      	bne.n	800ad92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	e00c      	b.n	800adac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3308      	adds	r3, #8
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	e002      	b.n	800ada0 <vListInsert+0x2e>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d2f6      	bcs.n	800ad9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	601a      	str	r2, [r3, #0]
}
 800add8:	bf00      	nop
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6892      	ldr	r2, [r2, #8]
 800adfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6852      	ldr	r2, [r2, #4]
 800ae04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d103      	bne.n	800ae18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	1e5a      	subs	r2, r3, #1
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10b      	bne.n	800ae64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae5e:	bf00      	nop
 800ae60:	bf00      	nop
 800ae62:	e7fd      	b.n	800ae60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ae64:	f002 f8e0 	bl	800d028 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae70:	68f9      	ldr	r1, [r7, #12]
 800ae72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae74:	fb01 f303 	mul.w	r3, r1, r3
 800ae78:	441a      	add	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae94:	3b01      	subs	r3, #1
 800ae96:	68f9      	ldr	r1, [r7, #12]
 800ae98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae9a:	fb01 f303 	mul.w	r3, r1, r3
 800ae9e:	441a      	add	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	22ff      	movs	r2, #255	@ 0xff
 800aea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	22ff      	movs	r2, #255	@ 0xff
 800aeb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d114      	bne.n	800aee4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d01a      	beq.n	800aef8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3310      	adds	r3, #16
 800aec6:	4618      	mov	r0, r3
 800aec8:	f001 f97e 	bl	800c1c8 <xTaskRemoveFromEventList>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d012      	beq.n	800aef8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aed2:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <xQueueGenericReset+0xd0>)
 800aed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	e009      	b.n	800aef8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3310      	adds	r3, #16
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff fef1 	bl	800acd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3324      	adds	r3, #36	@ 0x24
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff feec 	bl	800acd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aef8:	f002 f8c8 	bl	800d08c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aefc:	2301      	movs	r3, #1
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	e000ed04 	.word	0xe000ed04

0800af0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08e      	sub	sp, #56	@ 0x38
 800af10:	af02      	add	r7, sp, #8
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10b      	bne.n	800af38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	e7fd      	b.n	800af34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10b      	bne.n	800af56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af50:	bf00      	nop
 800af52:	bf00      	nop
 800af54:	e7fd      	b.n	800af52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <xQueueGenericCreateStatic+0x56>
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <xQueueGenericCreateStatic+0x5a>
 800af62:	2301      	movs	r3, #1
 800af64:	e000      	b.n	800af68 <xQueueGenericCreateStatic+0x5c>
 800af66:	2300      	movs	r3, #0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10b      	bne.n	800af84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	623b      	str	r3, [r7, #32]
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d102      	bne.n	800af90 <xQueueGenericCreateStatic+0x84>
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <xQueueGenericCreateStatic+0x88>
 800af90:	2301      	movs	r3, #1
 800af92:	e000      	b.n	800af96 <xQueueGenericCreateStatic+0x8a>
 800af94:	2300      	movs	r3, #0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10b      	bne.n	800afb2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	61fb      	str	r3, [r7, #28]
}
 800afac:	bf00      	nop
 800afae:	bf00      	nop
 800afb0:	e7fd      	b.n	800afae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800afb2:	2350      	movs	r3, #80	@ 0x50
 800afb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b50      	cmp	r3, #80	@ 0x50
 800afba:	d00b      	beq.n	800afd4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	61bb      	str	r3, [r7, #24]
}
 800afce:	bf00      	nop
 800afd0:	bf00      	nop
 800afd2:	e7fd      	b.n	800afd0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800afd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800afda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00d      	beq.n	800affc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afe8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800afec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	4613      	mov	r3, r2
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 f840 	bl	800b07c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800affc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800affe:	4618      	mov	r0, r3
 800b000:	3730      	adds	r7, #48	@ 0x30
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b006:	b580      	push	{r7, lr}
 800b008:	b08a      	sub	sp, #40	@ 0x28
 800b00a:	af02      	add	r7, sp, #8
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	4613      	mov	r3, r2
 800b012:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10b      	bne.n	800b032 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	613b      	str	r3, [r7, #16]
}
 800b02c:	bf00      	nop
 800b02e:	bf00      	nop
 800b030:	e7fd      	b.n	800b02e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	fb02 f303 	mul.w	r3, r2, r3
 800b03a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	3350      	adds	r3, #80	@ 0x50
 800b040:	4618      	mov	r0, r3
 800b042:	f002 f913 	bl	800d26c <pvPortMalloc>
 800b046:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d011      	beq.n	800b072 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	3350      	adds	r3, #80	@ 0x50
 800b056:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b060:	79fa      	ldrb	r2, [r7, #7]
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	4613      	mov	r3, r2
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 f805 	bl	800b07c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b072:	69bb      	ldr	r3, [r7, #24]
	}
 800b074:	4618      	mov	r0, r3
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d103      	bne.n	800b098 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	69ba      	ldr	r2, [r7, #24]
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	e002      	b.n	800b09e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	69b8      	ldr	r0, [r7, #24]
 800b0ae:	f7ff fec3 	bl	800ae38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	78fa      	ldrb	r2, [r7, #3]
 800b0b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08e      	sub	sp, #56	@ 0x38
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10b      	bne.n	800b0f8 <xQueueGenericSend+0x34>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b0f2:	bf00      	nop
 800b0f4:	bf00      	nop
 800b0f6:	e7fd      	b.n	800b0f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d103      	bne.n	800b106 <xQueueGenericSend+0x42>
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <xQueueGenericSend+0x46>
 800b106:	2301      	movs	r3, #1
 800b108:	e000      	b.n	800b10c <xQueueGenericSend+0x48>
 800b10a:	2300      	movs	r3, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10b      	bne.n	800b128 <xQueueGenericSend+0x64>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	e7fd      	b.n	800b124 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d103      	bne.n	800b136 <xQueueGenericSend+0x72>
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b132:	2b01      	cmp	r3, #1
 800b134:	d101      	bne.n	800b13a <xQueueGenericSend+0x76>
 800b136:	2301      	movs	r3, #1
 800b138:	e000      	b.n	800b13c <xQueueGenericSend+0x78>
 800b13a:	2300      	movs	r3, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10b      	bne.n	800b158 <xQueueGenericSend+0x94>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	623b      	str	r3, [r7, #32]
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	e7fd      	b.n	800b154 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b158:	f001 f9fc 	bl	800c554 <xTaskGetSchedulerState>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d102      	bne.n	800b168 <xQueueGenericSend+0xa4>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <xQueueGenericSend+0xa8>
 800b168:	2301      	movs	r3, #1
 800b16a:	e000      	b.n	800b16e <xQueueGenericSend+0xaa>
 800b16c:	2300      	movs	r3, #0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10b      	bne.n	800b18a <xQueueGenericSend+0xc6>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	61fb      	str	r3, [r7, #28]
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	e7fd      	b.n	800b186 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b18a:	f001 ff4d 	bl	800d028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b196:	429a      	cmp	r2, r3
 800b198:	d302      	bcc.n	800b1a0 <xQueueGenericSend+0xdc>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d129      	bne.n	800b1f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1a6:	f000 fa0f 	bl	800b5c8 <prvCopyDataToQueue>
 800b1aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d010      	beq.n	800b1d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b6:	3324      	adds	r3, #36	@ 0x24
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f001 f805 	bl	800c1c8 <xTaskRemoveFromEventList>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d013      	beq.n	800b1ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1c4:	4b3f      	ldr	r3, [pc, #252]	@ (800b2c4 <xQueueGenericSend+0x200>)
 800b1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	e00a      	b.n	800b1ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d007      	beq.n	800b1ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1dc:	4b39      	ldr	r3, [pc, #228]	@ (800b2c4 <xQueueGenericSend+0x200>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1ec:	f001 ff4e 	bl	800d08c <vPortExitCritical>
				return pdPASS;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e063      	b.n	800b2bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1fa:	f001 ff47 	bl	800d08c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	e05c      	b.n	800b2bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b204:	2b00      	cmp	r3, #0
 800b206:	d106      	bne.n	800b216 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b208:	f107 0314 	add.w	r3, r7, #20
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 f83f 	bl	800c290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b212:	2301      	movs	r3, #1
 800b214:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b216:	f001 ff39 	bl	800d08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b21a:	f000 fda7 	bl	800bd6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b21e:	f001 ff03 	bl	800d028 <vPortEnterCritical>
 800b222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b228:	b25b      	sxtb	r3, r3
 800b22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22e:	d103      	bne.n	800b238 <xQueueGenericSend+0x174>
 800b230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b23e:	b25b      	sxtb	r3, r3
 800b240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b244:	d103      	bne.n	800b24e <xQueueGenericSend+0x18a>
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b24e:	f001 ff1d 	bl	800d08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b252:	1d3a      	adds	r2, r7, #4
 800b254:	f107 0314 	add.w	r3, r7, #20
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f001 f82e 	bl	800c2bc <xTaskCheckForTimeOut>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d124      	bne.n	800b2b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b266:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b268:	f000 faa6 	bl	800b7b8 <prvIsQueueFull>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d018      	beq.n	800b2a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	3310      	adds	r3, #16
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	4611      	mov	r1, r2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 ff52 	bl	800c124 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b280:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b282:	f000 fa31 	bl	800b6e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b286:	f000 fd7f 	bl	800bd88 <xTaskResumeAll>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f47f af7c 	bne.w	800b18a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b292:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c4 <xQueueGenericSend+0x200>)
 800b294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	e772      	b.n	800b18a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2a6:	f000 fa1f 	bl	800b6e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2aa:	f000 fd6d 	bl	800bd88 <xTaskResumeAll>
 800b2ae:	e76c      	b.n	800b18a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2b2:	f000 fa19 	bl	800b6e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2b6:	f000 fd67 	bl	800bd88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3738      	adds	r7, #56	@ 0x38
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b090      	sub	sp, #64	@ 0x40
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10b      	bne.n	800b2f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	e7fd      	b.n	800b2f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d103      	bne.n	800b306 <xQueueGenericSendFromISR+0x3e>
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b302:	2b00      	cmp	r3, #0
 800b304:	d101      	bne.n	800b30a <xQueueGenericSendFromISR+0x42>
 800b306:	2301      	movs	r3, #1
 800b308:	e000      	b.n	800b30c <xQueueGenericSendFromISR+0x44>
 800b30a:	2300      	movs	r3, #0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10b      	bne.n	800b328 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b322:	bf00      	nop
 800b324:	bf00      	nop
 800b326:	e7fd      	b.n	800b324 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d103      	bne.n	800b336 <xQueueGenericSendFromISR+0x6e>
 800b32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b332:	2b01      	cmp	r3, #1
 800b334:	d101      	bne.n	800b33a <xQueueGenericSendFromISR+0x72>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueGenericSendFromISR+0x74>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10b      	bne.n	800b358 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	623b      	str	r3, [r7, #32]
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	e7fd      	b.n	800b354 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b358:	f001 ff46 	bl	800d1e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b35c:	f3ef 8211 	mrs	r2, BASEPRI
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	61fa      	str	r2, [r7, #28]
 800b372:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b374:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b376:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b380:	429a      	cmp	r2, r3
 800b382:	d302      	bcc.n	800b38a <xQueueGenericSendFromISR+0xc2>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b02      	cmp	r3, #2
 800b388:	d12f      	bne.n	800b3ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b390:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b398:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3a0:	f000 f912 	bl	800b5c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ac:	d112      	bne.n	800b3d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d016      	beq.n	800b3e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b8:	3324      	adds	r3, #36	@ 0x24
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 ff04 	bl	800c1c8 <xTaskRemoveFromEventList>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00e      	beq.n	800b3e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00b      	beq.n	800b3e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e007      	b.n	800b3e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b3d8:	3301      	adds	r3, #1
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	b25a      	sxtb	r2, r3
 800b3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b3e8:	e001      	b.n	800b3ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3740      	adds	r7, #64	@ 0x40
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08c      	sub	sp, #48	@ 0x30
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b410:	2300      	movs	r3, #0
 800b412:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10b      	bne.n	800b436 <xQueueReceive+0x32>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	623b      	str	r3, [r7, #32]
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop
 800b434:	e7fd      	b.n	800b432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d103      	bne.n	800b444 <xQueueReceive+0x40>
 800b43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <xQueueReceive+0x44>
 800b444:	2301      	movs	r3, #1
 800b446:	e000      	b.n	800b44a <xQueueReceive+0x46>
 800b448:	2300      	movs	r3, #0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <xQueueReceive+0x62>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	61fb      	str	r3, [r7, #28]
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b466:	f001 f875 	bl	800c554 <xTaskGetSchedulerState>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <xQueueReceive+0x72>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <xQueueReceive+0x76>
 800b476:	2301      	movs	r3, #1
 800b478:	e000      	b.n	800b47c <xQueueReceive+0x78>
 800b47a:	2300      	movs	r3, #0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10b      	bne.n	800b498 <xQueueReceive+0x94>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	61bb      	str	r3, [r7, #24]
}
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	e7fd      	b.n	800b494 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b498:	f001 fdc6 	bl	800d028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01f      	beq.n	800b4e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4a8:	68b9      	ldr	r1, [r7, #8]
 800b4aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4ac:	f000 f8f6 	bl	800b69c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b2:	1e5a      	subs	r2, r3, #1
 800b4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00f      	beq.n	800b4e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	3310      	adds	r3, #16
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 fe7f 	bl	800c1c8 <xTaskRemoveFromEventList>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d007      	beq.n	800b4e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4d0:	4b3c      	ldr	r3, [pc, #240]	@ (800b5c4 <xQueueReceive+0x1c0>)
 800b4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4e0:	f001 fdd4 	bl	800d08c <vPortExitCritical>
				return pdPASS;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e069      	b.n	800b5bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d103      	bne.n	800b4f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4ee:	f001 fdcd 	bl	800d08c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e062      	b.n	800b5bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d106      	bne.n	800b50a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4fc:	f107 0310 	add.w	r3, r7, #16
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fec5 	bl	800c290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b506:	2301      	movs	r3, #1
 800b508:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b50a:	f001 fdbf 	bl	800d08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b50e:	f000 fc2d 	bl	800bd6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b512:	f001 fd89 	bl	800d028 <vPortEnterCritical>
 800b516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b51c:	b25b      	sxtb	r3, r3
 800b51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b522:	d103      	bne.n	800b52c <xQueueReceive+0x128>
 800b524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b532:	b25b      	sxtb	r3, r3
 800b534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b538:	d103      	bne.n	800b542 <xQueueReceive+0x13e>
 800b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b542:	f001 fda3 	bl	800d08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b546:	1d3a      	adds	r2, r7, #4
 800b548:	f107 0310 	add.w	r3, r7, #16
 800b54c:	4611      	mov	r1, r2
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 feb4 	bl	800c2bc <xTaskCheckForTimeOut>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d123      	bne.n	800b5a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b55a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b55c:	f000 f916 	bl	800b78c <prvIsQueueEmpty>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d017      	beq.n	800b596 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	3324      	adds	r3, #36	@ 0x24
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	4611      	mov	r1, r2
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fdd8 	bl	800c124 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b576:	f000 f8b7 	bl	800b6e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b57a:	f000 fc05 	bl	800bd88 <xTaskResumeAll>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d189      	bne.n	800b498 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b584:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c4 <xQueueReceive+0x1c0>)
 800b586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	e780      	b.n	800b498 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b598:	f000 f8a6 	bl	800b6e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b59c:	f000 fbf4 	bl	800bd88 <xTaskResumeAll>
 800b5a0:	e77a      	b.n	800b498 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5a4:	f000 f8a0 	bl	800b6e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5a8:	f000 fbee 	bl	800bd88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5ae:	f000 f8ed 	bl	800b78c <prvIsQueueEmpty>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f43f af6f 	beq.w	800b498 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3730      	adds	r7, #48	@ 0x30
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	e000ed04 	.word	0xe000ed04

0800b5c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10d      	bne.n	800b602 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d14d      	bne.n	800b68a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f000 ffcc 	bl	800c590 <xTaskPriorityDisinherit>
 800b5f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	609a      	str	r2, [r3, #8]
 800b600:	e043      	b.n	800b68a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d119      	bne.n	800b63c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6858      	ldr	r0, [r3, #4]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b610:	461a      	mov	r2, r3
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	f003 fb7b 	bl	800ed0e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b620:	441a      	add	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d32b      	bcc.n	800b68a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	605a      	str	r2, [r3, #4]
 800b63a:	e026      	b.n	800b68a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68d8      	ldr	r0, [r3, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b644:	461a      	mov	r2, r3
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	f003 fb61 	bl	800ed0e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b654:	425b      	negs	r3, r3
 800b656:	441a      	add	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d207      	bcs.n	800b678 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	689a      	ldr	r2, [r3, #8]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b670:	425b      	negs	r3, r3
 800b672:	441a      	add	r2, r3
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d105      	bne.n	800b68a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	3b01      	subs	r3, #1
 800b688:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	1c5a      	adds	r2, r3, #1
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b692:	697b      	ldr	r3, [r7, #20]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3718      	adds	r7, #24
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d018      	beq.n	800b6e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b6:	441a      	add	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	68da      	ldr	r2, [r3, #12]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d303      	bcc.n	800b6d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	68d9      	ldr	r1, [r3, #12]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6838      	ldr	r0, [r7, #0]
 800b6dc:	f003 fb17 	bl	800ed0e <memcpy>
	}
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6f0:	f001 fc9a 	bl	800d028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6fc:	e011      	b.n	800b722 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b702:	2b00      	cmp	r3, #0
 800b704:	d012      	beq.n	800b72c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	3324      	adds	r3, #36	@ 0x24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 fd5c 	bl	800c1c8 <xTaskRemoveFromEventList>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b716:	f000 fe35 	bl	800c384 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b726:	2b00      	cmp	r3, #0
 800b728:	dce9      	bgt.n	800b6fe <prvUnlockQueue+0x16>
 800b72a:	e000      	b.n	800b72e <prvUnlockQueue+0x46>
					break;
 800b72c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	22ff      	movs	r2, #255	@ 0xff
 800b732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b736:	f001 fca9 	bl	800d08c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b73a:	f001 fc75 	bl	800d028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b744:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b746:	e011      	b.n	800b76c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d012      	beq.n	800b776 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3310      	adds	r3, #16
 800b754:	4618      	mov	r0, r3
 800b756:	f000 fd37 	bl	800c1c8 <xTaskRemoveFromEventList>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b760:	f000 fe10 	bl	800c384 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	3b01      	subs	r3, #1
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b76c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b770:	2b00      	cmp	r3, #0
 800b772:	dce9      	bgt.n	800b748 <prvUnlockQueue+0x60>
 800b774:	e000      	b.n	800b778 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b776:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	22ff      	movs	r2, #255	@ 0xff
 800b77c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b780:	f001 fc84 	bl	800d08c <vPortExitCritical>
}
 800b784:	bf00      	nop
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b794:	f001 fc48 	bl	800d028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d102      	bne.n	800b7a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	e001      	b.n	800b7aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7aa:	f001 fc6f 	bl	800d08c <vPortExitCritical>

	return xReturn;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7c0:	f001 fc32 	bl	800d028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d102      	bne.n	800b7d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e001      	b.n	800b7da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7da:	f001 fc57 	bl	800d08c <vPortExitCritical>

	return xReturn;
 800b7de:	68fb      	ldr	r3, [r7, #12]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	e014      	b.n	800b822 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b7f8:	4a0f      	ldr	r2, [pc, #60]	@ (800b838 <vQueueAddToRegistry+0x50>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10b      	bne.n	800b81c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b804:	490c      	ldr	r1, [pc, #48]	@ (800b838 <vQueueAddToRegistry+0x50>)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b80e:	4a0a      	ldr	r2, [pc, #40]	@ (800b838 <vQueueAddToRegistry+0x50>)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	4413      	add	r3, r2
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b81a:	e006      	b.n	800b82a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	3301      	adds	r3, #1
 800b820:	60fb      	str	r3, [r7, #12]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2b07      	cmp	r3, #7
 800b826:	d9e7      	bls.n	800b7f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	3714      	adds	r7, #20
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	2000275c 	.word	0x2000275c

0800b83c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b84c:	f001 fbec 	bl	800d028 <vPortEnterCritical>
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b856:	b25b      	sxtb	r3, r3
 800b858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85c:	d103      	bne.n	800b866 <vQueueWaitForMessageRestricted+0x2a>
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b86c:	b25b      	sxtb	r3, r3
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d103      	bne.n	800b87c <vQueueWaitForMessageRestricted+0x40>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b87c:	f001 fc06 	bl	800d08c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b884:	2b00      	cmp	r3, #0
 800b886:	d106      	bne.n	800b896 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	3324      	adds	r3, #36	@ 0x24
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fc6d 	bl	800c170 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b896:	6978      	ldr	r0, [r7, #20]
 800b898:	f7ff ff26 	bl	800b6e8 <prvUnlockQueue>
	}
 800b89c:	bf00      	nop
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08e      	sub	sp, #56	@ 0x38
 800b8a8:	af04      	add	r7, sp, #16
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10b      	bne.n	800b8d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	623b      	str	r3, [r7, #32]
}
 800b8ca:	bf00      	nop
 800b8cc:	bf00      	nop
 800b8ce:	e7fd      	b.n	800b8cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10b      	bne.n	800b8ee <xTaskCreateStatic+0x4a>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	61fb      	str	r3, [r7, #28]
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	e7fd      	b.n	800b8ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8ee:	23a8      	movs	r3, #168	@ 0xa8
 800b8f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2ba8      	cmp	r3, #168	@ 0xa8
 800b8f6:	d00b      	beq.n	800b910 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	61bb      	str	r3, [r7, #24]
}
 800b90a:	bf00      	nop
 800b90c:	bf00      	nop
 800b90e:	e7fd      	b.n	800b90c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b910:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b914:	2b00      	cmp	r3, #0
 800b916:	d01e      	beq.n	800b956 <xTaskCreateStatic+0xb2>
 800b918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d01b      	beq.n	800b956 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b920:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b926:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92a:	2202      	movs	r2, #2
 800b92c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b930:	2300      	movs	r3, #0
 800b932:	9303      	str	r3, [sp, #12]
 800b934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b936:	9302      	str	r3, [sp, #8]
 800b938:	f107 0314 	add.w	r3, r7, #20
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	68b9      	ldr	r1, [r7, #8]
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 f851 	bl	800b9f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b94e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b950:	f000 f8f6 	bl	800bb40 <prvAddNewTaskToReadyList>
 800b954:	e001      	b.n	800b95a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b956:	2300      	movs	r3, #0
 800b958:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b95a:	697b      	ldr	r3, [r7, #20]
	}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3728      	adds	r7, #40	@ 0x28
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b964:	b580      	push	{r7, lr}
 800b966:	b08c      	sub	sp, #48	@ 0x30
 800b968:	af04      	add	r7, sp, #16
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	4613      	mov	r3, r2
 800b972:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b974:	88fb      	ldrh	r3, [r7, #6]
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 fc77 	bl	800d26c <pvPortMalloc>
 800b97e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00e      	beq.n	800b9a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b986:	20a8      	movs	r0, #168	@ 0xa8
 800b988:	f001 fc70 	bl	800d26c <pvPortMalloc>
 800b98c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d003      	beq.n	800b99c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	631a      	str	r2, [r3, #48]	@ 0x30
 800b99a:	e005      	b.n	800b9a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b99c:	6978      	ldr	r0, [r7, #20]
 800b99e:	f001 fd33 	bl	800d408 <vPortFree>
 800b9a2:	e001      	b.n	800b9a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d017      	beq.n	800b9de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9b6:	88fa      	ldrh	r2, [r7, #6]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	9303      	str	r3, [sp, #12]
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	9302      	str	r3, [sp, #8]
 800b9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c2:	9301      	str	r3, [sp, #4]
 800b9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 f80f 	bl	800b9f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9d2:	69f8      	ldr	r0, [r7, #28]
 800b9d4:	f000 f8b4 	bl	800bb40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	61bb      	str	r3, [r7, #24]
 800b9dc:	e002      	b.n	800b9e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9de:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9e4:	69bb      	ldr	r3, [r7, #24]
	}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3720      	adds	r7, #32
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
	...

0800b9f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b088      	sub	sp, #32
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba00:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	461a      	mov	r2, r3
 800ba08:	21a5      	movs	r1, #165	@ 0xa5
 800ba0a:	f003 f8a3 	bl	800eb54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	f023 0307 	bic.w	r3, r3, #7
 800ba26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	f003 0307 	and.w	r3, r3, #7
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00b      	beq.n	800ba4a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	617b      	str	r3, [r7, #20]
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	e7fd      	b.n	800ba46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d01f      	beq.n	800ba90 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba50:	2300      	movs	r3, #0
 800ba52:	61fb      	str	r3, [r7, #28]
 800ba54:	e012      	b.n	800ba7c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	7819      	ldrb	r1, [r3, #0]
 800ba5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	4413      	add	r3, r2
 800ba64:	3334      	adds	r3, #52	@ 0x34
 800ba66:	460a      	mov	r2, r1
 800ba68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	4413      	add	r3, r2
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d006      	beq.n	800ba84 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	61fb      	str	r3, [r7, #28]
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	2b0f      	cmp	r3, #15
 800ba80:	d9e9      	bls.n	800ba56 <prvInitialiseNewTask+0x66>
 800ba82:	e000      	b.n	800ba86 <prvInitialiseNewTask+0x96>
			{
				break;
 800ba84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ba8e:	e003      	b.n	800ba98 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9a:	2b37      	cmp	r3, #55	@ 0x37
 800ba9c:	d901      	bls.n	800baa2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba9e:	2337      	movs	r3, #55	@ 0x37
 800baa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800baa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800baa6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800baa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800baac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800baae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab0:	2200      	movs	r2, #0
 800bab2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab6:	3304      	adds	r3, #4
 800bab8:	4618      	mov	r0, r3
 800baba:	f7ff f929 	bl	800ad10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800babe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac0:	3318      	adds	r3, #24
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff f924 	bl	800ad10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bacc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800badc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800baee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf0:	3354      	adds	r3, #84	@ 0x54
 800baf2:	224c      	movs	r2, #76	@ 0x4c
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f003 f82c 	bl	800eb54 <memset>
 800bafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafe:	4a0d      	ldr	r2, [pc, #52]	@ (800bb34 <prvInitialiseNewTask+0x144>)
 800bb00:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb04:	4a0c      	ldr	r2, [pc, #48]	@ (800bb38 <prvInitialiseNewTask+0x148>)
 800bb06:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0a:	4a0c      	ldr	r2, [pc, #48]	@ (800bb3c <prvInitialiseNewTask+0x14c>)
 800bb0c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	68f9      	ldr	r1, [r7, #12]
 800bb12:	69b8      	ldr	r0, [r7, #24]
 800bb14:	f001 f95a 	bl	800cdcc <pxPortInitialiseStack>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb2a:	bf00      	nop
 800bb2c:	3720      	adds	r7, #32
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	2000a57c 	.word	0x2000a57c
 800bb38:	2000a5e4 	.word	0x2000a5e4
 800bb3c:	2000a64c 	.word	0x2000a64c

0800bb40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb48:	f001 fa6e 	bl	800d028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb4c:	4b2d      	ldr	r3, [pc, #180]	@ (800bc04 <prvAddNewTaskToReadyList+0xc4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	4a2c      	ldr	r2, [pc, #176]	@ (800bc04 <prvAddNewTaskToReadyList+0xc4>)
 800bb54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb56:	4b2c      	ldr	r3, [pc, #176]	@ (800bc08 <prvAddNewTaskToReadyList+0xc8>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d109      	bne.n	800bb72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb5e:	4a2a      	ldr	r2, [pc, #168]	@ (800bc08 <prvAddNewTaskToReadyList+0xc8>)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb64:	4b27      	ldr	r3, [pc, #156]	@ (800bc04 <prvAddNewTaskToReadyList+0xc4>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d110      	bne.n	800bb8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb6c:	f000 fc2e 	bl	800c3cc <prvInitialiseTaskLists>
 800bb70:	e00d      	b.n	800bb8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb72:	4b26      	ldr	r3, [pc, #152]	@ (800bc0c <prvAddNewTaskToReadyList+0xcc>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d109      	bne.n	800bb8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb7a:	4b23      	ldr	r3, [pc, #140]	@ (800bc08 <prvAddNewTaskToReadyList+0xc8>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d802      	bhi.n	800bb8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb88:	4a1f      	ldr	r2, [pc, #124]	@ (800bc08 <prvAddNewTaskToReadyList+0xc8>)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb8e:	4b20      	ldr	r3, [pc, #128]	@ (800bc10 <prvAddNewTaskToReadyList+0xd0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	4a1e      	ldr	r2, [pc, #120]	@ (800bc10 <prvAddNewTaskToReadyList+0xd0>)
 800bb96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb98:	4b1d      	ldr	r3, [pc, #116]	@ (800bc10 <prvAddNewTaskToReadyList+0xd0>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba4:	4b1b      	ldr	r3, [pc, #108]	@ (800bc14 <prvAddNewTaskToReadyList+0xd4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d903      	bls.n	800bbb4 <prvAddNewTaskToReadyList+0x74>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb0:	4a18      	ldr	r2, [pc, #96]	@ (800bc14 <prvAddNewTaskToReadyList+0xd4>)
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbb8:	4613      	mov	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4a15      	ldr	r2, [pc, #84]	@ (800bc18 <prvAddNewTaskToReadyList+0xd8>)
 800bbc2:	441a      	add	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f7ff f8ad 	bl	800ad2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbd0:	f001 fa5c 	bl	800d08c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbd4:	4b0d      	ldr	r3, [pc, #52]	@ (800bc0c <prvAddNewTaskToReadyList+0xcc>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00e      	beq.n	800bbfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbdc:	4b0a      	ldr	r3, [pc, #40]	@ (800bc08 <prvAddNewTaskToReadyList+0xc8>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d207      	bcs.n	800bbfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbea:	4b0c      	ldr	r3, [pc, #48]	@ (800bc1c <prvAddNewTaskToReadyList+0xdc>)
 800bbec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbfa:	bf00      	nop
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	20002c70 	.word	0x20002c70
 800bc08:	2000279c 	.word	0x2000279c
 800bc0c:	20002c7c 	.word	0x20002c7c
 800bc10:	20002c8c 	.word	0x20002c8c
 800bc14:	20002c78 	.word	0x20002c78
 800bc18:	200027a0 	.word	0x200027a0
 800bc1c:	e000ed04 	.word	0xe000ed04

0800bc20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d018      	beq.n	800bc64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc32:	4b14      	ldr	r3, [pc, #80]	@ (800bc84 <vTaskDelay+0x64>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00b      	beq.n	800bc52 <vTaskDelay+0x32>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	60bb      	str	r3, [r7, #8]
}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	e7fd      	b.n	800bc4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc52:	f000 f88b 	bl	800bd6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc56:	2100      	movs	r1, #0
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fd09 	bl	800c670 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc5e:	f000 f893 	bl	800bd88 <xTaskResumeAll>
 800bc62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d107      	bne.n	800bc7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bc6a:	4b07      	ldr	r3, [pc, #28]	@ (800bc88 <vTaskDelay+0x68>)
 800bc6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20002c98 	.word	0x20002c98
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08a      	sub	sp, #40	@ 0x28
 800bc90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc9a:	463a      	mov	r2, r7
 800bc9c:	1d39      	adds	r1, r7, #4
 800bc9e:	f107 0308 	add.w	r3, r7, #8
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe ffe0 	bl	800ac68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	9202      	str	r2, [sp, #8]
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	460a      	mov	r2, r1
 800bcba:	4924      	ldr	r1, [pc, #144]	@ (800bd4c <vTaskStartScheduler+0xc0>)
 800bcbc:	4824      	ldr	r0, [pc, #144]	@ (800bd50 <vTaskStartScheduler+0xc4>)
 800bcbe:	f7ff fdf1 	bl	800b8a4 <xTaskCreateStatic>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	4a23      	ldr	r2, [pc, #140]	@ (800bd54 <vTaskStartScheduler+0xc8>)
 800bcc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bcc8:	4b22      	ldr	r3, [pc, #136]	@ (800bd54 <vTaskStartScheduler+0xc8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	e001      	b.n	800bcda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d102      	bne.n	800bce6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bce0:	f000 fd1a 	bl	800c718 <xTimerCreateTimerTask>
 800bce4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d11b      	bne.n	800bd24 <vTaskStartScheduler+0x98>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	613b      	str	r3, [r7, #16]
}
 800bcfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd00:	4b15      	ldr	r3, [pc, #84]	@ (800bd58 <vTaskStartScheduler+0xcc>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3354      	adds	r3, #84	@ 0x54
 800bd06:	4a15      	ldr	r2, [pc, #84]	@ (800bd5c <vTaskStartScheduler+0xd0>)
 800bd08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd0a:	4b15      	ldr	r3, [pc, #84]	@ (800bd60 <vTaskStartScheduler+0xd4>)
 800bd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd12:	4b14      	ldr	r3, [pc, #80]	@ (800bd64 <vTaskStartScheduler+0xd8>)
 800bd14:	2201      	movs	r2, #1
 800bd16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd18:	4b13      	ldr	r3, [pc, #76]	@ (800bd68 <vTaskStartScheduler+0xdc>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd1e:	f001 f8df 	bl	800cee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd22:	e00f      	b.n	800bd44 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d10b      	bne.n	800bd44 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	60fb      	str	r3, [r7, #12]
}
 800bd3e:	bf00      	nop
 800bd40:	bf00      	nop
 800bd42:	e7fd      	b.n	800bd40 <vTaskStartScheduler+0xb4>
}
 800bd44:	bf00      	nop
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	08011000 	.word	0x08011000
 800bd50:	0800c39d 	.word	0x0800c39d
 800bd54:	20002c94 	.word	0x20002c94
 800bd58:	2000279c 	.word	0x2000279c
 800bd5c:	20000194 	.word	0x20000194
 800bd60:	20002c90 	.word	0x20002c90
 800bd64:	20002c7c 	.word	0x20002c7c
 800bd68:	20002c74 	.word	0x20002c74

0800bd6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd70:	4b04      	ldr	r3, [pc, #16]	@ (800bd84 <vTaskSuspendAll+0x18>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3301      	adds	r3, #1
 800bd76:	4a03      	ldr	r2, [pc, #12]	@ (800bd84 <vTaskSuspendAll+0x18>)
 800bd78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd7a:	bf00      	nop
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr
 800bd84:	20002c98 	.word	0x20002c98

0800bd88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd92:	2300      	movs	r3, #0
 800bd94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd96:	4b42      	ldr	r3, [pc, #264]	@ (800bea0 <xTaskResumeAll+0x118>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10b      	bne.n	800bdb6 <xTaskResumeAll+0x2e>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	603b      	str	r3, [r7, #0]
}
 800bdb0:	bf00      	nop
 800bdb2:	bf00      	nop
 800bdb4:	e7fd      	b.n	800bdb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdb6:	f001 f937 	bl	800d028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdba:	4b39      	ldr	r3, [pc, #228]	@ (800bea0 <xTaskResumeAll+0x118>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	4a37      	ldr	r2, [pc, #220]	@ (800bea0 <xTaskResumeAll+0x118>)
 800bdc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdc4:	4b36      	ldr	r3, [pc, #216]	@ (800bea0 <xTaskResumeAll+0x118>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d162      	bne.n	800be92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bdcc:	4b35      	ldr	r3, [pc, #212]	@ (800bea4 <xTaskResumeAll+0x11c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d05e      	beq.n	800be92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdd4:	e02f      	b.n	800be36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd6:	4b34      	ldr	r3, [pc, #208]	@ (800bea8 <xTaskResumeAll+0x120>)
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3318      	adds	r3, #24
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fffe 	bl	800ade4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe fff9 	bl	800ade4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf6:	4b2d      	ldr	r3, [pc, #180]	@ (800beac <xTaskResumeAll+0x124>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d903      	bls.n	800be06 <xTaskResumeAll+0x7e>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be02:	4a2a      	ldr	r2, [pc, #168]	@ (800beac <xTaskResumeAll+0x124>)
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0a:	4613      	mov	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4413      	add	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4a27      	ldr	r2, [pc, #156]	@ (800beb0 <xTaskResumeAll+0x128>)
 800be14:	441a      	add	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3304      	adds	r3, #4
 800be1a:	4619      	mov	r1, r3
 800be1c:	4610      	mov	r0, r2
 800be1e:	f7fe ff84 	bl	800ad2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be26:	4b23      	ldr	r3, [pc, #140]	@ (800beb4 <xTaskResumeAll+0x12c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d302      	bcc.n	800be36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800be30:	4b21      	ldr	r3, [pc, #132]	@ (800beb8 <xTaskResumeAll+0x130>)
 800be32:	2201      	movs	r2, #1
 800be34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be36:	4b1c      	ldr	r3, [pc, #112]	@ (800bea8 <xTaskResumeAll+0x120>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1cb      	bne.n	800bdd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be44:	f000 fb66 	bl	800c514 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be48:	4b1c      	ldr	r3, [pc, #112]	@ (800bebc <xTaskResumeAll+0x134>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d010      	beq.n	800be76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be54:	f000 f846 	bl	800bee4 <xTaskIncrementTick>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800be5e:	4b16      	ldr	r3, [pc, #88]	@ (800beb8 <xTaskResumeAll+0x130>)
 800be60:	2201      	movs	r2, #1
 800be62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3b01      	subs	r3, #1
 800be68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1f1      	bne.n	800be54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800be70:	4b12      	ldr	r3, [pc, #72]	@ (800bebc <xTaskResumeAll+0x134>)
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be76:	4b10      	ldr	r3, [pc, #64]	@ (800beb8 <xTaskResumeAll+0x130>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d009      	beq.n	800be92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be7e:	2301      	movs	r3, #1
 800be80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be82:	4b0f      	ldr	r3, [pc, #60]	@ (800bec0 <xTaskResumeAll+0x138>)
 800be84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be92:	f001 f8fb 	bl	800d08c <vPortExitCritical>

	return xAlreadyYielded;
 800be96:	68bb      	ldr	r3, [r7, #8]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20002c98 	.word	0x20002c98
 800bea4:	20002c70 	.word	0x20002c70
 800bea8:	20002c30 	.word	0x20002c30
 800beac:	20002c78 	.word	0x20002c78
 800beb0:	200027a0 	.word	0x200027a0
 800beb4:	2000279c 	.word	0x2000279c
 800beb8:	20002c84 	.word	0x20002c84
 800bebc:	20002c80 	.word	0x20002c80
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800beca:	4b05      	ldr	r3, [pc, #20]	@ (800bee0 <xTaskGetTickCount+0x1c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bed0:	687b      	ldr	r3, [r7, #4]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	20002c74 	.word	0x20002c74

0800bee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beee:	4b4f      	ldr	r3, [pc, #316]	@ (800c02c <xTaskIncrementTick+0x148>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f040 8090 	bne.w	800c018 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bef8:	4b4d      	ldr	r3, [pc, #308]	@ (800c030 <xTaskIncrementTick+0x14c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf00:	4a4b      	ldr	r2, [pc, #300]	@ (800c030 <xTaskIncrementTick+0x14c>)
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d121      	bne.n	800bf50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf0c:	4b49      	ldr	r3, [pc, #292]	@ (800c034 <xTaskIncrementTick+0x150>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00b      	beq.n	800bf2e <xTaskIncrementTick+0x4a>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	603b      	str	r3, [r7, #0]
}
 800bf28:	bf00      	nop
 800bf2a:	bf00      	nop
 800bf2c:	e7fd      	b.n	800bf2a <xTaskIncrementTick+0x46>
 800bf2e:	4b41      	ldr	r3, [pc, #260]	@ (800c034 <xTaskIncrementTick+0x150>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	4b40      	ldr	r3, [pc, #256]	@ (800c038 <xTaskIncrementTick+0x154>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a3e      	ldr	r2, [pc, #248]	@ (800c034 <xTaskIncrementTick+0x150>)
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	4a3e      	ldr	r2, [pc, #248]	@ (800c038 <xTaskIncrementTick+0x154>)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6013      	str	r3, [r2, #0]
 800bf42:	4b3e      	ldr	r3, [pc, #248]	@ (800c03c <xTaskIncrementTick+0x158>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3301      	adds	r3, #1
 800bf48:	4a3c      	ldr	r2, [pc, #240]	@ (800c03c <xTaskIncrementTick+0x158>)
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	f000 fae2 	bl	800c514 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf50:	4b3b      	ldr	r3, [pc, #236]	@ (800c040 <xTaskIncrementTick+0x15c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d349      	bcc.n	800bfee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf5a:	4b36      	ldr	r3, [pc, #216]	@ (800c034 <xTaskIncrementTick+0x150>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d104      	bne.n	800bf6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf64:	4b36      	ldr	r3, [pc, #216]	@ (800c040 <xTaskIncrementTick+0x15c>)
 800bf66:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6a:	601a      	str	r2, [r3, #0]
					break;
 800bf6c:	e03f      	b.n	800bfee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf6e:	4b31      	ldr	r3, [pc, #196]	@ (800c034 <xTaskIncrementTick+0x150>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d203      	bcs.n	800bf8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf86:	4a2e      	ldr	r2, [pc, #184]	@ (800c040 <xTaskIncrementTick+0x15c>)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf8c:	e02f      	b.n	800bfee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	3304      	adds	r3, #4
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe ff26 	bl	800ade4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	3318      	adds	r3, #24
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe ff1d 	bl	800ade4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfae:	4b25      	ldr	r3, [pc, #148]	@ (800c044 <xTaskIncrementTick+0x160>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d903      	bls.n	800bfbe <xTaskIncrementTick+0xda>
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfba:	4a22      	ldr	r2, [pc, #136]	@ (800c044 <xTaskIncrementTick+0x160>)
 800bfbc:	6013      	str	r3, [r2, #0]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4a1f      	ldr	r2, [pc, #124]	@ (800c048 <xTaskIncrementTick+0x164>)
 800bfcc:	441a      	add	r2, r3
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f7fe fea8 	bl	800ad2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfde:	4b1b      	ldr	r3, [pc, #108]	@ (800c04c <xTaskIncrementTick+0x168>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d3b8      	bcc.n	800bf5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfec:	e7b5      	b.n	800bf5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bfee:	4b17      	ldr	r3, [pc, #92]	@ (800c04c <xTaskIncrementTick+0x168>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff4:	4914      	ldr	r1, [pc, #80]	@ (800c048 <xTaskIncrementTick+0x164>)
 800bff6:	4613      	mov	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4413      	add	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	440b      	add	r3, r1
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d901      	bls.n	800c00a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c006:	2301      	movs	r3, #1
 800c008:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c00a:	4b11      	ldr	r3, [pc, #68]	@ (800c050 <xTaskIncrementTick+0x16c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d007      	beq.n	800c022 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c012:	2301      	movs	r3, #1
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	e004      	b.n	800c022 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c018:	4b0e      	ldr	r3, [pc, #56]	@ (800c054 <xTaskIncrementTick+0x170>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3301      	adds	r3, #1
 800c01e:	4a0d      	ldr	r2, [pc, #52]	@ (800c054 <xTaskIncrementTick+0x170>)
 800c020:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c022:	697b      	ldr	r3, [r7, #20]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20002c98 	.word	0x20002c98
 800c030:	20002c74 	.word	0x20002c74
 800c034:	20002c28 	.word	0x20002c28
 800c038:	20002c2c 	.word	0x20002c2c
 800c03c:	20002c88 	.word	0x20002c88
 800c040:	20002c90 	.word	0x20002c90
 800c044:	20002c78 	.word	0x20002c78
 800c048:	200027a0 	.word	0x200027a0
 800c04c:	2000279c 	.word	0x2000279c
 800c050:	20002c84 	.word	0x20002c84
 800c054:	20002c80 	.word	0x20002c80

0800c058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c05e:	4b2b      	ldr	r3, [pc, #172]	@ (800c10c <vTaskSwitchContext+0xb4>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c066:	4b2a      	ldr	r3, [pc, #168]	@ (800c110 <vTaskSwitchContext+0xb8>)
 800c068:	2201      	movs	r2, #1
 800c06a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c06c:	e047      	b.n	800c0fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c06e:	4b28      	ldr	r3, [pc, #160]	@ (800c110 <vTaskSwitchContext+0xb8>)
 800c070:	2200      	movs	r2, #0
 800c072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c074:	4b27      	ldr	r3, [pc, #156]	@ (800c114 <vTaskSwitchContext+0xbc>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	e011      	b.n	800c0a0 <vTaskSwitchContext+0x48>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10b      	bne.n	800c09a <vTaskSwitchContext+0x42>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	607b      	str	r3, [r7, #4]
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop
 800c098:	e7fd      	b.n	800c096 <vTaskSwitchContext+0x3e>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	491d      	ldr	r1, [pc, #116]	@ (800c118 <vTaskSwitchContext+0xc0>)
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0e3      	beq.n	800c07c <vTaskSwitchContext+0x24>
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4a16      	ldr	r2, [pc, #88]	@ (800c118 <vTaskSwitchContext+0xc0>)
 800c0c0:	4413      	add	r3, r2
 800c0c2:	60bb      	str	r3, [r7, #8]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	605a      	str	r2, [r3, #4]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d104      	bne.n	800c0e4 <vTaskSwitchContext+0x8c>
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	605a      	str	r2, [r3, #4]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c11c <vTaskSwitchContext+0xc4>)
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	4a09      	ldr	r2, [pc, #36]	@ (800c114 <vTaskSwitchContext+0xbc>)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c0f4:	4b09      	ldr	r3, [pc, #36]	@ (800c11c <vTaskSwitchContext+0xc4>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3354      	adds	r3, #84	@ 0x54
 800c0fa:	4a09      	ldr	r2, [pc, #36]	@ (800c120 <vTaskSwitchContext+0xc8>)
 800c0fc:	6013      	str	r3, [r2, #0]
}
 800c0fe:	bf00      	nop
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20002c98 	.word	0x20002c98
 800c110:	20002c84 	.word	0x20002c84
 800c114:	20002c78 	.word	0x20002c78
 800c118:	200027a0 	.word	0x200027a0
 800c11c:	2000279c 	.word	0x2000279c
 800c120:	20000194 	.word	0x20000194

0800c124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10b      	bne.n	800c14c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	60fb      	str	r3, [r7, #12]
}
 800c146:	bf00      	nop
 800c148:	bf00      	nop
 800c14a:	e7fd      	b.n	800c148 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c14c:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <vTaskPlaceOnEventList+0x48>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3318      	adds	r3, #24
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7fe fe0c 	bl	800ad72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c15a:	2101      	movs	r1, #1
 800c15c:	6838      	ldr	r0, [r7, #0]
 800c15e:	f000 fa87 	bl	800c670 <prvAddCurrentTaskToDelayedList>
}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	2000279c 	.word	0x2000279c

0800c170 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	617b      	str	r3, [r7, #20]
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop
 800c198:	e7fd      	b.n	800c196 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c19a:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3318      	adds	r3, #24
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f7fe fdc1 	bl	800ad2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1b4:	6879      	ldr	r1, [r7, #4]
 800c1b6:	68b8      	ldr	r0, [r7, #8]
 800c1b8:	f000 fa5a 	bl	800c670 <prvAddCurrentTaskToDelayedList>
	}
 800c1bc:	bf00      	nop
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	2000279c 	.word	0x2000279c

0800c1c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10b      	bne.n	800c1f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60fb      	str	r3, [r7, #12]
}
 800c1f0:	bf00      	nop
 800c1f2:	bf00      	nop
 800c1f4:	e7fd      	b.n	800c1f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	3318      	adds	r3, #24
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fe fdf2 	bl	800ade4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c200:	4b1d      	ldr	r3, [pc, #116]	@ (800c278 <xTaskRemoveFromEventList+0xb0>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d11d      	bne.n	800c244 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	3304      	adds	r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe fde9 	bl	800ade4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c216:	4b19      	ldr	r3, [pc, #100]	@ (800c27c <xTaskRemoveFromEventList+0xb4>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d903      	bls.n	800c226 <xTaskRemoveFromEventList+0x5e>
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c222:	4a16      	ldr	r2, [pc, #88]	@ (800c27c <xTaskRemoveFromEventList+0xb4>)
 800c224:	6013      	str	r3, [r2, #0]
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4a13      	ldr	r2, [pc, #76]	@ (800c280 <xTaskRemoveFromEventList+0xb8>)
 800c234:	441a      	add	r2, r3
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	3304      	adds	r3, #4
 800c23a:	4619      	mov	r1, r3
 800c23c:	4610      	mov	r0, r2
 800c23e:	f7fe fd74 	bl	800ad2a <vListInsertEnd>
 800c242:	e005      	b.n	800c250 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	3318      	adds	r3, #24
 800c248:	4619      	mov	r1, r3
 800c24a:	480e      	ldr	r0, [pc, #56]	@ (800c284 <xTaskRemoveFromEventList+0xbc>)
 800c24c:	f7fe fd6d 	bl	800ad2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c254:	4b0c      	ldr	r3, [pc, #48]	@ (800c288 <xTaskRemoveFromEventList+0xc0>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d905      	bls.n	800c26a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c25e:	2301      	movs	r3, #1
 800c260:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c262:	4b0a      	ldr	r3, [pc, #40]	@ (800c28c <xTaskRemoveFromEventList+0xc4>)
 800c264:	2201      	movs	r2, #1
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	e001      	b.n	800c26e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c26a:	2300      	movs	r3, #0
 800c26c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c26e:	697b      	ldr	r3, [r7, #20]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	20002c98 	.word	0x20002c98
 800c27c:	20002c78 	.word	0x20002c78
 800c280:	200027a0 	.word	0x200027a0
 800c284:	20002c30 	.word	0x20002c30
 800c288:	2000279c 	.word	0x2000279c
 800c28c:	20002c84 	.word	0x20002c84

0800c290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c298:	4b06      	ldr	r3, [pc, #24]	@ (800c2b4 <vTaskInternalSetTimeOutState+0x24>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2a0:	4b05      	ldr	r3, [pc, #20]	@ (800c2b8 <vTaskInternalSetTimeOutState+0x28>)
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	605a      	str	r2, [r3, #4]
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr
 800c2b4:	20002c88 	.word	0x20002c88
 800c2b8:	20002c74 	.word	0x20002c74

0800c2bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10b      	bne.n	800c2e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	613b      	str	r3, [r7, #16]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10b      	bne.n	800c302 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	60fb      	str	r3, [r7, #12]
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	e7fd      	b.n	800c2fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c302:	f000 fe91 	bl	800d028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c306:	4b1d      	ldr	r3, [pc, #116]	@ (800c37c <xTaskCheckForTimeOut+0xc0>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	69ba      	ldr	r2, [r7, #24]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31e:	d102      	bne.n	800c326 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c320:	2300      	movs	r3, #0
 800c322:	61fb      	str	r3, [r7, #28]
 800c324:	e023      	b.n	800c36e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	4b15      	ldr	r3, [pc, #84]	@ (800c380 <xTaskCheckForTimeOut+0xc4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d007      	beq.n	800c342 <xTaskCheckForTimeOut+0x86>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d302      	bcc.n	800c342 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c33c:	2301      	movs	r3, #1
 800c33e:	61fb      	str	r3, [r7, #28]
 800c340:	e015      	b.n	800c36e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d20b      	bcs.n	800c364 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	1ad2      	subs	r2, r2, r3
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff ff99 	bl	800c290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c35e:	2300      	movs	r3, #0
 800c360:	61fb      	str	r3, [r7, #28]
 800c362:	e004      	b.n	800c36e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c36a:	2301      	movs	r3, #1
 800c36c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c36e:	f000 fe8d 	bl	800d08c <vPortExitCritical>

	return xReturn;
 800c372:	69fb      	ldr	r3, [r7, #28]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3720      	adds	r7, #32
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20002c74 	.word	0x20002c74
 800c380:	20002c88 	.word	0x20002c88

0800c384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c384:	b480      	push	{r7}
 800c386:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c388:	4b03      	ldr	r3, [pc, #12]	@ (800c398 <vTaskMissedYield+0x14>)
 800c38a:	2201      	movs	r2, #1
 800c38c:	601a      	str	r2, [r3, #0]
}
 800c38e:	bf00      	nop
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	20002c84 	.word	0x20002c84

0800c39c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c3a4:	f000 f852 	bl	800c44c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c3a8:	4b06      	ldr	r3, [pc, #24]	@ (800c3c4 <prvIdleTask+0x28>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d9f9      	bls.n	800c3a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c3b0:	4b05      	ldr	r3, [pc, #20]	@ (800c3c8 <prvIdleTask+0x2c>)
 800c3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c3c0:	e7f0      	b.n	800c3a4 <prvIdleTask+0x8>
 800c3c2:	bf00      	nop
 800c3c4:	200027a0 	.word	0x200027a0
 800c3c8:	e000ed04 	.word	0xe000ed04

0800c3cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	607b      	str	r3, [r7, #4]
 800c3d6:	e00c      	b.n	800c3f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4a12      	ldr	r2, [pc, #72]	@ (800c42c <prvInitialiseTaskLists+0x60>)
 800c3e4:	4413      	add	r3, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fe fc72 	bl	800acd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	607b      	str	r3, [r7, #4]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b37      	cmp	r3, #55	@ 0x37
 800c3f6:	d9ef      	bls.n	800c3d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3f8:	480d      	ldr	r0, [pc, #52]	@ (800c430 <prvInitialiseTaskLists+0x64>)
 800c3fa:	f7fe fc69 	bl	800acd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3fe:	480d      	ldr	r0, [pc, #52]	@ (800c434 <prvInitialiseTaskLists+0x68>)
 800c400:	f7fe fc66 	bl	800acd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c404:	480c      	ldr	r0, [pc, #48]	@ (800c438 <prvInitialiseTaskLists+0x6c>)
 800c406:	f7fe fc63 	bl	800acd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c40a:	480c      	ldr	r0, [pc, #48]	@ (800c43c <prvInitialiseTaskLists+0x70>)
 800c40c:	f7fe fc60 	bl	800acd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c410:	480b      	ldr	r0, [pc, #44]	@ (800c440 <prvInitialiseTaskLists+0x74>)
 800c412:	f7fe fc5d 	bl	800acd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c416:	4b0b      	ldr	r3, [pc, #44]	@ (800c444 <prvInitialiseTaskLists+0x78>)
 800c418:	4a05      	ldr	r2, [pc, #20]	@ (800c430 <prvInitialiseTaskLists+0x64>)
 800c41a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c41c:	4b0a      	ldr	r3, [pc, #40]	@ (800c448 <prvInitialiseTaskLists+0x7c>)
 800c41e:	4a05      	ldr	r2, [pc, #20]	@ (800c434 <prvInitialiseTaskLists+0x68>)
 800c420:	601a      	str	r2, [r3, #0]
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200027a0 	.word	0x200027a0
 800c430:	20002c00 	.word	0x20002c00
 800c434:	20002c14 	.word	0x20002c14
 800c438:	20002c30 	.word	0x20002c30
 800c43c:	20002c44 	.word	0x20002c44
 800c440:	20002c5c 	.word	0x20002c5c
 800c444:	20002c28 	.word	0x20002c28
 800c448:	20002c2c 	.word	0x20002c2c

0800c44c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c452:	e019      	b.n	800c488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c454:	f000 fde8 	bl	800d028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c458:	4b10      	ldr	r3, [pc, #64]	@ (800c49c <prvCheckTasksWaitingTermination+0x50>)
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	4618      	mov	r0, r3
 800c466:	f7fe fcbd 	bl	800ade4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c46a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <prvCheckTasksWaitingTermination+0x54>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3b01      	subs	r3, #1
 800c470:	4a0b      	ldr	r2, [pc, #44]	@ (800c4a0 <prvCheckTasksWaitingTermination+0x54>)
 800c472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c474:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <prvCheckTasksWaitingTermination+0x58>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3b01      	subs	r3, #1
 800c47a:	4a0a      	ldr	r2, [pc, #40]	@ (800c4a4 <prvCheckTasksWaitingTermination+0x58>)
 800c47c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c47e:	f000 fe05 	bl	800d08c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f810 	bl	800c4a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c488:	4b06      	ldr	r3, [pc, #24]	@ (800c4a4 <prvCheckTasksWaitingTermination+0x58>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e1      	bne.n	800c454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20002c44 	.word	0x20002c44
 800c4a0:	20002c70 	.word	0x20002c70
 800c4a4:	20002c58 	.word	0x20002c58

0800c4a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	3354      	adds	r3, #84	@ 0x54
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f002 fb69 	bl	800eb8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d108      	bne.n	800c4d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 ff9d 	bl	800d408 <vPortFree>
				vPortFree( pxTCB );
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 ff9a 	bl	800d408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c4d4:	e019      	b.n	800c50a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d103      	bne.n	800c4e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 ff91 	bl	800d408 <vPortFree>
	}
 800c4e6:	e010      	b.n	800c50a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d00b      	beq.n	800c50a <prvDeleteTCB+0x62>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	60fb      	str	r3, [r7, #12]
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop
 800c508:	e7fd      	b.n	800c506 <prvDeleteTCB+0x5e>
	}
 800c50a:	bf00      	nop
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
	...

0800c514 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c51a:	4b0c      	ldr	r3, [pc, #48]	@ (800c54c <prvResetNextTaskUnblockTime+0x38>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d104      	bne.n	800c52e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c524:	4b0a      	ldr	r3, [pc, #40]	@ (800c550 <prvResetNextTaskUnblockTime+0x3c>)
 800c526:	f04f 32ff 	mov.w	r2, #4294967295
 800c52a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c52c:	e008      	b.n	800c540 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c52e:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <prvResetNextTaskUnblockTime+0x38>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	4a04      	ldr	r2, [pc, #16]	@ (800c550 <prvResetNextTaskUnblockTime+0x3c>)
 800c53e:	6013      	str	r3, [r2, #0]
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	20002c28 	.word	0x20002c28
 800c550:	20002c90 	.word	0x20002c90

0800c554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c55a:	4b0b      	ldr	r3, [pc, #44]	@ (800c588 <xTaskGetSchedulerState+0x34>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d102      	bne.n	800c568 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c562:	2301      	movs	r3, #1
 800c564:	607b      	str	r3, [r7, #4]
 800c566:	e008      	b.n	800c57a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c568:	4b08      	ldr	r3, [pc, #32]	@ (800c58c <xTaskGetSchedulerState+0x38>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d102      	bne.n	800c576 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c570:	2302      	movs	r3, #2
 800c572:	607b      	str	r3, [r7, #4]
 800c574:	e001      	b.n	800c57a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c576:	2300      	movs	r3, #0
 800c578:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c57a:	687b      	ldr	r3, [r7, #4]
	}
 800c57c:	4618      	mov	r0, r3
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	20002c7c 	.word	0x20002c7c
 800c58c:	20002c98 	.word	0x20002c98

0800c590 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d058      	beq.n	800c658 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5a6:	4b2f      	ldr	r3, [pc, #188]	@ (800c664 <xTaskPriorityDisinherit+0xd4>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d00b      	beq.n	800c5c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	60fb      	str	r3, [r7, #12]
}
 800c5c2:	bf00      	nop
 800c5c4:	bf00      	nop
 800c5c6:	e7fd      	b.n	800c5c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10b      	bne.n	800c5e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d4:	f383 8811 	msr	BASEPRI, r3
 800c5d8:	f3bf 8f6f 	isb	sy
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	60bb      	str	r3, [r7, #8]
}
 800c5e2:	bf00      	nop
 800c5e4:	bf00      	nop
 800c5e6:	e7fd      	b.n	800c5e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5ec:	1e5a      	subs	r2, r3, #1
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d02c      	beq.n	800c658 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c602:	2b00      	cmp	r3, #0
 800c604:	d128      	bne.n	800c658 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	3304      	adds	r3, #4
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe fbea 	bl	800ade4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c628:	4b0f      	ldr	r3, [pc, #60]	@ (800c668 <xTaskPriorityDisinherit+0xd8>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d903      	bls.n	800c638 <xTaskPriorityDisinherit+0xa8>
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c634:	4a0c      	ldr	r2, [pc, #48]	@ (800c668 <xTaskPriorityDisinherit+0xd8>)
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c63c:	4613      	mov	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4a09      	ldr	r2, [pc, #36]	@ (800c66c <xTaskPriorityDisinherit+0xdc>)
 800c646:	441a      	add	r2, r3
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f7fe fb6b 	bl	800ad2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c654:	2301      	movs	r3, #1
 800c656:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c658:	697b      	ldr	r3, [r7, #20]
	}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	2000279c 	.word	0x2000279c
 800c668:	20002c78 	.word	0x20002c78
 800c66c:	200027a0 	.word	0x200027a0

0800c670 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c67a:	4b21      	ldr	r3, [pc, #132]	@ (800c700 <prvAddCurrentTaskToDelayedList+0x90>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c680:	4b20      	ldr	r3, [pc, #128]	@ (800c704 <prvAddCurrentTaskToDelayedList+0x94>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3304      	adds	r3, #4
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe fbac 	bl	800ade4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c692:	d10a      	bne.n	800c6aa <prvAddCurrentTaskToDelayedList+0x3a>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d007      	beq.n	800c6aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c69a:	4b1a      	ldr	r3, [pc, #104]	@ (800c704 <prvAddCurrentTaskToDelayedList+0x94>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4819      	ldr	r0, [pc, #100]	@ (800c708 <prvAddCurrentTaskToDelayedList+0x98>)
 800c6a4:	f7fe fb41 	bl	800ad2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6a8:	e026      	b.n	800c6f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6b2:	4b14      	ldr	r3, [pc, #80]	@ (800c704 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d209      	bcs.n	800c6d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6c2:	4b12      	ldr	r3, [pc, #72]	@ (800c70c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c704 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	f7fe fb4f 	bl	800ad72 <vListInsert>
}
 800c6d4:	e010      	b.n	800c6f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800c710 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	4b0a      	ldr	r3, [pc, #40]	@ (800c704 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	3304      	adds	r3, #4
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	f7fe fb45 	bl	800ad72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c6e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c714 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d202      	bcs.n	800c6f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c6f2:	4a08      	ldr	r2, [pc, #32]	@ (800c714 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	6013      	str	r3, [r2, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	20002c74 	.word	0x20002c74
 800c704:	2000279c 	.word	0x2000279c
 800c708:	20002c5c 	.word	0x20002c5c
 800c70c:	20002c2c 	.word	0x20002c2c
 800c710:	20002c28 	.word	0x20002c28
 800c714:	20002c90 	.word	0x20002c90

0800c718 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08a      	sub	sp, #40	@ 0x28
 800c71c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c71e:	2300      	movs	r3, #0
 800c720:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c722:	f000 fb13 	bl	800cd4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c726:	4b1d      	ldr	r3, [pc, #116]	@ (800c79c <xTimerCreateTimerTask+0x84>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d021      	beq.n	800c772 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c72e:	2300      	movs	r3, #0
 800c730:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c736:	1d3a      	adds	r2, r7, #4
 800c738:	f107 0108 	add.w	r1, r7, #8
 800c73c:	f107 030c 	add.w	r3, r7, #12
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe faab 	bl	800ac9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	9202      	str	r2, [sp, #8]
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	2302      	movs	r3, #2
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	2300      	movs	r3, #0
 800c756:	460a      	mov	r2, r1
 800c758:	4911      	ldr	r1, [pc, #68]	@ (800c7a0 <xTimerCreateTimerTask+0x88>)
 800c75a:	4812      	ldr	r0, [pc, #72]	@ (800c7a4 <xTimerCreateTimerTask+0x8c>)
 800c75c:	f7ff f8a2 	bl	800b8a4 <xTaskCreateStatic>
 800c760:	4603      	mov	r3, r0
 800c762:	4a11      	ldr	r2, [pc, #68]	@ (800c7a8 <xTimerCreateTimerTask+0x90>)
 800c764:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c766:	4b10      	ldr	r3, [pc, #64]	@ (800c7a8 <xTimerCreateTimerTask+0x90>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c76e:	2301      	movs	r3, #1
 800c770:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10b      	bne.n	800c790 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	613b      	str	r3, [r7, #16]
}
 800c78a:	bf00      	nop
 800c78c:	bf00      	nop
 800c78e:	e7fd      	b.n	800c78c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c790:	697b      	ldr	r3, [r7, #20]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	20002ccc 	.word	0x20002ccc
 800c7a0:	08011008 	.word	0x08011008
 800c7a4:	0800c8e5 	.word	0x0800c8e5
 800c7a8:	20002cd0 	.word	0x20002cd0

0800c7ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08a      	sub	sp, #40	@ 0x28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10b      	bne.n	800c7dc <xTimerGenericCommand+0x30>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	623b      	str	r3, [r7, #32]
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	e7fd      	b.n	800c7d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c7dc:	4b19      	ldr	r3, [pc, #100]	@ (800c844 <xTimerGenericCommand+0x98>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d02a      	beq.n	800c83a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b05      	cmp	r3, #5
 800c7f4:	dc18      	bgt.n	800c828 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c7f6:	f7ff fead 	bl	800c554 <xTaskGetSchedulerState>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d109      	bne.n	800c814 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c800:	4b10      	ldr	r3, [pc, #64]	@ (800c844 <xTimerGenericCommand+0x98>)
 800c802:	6818      	ldr	r0, [r3, #0]
 800c804:	f107 0110 	add.w	r1, r7, #16
 800c808:	2300      	movs	r3, #0
 800c80a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c80c:	f7fe fc5a 	bl	800b0c4 <xQueueGenericSend>
 800c810:	6278      	str	r0, [r7, #36]	@ 0x24
 800c812:	e012      	b.n	800c83a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c814:	4b0b      	ldr	r3, [pc, #44]	@ (800c844 <xTimerGenericCommand+0x98>)
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	f107 0110 	add.w	r1, r7, #16
 800c81c:	2300      	movs	r3, #0
 800c81e:	2200      	movs	r2, #0
 800c820:	f7fe fc50 	bl	800b0c4 <xQueueGenericSend>
 800c824:	6278      	str	r0, [r7, #36]	@ 0x24
 800c826:	e008      	b.n	800c83a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c828:	4b06      	ldr	r3, [pc, #24]	@ (800c844 <xTimerGenericCommand+0x98>)
 800c82a:	6818      	ldr	r0, [r3, #0]
 800c82c:	f107 0110 	add.w	r1, r7, #16
 800c830:	2300      	movs	r3, #0
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	f7fe fd48 	bl	800b2c8 <xQueueGenericSendFromISR>
 800c838:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3728      	adds	r7, #40	@ 0x28
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20002ccc 	.word	0x20002ccc

0800c848 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b088      	sub	sp, #32
 800c84c:	af02      	add	r7, sp, #8
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c852:	4b23      	ldr	r3, [pc, #140]	@ (800c8e0 <prvProcessExpiredTimer+0x98>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	3304      	adds	r3, #4
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fabf 	bl	800ade4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c86c:	f003 0304 	and.w	r3, r3, #4
 800c870:	2b00      	cmp	r3, #0
 800c872:	d023      	beq.n	800c8bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	699a      	ldr	r2, [r3, #24]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	18d1      	adds	r1, r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	6978      	ldr	r0, [r7, #20]
 800c882:	f000 f8d5 	bl	800ca30 <prvInsertTimerInActiveList>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d020      	beq.n	800c8ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c88c:	2300      	movs	r3, #0
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	2300      	movs	r3, #0
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	2100      	movs	r1, #0
 800c896:	6978      	ldr	r0, [r7, #20]
 800c898:	f7ff ff88 	bl	800c7ac <xTimerGenericCommand>
 800c89c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d114      	bne.n	800c8ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	60fb      	str	r3, [r7, #12]
}
 800c8b6:	bf00      	nop
 800c8b8:	bf00      	nop
 800c8ba:	e7fd      	b.n	800c8b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8c2:	f023 0301 	bic.w	r3, r3, #1
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
 800c8d2:	6978      	ldr	r0, [r7, #20]
 800c8d4:	4798      	blx	r3
}
 800c8d6:	bf00      	nop
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20002cc4 	.word	0x20002cc4

0800c8e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8ec:	f107 0308 	add.w	r3, r7, #8
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 f859 	bl	800c9a8 <prvGetNextExpireTime>
 800c8f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f000 f805 	bl	800c90c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c902:	f000 f8d7 	bl	800cab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c906:	bf00      	nop
 800c908:	e7f0      	b.n	800c8ec <prvTimerTask+0x8>
	...

0800c90c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c916:	f7ff fa29 	bl	800bd6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c91a:	f107 0308 	add.w	r3, r7, #8
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 f866 	bl	800c9f0 <prvSampleTimeNow>
 800c924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d130      	bne.n	800c98e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10a      	bne.n	800c948 <prvProcessTimerOrBlockTask+0x3c>
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	429a      	cmp	r2, r3
 800c938:	d806      	bhi.n	800c948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c93a:	f7ff fa25 	bl	800bd88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c93e:	68f9      	ldr	r1, [r7, #12]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff ff81 	bl	800c848 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c946:	e024      	b.n	800c992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d008      	beq.n	800c960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c94e:	4b13      	ldr	r3, [pc, #76]	@ (800c99c <prvProcessTimerOrBlockTask+0x90>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <prvProcessTimerOrBlockTask+0x50>
 800c958:	2301      	movs	r3, #1
 800c95a:	e000      	b.n	800c95e <prvProcessTimerOrBlockTask+0x52>
 800c95c:	2300      	movs	r3, #0
 800c95e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c960:	4b0f      	ldr	r3, [pc, #60]	@ (800c9a0 <prvProcessTimerOrBlockTask+0x94>)
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	4619      	mov	r1, r3
 800c96e:	f7fe ff65 	bl	800b83c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c972:	f7ff fa09 	bl	800bd88 <xTaskResumeAll>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c97c:	4b09      	ldr	r3, [pc, #36]	@ (800c9a4 <prvProcessTimerOrBlockTask+0x98>)
 800c97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	f3bf 8f6f 	isb	sy
}
 800c98c:	e001      	b.n	800c992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c98e:	f7ff f9fb 	bl	800bd88 <xTaskResumeAll>
}
 800c992:	bf00      	nop
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20002cc8 	.word	0x20002cc8
 800c9a0:	20002ccc 	.word	0x20002ccc
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c9ec <prvGetNextExpireTime+0x44>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <prvGetNextExpireTime+0x16>
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	e000      	b.n	800c9c0 <prvGetNextExpireTime+0x18>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d105      	bne.n	800c9d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9cc:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <prvGetNextExpireTime+0x44>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	e001      	b.n	800c9dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	20002cc4 	.word	0x20002cc4

0800c9f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c9f8:	f7ff fa64 	bl	800bec4 <xTaskGetTickCount>
 800c9fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800ca2c <prvSampleTimeNow+0x3c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d205      	bcs.n	800ca14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca08:	f000 f93a 	bl	800cc80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	e002      	b.n	800ca1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ca1a:	4a04      	ldr	r2, [pc, #16]	@ (800ca2c <prvSampleTimeNow+0x3c>)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ca20:	68fb      	ldr	r3, [r7, #12]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	20002cd4 	.word	0x20002cd4

0800ca30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d812      	bhi.n	800ca7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	1ad2      	subs	r2, r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d302      	bcc.n	800ca6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca64:	2301      	movs	r3, #1
 800ca66:	617b      	str	r3, [r7, #20]
 800ca68:	e01b      	b.n	800caa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca6a:	4b10      	ldr	r3, [pc, #64]	@ (800caac <prvInsertTimerInActiveList+0x7c>)
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3304      	adds	r3, #4
 800ca72:	4619      	mov	r1, r3
 800ca74:	4610      	mov	r0, r2
 800ca76:	f7fe f97c 	bl	800ad72 <vListInsert>
 800ca7a:	e012      	b.n	800caa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d206      	bcs.n	800ca92 <prvInsertTimerInActiveList+0x62>
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d302      	bcc.n	800ca92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	617b      	str	r3, [r7, #20]
 800ca90:	e007      	b.n	800caa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca92:	4b07      	ldr	r3, [pc, #28]	@ (800cab0 <prvInsertTimerInActiveList+0x80>)
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	f7fe f968 	bl	800ad72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800caa2:	697b      	ldr	r3, [r7, #20]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	20002cc8 	.word	0x20002cc8
 800cab0:	20002cc4 	.word	0x20002cc4

0800cab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08e      	sub	sp, #56	@ 0x38
 800cab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800caba:	e0ce      	b.n	800cc5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	da19      	bge.n	800caf6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cac2:	1d3b      	adds	r3, r7, #4
 800cac4:	3304      	adds	r3, #4
 800cac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10b      	bne.n	800cae6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	61fb      	str	r3, [r7, #28]
}
 800cae0:	bf00      	nop
 800cae2:	bf00      	nop
 800cae4:	e7fd      	b.n	800cae2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800caec:	6850      	ldr	r0, [r2, #4]
 800caee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800caf0:	6892      	ldr	r2, [r2, #8]
 800caf2:	4611      	mov	r1, r2
 800caf4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f2c0 80ae 	blt.w	800cc5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d004      	beq.n	800cb14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe f968 	bl	800ade4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb14:	463b      	mov	r3, r7
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff ff6a 	bl	800c9f0 <prvSampleTimeNow>
 800cb1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b09      	cmp	r3, #9
 800cb22:	f200 8097 	bhi.w	800cc54 <prvProcessReceivedCommands+0x1a0>
 800cb26:	a201      	add	r2, pc, #4	@ (adr r2, 800cb2c <prvProcessReceivedCommands+0x78>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb55 	.word	0x0800cb55
 800cb30:	0800cb55 	.word	0x0800cb55
 800cb34:	0800cb55 	.word	0x0800cb55
 800cb38:	0800cbcb 	.word	0x0800cbcb
 800cb3c:	0800cbdf 	.word	0x0800cbdf
 800cb40:	0800cc2b 	.word	0x0800cc2b
 800cb44:	0800cb55 	.word	0x0800cb55
 800cb48:	0800cb55 	.word	0x0800cb55
 800cb4c:	0800cbcb 	.word	0x0800cbcb
 800cb50:	0800cbdf 	.word	0x0800cbdf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb5a:	f043 0301 	orr.w	r3, r3, #1
 800cb5e:	b2da      	uxtb	r2, r3
 800cb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	18d1      	adds	r1, r2, r3
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb74:	f7ff ff5c 	bl	800ca30 <prvInsertTimerInActiveList>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d06c      	beq.n	800cc58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb80:	6a1b      	ldr	r3, [r3, #32]
 800cb82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb8c:	f003 0304 	and.w	r3, r3, #4
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d061      	beq.n	800cc58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	441a      	add	r2, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	2300      	movs	r3, #0
 800cba2:	2100      	movs	r1, #0
 800cba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cba6:	f7ff fe01 	bl	800c7ac <xTimerGenericCommand>
 800cbaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d152      	bne.n	800cc58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	61bb      	str	r3, [r7, #24]
}
 800cbc4:	bf00      	nop
 800cbc6:	bf00      	nop
 800cbc8:	e7fd      	b.n	800cbc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbd0:	f023 0301 	bic.w	r3, r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cbdc:	e03d      	b.n	800cc5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbe4:	f043 0301 	orr.w	r3, r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10b      	bne.n	800cc16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	617b      	str	r3, [r7, #20]
}
 800cc10:	bf00      	nop
 800cc12:	bf00      	nop
 800cc14:	e7fd      	b.n	800cc12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc18:	699a      	ldr	r2, [r3, #24]
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1c:	18d1      	adds	r1, r2, r3
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc24:	f7ff ff04 	bl	800ca30 <prvInsertTimerInActiveList>
					break;
 800cc28:	e017      	b.n	800cc5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc30:	f003 0302 	and.w	r3, r3, #2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d103      	bne.n	800cc40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cc38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc3a:	f000 fbe5 	bl	800d408 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cc3e:	e00c      	b.n	800cc5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc46:	f023 0301 	bic.w	r3, r3, #1
 800cc4a:	b2da      	uxtb	r2, r3
 800cc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cc52:	e002      	b.n	800cc5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cc54:	bf00      	nop
 800cc56:	e000      	b.n	800cc5a <prvProcessReceivedCommands+0x1a6>
					break;
 800cc58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc5a:	4b08      	ldr	r3, [pc, #32]	@ (800cc7c <prvProcessReceivedCommands+0x1c8>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	1d39      	adds	r1, r7, #4
 800cc60:	2200      	movs	r2, #0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fbce 	bl	800b404 <xQueueReceive>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f47f af26 	bne.w	800cabc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	3730      	adds	r7, #48	@ 0x30
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	20002ccc 	.word	0x20002ccc

0800cc80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc86:	e049      	b.n	800cd1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc88:	4b2e      	ldr	r3, [pc, #184]	@ (800cd44 <prvSwitchTimerLists+0xc4>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc92:	4b2c      	ldr	r3, [pc, #176]	@ (800cd44 <prvSwitchTimerLists+0xc4>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	3304      	adds	r3, #4
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fe f89f 	bl	800ade4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d02f      	beq.n	800cd1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	699b      	ldr	r3, [r3, #24]
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d90e      	bls.n	800ccec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccda:	4b1a      	ldr	r3, [pc, #104]	@ (800cd44 <prvSwitchTimerLists+0xc4>)
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3304      	adds	r3, #4
 800cce2:	4619      	mov	r1, r3
 800cce4:	4610      	mov	r0, r2
 800cce6:	f7fe f844 	bl	800ad72 <vListInsert>
 800ccea:	e017      	b.n	800cd1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccec:	2300      	movs	r3, #0
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	693a      	ldr	r2, [r7, #16]
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f7ff fd58 	bl	800c7ac <xTimerGenericCommand>
 800ccfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10b      	bne.n	800cd1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	603b      	str	r3, [r7, #0]
}
 800cd16:	bf00      	nop
 800cd18:	bf00      	nop
 800cd1a:	e7fd      	b.n	800cd18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd1c:	4b09      	ldr	r3, [pc, #36]	@ (800cd44 <prvSwitchTimerLists+0xc4>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1b0      	bne.n	800cc88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cd26:	4b07      	ldr	r3, [pc, #28]	@ (800cd44 <prvSwitchTimerLists+0xc4>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cd2c:	4b06      	ldr	r3, [pc, #24]	@ (800cd48 <prvSwitchTimerLists+0xc8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a04      	ldr	r2, [pc, #16]	@ (800cd44 <prvSwitchTimerLists+0xc4>)
 800cd32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cd34:	4a04      	ldr	r2, [pc, #16]	@ (800cd48 <prvSwitchTimerLists+0xc8>)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	6013      	str	r3, [r2, #0]
}
 800cd3a:	bf00      	nop
 800cd3c:	3718      	adds	r7, #24
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	20002cc4 	.word	0x20002cc4
 800cd48:	20002cc8 	.word	0x20002cc8

0800cd4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd52:	f000 f969 	bl	800d028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cd56:	4b15      	ldr	r3, [pc, #84]	@ (800cdac <prvCheckForValidListAndQueue+0x60>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d120      	bne.n	800cda0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd5e:	4814      	ldr	r0, [pc, #80]	@ (800cdb0 <prvCheckForValidListAndQueue+0x64>)
 800cd60:	f7fd ffb6 	bl	800acd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd64:	4813      	ldr	r0, [pc, #76]	@ (800cdb4 <prvCheckForValidListAndQueue+0x68>)
 800cd66:	f7fd ffb3 	bl	800acd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd6a:	4b13      	ldr	r3, [pc, #76]	@ (800cdb8 <prvCheckForValidListAndQueue+0x6c>)
 800cd6c:	4a10      	ldr	r2, [pc, #64]	@ (800cdb0 <prvCheckForValidListAndQueue+0x64>)
 800cd6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd70:	4b12      	ldr	r3, [pc, #72]	@ (800cdbc <prvCheckForValidListAndQueue+0x70>)
 800cd72:	4a10      	ldr	r2, [pc, #64]	@ (800cdb4 <prvCheckForValidListAndQueue+0x68>)
 800cd74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd76:	2300      	movs	r3, #0
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	4b11      	ldr	r3, [pc, #68]	@ (800cdc0 <prvCheckForValidListAndQueue+0x74>)
 800cd7c:	4a11      	ldr	r2, [pc, #68]	@ (800cdc4 <prvCheckForValidListAndQueue+0x78>)
 800cd7e:	2110      	movs	r1, #16
 800cd80:	200a      	movs	r0, #10
 800cd82:	f7fe f8c3 	bl	800af0c <xQueueGenericCreateStatic>
 800cd86:	4603      	mov	r3, r0
 800cd88:	4a08      	ldr	r2, [pc, #32]	@ (800cdac <prvCheckForValidListAndQueue+0x60>)
 800cd8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd8c:	4b07      	ldr	r3, [pc, #28]	@ (800cdac <prvCheckForValidListAndQueue+0x60>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d005      	beq.n	800cda0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd94:	4b05      	ldr	r3, [pc, #20]	@ (800cdac <prvCheckForValidListAndQueue+0x60>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	490b      	ldr	r1, [pc, #44]	@ (800cdc8 <prvCheckForValidListAndQueue+0x7c>)
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fd24 	bl	800b7e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cda0:	f000 f974 	bl	800d08c <vPortExitCritical>
}
 800cda4:	bf00      	nop
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	20002ccc 	.word	0x20002ccc
 800cdb0:	20002c9c 	.word	0x20002c9c
 800cdb4:	20002cb0 	.word	0x20002cb0
 800cdb8:	20002cc4 	.word	0x20002cc4
 800cdbc:	20002cc8 	.word	0x20002cc8
 800cdc0:	20002d78 	.word	0x20002d78
 800cdc4:	20002cd8 	.word	0x20002cd8
 800cdc8:	08011010 	.word	0x08011010

0800cdcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3b04      	subs	r3, #4
 800cddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cde4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	3b04      	subs	r3, #4
 800cdea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f023 0201 	bic.w	r2, r3, #1
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3b04      	subs	r3, #4
 800cdfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cdfc:	4a0c      	ldr	r2, [pc, #48]	@ (800ce30 <pxPortInitialiseStack+0x64>)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	3b14      	subs	r3, #20
 800ce06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3b04      	subs	r3, #4
 800ce12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f06f 0202 	mvn.w	r2, #2
 800ce1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3b20      	subs	r3, #32
 800ce20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce22:	68fb      	ldr	r3, [r7, #12]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	0800ce35 	.word	0x0800ce35

0800ce34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce3e:	4b13      	ldr	r3, [pc, #76]	@ (800ce8c <prvTaskExitError+0x58>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce46:	d00b      	beq.n	800ce60 <prvTaskExitError+0x2c>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	60fb      	str	r3, [r7, #12]
}
 800ce5a:	bf00      	nop
 800ce5c:	bf00      	nop
 800ce5e:	e7fd      	b.n	800ce5c <prvTaskExitError+0x28>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	60bb      	str	r3, [r7, #8]
}
 800ce72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce74:	bf00      	nop
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d0fc      	beq.n	800ce76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	2000011c 	.word	0x2000011c

0800ce90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce90:	4b07      	ldr	r3, [pc, #28]	@ (800ceb0 <pxCurrentTCBConst2>)
 800ce92:	6819      	ldr	r1, [r3, #0]
 800ce94:	6808      	ldr	r0, [r1, #0]
 800ce96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9a:	f380 8809 	msr	PSP, r0
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f04f 0000 	mov.w	r0, #0
 800cea6:	f380 8811 	msr	BASEPRI, r0
 800ceaa:	4770      	bx	lr
 800ceac:	f3af 8000 	nop.w

0800ceb0 <pxCurrentTCBConst2>:
 800ceb0:	2000279c 	.word	0x2000279c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop

0800ceb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ceb8:	4808      	ldr	r0, [pc, #32]	@ (800cedc <prvPortStartFirstTask+0x24>)
 800ceba:	6800      	ldr	r0, [r0, #0]
 800cebc:	6800      	ldr	r0, [r0, #0]
 800cebe:	f380 8808 	msr	MSP, r0
 800cec2:	f04f 0000 	mov.w	r0, #0
 800cec6:	f380 8814 	msr	CONTROL, r0
 800ceca:	b662      	cpsie	i
 800cecc:	b661      	cpsie	f
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	df00      	svc	0
 800ced8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ceda:	bf00      	nop
 800cedc:	e000ed08 	.word	0xe000ed08

0800cee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cee6:	4b47      	ldr	r3, [pc, #284]	@ (800d004 <xPortStartScheduler+0x124>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a47      	ldr	r2, [pc, #284]	@ (800d008 <xPortStartScheduler+0x128>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d10b      	bne.n	800cf08 <xPortStartScheduler+0x28>
	__asm volatile
 800cef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef4:	f383 8811 	msr	BASEPRI, r3
 800cef8:	f3bf 8f6f 	isb	sy
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	60fb      	str	r3, [r7, #12]
}
 800cf02:	bf00      	nop
 800cf04:	bf00      	nop
 800cf06:	e7fd      	b.n	800cf04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf08:	4b3e      	ldr	r3, [pc, #248]	@ (800d004 <xPortStartScheduler+0x124>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a3f      	ldr	r2, [pc, #252]	@ (800d00c <xPortStartScheduler+0x12c>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d10b      	bne.n	800cf2a <xPortStartScheduler+0x4a>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	613b      	str	r3, [r7, #16]
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop
 800cf28:	e7fd      	b.n	800cf26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf2a:	4b39      	ldr	r3, [pc, #228]	@ (800d010 <xPortStartScheduler+0x130>)
 800cf2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	22ff      	movs	r2, #255	@ 0xff
 800cf3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	4b31      	ldr	r3, [pc, #196]	@ (800d014 <xPortStartScheduler+0x134>)
 800cf50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf52:	4b31      	ldr	r3, [pc, #196]	@ (800d018 <xPortStartScheduler+0x138>)
 800cf54:	2207      	movs	r2, #7
 800cf56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf58:	e009      	b.n	800cf6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cf5a:	4b2f      	ldr	r3, [pc, #188]	@ (800d018 <xPortStartScheduler+0x138>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	4a2d      	ldr	r2, [pc, #180]	@ (800d018 <xPortStartScheduler+0x138>)
 800cf62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf64:	78fb      	ldrb	r3, [r7, #3]
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf6e:	78fb      	ldrb	r3, [r7, #3]
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf76:	2b80      	cmp	r3, #128	@ 0x80
 800cf78:	d0ef      	beq.n	800cf5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf7a:	4b27      	ldr	r3, [pc, #156]	@ (800d018 <xPortStartScheduler+0x138>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f1c3 0307 	rsb	r3, r3, #7
 800cf82:	2b04      	cmp	r3, #4
 800cf84:	d00b      	beq.n	800cf9e <xPortStartScheduler+0xbe>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60bb      	str	r3, [r7, #8]
}
 800cf98:	bf00      	nop
 800cf9a:	bf00      	nop
 800cf9c:	e7fd      	b.n	800cf9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf9e:	4b1e      	ldr	r3, [pc, #120]	@ (800d018 <xPortStartScheduler+0x138>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	021b      	lsls	r3, r3, #8
 800cfa4:	4a1c      	ldr	r2, [pc, #112]	@ (800d018 <xPortStartScheduler+0x138>)
 800cfa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cfa8:	4b1b      	ldr	r3, [pc, #108]	@ (800d018 <xPortStartScheduler+0x138>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cfb0:	4a19      	ldr	r2, [pc, #100]	@ (800d018 <xPortStartScheduler+0x138>)
 800cfb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cfbc:	4b17      	ldr	r3, [pc, #92]	@ (800d01c <xPortStartScheduler+0x13c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a16      	ldr	r2, [pc, #88]	@ (800d01c <xPortStartScheduler+0x13c>)
 800cfc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cfc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cfc8:	4b14      	ldr	r3, [pc, #80]	@ (800d01c <xPortStartScheduler+0x13c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a13      	ldr	r2, [pc, #76]	@ (800d01c <xPortStartScheduler+0x13c>)
 800cfce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cfd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cfd4:	f000 f8da 	bl	800d18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cfd8:	4b11      	ldr	r3, [pc, #68]	@ (800d020 <xPortStartScheduler+0x140>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cfde:	f000 f8f9 	bl	800d1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cfe2:	4b10      	ldr	r3, [pc, #64]	@ (800d024 <xPortStartScheduler+0x144>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a0f      	ldr	r2, [pc, #60]	@ (800d024 <xPortStartScheduler+0x144>)
 800cfe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cfec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cfee:	f7ff ff63 	bl	800ceb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cff2:	f7ff f831 	bl	800c058 <vTaskSwitchContext>
	prvTaskExitError();
 800cff6:	f7ff ff1d 	bl	800ce34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	e000ed00 	.word	0xe000ed00
 800d008:	410fc271 	.word	0x410fc271
 800d00c:	410fc270 	.word	0x410fc270
 800d010:	e000e400 	.word	0xe000e400
 800d014:	20002dc8 	.word	0x20002dc8
 800d018:	20002dcc 	.word	0x20002dcc
 800d01c:	e000ed20 	.word	0xe000ed20
 800d020:	2000011c 	.word	0x2000011c
 800d024:	e000ef34 	.word	0xe000ef34

0800d028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	607b      	str	r3, [r7, #4]
}
 800d040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d042:	4b10      	ldr	r3, [pc, #64]	@ (800d084 <vPortEnterCritical+0x5c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3301      	adds	r3, #1
 800d048:	4a0e      	ldr	r2, [pc, #56]	@ (800d084 <vPortEnterCritical+0x5c>)
 800d04a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d04c:	4b0d      	ldr	r3, [pc, #52]	@ (800d084 <vPortEnterCritical+0x5c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d110      	bne.n	800d076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d054:	4b0c      	ldr	r3, [pc, #48]	@ (800d088 <vPortEnterCritical+0x60>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00b      	beq.n	800d076 <vPortEnterCritical+0x4e>
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	603b      	str	r3, [r7, #0]
}
 800d070:	bf00      	nop
 800d072:	bf00      	nop
 800d074:	e7fd      	b.n	800d072 <vPortEnterCritical+0x4a>
	}
}
 800d076:	bf00      	nop
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	2000011c 	.word	0x2000011c
 800d088:	e000ed04 	.word	0xe000ed04

0800d08c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d092:	4b12      	ldr	r3, [pc, #72]	@ (800d0dc <vPortExitCritical+0x50>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10b      	bne.n	800d0b2 <vPortExitCritical+0x26>
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	607b      	str	r3, [r7, #4]
}
 800d0ac:	bf00      	nop
 800d0ae:	bf00      	nop
 800d0b0:	e7fd      	b.n	800d0ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d0dc <vPortExitCritical+0x50>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	4a08      	ldr	r2, [pc, #32]	@ (800d0dc <vPortExitCritical+0x50>)
 800d0ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d0bc:	4b07      	ldr	r3, [pc, #28]	@ (800d0dc <vPortExitCritical+0x50>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d105      	bne.n	800d0d0 <vPortExitCritical+0x44>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	f383 8811 	msr	BASEPRI, r3
}
 800d0ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	2000011c 	.word	0x2000011c

0800d0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d0e0:	f3ef 8009 	mrs	r0, PSP
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	4b15      	ldr	r3, [pc, #84]	@ (800d140 <pxCurrentTCBConst>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	f01e 0f10 	tst.w	lr, #16
 800d0f0:	bf08      	it	eq
 800d0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fa:	6010      	str	r0, [r2, #0]
 800d0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d104:	f380 8811 	msr	BASEPRI, r0
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f7fe ffa2 	bl	800c058 <vTaskSwitchContext>
 800d114:	f04f 0000 	mov.w	r0, #0
 800d118:	f380 8811 	msr	BASEPRI, r0
 800d11c:	bc09      	pop	{r0, r3}
 800d11e:	6819      	ldr	r1, [r3, #0]
 800d120:	6808      	ldr	r0, [r1, #0]
 800d122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d126:	f01e 0f10 	tst.w	lr, #16
 800d12a:	bf08      	it	eq
 800d12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d130:	f380 8809 	msr	PSP, r0
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	f3af 8000 	nop.w

0800d140 <pxCurrentTCBConst>:
 800d140:	2000279c 	.word	0x2000279c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d144:	bf00      	nop
 800d146:	bf00      	nop

0800d148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	607b      	str	r3, [r7, #4]
}
 800d160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d162:	f7fe febf 	bl	800bee4 <xTaskIncrementTick>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d003      	beq.n	800d174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d16c:	4b06      	ldr	r3, [pc, #24]	@ (800d188 <xPortSysTickHandler+0x40>)
 800d16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	2300      	movs	r3, #0
 800d176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	f383 8811 	msr	BASEPRI, r3
}
 800d17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d180:	bf00      	nop
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	e000ed04 	.word	0xe000ed04

0800d18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d18c:	b480      	push	{r7}
 800d18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d190:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c0 <vPortSetupTimerInterrupt+0x34>)
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d196:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c4 <vPortSetupTimerInterrupt+0x38>)
 800d198:	2200      	movs	r2, #0
 800d19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d19c:	4b0a      	ldr	r3, [pc, #40]	@ (800d1c8 <vPortSetupTimerInterrupt+0x3c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d1cc <vPortSetupTimerInterrupt+0x40>)
 800d1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1a6:	099b      	lsrs	r3, r3, #6
 800d1a8:	4a09      	ldr	r2, [pc, #36]	@ (800d1d0 <vPortSetupTimerInterrupt+0x44>)
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d1ae:	4b04      	ldr	r3, [pc, #16]	@ (800d1c0 <vPortSetupTimerInterrupt+0x34>)
 800d1b0:	2207      	movs	r2, #7
 800d1b2:	601a      	str	r2, [r3, #0]
}
 800d1b4:	bf00      	nop
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	e000e010 	.word	0xe000e010
 800d1c4:	e000e018 	.word	0xe000e018
 800d1c8:	20000000 	.word	0x20000000
 800d1cc:	10624dd3 	.word	0x10624dd3
 800d1d0:	e000e014 	.word	0xe000e014

0800d1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d1e4 <vPortEnableVFP+0x10>
 800d1d8:	6801      	ldr	r1, [r0, #0]
 800d1da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d1de:	6001      	str	r1, [r0, #0]
 800d1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d1e2:	bf00      	nop
 800d1e4:	e000ed88 	.word	0xe000ed88

0800d1e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d1ee:	f3ef 8305 	mrs	r3, IPSR
 800d1f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b0f      	cmp	r3, #15
 800d1f8:	d915      	bls.n	800d226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d1fa:	4a18      	ldr	r2, [pc, #96]	@ (800d25c <vPortValidateInterruptPriority+0x74>)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4413      	add	r3, r2
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d204:	4b16      	ldr	r3, [pc, #88]	@ (800d260 <vPortValidateInterruptPriority+0x78>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	7afa      	ldrb	r2, [r7, #11]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d20b      	bcs.n	800d226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	607b      	str	r3, [r7, #4]
}
 800d220:	bf00      	nop
 800d222:	bf00      	nop
 800d224:	e7fd      	b.n	800d222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d226:	4b0f      	ldr	r3, [pc, #60]	@ (800d264 <vPortValidateInterruptPriority+0x7c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d22e:	4b0e      	ldr	r3, [pc, #56]	@ (800d268 <vPortValidateInterruptPriority+0x80>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	429a      	cmp	r2, r3
 800d234:	d90b      	bls.n	800d24e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	603b      	str	r3, [r7, #0]
}
 800d248:	bf00      	nop
 800d24a:	bf00      	nop
 800d24c:	e7fd      	b.n	800d24a <vPortValidateInterruptPriority+0x62>
	}
 800d24e:	bf00      	nop
 800d250:	3714      	adds	r7, #20
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	e000e3f0 	.word	0xe000e3f0
 800d260:	20002dc8 	.word	0x20002dc8
 800d264:	e000ed0c 	.word	0xe000ed0c
 800d268:	20002dcc 	.word	0x20002dcc

0800d26c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08a      	sub	sp, #40	@ 0x28
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d274:	2300      	movs	r3, #0
 800d276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d278:	f7fe fd78 	bl	800bd6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d27c:	4b5c      	ldr	r3, [pc, #368]	@ (800d3f0 <pvPortMalloc+0x184>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d284:	f000 f924 	bl	800d4d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d288:	4b5a      	ldr	r3, [pc, #360]	@ (800d3f4 <pvPortMalloc+0x188>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4013      	ands	r3, r2
 800d290:	2b00      	cmp	r3, #0
 800d292:	f040 8095 	bne.w	800d3c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d01e      	beq.n	800d2da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d29c:	2208      	movs	r2, #8
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f003 0307 	and.w	r3, r3, #7
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d015      	beq.n	800d2da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f023 0307 	bic.w	r3, r3, #7
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f003 0307 	and.w	r3, r3, #7
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00b      	beq.n	800d2da <pvPortMalloc+0x6e>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	617b      	str	r3, [r7, #20]
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop
 800d2d8:	e7fd      	b.n	800d2d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d06f      	beq.n	800d3c0 <pvPortMalloc+0x154>
 800d2e0:	4b45      	ldr	r3, [pc, #276]	@ (800d3f8 <pvPortMalloc+0x18c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d86a      	bhi.n	800d3c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d2ea:	4b44      	ldr	r3, [pc, #272]	@ (800d3fc <pvPortMalloc+0x190>)
 800d2ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d2ee:	4b43      	ldr	r3, [pc, #268]	@ (800d3fc <pvPortMalloc+0x190>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2f4:	e004      	b.n	800d300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	429a      	cmp	r2, r3
 800d308:	d903      	bls.n	800d312 <pvPortMalloc+0xa6>
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f1      	bne.n	800d2f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d312:	4b37      	ldr	r3, [pc, #220]	@ (800d3f0 <pvPortMalloc+0x184>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d318:	429a      	cmp	r2, r3
 800d31a:	d051      	beq.n	800d3c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2208      	movs	r2, #8
 800d322:	4413      	add	r3, r2
 800d324:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	1ad2      	subs	r2, r2, r3
 800d336:	2308      	movs	r3, #8
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d920      	bls.n	800d380 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4413      	add	r3, r2
 800d344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	f003 0307 	and.w	r3, r3, #7
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <pvPortMalloc+0xfc>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	613b      	str	r3, [r7, #16]
}
 800d362:	bf00      	nop
 800d364:	bf00      	nop
 800d366:	e7fd      	b.n	800d364 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	1ad2      	subs	r2, r2, r3
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d37a:	69b8      	ldr	r0, [r7, #24]
 800d37c:	f000 f90a 	bl	800d594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d380:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f8 <pvPortMalloc+0x18c>)
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	4a1b      	ldr	r2, [pc, #108]	@ (800d3f8 <pvPortMalloc+0x18c>)
 800d38c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d38e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f8 <pvPortMalloc+0x18c>)
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	4b1b      	ldr	r3, [pc, #108]	@ (800d400 <pvPortMalloc+0x194>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d203      	bcs.n	800d3a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d39a:	4b17      	ldr	r3, [pc, #92]	@ (800d3f8 <pvPortMalloc+0x18c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a18      	ldr	r2, [pc, #96]	@ (800d400 <pvPortMalloc+0x194>)
 800d3a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	4b13      	ldr	r3, [pc, #76]	@ (800d3f4 <pvPortMalloc+0x188>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d3b6:	4b13      	ldr	r3, [pc, #76]	@ (800d404 <pvPortMalloc+0x198>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	4a11      	ldr	r2, [pc, #68]	@ (800d404 <pvPortMalloc+0x198>)
 800d3be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d3c0:	f7fe fce2 	bl	800bd88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00b      	beq.n	800d3e6 <pvPortMalloc+0x17a>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	60fb      	str	r3, [r7, #12]
}
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	e7fd      	b.n	800d3e2 <pvPortMalloc+0x176>
	return pvReturn;
 800d3e6:	69fb      	ldr	r3, [r7, #28]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3728      	adds	r7, #40	@ 0x28
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	20008b98 	.word	0x20008b98
 800d3f4:	20008bac 	.word	0x20008bac
 800d3f8:	20008b9c 	.word	0x20008b9c
 800d3fc:	20008b90 	.word	0x20008b90
 800d400:	20008ba0 	.word	0x20008ba0
 800d404:	20008ba4 	.word	0x20008ba4

0800d408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d04f      	beq.n	800d4ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d41a:	2308      	movs	r3, #8
 800d41c:	425b      	negs	r3, r3
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	4413      	add	r3, r2
 800d422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	4b25      	ldr	r3, [pc, #148]	@ (800d4c4 <vPortFree+0xbc>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4013      	ands	r3, r2
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10b      	bne.n	800d44e <vPortFree+0x46>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	60fb      	str	r3, [r7, #12]
}
 800d448:	bf00      	nop
 800d44a:	bf00      	nop
 800d44c:	e7fd      	b.n	800d44a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00b      	beq.n	800d46e <vPortFree+0x66>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45a:	f383 8811 	msr	BASEPRI, r3
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	60bb      	str	r3, [r7, #8]
}
 800d468:	bf00      	nop
 800d46a:	bf00      	nop
 800d46c:	e7fd      	b.n	800d46a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	4b14      	ldr	r3, [pc, #80]	@ (800d4c4 <vPortFree+0xbc>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4013      	ands	r3, r2
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d01e      	beq.n	800d4ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d11a      	bne.n	800d4ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c4 <vPortFree+0xbc>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	43db      	mvns	r3, r3
 800d48e:	401a      	ands	r2, r3
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d494:	f7fe fc6a 	bl	800bd6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c8 <vPortFree+0xc0>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	4a09      	ldr	r2, [pc, #36]	@ (800d4c8 <vPortFree+0xc0>)
 800d4a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4a6:	6938      	ldr	r0, [r7, #16]
 800d4a8:	f000 f874 	bl	800d594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d4ac:	4b07      	ldr	r3, [pc, #28]	@ (800d4cc <vPortFree+0xc4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	4a06      	ldr	r2, [pc, #24]	@ (800d4cc <vPortFree+0xc4>)
 800d4b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d4b6:	f7fe fc67 	bl	800bd88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d4ba:	bf00      	nop
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20008bac 	.word	0x20008bac
 800d4c8:	20008b9c 	.word	0x20008b9c
 800d4cc:	20008ba8 	.word	0x20008ba8

0800d4d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d4d6:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800d4da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d4dc:	4b27      	ldr	r3, [pc, #156]	@ (800d57c <prvHeapInit+0xac>)
 800d4de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f003 0307 	and.w	r3, r3, #7
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00c      	beq.n	800d504 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	3307      	adds	r3, #7
 800d4ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f023 0307 	bic.w	r3, r3, #7
 800d4f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d4f8:	68ba      	ldr	r2, [r7, #8]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	4a1f      	ldr	r2, [pc, #124]	@ (800d57c <prvHeapInit+0xac>)
 800d500:	4413      	add	r3, r2
 800d502:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d508:	4a1d      	ldr	r2, [pc, #116]	@ (800d580 <prvHeapInit+0xb0>)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d50e:	4b1c      	ldr	r3, [pc, #112]	@ (800d580 <prvHeapInit+0xb0>)
 800d510:	2200      	movs	r2, #0
 800d512:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	4413      	add	r3, r2
 800d51a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d51c:	2208      	movs	r2, #8
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	1a9b      	subs	r3, r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f023 0307 	bic.w	r3, r3, #7
 800d52a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	4a15      	ldr	r2, [pc, #84]	@ (800d584 <prvHeapInit+0xb4>)
 800d530:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d532:	4b14      	ldr	r3, [pc, #80]	@ (800d584 <prvHeapInit+0xb4>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2200      	movs	r2, #0
 800d538:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d53a:	4b12      	ldr	r3, [pc, #72]	@ (800d584 <prvHeapInit+0xb4>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2200      	movs	r2, #0
 800d540:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	1ad2      	subs	r2, r2, r3
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d550:	4b0c      	ldr	r3, [pc, #48]	@ (800d584 <prvHeapInit+0xb4>)
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	4a0a      	ldr	r2, [pc, #40]	@ (800d588 <prvHeapInit+0xb8>)
 800d55e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	4a09      	ldr	r2, [pc, #36]	@ (800d58c <prvHeapInit+0xbc>)
 800d566:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d568:	4b09      	ldr	r3, [pc, #36]	@ (800d590 <prvHeapInit+0xc0>)
 800d56a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d56e:	601a      	str	r2, [r3, #0]
}
 800d570:	bf00      	nop
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	20002dd0 	.word	0x20002dd0
 800d580:	20008b90 	.word	0x20008b90
 800d584:	20008b98 	.word	0x20008b98
 800d588:	20008ba0 	.word	0x20008ba0
 800d58c:	20008b9c 	.word	0x20008b9c
 800d590:	20008bac 	.word	0x20008bac

0800d594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d59c:	4b28      	ldr	r3, [pc, #160]	@ (800d640 <prvInsertBlockIntoFreeList+0xac>)
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	e002      	b.n	800d5a8 <prvInsertBlockIntoFreeList+0x14>
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d8f7      	bhi.n	800d5a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	4413      	add	r3, r2
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d108      	bne.n	800d5d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	441a      	add	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	441a      	add	r2, r3
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d118      	bne.n	800d61c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	4b15      	ldr	r3, [pc, #84]	@ (800d644 <prvInsertBlockIntoFreeList+0xb0>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d00d      	beq.n	800d612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	441a      	add	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	e008      	b.n	800d624 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d612:	4b0c      	ldr	r3, [pc, #48]	@ (800d644 <prvInsertBlockIntoFreeList+0xb0>)
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	e003      	b.n	800d624 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d002      	beq.n	800d632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d632:	bf00      	nop
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	20008b90 	.word	0x20008b90
 800d644:	20008b98 	.word	0x20008b98

0800d648 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d64c:	2200      	movs	r2, #0
 800d64e:	4912      	ldr	r1, [pc, #72]	@ (800d698 <MX_USB_Device_Init+0x50>)
 800d650:	4812      	ldr	r0, [pc, #72]	@ (800d69c <MX_USB_Device_Init+0x54>)
 800d652:	f7fc f837 	bl	80096c4 <USBD_Init>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d65c:	f7f4 f9b0 	bl	80019c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d660:	490f      	ldr	r1, [pc, #60]	@ (800d6a0 <MX_USB_Device_Init+0x58>)
 800d662:	480e      	ldr	r0, [pc, #56]	@ (800d69c <MX_USB_Device_Init+0x54>)
 800d664:	f7fc f85e 	bl	8009724 <USBD_RegisterClass>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d001      	beq.n	800d672 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d66e:	f7f4 f9a7 	bl	80019c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d672:	490c      	ldr	r1, [pc, #48]	@ (800d6a4 <MX_USB_Device_Init+0x5c>)
 800d674:	4809      	ldr	r0, [pc, #36]	@ (800d69c <MX_USB_Device_Init+0x54>)
 800d676:	f7fb ff7f 	bl	8009578 <USBD_CDC_RegisterInterface>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d680:	f7f4 f99e 	bl	80019c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d684:	4805      	ldr	r0, [pc, #20]	@ (800d69c <MX_USB_Device_Init+0x54>)
 800d686:	f7fc f874 	bl	8009772 <USBD_Start>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d001      	beq.n	800d694 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d690:	f7f4 f996 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d694:	bf00      	nop
 800d696:	bd80      	pop	{r7, pc}
 800d698:	20000134 	.word	0x20000134
 800d69c:	20008bb0 	.word	0x20008bb0
 800d6a0:	20000018 	.word	0x20000018
 800d6a4:	20000120 	.word	0x20000120

0800d6a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	4905      	ldr	r1, [pc, #20]	@ (800d6c4 <CDC_Init_FS+0x1c>)
 800d6b0:	4805      	ldr	r0, [pc, #20]	@ (800d6c8 <CDC_Init_FS+0x20>)
 800d6b2:	f7fb ff76 	bl	80095a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d6b6:	4905      	ldr	r1, [pc, #20]	@ (800d6cc <CDC_Init_FS+0x24>)
 800d6b8:	4803      	ldr	r0, [pc, #12]	@ (800d6c8 <CDC_Init_FS+0x20>)
 800d6ba:	f7fb ff90 	bl	80095de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d6be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	20009680 	.word	0x20009680
 800d6c8:	20008bb0 	.word	0x20008bb0
 800d6cc:	20008e80 	.word	0x20008e80

0800d6d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d6d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	2b23      	cmp	r3, #35	@ 0x23
 800d6f4:	d84a      	bhi.n	800d78c <CDC_Control_FS+0xac>
 800d6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6fc <CDC_Control_FS+0x1c>)
 800d6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fc:	0800d78d 	.word	0x0800d78d
 800d700:	0800d78d 	.word	0x0800d78d
 800d704:	0800d78d 	.word	0x0800d78d
 800d708:	0800d78d 	.word	0x0800d78d
 800d70c:	0800d78d 	.word	0x0800d78d
 800d710:	0800d78d 	.word	0x0800d78d
 800d714:	0800d78d 	.word	0x0800d78d
 800d718:	0800d78d 	.word	0x0800d78d
 800d71c:	0800d78d 	.word	0x0800d78d
 800d720:	0800d78d 	.word	0x0800d78d
 800d724:	0800d78d 	.word	0x0800d78d
 800d728:	0800d78d 	.word	0x0800d78d
 800d72c:	0800d78d 	.word	0x0800d78d
 800d730:	0800d78d 	.word	0x0800d78d
 800d734:	0800d78d 	.word	0x0800d78d
 800d738:	0800d78d 	.word	0x0800d78d
 800d73c:	0800d78d 	.word	0x0800d78d
 800d740:	0800d78d 	.word	0x0800d78d
 800d744:	0800d78d 	.word	0x0800d78d
 800d748:	0800d78d 	.word	0x0800d78d
 800d74c:	0800d78d 	.word	0x0800d78d
 800d750:	0800d78d 	.word	0x0800d78d
 800d754:	0800d78d 	.word	0x0800d78d
 800d758:	0800d78d 	.word	0x0800d78d
 800d75c:	0800d78d 	.word	0x0800d78d
 800d760:	0800d78d 	.word	0x0800d78d
 800d764:	0800d78d 	.word	0x0800d78d
 800d768:	0800d78d 	.word	0x0800d78d
 800d76c:	0800d78d 	.word	0x0800d78d
 800d770:	0800d78d 	.word	0x0800d78d
 800d774:	0800d78d 	.word	0x0800d78d
 800d778:	0800d78d 	.word	0x0800d78d
 800d77c:	0800d78d 	.word	0x0800d78d
 800d780:	0800d78d 	.word	0x0800d78d
 800d784:	0800d78d 	.word	0x0800d78d
 800d788:	0800d78d 	.word	0x0800d78d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d78c:	bf00      	nop
  }

  return (USBD_OK);
 800d78e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	4805      	ldr	r0, [pc, #20]	@ (800d7c0 <CDC_Receive_FS+0x24>)
 800d7aa:	f7fb ff18 	bl	80095de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d7ae:	4804      	ldr	r0, [pc, #16]	@ (800d7c0 <CDC_Receive_FS+0x24>)
 800d7b0:	f7fb ff5e 	bl	8009670 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d7b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	20008bb0 	.word	0x20008bb0

0800d7c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d7d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d80c <CDC_Transmit_FS+0x48>)
 800d7d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e00b      	b.n	800d802 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d7ea:	887b      	ldrh	r3, [r7, #2]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	4806      	ldr	r0, [pc, #24]	@ (800d80c <CDC_Transmit_FS+0x48>)
 800d7f2:	f7fb fed6 	bl	80095a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d7f6:	4805      	ldr	r0, [pc, #20]	@ (800d80c <CDC_Transmit_FS+0x48>)
 800d7f8:	f7fb ff0a 	bl	8009610 <USBD_CDC_TransmitPacket>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d800:	7bfb      	ldrb	r3, [r7, #15]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	20008bb0 	.word	0x20008bb0

0800d810 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4613      	mov	r3, r2
 800d81c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d826:	4618      	mov	r0, r3
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
	...

0800d834 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2212      	movs	r2, #18
 800d844:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d846:	4b03      	ldr	r3, [pc, #12]	@ (800d854 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d848:	4618      	mov	r0, r3
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	20000154 	.word	0x20000154

0800d858 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	6039      	str	r1, [r7, #0]
 800d862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	2204      	movs	r2, #4
 800d868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d86a:	4b03      	ldr	r3, [pc, #12]	@ (800d878 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	20000168 	.word	0x20000168

0800d87c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	6039      	str	r1, [r7, #0]
 800d886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d888:	79fb      	ldrb	r3, [r7, #7]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d105      	bne.n	800d89a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	4907      	ldr	r1, [pc, #28]	@ (800d8b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d892:	4808      	ldr	r0, [pc, #32]	@ (800d8b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d894:	f7fc ff57 	bl	800a746 <USBD_GetString>
 800d898:	e004      	b.n	800d8a4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	4904      	ldr	r1, [pc, #16]	@ (800d8b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d89e:	4805      	ldr	r0, [pc, #20]	@ (800d8b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d8a0:	f7fc ff51 	bl	800a746 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8a4:	4b02      	ldr	r3, [pc, #8]	@ (800d8b0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	20009e80 	.word	0x20009e80
 800d8b4:	08011018 	.word	0x08011018

0800d8b8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	6039      	str	r1, [r7, #0]
 800d8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	4904      	ldr	r1, [pc, #16]	@ (800d8d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d8c8:	4804      	ldr	r0, [pc, #16]	@ (800d8dc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d8ca:	f7fc ff3c 	bl	800a746 <USBD_GetString>
  return USBD_StrDesc;
 800d8ce:	4b02      	ldr	r3, [pc, #8]	@ (800d8d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	20009e80 	.word	0x20009e80
 800d8dc:	08011030 	.word	0x08011030

0800d8e0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	6039      	str	r1, [r7, #0]
 800d8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	221a      	movs	r2, #26
 800d8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d8f2:	f000 f843 	bl	800d97c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d8f6:	4b02      	ldr	r3, [pc, #8]	@ (800d900 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	2000016c 	.word	0x2000016c

0800d904 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4603      	mov	r3, r0
 800d90c:	6039      	str	r1, [r7, #0]
 800d90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d910:	79fb      	ldrb	r3, [r7, #7]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d105      	bne.n	800d922 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	4907      	ldr	r1, [pc, #28]	@ (800d938 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d91a:	4808      	ldr	r0, [pc, #32]	@ (800d93c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d91c:	f7fc ff13 	bl	800a746 <USBD_GetString>
 800d920:	e004      	b.n	800d92c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	4904      	ldr	r1, [pc, #16]	@ (800d938 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d926:	4805      	ldr	r0, [pc, #20]	@ (800d93c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d928:	f7fc ff0d 	bl	800a746 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d92c:	4b02      	ldr	r3, [pc, #8]	@ (800d938 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	20009e80 	.word	0x20009e80
 800d93c:	08011044 	.word	0x08011044

0800d940 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	6039      	str	r1, [r7, #0]
 800d94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d105      	bne.n	800d95e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	4907      	ldr	r1, [pc, #28]	@ (800d974 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d956:	4808      	ldr	r0, [pc, #32]	@ (800d978 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d958:	f7fc fef5 	bl	800a746 <USBD_GetString>
 800d95c:	e004      	b.n	800d968 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	4904      	ldr	r1, [pc, #16]	@ (800d974 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d962:	4805      	ldr	r0, [pc, #20]	@ (800d978 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d964:	f7fc feef 	bl	800a746 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d968:	4b02      	ldr	r3, [pc, #8]	@ (800d974 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3708      	adds	r7, #8
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	20009e80 	.word	0x20009e80
 800d978:	08011050 	.word	0x08011050

0800d97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d982:	4b0f      	ldr	r3, [pc, #60]	@ (800d9c0 <Get_SerialNum+0x44>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d988:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c4 <Get_SerialNum+0x48>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d98e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c8 <Get_SerialNum+0x4c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4413      	add	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d9a2:	2208      	movs	r2, #8
 800d9a4:	4909      	ldr	r1, [pc, #36]	@ (800d9cc <Get_SerialNum+0x50>)
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f000 f814 	bl	800d9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9ac:	2204      	movs	r2, #4
 800d9ae:	4908      	ldr	r1, [pc, #32]	@ (800d9d0 <Get_SerialNum+0x54>)
 800d9b0:	68b8      	ldr	r0, [r7, #8]
 800d9b2:	f000 f80f 	bl	800d9d4 <IntToUnicode>
  }
}
 800d9b6:	bf00      	nop
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	1fff7590 	.word	0x1fff7590
 800d9c4:	1fff7594 	.word	0x1fff7594
 800d9c8:	1fff7598 	.word	0x1fff7598
 800d9cc:	2000016e 	.word	0x2000016e
 800d9d0:	2000017e 	.word	0x2000017e

0800d9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	4613      	mov	r3, r2
 800d9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	75fb      	strb	r3, [r7, #23]
 800d9ea:	e027      	b.n	800da3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	0f1b      	lsrs	r3, r3, #28
 800d9f0:	2b09      	cmp	r3, #9
 800d9f2:	d80b      	bhi.n	800da0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	0f1b      	lsrs	r3, r3, #28
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	4619      	mov	r1, r3
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	440b      	add	r3, r1
 800da04:	3230      	adds	r2, #48	@ 0x30
 800da06:	b2d2      	uxtb	r2, r2
 800da08:	701a      	strb	r2, [r3, #0]
 800da0a:	e00a      	b.n	800da22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	0f1b      	lsrs	r3, r3, #28
 800da10:	b2da      	uxtb	r2, r3
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	4619      	mov	r1, r3
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	440b      	add	r3, r1
 800da1c:	3237      	adds	r2, #55	@ 0x37
 800da1e:	b2d2      	uxtb	r2, r2
 800da20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	011b      	lsls	r3, r3, #4
 800da26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da28:	7dfb      	ldrb	r3, [r7, #23]
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	3301      	adds	r3, #1
 800da2e:	68ba      	ldr	r2, [r7, #8]
 800da30:	4413      	add	r3, r2
 800da32:	2200      	movs	r2, #0
 800da34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da36:	7dfb      	ldrb	r3, [r7, #23]
 800da38:	3301      	adds	r3, #1
 800da3a:	75fb      	strb	r3, [r7, #23]
 800da3c:	7dfa      	ldrb	r2, [r7, #23]
 800da3e:	79fb      	ldrb	r3, [r7, #7]
 800da40:	429a      	cmp	r2, r3
 800da42:	d3d3      	bcc.n	800d9ec <IntToUnicode+0x18>
  }
}
 800da44:	bf00      	nop
 800da46:	bf00      	nop
 800da48:	371c      	adds	r7, #28
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
	...

0800da54 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b098      	sub	sp, #96	@ 0x60
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800da5c:	f107 0310 	add.w	r3, r7, #16
 800da60:	2250      	movs	r2, #80	@ 0x50
 800da62:	2100      	movs	r1, #0
 800da64:	4618      	mov	r0, r3
 800da66:	f001 f875 	bl	800eb54 <memset>
  if(pcdHandle->Instance==USB)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a15      	ldr	r2, [pc, #84]	@ (800dac4 <HAL_PCD_MspInit+0x70>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d122      	bne.n	800daba <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800da74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800da7a:	2300      	movs	r3, #0
 800da7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800da7e:	f107 0310 	add.w	r3, r7, #16
 800da82:	4618      	mov	r0, r3
 800da84:	f7f8 f87e 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800da8e:	f7f3 ff97 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800da92:	4b0d      	ldr	r3, [pc, #52]	@ (800dac8 <HAL_PCD_MspInit+0x74>)
 800da94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da96:	4a0c      	ldr	r2, [pc, #48]	@ (800dac8 <HAL_PCD_MspInit+0x74>)
 800da98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800da9c:	6593      	str	r3, [r2, #88]	@ 0x58
 800da9e:	4b0a      	ldr	r3, [pc, #40]	@ (800dac8 <HAL_PCD_MspInit+0x74>)
 800daa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800daaa:	2200      	movs	r2, #0
 800daac:	2105      	movs	r1, #5
 800daae:	2014      	movs	r0, #20
 800dab0:	f7f4 fb70 	bl	8002194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dab4:	2014      	movs	r0, #20
 800dab6:	f7f4 fb87 	bl	80021c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800daba:	bf00      	nop
 800dabc:	3760      	adds	r7, #96	@ 0x60
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	40005c00 	.word	0x40005c00
 800dac8:	40021000 	.word	0x40021000

0800dacc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800dae0:	4619      	mov	r1, r3
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7fb fe90 	bl	8009808 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dae8:	bf00      	nop
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	460b      	mov	r3, r1
 800dafa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800db02:	78fa      	ldrb	r2, [r7, #3]
 800db04:	6879      	ldr	r1, [r7, #4]
 800db06:	4613      	mov	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	440b      	add	r3, r1
 800db10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	78fb      	ldrb	r3, [r7, #3]
 800db18:	4619      	mov	r1, r3
 800db1a:	f7fb feca 	bl	80098b2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800db1e:	bf00      	nop
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b082      	sub	sp, #8
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	460b      	mov	r3, r1
 800db30:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800db38:	78fa      	ldrb	r2, [r7, #3]
 800db3a:	6879      	ldr	r1, [r7, #4]
 800db3c:	4613      	mov	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	00db      	lsls	r3, r3, #3
 800db44:	440b      	add	r3, r1
 800db46:	3324      	adds	r3, #36	@ 0x24
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	78fb      	ldrb	r3, [r7, #3]
 800db4c:	4619      	mov	r1, r3
 800db4e:	f7fb ff13 	bl	8009978 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fc f827 	bl	8009bbc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800db6e:	bf00      	nop
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b084      	sub	sp, #16
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db7e:	2301      	movs	r3, #1
 800db80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	795b      	ldrb	r3, [r3, #5]
 800db86:	2b02      	cmp	r3, #2
 800db88:	d001      	beq.n	800db8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db8a:	f7f3 ff19 	bl	80019c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800db94:	7bfa      	ldrb	r2, [r7, #15]
 800db96:	4611      	mov	r1, r2
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fb ffd1 	bl	8009b40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fb ff7d 	bl	8009aa4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dbaa:	bf00      	nop
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fb ffcc 	bl	8009b60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7a5b      	ldrb	r3, [r3, #9]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d005      	beq.n	800dbdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbd0:	4b04      	ldr	r3, [pc, #16]	@ (800dbe4 <HAL_PCD_SuspendCallback+0x30>)
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	4a03      	ldr	r2, [pc, #12]	@ (800dbe4 <HAL_PCD_SuspendCallback+0x30>)
 800dbd6:	f043 0306 	orr.w	r3, r3, #6
 800dbda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800dbdc:	bf00      	nop
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	e000ed00 	.word	0xe000ed00

0800dbe8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7a5b      	ldrb	r3, [r3, #9]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d007      	beq.n	800dc08 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbf8:	4b08      	ldr	r3, [pc, #32]	@ (800dc1c <HAL_PCD_ResumeCallback+0x34>)
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	4a07      	ldr	r2, [pc, #28]	@ (800dc1c <HAL_PCD_ResumeCallback+0x34>)
 800dbfe:	f023 0306 	bic.w	r3, r3, #6
 800dc02:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dc04:	f000 f9f8 	bl	800dff8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fb ffbc 	bl	8009b8c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	e000ed00 	.word	0xe000ed00

0800dc20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800dc28:	4a2b      	ldr	r2, [pc, #172]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a29      	ldr	r2, [pc, #164]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800dc38:	4b27      	ldr	r3, [pc, #156]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc3a:	4a28      	ldr	r2, [pc, #160]	@ (800dcdc <USBD_LL_Init+0xbc>)
 800dc3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dc3e:	4b26      	ldr	r3, [pc, #152]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc40:	2208      	movs	r2, #8
 800dc42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dc44:	4b24      	ldr	r3, [pc, #144]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc46:	2202      	movs	r2, #2
 800dc48:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc4a:	4b23      	ldr	r3, [pc, #140]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800dc50:	4b21      	ldr	r3, [pc, #132]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dc56:	4b20      	ldr	r3, [pc, #128]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dc5c:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dc62:	4b1d      	ldr	r3, [pc, #116]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dc68:	481b      	ldr	r0, [pc, #108]	@ (800dcd8 <USBD_LL_Init+0xb8>)
 800dc6a:	f7f5 fc76 	bl	800355a <HAL_PCD_Init>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800dc74:	f7f3 fea4 	bl	80019c0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dc7e:	2318      	movs	r3, #24
 800dc80:	2200      	movs	r2, #0
 800dc82:	2100      	movs	r1, #0
 800dc84:	f7f7 f8fd 	bl	8004e82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dc8e:	2358      	movs	r3, #88	@ 0x58
 800dc90:	2200      	movs	r2, #0
 800dc92:	2180      	movs	r1, #128	@ 0x80
 800dc94:	f7f7 f8f5 	bl	8004e82 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dc9e:	23c0      	movs	r3, #192	@ 0xc0
 800dca0:	2200      	movs	r2, #0
 800dca2:	2181      	movs	r1, #129	@ 0x81
 800dca4:	f7f7 f8ed 	bl	8004e82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dcae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2101      	movs	r1, #1
 800dcb6:	f7f7 f8e4 	bl	8004e82 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dcc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	2182      	movs	r1, #130	@ 0x82
 800dcc8:	f7f7 f8db 	bl	8004e82 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	2000a080 	.word	0x2000a080
 800dcdc:	40005c00 	.word	0x40005c00

0800dce0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7f5 fcfd 	bl	80036f6 <HAL_PCD_Start>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd00:	7bfb      	ldrb	r3, [r7, #15]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 f97e 	bl	800e004 <USBD_Get_USB_Status>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b084      	sub	sp, #16
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	4608      	mov	r0, r1
 800dd20:	4611      	mov	r1, r2
 800dd22:	461a      	mov	r2, r3
 800dd24:	4603      	mov	r3, r0
 800dd26:	70fb      	strb	r3, [r7, #3]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	70bb      	strb	r3, [r7, #2]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800dd3e:	78bb      	ldrb	r3, [r7, #2]
 800dd40:	883a      	ldrh	r2, [r7, #0]
 800dd42:	78f9      	ldrb	r1, [r7, #3]
 800dd44:	f7f5 fe44 	bl	80039d0 <HAL_PCD_EP_Open>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd4c:	7bfb      	ldrb	r3, [r7, #15]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 f958 	bl	800e004 <USBD_Get_USB_Status>
 800dd54:	4603      	mov	r3, r0
 800dd56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b084      	sub	sp, #16
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd72:	2300      	movs	r3, #0
 800dd74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dd7c:	78fa      	ldrb	r2, [r7, #3]
 800dd7e:	4611      	mov	r1, r2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f5 fe84 	bl	8003a8e <HAL_PCD_EP_Close>
 800dd86:	4603      	mov	r3, r0
 800dd88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd8a:	7bfb      	ldrb	r3, [r7, #15]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f000 f939 	bl	800e004 <USBD_Get_USB_Status>
 800dd92:	4603      	mov	r3, r0
 800dd94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd96:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ddba:	78fa      	ldrb	r2, [r7, #3]
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7f5 ff2d 	bl	8003c1e <HAL_PCD_EP_SetStall>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddc8:	7bfb      	ldrb	r3, [r7, #15]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 f91a 	bl	800e004 <USBD_Get_USB_Status>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b084      	sub	sp, #16
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	460b      	mov	r3, r1
 800dde8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ddf8:	78fa      	ldrb	r2, [r7, #3]
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7f5 ff60 	bl	8003cc2 <HAL_PCD_EP_ClrStall>
 800de02:	4603      	mov	r3, r0
 800de04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de06:	7bfb      	ldrb	r3, [r7, #15]
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 f8fb 	bl	800e004 <USBD_Get_USB_Status>
 800de0e:	4603      	mov	r3, r0
 800de10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de12:	7bbb      	ldrb	r3, [r7, #14]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800de2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de34:	2b00      	cmp	r3, #0
 800de36:	da0b      	bge.n	800de50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de38:	78fb      	ldrb	r3, [r7, #3]
 800de3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de3e:	68f9      	ldr	r1, [r7, #12]
 800de40:	4613      	mov	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	440b      	add	r3, r1
 800de4a:	3312      	adds	r3, #18
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	e00b      	b.n	800de68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de56:	68f9      	ldr	r1, [r7, #12]
 800de58:	4613      	mov	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	440b      	add	r3, r1
 800de62:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800de66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	460b      	mov	r3, r1
 800de7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de80:	2300      	movs	r3, #0
 800de82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de84:	2300      	movs	r3, #0
 800de86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800de8e:	78fa      	ldrb	r2, [r7, #3]
 800de90:	4611      	mov	r1, r2
 800de92:	4618      	mov	r0, r3
 800de94:	f7f5 fd78 	bl	8003988 <HAL_PCD_SetAddress>
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f000 f8b0 	bl	800e004 <USBD_Get_USB_Status>
 800dea4:	4603      	mov	r3, r0
 800dea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b086      	sub	sp, #24
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	607a      	str	r2, [r7, #4]
 800debc:	603b      	str	r3, [r7, #0]
 800debe:	460b      	mov	r3, r1
 800dec0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dec2:	2300      	movs	r3, #0
 800dec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ded0:	7af9      	ldrb	r1, [r7, #11]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	f7f5 fe6b 	bl	8003bb0 <HAL_PCD_EP_Transmit>
 800deda:	4603      	mov	r3, r0
 800dedc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dede:	7dfb      	ldrb	r3, [r7, #23]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 f88f 	bl	800e004 <USBD_Get_USB_Status>
 800dee6:	4603      	mov	r3, r0
 800dee8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800deea:	7dbb      	ldrb	r3, [r7, #22]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	607a      	str	r2, [r7, #4]
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	460b      	mov	r3, r1
 800df02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df08:	2300      	movs	r3, #0
 800df0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800df12:	7af9      	ldrb	r1, [r7, #11]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	f7f5 fe01 	bl	8003b1e <HAL_PCD_EP_Receive>
 800df1c:	4603      	mov	r3, r0
 800df1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df20:	7dfb      	ldrb	r3, [r7, #23]
 800df22:	4618      	mov	r0, r3
 800df24:	f000 f86e 	bl	800e004 <USBD_Get_USB_Status>
 800df28:	4603      	mov	r3, r0
 800df2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b082      	sub	sp, #8
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
 800df3e:	460b      	mov	r3, r1
 800df40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800df48:	78fa      	ldrb	r2, [r7, #3]
 800df4a:	4611      	mov	r1, r2
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7f5 fe17 	bl	8003b80 <HAL_PCD_EP_GetRxCount>
 800df52:	4603      	mov	r3, r0
}
 800df54:	4618      	mov	r0, r3
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	460b      	mov	r3, r1
 800df66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800df68:	78fb      	ldrb	r3, [r7, #3]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d002      	beq.n	800df74 <HAL_PCDEx_LPM_Callback+0x18>
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d013      	beq.n	800df9a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800df72:	e023      	b.n	800dfbc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	7a5b      	ldrb	r3, [r3, #9]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d007      	beq.n	800df8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800df7c:	f000 f83c 	bl	800dff8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df80:	4b10      	ldr	r3, [pc, #64]	@ (800dfc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	4a0f      	ldr	r2, [pc, #60]	@ (800dfc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800df86:	f023 0306 	bic.w	r3, r3, #6
 800df8a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800df92:	4618      	mov	r0, r3
 800df94:	f7fb fdfa 	bl	8009b8c <USBD_LL_Resume>
    break;
 800df98:	e010      	b.n	800dfbc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fb fddd 	bl	8009b60 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	7a5b      	ldrb	r3, [r3, #9]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d005      	beq.n	800dfba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dfae:	4b05      	ldr	r3, [pc, #20]	@ (800dfc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	4a04      	ldr	r2, [pc, #16]	@ (800dfc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800dfb4:	f043 0306 	orr.w	r3, r3, #6
 800dfb8:	6113      	str	r3, [r2, #16]
    break;
 800dfba:	bf00      	nop
}
 800dfbc:	bf00      	nop
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	e000ed00 	.word	0xe000ed00

0800dfc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dfd0:	4b03      	ldr	r3, [pc, #12]	@ (800dfe0 <USBD_static_malloc+0x18>)
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	370c      	adds	r7, #12
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	2000a35c 	.word	0x2000a35c

0800dfe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]

}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dffc:	f7f3 faf2 	bl	80015e4 <SystemClock_Config>
}
 800e000:	bf00      	nop
 800e002:	bd80      	pop	{r7, pc}

0800e004 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e012:	79fb      	ldrb	r3, [r7, #7]
 800e014:	2b03      	cmp	r3, #3
 800e016:	d817      	bhi.n	800e048 <USBD_Get_USB_Status+0x44>
 800e018:	a201      	add	r2, pc, #4	@ (adr r2, 800e020 <USBD_Get_USB_Status+0x1c>)
 800e01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01e:	bf00      	nop
 800e020:	0800e031 	.word	0x0800e031
 800e024:	0800e037 	.word	0x0800e037
 800e028:	0800e03d 	.word	0x0800e03d
 800e02c:	0800e043 	.word	0x0800e043
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e030:	2300      	movs	r3, #0
 800e032:	73fb      	strb	r3, [r7, #15]
    break;
 800e034:	e00b      	b.n	800e04e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e036:	2303      	movs	r3, #3
 800e038:	73fb      	strb	r3, [r7, #15]
    break;
 800e03a:	e008      	b.n	800e04e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e03c:	2301      	movs	r3, #1
 800e03e:	73fb      	strb	r3, [r7, #15]
    break;
 800e040:	e005      	b.n	800e04e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e042:	2303      	movs	r3, #3
 800e044:	73fb      	strb	r3, [r7, #15]
    break;
 800e046:	e002      	b.n	800e04e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e048:	2303      	movs	r3, #3
 800e04a:	73fb      	strb	r3, [r7, #15]
    break;
 800e04c:	bf00      	nop
  }
  return usb_status;
 800e04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <__cvt>:
 800e05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e060:	ec57 6b10 	vmov	r6, r7, d0
 800e064:	2f00      	cmp	r7, #0
 800e066:	460c      	mov	r4, r1
 800e068:	4619      	mov	r1, r3
 800e06a:	463b      	mov	r3, r7
 800e06c:	bfbb      	ittet	lt
 800e06e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e072:	461f      	movlt	r7, r3
 800e074:	2300      	movge	r3, #0
 800e076:	232d      	movlt	r3, #45	@ 0x2d
 800e078:	700b      	strb	r3, [r1, #0]
 800e07a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e07c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e080:	4691      	mov	r9, r2
 800e082:	f023 0820 	bic.w	r8, r3, #32
 800e086:	bfbc      	itt	lt
 800e088:	4632      	movlt	r2, r6
 800e08a:	4616      	movlt	r6, r2
 800e08c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e090:	d005      	beq.n	800e09e <__cvt+0x42>
 800e092:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e096:	d100      	bne.n	800e09a <__cvt+0x3e>
 800e098:	3401      	adds	r4, #1
 800e09a:	2102      	movs	r1, #2
 800e09c:	e000      	b.n	800e0a0 <__cvt+0x44>
 800e09e:	2103      	movs	r1, #3
 800e0a0:	ab03      	add	r3, sp, #12
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	ab02      	add	r3, sp, #8
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	ec47 6b10 	vmov	d0, r6, r7
 800e0ac:	4653      	mov	r3, sl
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	f000 fec6 	bl	800ee40 <_dtoa_r>
 800e0b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	d119      	bne.n	800e0f0 <__cvt+0x94>
 800e0bc:	f019 0f01 	tst.w	r9, #1
 800e0c0:	d00e      	beq.n	800e0e0 <__cvt+0x84>
 800e0c2:	eb00 0904 	add.w	r9, r0, r4
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fd23 	bl	8000b18 <__aeabi_dcmpeq>
 800e0d2:	b108      	cbz	r0, 800e0d8 <__cvt+0x7c>
 800e0d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0d8:	2230      	movs	r2, #48	@ 0x30
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	454b      	cmp	r3, r9
 800e0de:	d31e      	bcc.n	800e11e <__cvt+0xc2>
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0e4:	1b5b      	subs	r3, r3, r5
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	6013      	str	r3, [r2, #0]
 800e0ea:	b004      	add	sp, #16
 800e0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0f4:	eb00 0904 	add.w	r9, r0, r4
 800e0f8:	d1e5      	bne.n	800e0c6 <__cvt+0x6a>
 800e0fa:	7803      	ldrb	r3, [r0, #0]
 800e0fc:	2b30      	cmp	r3, #48	@ 0x30
 800e0fe:	d10a      	bne.n	800e116 <__cvt+0xba>
 800e100:	2200      	movs	r2, #0
 800e102:	2300      	movs	r3, #0
 800e104:	4630      	mov	r0, r6
 800e106:	4639      	mov	r1, r7
 800e108:	f7f2 fd06 	bl	8000b18 <__aeabi_dcmpeq>
 800e10c:	b918      	cbnz	r0, 800e116 <__cvt+0xba>
 800e10e:	f1c4 0401 	rsb	r4, r4, #1
 800e112:	f8ca 4000 	str.w	r4, [sl]
 800e116:	f8da 3000 	ldr.w	r3, [sl]
 800e11a:	4499      	add	r9, r3
 800e11c:	e7d3      	b.n	800e0c6 <__cvt+0x6a>
 800e11e:	1c59      	adds	r1, r3, #1
 800e120:	9103      	str	r1, [sp, #12]
 800e122:	701a      	strb	r2, [r3, #0]
 800e124:	e7d9      	b.n	800e0da <__cvt+0x7e>

0800e126 <__exponent>:
 800e126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e128:	2900      	cmp	r1, #0
 800e12a:	bfba      	itte	lt
 800e12c:	4249      	neglt	r1, r1
 800e12e:	232d      	movlt	r3, #45	@ 0x2d
 800e130:	232b      	movge	r3, #43	@ 0x2b
 800e132:	2909      	cmp	r1, #9
 800e134:	7002      	strb	r2, [r0, #0]
 800e136:	7043      	strb	r3, [r0, #1]
 800e138:	dd29      	ble.n	800e18e <__exponent+0x68>
 800e13a:	f10d 0307 	add.w	r3, sp, #7
 800e13e:	461d      	mov	r5, r3
 800e140:	270a      	movs	r7, #10
 800e142:	461a      	mov	r2, r3
 800e144:	fbb1 f6f7 	udiv	r6, r1, r7
 800e148:	fb07 1416 	mls	r4, r7, r6, r1
 800e14c:	3430      	adds	r4, #48	@ 0x30
 800e14e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e152:	460c      	mov	r4, r1
 800e154:	2c63      	cmp	r4, #99	@ 0x63
 800e156:	f103 33ff 	add.w	r3, r3, #4294967295
 800e15a:	4631      	mov	r1, r6
 800e15c:	dcf1      	bgt.n	800e142 <__exponent+0x1c>
 800e15e:	3130      	adds	r1, #48	@ 0x30
 800e160:	1e94      	subs	r4, r2, #2
 800e162:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e166:	1c41      	adds	r1, r0, #1
 800e168:	4623      	mov	r3, r4
 800e16a:	42ab      	cmp	r3, r5
 800e16c:	d30a      	bcc.n	800e184 <__exponent+0x5e>
 800e16e:	f10d 0309 	add.w	r3, sp, #9
 800e172:	1a9b      	subs	r3, r3, r2
 800e174:	42ac      	cmp	r4, r5
 800e176:	bf88      	it	hi
 800e178:	2300      	movhi	r3, #0
 800e17a:	3302      	adds	r3, #2
 800e17c:	4403      	add	r3, r0
 800e17e:	1a18      	subs	r0, r3, r0
 800e180:	b003      	add	sp, #12
 800e182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e184:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e188:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e18c:	e7ed      	b.n	800e16a <__exponent+0x44>
 800e18e:	2330      	movs	r3, #48	@ 0x30
 800e190:	3130      	adds	r1, #48	@ 0x30
 800e192:	7083      	strb	r3, [r0, #2]
 800e194:	70c1      	strb	r1, [r0, #3]
 800e196:	1d03      	adds	r3, r0, #4
 800e198:	e7f1      	b.n	800e17e <__exponent+0x58>
	...

0800e19c <_printf_float>:
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	b08d      	sub	sp, #52	@ 0x34
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e1a8:	4616      	mov	r6, r2
 800e1aa:	461f      	mov	r7, r3
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	f000 fcd9 	bl	800eb64 <_localeconv_r>
 800e1b2:	6803      	ldr	r3, [r0, #0]
 800e1b4:	9304      	str	r3, [sp, #16]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f2 f882 	bl	80002c0 <strlen>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e1c4:	9005      	str	r0, [sp, #20]
 800e1c6:	3307      	adds	r3, #7
 800e1c8:	f023 0307 	bic.w	r3, r3, #7
 800e1cc:	f103 0208 	add.w	r2, r3, #8
 800e1d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e1d4:	f8d4 b000 	ldr.w	fp, [r4]
 800e1d8:	f8c8 2000 	str.w	r2, [r8]
 800e1dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e1e4:	9307      	str	r3, [sp, #28]
 800e1e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1f2:	4b9c      	ldr	r3, [pc, #624]	@ (800e464 <_printf_float+0x2c8>)
 800e1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f8:	f7f2 fcc0 	bl	8000b7c <__aeabi_dcmpun>
 800e1fc:	bb70      	cbnz	r0, 800e25c <_printf_float+0xc0>
 800e1fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e202:	4b98      	ldr	r3, [pc, #608]	@ (800e464 <_printf_float+0x2c8>)
 800e204:	f04f 32ff 	mov.w	r2, #4294967295
 800e208:	f7f2 fc9a 	bl	8000b40 <__aeabi_dcmple>
 800e20c:	bb30      	cbnz	r0, 800e25c <_printf_float+0xc0>
 800e20e:	2200      	movs	r2, #0
 800e210:	2300      	movs	r3, #0
 800e212:	4640      	mov	r0, r8
 800e214:	4649      	mov	r1, r9
 800e216:	f7f2 fc89 	bl	8000b2c <__aeabi_dcmplt>
 800e21a:	b110      	cbz	r0, 800e222 <_printf_float+0x86>
 800e21c:	232d      	movs	r3, #45	@ 0x2d
 800e21e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e222:	4a91      	ldr	r2, [pc, #580]	@ (800e468 <_printf_float+0x2cc>)
 800e224:	4b91      	ldr	r3, [pc, #580]	@ (800e46c <_printf_float+0x2d0>)
 800e226:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e22a:	bf8c      	ite	hi
 800e22c:	4690      	movhi	r8, r2
 800e22e:	4698      	movls	r8, r3
 800e230:	2303      	movs	r3, #3
 800e232:	6123      	str	r3, [r4, #16]
 800e234:	f02b 0304 	bic.w	r3, fp, #4
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	f04f 0900 	mov.w	r9, #0
 800e23e:	9700      	str	r7, [sp, #0]
 800e240:	4633      	mov	r3, r6
 800e242:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e244:	4621      	mov	r1, r4
 800e246:	4628      	mov	r0, r5
 800e248:	f000 f9d2 	bl	800e5f0 <_printf_common>
 800e24c:	3001      	adds	r0, #1
 800e24e:	f040 808d 	bne.w	800e36c <_printf_float+0x1d0>
 800e252:	f04f 30ff 	mov.w	r0, #4294967295
 800e256:	b00d      	add	sp, #52	@ 0x34
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	4642      	mov	r2, r8
 800e25e:	464b      	mov	r3, r9
 800e260:	4640      	mov	r0, r8
 800e262:	4649      	mov	r1, r9
 800e264:	f7f2 fc8a 	bl	8000b7c <__aeabi_dcmpun>
 800e268:	b140      	cbz	r0, 800e27c <_printf_float+0xe0>
 800e26a:	464b      	mov	r3, r9
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	bfbc      	itt	lt
 800e270:	232d      	movlt	r3, #45	@ 0x2d
 800e272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e276:	4a7e      	ldr	r2, [pc, #504]	@ (800e470 <_printf_float+0x2d4>)
 800e278:	4b7e      	ldr	r3, [pc, #504]	@ (800e474 <_printf_float+0x2d8>)
 800e27a:	e7d4      	b.n	800e226 <_printf_float+0x8a>
 800e27c:	6863      	ldr	r3, [r4, #4]
 800e27e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e282:	9206      	str	r2, [sp, #24]
 800e284:	1c5a      	adds	r2, r3, #1
 800e286:	d13b      	bne.n	800e300 <_printf_float+0x164>
 800e288:	2306      	movs	r3, #6
 800e28a:	6063      	str	r3, [r4, #4]
 800e28c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e290:	2300      	movs	r3, #0
 800e292:	6022      	str	r2, [r4, #0]
 800e294:	9303      	str	r3, [sp, #12]
 800e296:	ab0a      	add	r3, sp, #40	@ 0x28
 800e298:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e29c:	ab09      	add	r3, sp, #36	@ 0x24
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	6861      	ldr	r1, [r4, #4]
 800e2a2:	ec49 8b10 	vmov	d0, r8, r9
 800e2a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	f7ff fed6 	bl	800e05c <__cvt>
 800e2b0:	9b06      	ldr	r3, [sp, #24]
 800e2b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2b4:	2b47      	cmp	r3, #71	@ 0x47
 800e2b6:	4680      	mov	r8, r0
 800e2b8:	d129      	bne.n	800e30e <_printf_float+0x172>
 800e2ba:	1cc8      	adds	r0, r1, #3
 800e2bc:	db02      	blt.n	800e2c4 <_printf_float+0x128>
 800e2be:	6863      	ldr	r3, [r4, #4]
 800e2c0:	4299      	cmp	r1, r3
 800e2c2:	dd41      	ble.n	800e348 <_printf_float+0x1ac>
 800e2c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e2c8:	fa5f fa8a 	uxtb.w	sl, sl
 800e2cc:	3901      	subs	r1, #1
 800e2ce:	4652      	mov	r2, sl
 800e2d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e2d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e2d6:	f7ff ff26 	bl	800e126 <__exponent>
 800e2da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2dc:	1813      	adds	r3, r2, r0
 800e2de:	2a01      	cmp	r2, #1
 800e2e0:	4681      	mov	r9, r0
 800e2e2:	6123      	str	r3, [r4, #16]
 800e2e4:	dc02      	bgt.n	800e2ec <_printf_float+0x150>
 800e2e6:	6822      	ldr	r2, [r4, #0]
 800e2e8:	07d2      	lsls	r2, r2, #31
 800e2ea:	d501      	bpl.n	800e2f0 <_printf_float+0x154>
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	6123      	str	r3, [r4, #16]
 800e2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d0a2      	beq.n	800e23e <_printf_float+0xa2>
 800e2f8:	232d      	movs	r3, #45	@ 0x2d
 800e2fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2fe:	e79e      	b.n	800e23e <_printf_float+0xa2>
 800e300:	9a06      	ldr	r2, [sp, #24]
 800e302:	2a47      	cmp	r2, #71	@ 0x47
 800e304:	d1c2      	bne.n	800e28c <_printf_float+0xf0>
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1c0      	bne.n	800e28c <_printf_float+0xf0>
 800e30a:	2301      	movs	r3, #1
 800e30c:	e7bd      	b.n	800e28a <_printf_float+0xee>
 800e30e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e312:	d9db      	bls.n	800e2cc <_printf_float+0x130>
 800e314:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e318:	d118      	bne.n	800e34c <_printf_float+0x1b0>
 800e31a:	2900      	cmp	r1, #0
 800e31c:	6863      	ldr	r3, [r4, #4]
 800e31e:	dd0b      	ble.n	800e338 <_printf_float+0x19c>
 800e320:	6121      	str	r1, [r4, #16]
 800e322:	b913      	cbnz	r3, 800e32a <_printf_float+0x18e>
 800e324:	6822      	ldr	r2, [r4, #0]
 800e326:	07d0      	lsls	r0, r2, #31
 800e328:	d502      	bpl.n	800e330 <_printf_float+0x194>
 800e32a:	3301      	adds	r3, #1
 800e32c:	440b      	add	r3, r1
 800e32e:	6123      	str	r3, [r4, #16]
 800e330:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e332:	f04f 0900 	mov.w	r9, #0
 800e336:	e7db      	b.n	800e2f0 <_printf_float+0x154>
 800e338:	b913      	cbnz	r3, 800e340 <_printf_float+0x1a4>
 800e33a:	6822      	ldr	r2, [r4, #0]
 800e33c:	07d2      	lsls	r2, r2, #31
 800e33e:	d501      	bpl.n	800e344 <_printf_float+0x1a8>
 800e340:	3302      	adds	r3, #2
 800e342:	e7f4      	b.n	800e32e <_printf_float+0x192>
 800e344:	2301      	movs	r3, #1
 800e346:	e7f2      	b.n	800e32e <_printf_float+0x192>
 800e348:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e34e:	4299      	cmp	r1, r3
 800e350:	db05      	blt.n	800e35e <_printf_float+0x1c2>
 800e352:	6823      	ldr	r3, [r4, #0]
 800e354:	6121      	str	r1, [r4, #16]
 800e356:	07d8      	lsls	r0, r3, #31
 800e358:	d5ea      	bpl.n	800e330 <_printf_float+0x194>
 800e35a:	1c4b      	adds	r3, r1, #1
 800e35c:	e7e7      	b.n	800e32e <_printf_float+0x192>
 800e35e:	2900      	cmp	r1, #0
 800e360:	bfd4      	ite	le
 800e362:	f1c1 0202 	rsble	r2, r1, #2
 800e366:	2201      	movgt	r2, #1
 800e368:	4413      	add	r3, r2
 800e36a:	e7e0      	b.n	800e32e <_printf_float+0x192>
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	055a      	lsls	r2, r3, #21
 800e370:	d407      	bmi.n	800e382 <_printf_float+0x1e6>
 800e372:	6923      	ldr	r3, [r4, #16]
 800e374:	4642      	mov	r2, r8
 800e376:	4631      	mov	r1, r6
 800e378:	4628      	mov	r0, r5
 800e37a:	47b8      	blx	r7
 800e37c:	3001      	adds	r0, #1
 800e37e:	d12b      	bne.n	800e3d8 <_printf_float+0x23c>
 800e380:	e767      	b.n	800e252 <_printf_float+0xb6>
 800e382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e386:	f240 80dd 	bls.w	800e544 <_printf_float+0x3a8>
 800e38a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e38e:	2200      	movs	r2, #0
 800e390:	2300      	movs	r3, #0
 800e392:	f7f2 fbc1 	bl	8000b18 <__aeabi_dcmpeq>
 800e396:	2800      	cmp	r0, #0
 800e398:	d033      	beq.n	800e402 <_printf_float+0x266>
 800e39a:	4a37      	ldr	r2, [pc, #220]	@ (800e478 <_printf_float+0x2dc>)
 800e39c:	2301      	movs	r3, #1
 800e39e:	4631      	mov	r1, r6
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	47b8      	blx	r7
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	f43f af54 	beq.w	800e252 <_printf_float+0xb6>
 800e3aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e3ae:	4543      	cmp	r3, r8
 800e3b0:	db02      	blt.n	800e3b8 <_printf_float+0x21c>
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	07d8      	lsls	r0, r3, #31
 800e3b6:	d50f      	bpl.n	800e3d8 <_printf_float+0x23c>
 800e3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4628      	mov	r0, r5
 800e3c0:	47b8      	blx	r7
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	f43f af45 	beq.w	800e252 <_printf_float+0xb6>
 800e3c8:	f04f 0900 	mov.w	r9, #0
 800e3cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3d0:	f104 0a1a 	add.w	sl, r4, #26
 800e3d4:	45c8      	cmp	r8, r9
 800e3d6:	dc09      	bgt.n	800e3ec <_printf_float+0x250>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	079b      	lsls	r3, r3, #30
 800e3dc:	f100 8103 	bmi.w	800e5e6 <_printf_float+0x44a>
 800e3e0:	68e0      	ldr	r0, [r4, #12]
 800e3e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3e4:	4298      	cmp	r0, r3
 800e3e6:	bfb8      	it	lt
 800e3e8:	4618      	movlt	r0, r3
 800e3ea:	e734      	b.n	800e256 <_printf_float+0xba>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	4652      	mov	r2, sl
 800e3f0:	4631      	mov	r1, r6
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47b8      	blx	r7
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	f43f af2b 	beq.w	800e252 <_printf_float+0xb6>
 800e3fc:	f109 0901 	add.w	r9, r9, #1
 800e400:	e7e8      	b.n	800e3d4 <_printf_float+0x238>
 800e402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e404:	2b00      	cmp	r3, #0
 800e406:	dc39      	bgt.n	800e47c <_printf_float+0x2e0>
 800e408:	4a1b      	ldr	r2, [pc, #108]	@ (800e478 <_printf_float+0x2dc>)
 800e40a:	2301      	movs	r3, #1
 800e40c:	4631      	mov	r1, r6
 800e40e:	4628      	mov	r0, r5
 800e410:	47b8      	blx	r7
 800e412:	3001      	adds	r0, #1
 800e414:	f43f af1d 	beq.w	800e252 <_printf_float+0xb6>
 800e418:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e41c:	ea59 0303 	orrs.w	r3, r9, r3
 800e420:	d102      	bne.n	800e428 <_printf_float+0x28c>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	07d9      	lsls	r1, r3, #31
 800e426:	d5d7      	bpl.n	800e3d8 <_printf_float+0x23c>
 800e428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e42c:	4631      	mov	r1, r6
 800e42e:	4628      	mov	r0, r5
 800e430:	47b8      	blx	r7
 800e432:	3001      	adds	r0, #1
 800e434:	f43f af0d 	beq.w	800e252 <_printf_float+0xb6>
 800e438:	f04f 0a00 	mov.w	sl, #0
 800e43c:	f104 0b1a 	add.w	fp, r4, #26
 800e440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e442:	425b      	negs	r3, r3
 800e444:	4553      	cmp	r3, sl
 800e446:	dc01      	bgt.n	800e44c <_printf_float+0x2b0>
 800e448:	464b      	mov	r3, r9
 800e44a:	e793      	b.n	800e374 <_printf_float+0x1d8>
 800e44c:	2301      	movs	r3, #1
 800e44e:	465a      	mov	r2, fp
 800e450:	4631      	mov	r1, r6
 800e452:	4628      	mov	r0, r5
 800e454:	47b8      	blx	r7
 800e456:	3001      	adds	r0, #1
 800e458:	f43f aefb 	beq.w	800e252 <_printf_float+0xb6>
 800e45c:	f10a 0a01 	add.w	sl, sl, #1
 800e460:	e7ee      	b.n	800e440 <_printf_float+0x2a4>
 800e462:	bf00      	nop
 800e464:	7fefffff 	.word	0x7fefffff
 800e468:	08011194 	.word	0x08011194
 800e46c:	08011190 	.word	0x08011190
 800e470:	0801119c 	.word	0x0801119c
 800e474:	08011198 	.word	0x08011198
 800e478:	080111a0 	.word	0x080111a0
 800e47c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e47e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e482:	4553      	cmp	r3, sl
 800e484:	bfa8      	it	ge
 800e486:	4653      	movge	r3, sl
 800e488:	2b00      	cmp	r3, #0
 800e48a:	4699      	mov	r9, r3
 800e48c:	dc36      	bgt.n	800e4fc <_printf_float+0x360>
 800e48e:	f04f 0b00 	mov.w	fp, #0
 800e492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e496:	f104 021a 	add.w	r2, r4, #26
 800e49a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e49c:	9306      	str	r3, [sp, #24]
 800e49e:	eba3 0309 	sub.w	r3, r3, r9
 800e4a2:	455b      	cmp	r3, fp
 800e4a4:	dc31      	bgt.n	800e50a <_printf_float+0x36e>
 800e4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a8:	459a      	cmp	sl, r3
 800e4aa:	dc3a      	bgt.n	800e522 <_printf_float+0x386>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	07da      	lsls	r2, r3, #31
 800e4b0:	d437      	bmi.n	800e522 <_printf_float+0x386>
 800e4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4b4:	ebaa 0903 	sub.w	r9, sl, r3
 800e4b8:	9b06      	ldr	r3, [sp, #24]
 800e4ba:	ebaa 0303 	sub.w	r3, sl, r3
 800e4be:	4599      	cmp	r9, r3
 800e4c0:	bfa8      	it	ge
 800e4c2:	4699      	movge	r9, r3
 800e4c4:	f1b9 0f00 	cmp.w	r9, #0
 800e4c8:	dc33      	bgt.n	800e532 <_printf_float+0x396>
 800e4ca:	f04f 0800 	mov.w	r8, #0
 800e4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4d2:	f104 0b1a 	add.w	fp, r4, #26
 800e4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d8:	ebaa 0303 	sub.w	r3, sl, r3
 800e4dc:	eba3 0309 	sub.w	r3, r3, r9
 800e4e0:	4543      	cmp	r3, r8
 800e4e2:	f77f af79 	ble.w	800e3d8 <_printf_float+0x23c>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	465a      	mov	r2, fp
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	47b8      	blx	r7
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	f43f aeae 	beq.w	800e252 <_printf_float+0xb6>
 800e4f6:	f108 0801 	add.w	r8, r8, #1
 800e4fa:	e7ec      	b.n	800e4d6 <_printf_float+0x33a>
 800e4fc:	4642      	mov	r2, r8
 800e4fe:	4631      	mov	r1, r6
 800e500:	4628      	mov	r0, r5
 800e502:	47b8      	blx	r7
 800e504:	3001      	adds	r0, #1
 800e506:	d1c2      	bne.n	800e48e <_printf_float+0x2f2>
 800e508:	e6a3      	b.n	800e252 <_printf_float+0xb6>
 800e50a:	2301      	movs	r3, #1
 800e50c:	4631      	mov	r1, r6
 800e50e:	4628      	mov	r0, r5
 800e510:	9206      	str	r2, [sp, #24]
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	f43f ae9c 	beq.w	800e252 <_printf_float+0xb6>
 800e51a:	9a06      	ldr	r2, [sp, #24]
 800e51c:	f10b 0b01 	add.w	fp, fp, #1
 800e520:	e7bb      	b.n	800e49a <_printf_float+0x2fe>
 800e522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e526:	4631      	mov	r1, r6
 800e528:	4628      	mov	r0, r5
 800e52a:	47b8      	blx	r7
 800e52c:	3001      	adds	r0, #1
 800e52e:	d1c0      	bne.n	800e4b2 <_printf_float+0x316>
 800e530:	e68f      	b.n	800e252 <_printf_float+0xb6>
 800e532:	9a06      	ldr	r2, [sp, #24]
 800e534:	464b      	mov	r3, r9
 800e536:	4442      	add	r2, r8
 800e538:	4631      	mov	r1, r6
 800e53a:	4628      	mov	r0, r5
 800e53c:	47b8      	blx	r7
 800e53e:	3001      	adds	r0, #1
 800e540:	d1c3      	bne.n	800e4ca <_printf_float+0x32e>
 800e542:	e686      	b.n	800e252 <_printf_float+0xb6>
 800e544:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e548:	f1ba 0f01 	cmp.w	sl, #1
 800e54c:	dc01      	bgt.n	800e552 <_printf_float+0x3b6>
 800e54e:	07db      	lsls	r3, r3, #31
 800e550:	d536      	bpl.n	800e5c0 <_printf_float+0x424>
 800e552:	2301      	movs	r3, #1
 800e554:	4642      	mov	r2, r8
 800e556:	4631      	mov	r1, r6
 800e558:	4628      	mov	r0, r5
 800e55a:	47b8      	blx	r7
 800e55c:	3001      	adds	r0, #1
 800e55e:	f43f ae78 	beq.w	800e252 <_printf_float+0xb6>
 800e562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e566:	4631      	mov	r1, r6
 800e568:	4628      	mov	r0, r5
 800e56a:	47b8      	blx	r7
 800e56c:	3001      	adds	r0, #1
 800e56e:	f43f ae70 	beq.w	800e252 <_printf_float+0xb6>
 800e572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e576:	2200      	movs	r2, #0
 800e578:	2300      	movs	r3, #0
 800e57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e57e:	f7f2 facb 	bl	8000b18 <__aeabi_dcmpeq>
 800e582:	b9c0      	cbnz	r0, 800e5b6 <_printf_float+0x41a>
 800e584:	4653      	mov	r3, sl
 800e586:	f108 0201 	add.w	r2, r8, #1
 800e58a:	4631      	mov	r1, r6
 800e58c:	4628      	mov	r0, r5
 800e58e:	47b8      	blx	r7
 800e590:	3001      	adds	r0, #1
 800e592:	d10c      	bne.n	800e5ae <_printf_float+0x412>
 800e594:	e65d      	b.n	800e252 <_printf_float+0xb6>
 800e596:	2301      	movs	r3, #1
 800e598:	465a      	mov	r2, fp
 800e59a:	4631      	mov	r1, r6
 800e59c:	4628      	mov	r0, r5
 800e59e:	47b8      	blx	r7
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	f43f ae56 	beq.w	800e252 <_printf_float+0xb6>
 800e5a6:	f108 0801 	add.w	r8, r8, #1
 800e5aa:	45d0      	cmp	r8, sl
 800e5ac:	dbf3      	blt.n	800e596 <_printf_float+0x3fa>
 800e5ae:	464b      	mov	r3, r9
 800e5b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e5b4:	e6df      	b.n	800e376 <_printf_float+0x1da>
 800e5b6:	f04f 0800 	mov.w	r8, #0
 800e5ba:	f104 0b1a 	add.w	fp, r4, #26
 800e5be:	e7f4      	b.n	800e5aa <_printf_float+0x40e>
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	4642      	mov	r2, r8
 800e5c4:	e7e1      	b.n	800e58a <_printf_float+0x3ee>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	464a      	mov	r2, r9
 800e5ca:	4631      	mov	r1, r6
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	47b8      	blx	r7
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	f43f ae3e 	beq.w	800e252 <_printf_float+0xb6>
 800e5d6:	f108 0801 	add.w	r8, r8, #1
 800e5da:	68e3      	ldr	r3, [r4, #12]
 800e5dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5de:	1a5b      	subs	r3, r3, r1
 800e5e0:	4543      	cmp	r3, r8
 800e5e2:	dcf0      	bgt.n	800e5c6 <_printf_float+0x42a>
 800e5e4:	e6fc      	b.n	800e3e0 <_printf_float+0x244>
 800e5e6:	f04f 0800 	mov.w	r8, #0
 800e5ea:	f104 0919 	add.w	r9, r4, #25
 800e5ee:	e7f4      	b.n	800e5da <_printf_float+0x43e>

0800e5f0 <_printf_common>:
 800e5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5f4:	4616      	mov	r6, r2
 800e5f6:	4698      	mov	r8, r3
 800e5f8:	688a      	ldr	r2, [r1, #8]
 800e5fa:	690b      	ldr	r3, [r1, #16]
 800e5fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e600:	4293      	cmp	r3, r2
 800e602:	bfb8      	it	lt
 800e604:	4613      	movlt	r3, r2
 800e606:	6033      	str	r3, [r6, #0]
 800e608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e60c:	4607      	mov	r7, r0
 800e60e:	460c      	mov	r4, r1
 800e610:	b10a      	cbz	r2, 800e616 <_printf_common+0x26>
 800e612:	3301      	adds	r3, #1
 800e614:	6033      	str	r3, [r6, #0]
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	0699      	lsls	r1, r3, #26
 800e61a:	bf42      	ittt	mi
 800e61c:	6833      	ldrmi	r3, [r6, #0]
 800e61e:	3302      	addmi	r3, #2
 800e620:	6033      	strmi	r3, [r6, #0]
 800e622:	6825      	ldr	r5, [r4, #0]
 800e624:	f015 0506 	ands.w	r5, r5, #6
 800e628:	d106      	bne.n	800e638 <_printf_common+0x48>
 800e62a:	f104 0a19 	add.w	sl, r4, #25
 800e62e:	68e3      	ldr	r3, [r4, #12]
 800e630:	6832      	ldr	r2, [r6, #0]
 800e632:	1a9b      	subs	r3, r3, r2
 800e634:	42ab      	cmp	r3, r5
 800e636:	dc26      	bgt.n	800e686 <_printf_common+0x96>
 800e638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e63c:	6822      	ldr	r2, [r4, #0]
 800e63e:	3b00      	subs	r3, #0
 800e640:	bf18      	it	ne
 800e642:	2301      	movne	r3, #1
 800e644:	0692      	lsls	r2, r2, #26
 800e646:	d42b      	bmi.n	800e6a0 <_printf_common+0xb0>
 800e648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e64c:	4641      	mov	r1, r8
 800e64e:	4638      	mov	r0, r7
 800e650:	47c8      	blx	r9
 800e652:	3001      	adds	r0, #1
 800e654:	d01e      	beq.n	800e694 <_printf_common+0xa4>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	6922      	ldr	r2, [r4, #16]
 800e65a:	f003 0306 	and.w	r3, r3, #6
 800e65e:	2b04      	cmp	r3, #4
 800e660:	bf02      	ittt	eq
 800e662:	68e5      	ldreq	r5, [r4, #12]
 800e664:	6833      	ldreq	r3, [r6, #0]
 800e666:	1aed      	subeq	r5, r5, r3
 800e668:	68a3      	ldr	r3, [r4, #8]
 800e66a:	bf0c      	ite	eq
 800e66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e670:	2500      	movne	r5, #0
 800e672:	4293      	cmp	r3, r2
 800e674:	bfc4      	itt	gt
 800e676:	1a9b      	subgt	r3, r3, r2
 800e678:	18ed      	addgt	r5, r5, r3
 800e67a:	2600      	movs	r6, #0
 800e67c:	341a      	adds	r4, #26
 800e67e:	42b5      	cmp	r5, r6
 800e680:	d11a      	bne.n	800e6b8 <_printf_common+0xc8>
 800e682:	2000      	movs	r0, #0
 800e684:	e008      	b.n	800e698 <_printf_common+0xa8>
 800e686:	2301      	movs	r3, #1
 800e688:	4652      	mov	r2, sl
 800e68a:	4641      	mov	r1, r8
 800e68c:	4638      	mov	r0, r7
 800e68e:	47c8      	blx	r9
 800e690:	3001      	adds	r0, #1
 800e692:	d103      	bne.n	800e69c <_printf_common+0xac>
 800e694:	f04f 30ff 	mov.w	r0, #4294967295
 800e698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e69c:	3501      	adds	r5, #1
 800e69e:	e7c6      	b.n	800e62e <_printf_common+0x3e>
 800e6a0:	18e1      	adds	r1, r4, r3
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	2030      	movs	r0, #48	@ 0x30
 800e6a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6aa:	4422      	add	r2, r4
 800e6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6b4:	3302      	adds	r3, #2
 800e6b6:	e7c7      	b.n	800e648 <_printf_common+0x58>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	4622      	mov	r2, r4
 800e6bc:	4641      	mov	r1, r8
 800e6be:	4638      	mov	r0, r7
 800e6c0:	47c8      	blx	r9
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d0e6      	beq.n	800e694 <_printf_common+0xa4>
 800e6c6:	3601      	adds	r6, #1
 800e6c8:	e7d9      	b.n	800e67e <_printf_common+0x8e>
	...

0800e6cc <_printf_i>:
 800e6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d0:	7e0f      	ldrb	r7, [r1, #24]
 800e6d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6d4:	2f78      	cmp	r7, #120	@ 0x78
 800e6d6:	4691      	mov	r9, r2
 800e6d8:	4680      	mov	r8, r0
 800e6da:	460c      	mov	r4, r1
 800e6dc:	469a      	mov	sl, r3
 800e6de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e6e2:	d807      	bhi.n	800e6f4 <_printf_i+0x28>
 800e6e4:	2f62      	cmp	r7, #98	@ 0x62
 800e6e6:	d80a      	bhi.n	800e6fe <_printf_i+0x32>
 800e6e8:	2f00      	cmp	r7, #0
 800e6ea:	f000 80d1 	beq.w	800e890 <_printf_i+0x1c4>
 800e6ee:	2f58      	cmp	r7, #88	@ 0x58
 800e6f0:	f000 80b8 	beq.w	800e864 <_printf_i+0x198>
 800e6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6fc:	e03a      	b.n	800e774 <_printf_i+0xa8>
 800e6fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e702:	2b15      	cmp	r3, #21
 800e704:	d8f6      	bhi.n	800e6f4 <_printf_i+0x28>
 800e706:	a101      	add	r1, pc, #4	@ (adr r1, 800e70c <_printf_i+0x40>)
 800e708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e70c:	0800e765 	.word	0x0800e765
 800e710:	0800e779 	.word	0x0800e779
 800e714:	0800e6f5 	.word	0x0800e6f5
 800e718:	0800e6f5 	.word	0x0800e6f5
 800e71c:	0800e6f5 	.word	0x0800e6f5
 800e720:	0800e6f5 	.word	0x0800e6f5
 800e724:	0800e779 	.word	0x0800e779
 800e728:	0800e6f5 	.word	0x0800e6f5
 800e72c:	0800e6f5 	.word	0x0800e6f5
 800e730:	0800e6f5 	.word	0x0800e6f5
 800e734:	0800e6f5 	.word	0x0800e6f5
 800e738:	0800e877 	.word	0x0800e877
 800e73c:	0800e7a3 	.word	0x0800e7a3
 800e740:	0800e831 	.word	0x0800e831
 800e744:	0800e6f5 	.word	0x0800e6f5
 800e748:	0800e6f5 	.word	0x0800e6f5
 800e74c:	0800e899 	.word	0x0800e899
 800e750:	0800e6f5 	.word	0x0800e6f5
 800e754:	0800e7a3 	.word	0x0800e7a3
 800e758:	0800e6f5 	.word	0x0800e6f5
 800e75c:	0800e6f5 	.word	0x0800e6f5
 800e760:	0800e839 	.word	0x0800e839
 800e764:	6833      	ldr	r3, [r6, #0]
 800e766:	1d1a      	adds	r2, r3, #4
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6032      	str	r2, [r6, #0]
 800e76c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e774:	2301      	movs	r3, #1
 800e776:	e09c      	b.n	800e8b2 <_printf_i+0x1e6>
 800e778:	6833      	ldr	r3, [r6, #0]
 800e77a:	6820      	ldr	r0, [r4, #0]
 800e77c:	1d19      	adds	r1, r3, #4
 800e77e:	6031      	str	r1, [r6, #0]
 800e780:	0606      	lsls	r6, r0, #24
 800e782:	d501      	bpl.n	800e788 <_printf_i+0xbc>
 800e784:	681d      	ldr	r5, [r3, #0]
 800e786:	e003      	b.n	800e790 <_printf_i+0xc4>
 800e788:	0645      	lsls	r5, r0, #25
 800e78a:	d5fb      	bpl.n	800e784 <_printf_i+0xb8>
 800e78c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e790:	2d00      	cmp	r5, #0
 800e792:	da03      	bge.n	800e79c <_printf_i+0xd0>
 800e794:	232d      	movs	r3, #45	@ 0x2d
 800e796:	426d      	negs	r5, r5
 800e798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e79c:	4858      	ldr	r0, [pc, #352]	@ (800e900 <_printf_i+0x234>)
 800e79e:	230a      	movs	r3, #10
 800e7a0:	e011      	b.n	800e7c6 <_printf_i+0xfa>
 800e7a2:	6821      	ldr	r1, [r4, #0]
 800e7a4:	6833      	ldr	r3, [r6, #0]
 800e7a6:	0608      	lsls	r0, r1, #24
 800e7a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7ac:	d402      	bmi.n	800e7b4 <_printf_i+0xe8>
 800e7ae:	0649      	lsls	r1, r1, #25
 800e7b0:	bf48      	it	mi
 800e7b2:	b2ad      	uxthmi	r5, r5
 800e7b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7b6:	4852      	ldr	r0, [pc, #328]	@ (800e900 <_printf_i+0x234>)
 800e7b8:	6033      	str	r3, [r6, #0]
 800e7ba:	bf14      	ite	ne
 800e7bc:	230a      	movne	r3, #10
 800e7be:	2308      	moveq	r3, #8
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e7c6:	6866      	ldr	r6, [r4, #4]
 800e7c8:	60a6      	str	r6, [r4, #8]
 800e7ca:	2e00      	cmp	r6, #0
 800e7cc:	db05      	blt.n	800e7da <_printf_i+0x10e>
 800e7ce:	6821      	ldr	r1, [r4, #0]
 800e7d0:	432e      	orrs	r6, r5
 800e7d2:	f021 0104 	bic.w	r1, r1, #4
 800e7d6:	6021      	str	r1, [r4, #0]
 800e7d8:	d04b      	beq.n	800e872 <_printf_i+0x1a6>
 800e7da:	4616      	mov	r6, r2
 800e7dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7e0:	fb03 5711 	mls	r7, r3, r1, r5
 800e7e4:	5dc7      	ldrb	r7, [r0, r7]
 800e7e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7ea:	462f      	mov	r7, r5
 800e7ec:	42bb      	cmp	r3, r7
 800e7ee:	460d      	mov	r5, r1
 800e7f0:	d9f4      	bls.n	800e7dc <_printf_i+0x110>
 800e7f2:	2b08      	cmp	r3, #8
 800e7f4:	d10b      	bne.n	800e80e <_printf_i+0x142>
 800e7f6:	6823      	ldr	r3, [r4, #0]
 800e7f8:	07df      	lsls	r7, r3, #31
 800e7fa:	d508      	bpl.n	800e80e <_printf_i+0x142>
 800e7fc:	6923      	ldr	r3, [r4, #16]
 800e7fe:	6861      	ldr	r1, [r4, #4]
 800e800:	4299      	cmp	r1, r3
 800e802:	bfde      	ittt	le
 800e804:	2330      	movle	r3, #48	@ 0x30
 800e806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e80a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e80e:	1b92      	subs	r2, r2, r6
 800e810:	6122      	str	r2, [r4, #16]
 800e812:	f8cd a000 	str.w	sl, [sp]
 800e816:	464b      	mov	r3, r9
 800e818:	aa03      	add	r2, sp, #12
 800e81a:	4621      	mov	r1, r4
 800e81c:	4640      	mov	r0, r8
 800e81e:	f7ff fee7 	bl	800e5f0 <_printf_common>
 800e822:	3001      	adds	r0, #1
 800e824:	d14a      	bne.n	800e8bc <_printf_i+0x1f0>
 800e826:	f04f 30ff 	mov.w	r0, #4294967295
 800e82a:	b004      	add	sp, #16
 800e82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e830:	6823      	ldr	r3, [r4, #0]
 800e832:	f043 0320 	orr.w	r3, r3, #32
 800e836:	6023      	str	r3, [r4, #0]
 800e838:	4832      	ldr	r0, [pc, #200]	@ (800e904 <_printf_i+0x238>)
 800e83a:	2778      	movs	r7, #120	@ 0x78
 800e83c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e840:	6823      	ldr	r3, [r4, #0]
 800e842:	6831      	ldr	r1, [r6, #0]
 800e844:	061f      	lsls	r7, r3, #24
 800e846:	f851 5b04 	ldr.w	r5, [r1], #4
 800e84a:	d402      	bmi.n	800e852 <_printf_i+0x186>
 800e84c:	065f      	lsls	r7, r3, #25
 800e84e:	bf48      	it	mi
 800e850:	b2ad      	uxthmi	r5, r5
 800e852:	6031      	str	r1, [r6, #0]
 800e854:	07d9      	lsls	r1, r3, #31
 800e856:	bf44      	itt	mi
 800e858:	f043 0320 	orrmi.w	r3, r3, #32
 800e85c:	6023      	strmi	r3, [r4, #0]
 800e85e:	b11d      	cbz	r5, 800e868 <_printf_i+0x19c>
 800e860:	2310      	movs	r3, #16
 800e862:	e7ad      	b.n	800e7c0 <_printf_i+0xf4>
 800e864:	4826      	ldr	r0, [pc, #152]	@ (800e900 <_printf_i+0x234>)
 800e866:	e7e9      	b.n	800e83c <_printf_i+0x170>
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	f023 0320 	bic.w	r3, r3, #32
 800e86e:	6023      	str	r3, [r4, #0]
 800e870:	e7f6      	b.n	800e860 <_printf_i+0x194>
 800e872:	4616      	mov	r6, r2
 800e874:	e7bd      	b.n	800e7f2 <_printf_i+0x126>
 800e876:	6833      	ldr	r3, [r6, #0]
 800e878:	6825      	ldr	r5, [r4, #0]
 800e87a:	6961      	ldr	r1, [r4, #20]
 800e87c:	1d18      	adds	r0, r3, #4
 800e87e:	6030      	str	r0, [r6, #0]
 800e880:	062e      	lsls	r6, r5, #24
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	d501      	bpl.n	800e88a <_printf_i+0x1be>
 800e886:	6019      	str	r1, [r3, #0]
 800e888:	e002      	b.n	800e890 <_printf_i+0x1c4>
 800e88a:	0668      	lsls	r0, r5, #25
 800e88c:	d5fb      	bpl.n	800e886 <_printf_i+0x1ba>
 800e88e:	8019      	strh	r1, [r3, #0]
 800e890:	2300      	movs	r3, #0
 800e892:	6123      	str	r3, [r4, #16]
 800e894:	4616      	mov	r6, r2
 800e896:	e7bc      	b.n	800e812 <_printf_i+0x146>
 800e898:	6833      	ldr	r3, [r6, #0]
 800e89a:	1d1a      	adds	r2, r3, #4
 800e89c:	6032      	str	r2, [r6, #0]
 800e89e:	681e      	ldr	r6, [r3, #0]
 800e8a0:	6862      	ldr	r2, [r4, #4]
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f7f1 fcbb 	bl	8000220 <memchr>
 800e8aa:	b108      	cbz	r0, 800e8b0 <_printf_i+0x1e4>
 800e8ac:	1b80      	subs	r0, r0, r6
 800e8ae:	6060      	str	r0, [r4, #4]
 800e8b0:	6863      	ldr	r3, [r4, #4]
 800e8b2:	6123      	str	r3, [r4, #16]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8ba:	e7aa      	b.n	800e812 <_printf_i+0x146>
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	4632      	mov	r2, r6
 800e8c0:	4649      	mov	r1, r9
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	47d0      	blx	sl
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	d0ad      	beq.n	800e826 <_printf_i+0x15a>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	079b      	lsls	r3, r3, #30
 800e8ce:	d413      	bmi.n	800e8f8 <_printf_i+0x22c>
 800e8d0:	68e0      	ldr	r0, [r4, #12]
 800e8d2:	9b03      	ldr	r3, [sp, #12]
 800e8d4:	4298      	cmp	r0, r3
 800e8d6:	bfb8      	it	lt
 800e8d8:	4618      	movlt	r0, r3
 800e8da:	e7a6      	b.n	800e82a <_printf_i+0x15e>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	4632      	mov	r2, r6
 800e8e0:	4649      	mov	r1, r9
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	47d0      	blx	sl
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	d09d      	beq.n	800e826 <_printf_i+0x15a>
 800e8ea:	3501      	adds	r5, #1
 800e8ec:	68e3      	ldr	r3, [r4, #12]
 800e8ee:	9903      	ldr	r1, [sp, #12]
 800e8f0:	1a5b      	subs	r3, r3, r1
 800e8f2:	42ab      	cmp	r3, r5
 800e8f4:	dcf2      	bgt.n	800e8dc <_printf_i+0x210>
 800e8f6:	e7eb      	b.n	800e8d0 <_printf_i+0x204>
 800e8f8:	2500      	movs	r5, #0
 800e8fa:	f104 0619 	add.w	r6, r4, #25
 800e8fe:	e7f5      	b.n	800e8ec <_printf_i+0x220>
 800e900:	080111a2 	.word	0x080111a2
 800e904:	080111b3 	.word	0x080111b3

0800e908 <std>:
 800e908:	2300      	movs	r3, #0
 800e90a:	b510      	push	{r4, lr}
 800e90c:	4604      	mov	r4, r0
 800e90e:	e9c0 3300 	strd	r3, r3, [r0]
 800e912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e916:	6083      	str	r3, [r0, #8]
 800e918:	8181      	strh	r1, [r0, #12]
 800e91a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e91c:	81c2      	strh	r2, [r0, #14]
 800e91e:	6183      	str	r3, [r0, #24]
 800e920:	4619      	mov	r1, r3
 800e922:	2208      	movs	r2, #8
 800e924:	305c      	adds	r0, #92	@ 0x5c
 800e926:	f000 f915 	bl	800eb54 <memset>
 800e92a:	4b0d      	ldr	r3, [pc, #52]	@ (800e960 <std+0x58>)
 800e92c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e92e:	4b0d      	ldr	r3, [pc, #52]	@ (800e964 <std+0x5c>)
 800e930:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e932:	4b0d      	ldr	r3, [pc, #52]	@ (800e968 <std+0x60>)
 800e934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e936:	4b0d      	ldr	r3, [pc, #52]	@ (800e96c <std+0x64>)
 800e938:	6323      	str	r3, [r4, #48]	@ 0x30
 800e93a:	4b0d      	ldr	r3, [pc, #52]	@ (800e970 <std+0x68>)
 800e93c:	6224      	str	r4, [r4, #32]
 800e93e:	429c      	cmp	r4, r3
 800e940:	d006      	beq.n	800e950 <std+0x48>
 800e942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e946:	4294      	cmp	r4, r2
 800e948:	d002      	beq.n	800e950 <std+0x48>
 800e94a:	33d0      	adds	r3, #208	@ 0xd0
 800e94c:	429c      	cmp	r4, r3
 800e94e:	d105      	bne.n	800e95c <std+0x54>
 800e950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e958:	f000 b9d6 	b.w	800ed08 <__retarget_lock_init_recursive>
 800e95c:	bd10      	pop	{r4, pc}
 800e95e:	bf00      	nop
 800e960:	0800ea8d 	.word	0x0800ea8d
 800e964:	0800eaaf 	.word	0x0800eaaf
 800e968:	0800eae7 	.word	0x0800eae7
 800e96c:	0800eb0b 	.word	0x0800eb0b
 800e970:	2000a57c 	.word	0x2000a57c

0800e974 <stdio_exit_handler>:
 800e974:	4a02      	ldr	r2, [pc, #8]	@ (800e980 <stdio_exit_handler+0xc>)
 800e976:	4903      	ldr	r1, [pc, #12]	@ (800e984 <stdio_exit_handler+0x10>)
 800e978:	4803      	ldr	r0, [pc, #12]	@ (800e988 <stdio_exit_handler+0x14>)
 800e97a:	f000 b869 	b.w	800ea50 <_fwalk_sglue>
 800e97e:	bf00      	nop
 800e980:	20000188 	.word	0x20000188
 800e984:	0801068d 	.word	0x0801068d
 800e988:	20000198 	.word	0x20000198

0800e98c <cleanup_stdio>:
 800e98c:	6841      	ldr	r1, [r0, #4]
 800e98e:	4b0c      	ldr	r3, [pc, #48]	@ (800e9c0 <cleanup_stdio+0x34>)
 800e990:	4299      	cmp	r1, r3
 800e992:	b510      	push	{r4, lr}
 800e994:	4604      	mov	r4, r0
 800e996:	d001      	beq.n	800e99c <cleanup_stdio+0x10>
 800e998:	f001 fe78 	bl	801068c <_fflush_r>
 800e99c:	68a1      	ldr	r1, [r4, #8]
 800e99e:	4b09      	ldr	r3, [pc, #36]	@ (800e9c4 <cleanup_stdio+0x38>)
 800e9a0:	4299      	cmp	r1, r3
 800e9a2:	d002      	beq.n	800e9aa <cleanup_stdio+0x1e>
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f001 fe71 	bl	801068c <_fflush_r>
 800e9aa:	68e1      	ldr	r1, [r4, #12]
 800e9ac:	4b06      	ldr	r3, [pc, #24]	@ (800e9c8 <cleanup_stdio+0x3c>)
 800e9ae:	4299      	cmp	r1, r3
 800e9b0:	d004      	beq.n	800e9bc <cleanup_stdio+0x30>
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9b8:	f001 be68 	b.w	801068c <_fflush_r>
 800e9bc:	bd10      	pop	{r4, pc}
 800e9be:	bf00      	nop
 800e9c0:	2000a57c 	.word	0x2000a57c
 800e9c4:	2000a5e4 	.word	0x2000a5e4
 800e9c8:	2000a64c 	.word	0x2000a64c

0800e9cc <global_stdio_init.part.0>:
 800e9cc:	b510      	push	{r4, lr}
 800e9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e9fc <global_stdio_init.part.0+0x30>)
 800e9d0:	4c0b      	ldr	r4, [pc, #44]	@ (800ea00 <global_stdio_init.part.0+0x34>)
 800e9d2:	4a0c      	ldr	r2, [pc, #48]	@ (800ea04 <global_stdio_init.part.0+0x38>)
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2104      	movs	r1, #4
 800e9dc:	f7ff ff94 	bl	800e908 <std>
 800e9e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	2109      	movs	r1, #9
 800e9e8:	f7ff ff8e 	bl	800e908 <std>
 800e9ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e9f0:	2202      	movs	r2, #2
 800e9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9f6:	2112      	movs	r1, #18
 800e9f8:	f7ff bf86 	b.w	800e908 <std>
 800e9fc:	2000a6b4 	.word	0x2000a6b4
 800ea00:	2000a57c 	.word	0x2000a57c
 800ea04:	0800e975 	.word	0x0800e975

0800ea08 <__sfp_lock_acquire>:
 800ea08:	4801      	ldr	r0, [pc, #4]	@ (800ea10 <__sfp_lock_acquire+0x8>)
 800ea0a:	f000 b97e 	b.w	800ed0a <__retarget_lock_acquire_recursive>
 800ea0e:	bf00      	nop
 800ea10:	2000a6bd 	.word	0x2000a6bd

0800ea14 <__sfp_lock_release>:
 800ea14:	4801      	ldr	r0, [pc, #4]	@ (800ea1c <__sfp_lock_release+0x8>)
 800ea16:	f000 b979 	b.w	800ed0c <__retarget_lock_release_recursive>
 800ea1a:	bf00      	nop
 800ea1c:	2000a6bd 	.word	0x2000a6bd

0800ea20 <__sinit>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4604      	mov	r4, r0
 800ea24:	f7ff fff0 	bl	800ea08 <__sfp_lock_acquire>
 800ea28:	6a23      	ldr	r3, [r4, #32]
 800ea2a:	b11b      	cbz	r3, 800ea34 <__sinit+0x14>
 800ea2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea30:	f7ff bff0 	b.w	800ea14 <__sfp_lock_release>
 800ea34:	4b04      	ldr	r3, [pc, #16]	@ (800ea48 <__sinit+0x28>)
 800ea36:	6223      	str	r3, [r4, #32]
 800ea38:	4b04      	ldr	r3, [pc, #16]	@ (800ea4c <__sinit+0x2c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1f5      	bne.n	800ea2c <__sinit+0xc>
 800ea40:	f7ff ffc4 	bl	800e9cc <global_stdio_init.part.0>
 800ea44:	e7f2      	b.n	800ea2c <__sinit+0xc>
 800ea46:	bf00      	nop
 800ea48:	0800e98d 	.word	0x0800e98d
 800ea4c:	2000a6b4 	.word	0x2000a6b4

0800ea50 <_fwalk_sglue>:
 800ea50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea54:	4607      	mov	r7, r0
 800ea56:	4688      	mov	r8, r1
 800ea58:	4614      	mov	r4, r2
 800ea5a:	2600      	movs	r6, #0
 800ea5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea60:	f1b9 0901 	subs.w	r9, r9, #1
 800ea64:	d505      	bpl.n	800ea72 <_fwalk_sglue+0x22>
 800ea66:	6824      	ldr	r4, [r4, #0]
 800ea68:	2c00      	cmp	r4, #0
 800ea6a:	d1f7      	bne.n	800ea5c <_fwalk_sglue+0xc>
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea72:	89ab      	ldrh	r3, [r5, #12]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d907      	bls.n	800ea88 <_fwalk_sglue+0x38>
 800ea78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	d003      	beq.n	800ea88 <_fwalk_sglue+0x38>
 800ea80:	4629      	mov	r1, r5
 800ea82:	4638      	mov	r0, r7
 800ea84:	47c0      	blx	r8
 800ea86:	4306      	orrs	r6, r0
 800ea88:	3568      	adds	r5, #104	@ 0x68
 800ea8a:	e7e9      	b.n	800ea60 <_fwalk_sglue+0x10>

0800ea8c <__sread>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	460c      	mov	r4, r1
 800ea90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea94:	f000 f8ea 	bl	800ec6c <_read_r>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	bfab      	itete	ge
 800ea9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ea9e:	89a3      	ldrhlt	r3, [r4, #12]
 800eaa0:	181b      	addge	r3, r3, r0
 800eaa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eaa6:	bfac      	ite	ge
 800eaa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eaaa:	81a3      	strhlt	r3, [r4, #12]
 800eaac:	bd10      	pop	{r4, pc}

0800eaae <__swrite>:
 800eaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab2:	461f      	mov	r7, r3
 800eab4:	898b      	ldrh	r3, [r1, #12]
 800eab6:	05db      	lsls	r3, r3, #23
 800eab8:	4605      	mov	r5, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	4616      	mov	r6, r2
 800eabe:	d505      	bpl.n	800eacc <__swrite+0x1e>
 800eac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac4:	2302      	movs	r3, #2
 800eac6:	2200      	movs	r2, #0
 800eac8:	f000 f8be 	bl	800ec48 <_lseek_r>
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ead2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ead6:	81a3      	strh	r3, [r4, #12]
 800ead8:	4632      	mov	r2, r6
 800eada:	463b      	mov	r3, r7
 800eadc:	4628      	mov	r0, r5
 800eade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eae2:	f000 b8d5 	b.w	800ec90 <_write_r>

0800eae6 <__sseek>:
 800eae6:	b510      	push	{r4, lr}
 800eae8:	460c      	mov	r4, r1
 800eaea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaee:	f000 f8ab 	bl	800ec48 <_lseek_r>
 800eaf2:	1c43      	adds	r3, r0, #1
 800eaf4:	89a3      	ldrh	r3, [r4, #12]
 800eaf6:	bf15      	itete	ne
 800eaf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eafa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eafe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb02:	81a3      	strheq	r3, [r4, #12]
 800eb04:	bf18      	it	ne
 800eb06:	81a3      	strhne	r3, [r4, #12]
 800eb08:	bd10      	pop	{r4, pc}

0800eb0a <__sclose>:
 800eb0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb0e:	f000 b82d 	b.w	800eb6c <_close_r>
	...

0800eb14 <_vsiprintf_r>:
 800eb14:	b510      	push	{r4, lr}
 800eb16:	b09a      	sub	sp, #104	@ 0x68
 800eb18:	2400      	movs	r4, #0
 800eb1a:	9100      	str	r1, [sp, #0]
 800eb1c:	9104      	str	r1, [sp, #16]
 800eb1e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb22:	9105      	str	r1, [sp, #20]
 800eb24:	9102      	str	r1, [sp, #8]
 800eb26:	4905      	ldr	r1, [pc, #20]	@ (800eb3c <_vsiprintf_r+0x28>)
 800eb28:	9103      	str	r1, [sp, #12]
 800eb2a:	4669      	mov	r1, sp
 800eb2c:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb2e:	f001 fc2d 	bl	801038c <_svfiprintf_r>
 800eb32:	9b00      	ldr	r3, [sp, #0]
 800eb34:	701c      	strb	r4, [r3, #0]
 800eb36:	b01a      	add	sp, #104	@ 0x68
 800eb38:	bd10      	pop	{r4, pc}
 800eb3a:	bf00      	nop
 800eb3c:	ffff0208 	.word	0xffff0208

0800eb40 <vsiprintf>:
 800eb40:	4613      	mov	r3, r2
 800eb42:	460a      	mov	r2, r1
 800eb44:	4601      	mov	r1, r0
 800eb46:	4802      	ldr	r0, [pc, #8]	@ (800eb50 <vsiprintf+0x10>)
 800eb48:	6800      	ldr	r0, [r0, #0]
 800eb4a:	f7ff bfe3 	b.w	800eb14 <_vsiprintf_r>
 800eb4e:	bf00      	nop
 800eb50:	20000194 	.word	0x20000194

0800eb54 <memset>:
 800eb54:	4402      	add	r2, r0
 800eb56:	4603      	mov	r3, r0
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d100      	bne.n	800eb5e <memset+0xa>
 800eb5c:	4770      	bx	lr
 800eb5e:	f803 1b01 	strb.w	r1, [r3], #1
 800eb62:	e7f9      	b.n	800eb58 <memset+0x4>

0800eb64 <_localeconv_r>:
 800eb64:	4800      	ldr	r0, [pc, #0]	@ (800eb68 <_localeconv_r+0x4>)
 800eb66:	4770      	bx	lr
 800eb68:	200002d4 	.word	0x200002d4

0800eb6c <_close_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4d06      	ldr	r5, [pc, #24]	@ (800eb88 <_close_r+0x1c>)
 800eb70:	2300      	movs	r3, #0
 800eb72:	4604      	mov	r4, r0
 800eb74:	4608      	mov	r0, r1
 800eb76:	602b      	str	r3, [r5, #0]
 800eb78:	f7f3 f956 	bl	8001e28 <_close>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_close_r+0x1a>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_close_r+0x1a>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	2000a6b8 	.word	0x2000a6b8

0800eb8c <_reclaim_reent>:
 800eb8c:	4b2d      	ldr	r3, [pc, #180]	@ (800ec44 <_reclaim_reent+0xb8>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4283      	cmp	r3, r0
 800eb92:	b570      	push	{r4, r5, r6, lr}
 800eb94:	4604      	mov	r4, r0
 800eb96:	d053      	beq.n	800ec40 <_reclaim_reent+0xb4>
 800eb98:	69c3      	ldr	r3, [r0, #28]
 800eb9a:	b31b      	cbz	r3, 800ebe4 <_reclaim_reent+0x58>
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	b163      	cbz	r3, 800ebba <_reclaim_reent+0x2e>
 800eba0:	2500      	movs	r5, #0
 800eba2:	69e3      	ldr	r3, [r4, #28]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	5959      	ldr	r1, [r3, r5]
 800eba8:	b9b1      	cbnz	r1, 800ebd8 <_reclaim_reent+0x4c>
 800ebaa:	3504      	adds	r5, #4
 800ebac:	2d80      	cmp	r5, #128	@ 0x80
 800ebae:	d1f8      	bne.n	800eba2 <_reclaim_reent+0x16>
 800ebb0:	69e3      	ldr	r3, [r4, #28]
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	68d9      	ldr	r1, [r3, #12]
 800ebb6:	f000 ff13 	bl	800f9e0 <_free_r>
 800ebba:	69e3      	ldr	r3, [r4, #28]
 800ebbc:	6819      	ldr	r1, [r3, #0]
 800ebbe:	b111      	cbz	r1, 800ebc6 <_reclaim_reent+0x3a>
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 ff0d 	bl	800f9e0 <_free_r>
 800ebc6:	69e3      	ldr	r3, [r4, #28]
 800ebc8:	689d      	ldr	r5, [r3, #8]
 800ebca:	b15d      	cbz	r5, 800ebe4 <_reclaim_reent+0x58>
 800ebcc:	4629      	mov	r1, r5
 800ebce:	4620      	mov	r0, r4
 800ebd0:	682d      	ldr	r5, [r5, #0]
 800ebd2:	f000 ff05 	bl	800f9e0 <_free_r>
 800ebd6:	e7f8      	b.n	800ebca <_reclaim_reent+0x3e>
 800ebd8:	680e      	ldr	r6, [r1, #0]
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 ff00 	bl	800f9e0 <_free_r>
 800ebe0:	4631      	mov	r1, r6
 800ebe2:	e7e1      	b.n	800eba8 <_reclaim_reent+0x1c>
 800ebe4:	6961      	ldr	r1, [r4, #20]
 800ebe6:	b111      	cbz	r1, 800ebee <_reclaim_reent+0x62>
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f000 fef9 	bl	800f9e0 <_free_r>
 800ebee:	69e1      	ldr	r1, [r4, #28]
 800ebf0:	b111      	cbz	r1, 800ebf8 <_reclaim_reent+0x6c>
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 fef4 	bl	800f9e0 <_free_r>
 800ebf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ebfa:	b111      	cbz	r1, 800ec02 <_reclaim_reent+0x76>
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 feef 	bl	800f9e0 <_free_r>
 800ec02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec04:	b111      	cbz	r1, 800ec0c <_reclaim_reent+0x80>
 800ec06:	4620      	mov	r0, r4
 800ec08:	f000 feea 	bl	800f9e0 <_free_r>
 800ec0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ec0e:	b111      	cbz	r1, 800ec16 <_reclaim_reent+0x8a>
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 fee5 	bl	800f9e0 <_free_r>
 800ec16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ec18:	b111      	cbz	r1, 800ec20 <_reclaim_reent+0x94>
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f000 fee0 	bl	800f9e0 <_free_r>
 800ec20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ec22:	b111      	cbz	r1, 800ec2a <_reclaim_reent+0x9e>
 800ec24:	4620      	mov	r0, r4
 800ec26:	f000 fedb 	bl	800f9e0 <_free_r>
 800ec2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ec2c:	b111      	cbz	r1, 800ec34 <_reclaim_reent+0xa8>
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f000 fed6 	bl	800f9e0 <_free_r>
 800ec34:	6a23      	ldr	r3, [r4, #32]
 800ec36:	b11b      	cbz	r3, 800ec40 <_reclaim_reent+0xb4>
 800ec38:	4620      	mov	r0, r4
 800ec3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec3e:	4718      	bx	r3
 800ec40:	bd70      	pop	{r4, r5, r6, pc}
 800ec42:	bf00      	nop
 800ec44:	20000194 	.word	0x20000194

0800ec48 <_lseek_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d07      	ldr	r5, [pc, #28]	@ (800ec68 <_lseek_r+0x20>)
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	4608      	mov	r0, r1
 800ec50:	4611      	mov	r1, r2
 800ec52:	2200      	movs	r2, #0
 800ec54:	602a      	str	r2, [r5, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	f7f3 f90d 	bl	8001e76 <_lseek>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d102      	bne.n	800ec66 <_lseek_r+0x1e>
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	b103      	cbz	r3, 800ec66 <_lseek_r+0x1e>
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	2000a6b8 	.word	0x2000a6b8

0800ec6c <_read_r>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	4d07      	ldr	r5, [pc, #28]	@ (800ec8c <_read_r+0x20>)
 800ec70:	4604      	mov	r4, r0
 800ec72:	4608      	mov	r0, r1
 800ec74:	4611      	mov	r1, r2
 800ec76:	2200      	movs	r2, #0
 800ec78:	602a      	str	r2, [r5, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	f7f3 f89b 	bl	8001db6 <_read>
 800ec80:	1c43      	adds	r3, r0, #1
 800ec82:	d102      	bne.n	800ec8a <_read_r+0x1e>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	b103      	cbz	r3, 800ec8a <_read_r+0x1e>
 800ec88:	6023      	str	r3, [r4, #0]
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	2000a6b8 	.word	0x2000a6b8

0800ec90 <_write_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d07      	ldr	r5, [pc, #28]	@ (800ecb0 <_write_r+0x20>)
 800ec94:	4604      	mov	r4, r0
 800ec96:	4608      	mov	r0, r1
 800ec98:	4611      	mov	r1, r2
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	602a      	str	r2, [r5, #0]
 800ec9e:	461a      	mov	r2, r3
 800eca0:	f7f3 f8a6 	bl	8001df0 <_write>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_write_r+0x1e>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_write_r+0x1e>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	2000a6b8 	.word	0x2000a6b8

0800ecb4 <__errno>:
 800ecb4:	4b01      	ldr	r3, [pc, #4]	@ (800ecbc <__errno+0x8>)
 800ecb6:	6818      	ldr	r0, [r3, #0]
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	20000194 	.word	0x20000194

0800ecc0 <__libc_init_array>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	4d0d      	ldr	r5, [pc, #52]	@ (800ecf8 <__libc_init_array+0x38>)
 800ecc4:	4c0d      	ldr	r4, [pc, #52]	@ (800ecfc <__libc_init_array+0x3c>)
 800ecc6:	1b64      	subs	r4, r4, r5
 800ecc8:	10a4      	asrs	r4, r4, #2
 800ecca:	2600      	movs	r6, #0
 800eccc:	42a6      	cmp	r6, r4
 800ecce:	d109      	bne.n	800ece4 <__libc_init_array+0x24>
 800ecd0:	4d0b      	ldr	r5, [pc, #44]	@ (800ed00 <__libc_init_array+0x40>)
 800ecd2:	4c0c      	ldr	r4, [pc, #48]	@ (800ed04 <__libc_init_array+0x44>)
 800ecd4:	f002 f86a 	bl	8010dac <_init>
 800ecd8:	1b64      	subs	r4, r4, r5
 800ecda:	10a4      	asrs	r4, r4, #2
 800ecdc:	2600      	movs	r6, #0
 800ecde:	42a6      	cmp	r6, r4
 800ece0:	d105      	bne.n	800ecee <__libc_init_array+0x2e>
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ece8:	4798      	blx	r3
 800ecea:	3601      	adds	r6, #1
 800ecec:	e7ee      	b.n	800eccc <__libc_init_array+0xc>
 800ecee:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecf2:	4798      	blx	r3
 800ecf4:	3601      	adds	r6, #1
 800ecf6:	e7f2      	b.n	800ecde <__libc_init_array+0x1e>
 800ecf8:	0801150c 	.word	0x0801150c
 800ecfc:	0801150c 	.word	0x0801150c
 800ed00:	0801150c 	.word	0x0801150c
 800ed04:	08011510 	.word	0x08011510

0800ed08 <__retarget_lock_init_recursive>:
 800ed08:	4770      	bx	lr

0800ed0a <__retarget_lock_acquire_recursive>:
 800ed0a:	4770      	bx	lr

0800ed0c <__retarget_lock_release_recursive>:
 800ed0c:	4770      	bx	lr

0800ed0e <memcpy>:
 800ed0e:	440a      	add	r2, r1
 800ed10:	4291      	cmp	r1, r2
 800ed12:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed16:	d100      	bne.n	800ed1a <memcpy+0xc>
 800ed18:	4770      	bx	lr
 800ed1a:	b510      	push	{r4, lr}
 800ed1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed24:	4291      	cmp	r1, r2
 800ed26:	d1f9      	bne.n	800ed1c <memcpy+0xe>
 800ed28:	bd10      	pop	{r4, pc}

0800ed2a <quorem>:
 800ed2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2e:	6903      	ldr	r3, [r0, #16]
 800ed30:	690c      	ldr	r4, [r1, #16]
 800ed32:	42a3      	cmp	r3, r4
 800ed34:	4607      	mov	r7, r0
 800ed36:	db7e      	blt.n	800ee36 <quorem+0x10c>
 800ed38:	3c01      	subs	r4, #1
 800ed3a:	f101 0814 	add.w	r8, r1, #20
 800ed3e:	00a3      	lsls	r3, r4, #2
 800ed40:	f100 0514 	add.w	r5, r0, #20
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed4a:	9301      	str	r3, [sp, #4]
 800ed4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed54:	3301      	adds	r3, #1
 800ed56:	429a      	cmp	r2, r3
 800ed58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed60:	d32e      	bcc.n	800edc0 <quorem+0x96>
 800ed62:	f04f 0a00 	mov.w	sl, #0
 800ed66:	46c4      	mov	ip, r8
 800ed68:	46ae      	mov	lr, r5
 800ed6a:	46d3      	mov	fp, sl
 800ed6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed70:	b298      	uxth	r0, r3
 800ed72:	fb06 a000 	mla	r0, r6, r0, sl
 800ed76:	0c02      	lsrs	r2, r0, #16
 800ed78:	0c1b      	lsrs	r3, r3, #16
 800ed7a:	fb06 2303 	mla	r3, r6, r3, r2
 800ed7e:	f8de 2000 	ldr.w	r2, [lr]
 800ed82:	b280      	uxth	r0, r0
 800ed84:	b292      	uxth	r2, r2
 800ed86:	1a12      	subs	r2, r2, r0
 800ed88:	445a      	add	r2, fp
 800ed8a:	f8de 0000 	ldr.w	r0, [lr]
 800ed8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ed9c:	b292      	uxth	r2, r2
 800ed9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eda2:	45e1      	cmp	r9, ip
 800eda4:	f84e 2b04 	str.w	r2, [lr], #4
 800eda8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800edac:	d2de      	bcs.n	800ed6c <quorem+0x42>
 800edae:	9b00      	ldr	r3, [sp, #0]
 800edb0:	58eb      	ldr	r3, [r5, r3]
 800edb2:	b92b      	cbnz	r3, 800edc0 <quorem+0x96>
 800edb4:	9b01      	ldr	r3, [sp, #4]
 800edb6:	3b04      	subs	r3, #4
 800edb8:	429d      	cmp	r5, r3
 800edba:	461a      	mov	r2, r3
 800edbc:	d32f      	bcc.n	800ee1e <quorem+0xf4>
 800edbe:	613c      	str	r4, [r7, #16]
 800edc0:	4638      	mov	r0, r7
 800edc2:	f001 f97f 	bl	80100c4 <__mcmp>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	db25      	blt.n	800ee16 <quorem+0xec>
 800edca:	4629      	mov	r1, r5
 800edcc:	2000      	movs	r0, #0
 800edce:	f858 2b04 	ldr.w	r2, [r8], #4
 800edd2:	f8d1 c000 	ldr.w	ip, [r1]
 800edd6:	fa1f fe82 	uxth.w	lr, r2
 800edda:	fa1f f38c 	uxth.w	r3, ip
 800edde:	eba3 030e 	sub.w	r3, r3, lr
 800ede2:	4403      	add	r3, r0
 800ede4:	0c12      	lsrs	r2, r2, #16
 800ede6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800edea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800edee:	b29b      	uxth	r3, r3
 800edf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edf4:	45c1      	cmp	r9, r8
 800edf6:	f841 3b04 	str.w	r3, [r1], #4
 800edfa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800edfe:	d2e6      	bcs.n	800edce <quorem+0xa4>
 800ee00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee08:	b922      	cbnz	r2, 800ee14 <quorem+0xea>
 800ee0a:	3b04      	subs	r3, #4
 800ee0c:	429d      	cmp	r5, r3
 800ee0e:	461a      	mov	r2, r3
 800ee10:	d30b      	bcc.n	800ee2a <quorem+0x100>
 800ee12:	613c      	str	r4, [r7, #16]
 800ee14:	3601      	adds	r6, #1
 800ee16:	4630      	mov	r0, r6
 800ee18:	b003      	add	sp, #12
 800ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1e:	6812      	ldr	r2, [r2, #0]
 800ee20:	3b04      	subs	r3, #4
 800ee22:	2a00      	cmp	r2, #0
 800ee24:	d1cb      	bne.n	800edbe <quorem+0x94>
 800ee26:	3c01      	subs	r4, #1
 800ee28:	e7c6      	b.n	800edb8 <quorem+0x8e>
 800ee2a:	6812      	ldr	r2, [r2, #0]
 800ee2c:	3b04      	subs	r3, #4
 800ee2e:	2a00      	cmp	r2, #0
 800ee30:	d1ef      	bne.n	800ee12 <quorem+0xe8>
 800ee32:	3c01      	subs	r4, #1
 800ee34:	e7ea      	b.n	800ee0c <quorem+0xe2>
 800ee36:	2000      	movs	r0, #0
 800ee38:	e7ee      	b.n	800ee18 <quorem+0xee>
 800ee3a:	0000      	movs	r0, r0
 800ee3c:	0000      	movs	r0, r0
	...

0800ee40 <_dtoa_r>:
 800ee40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee44:	69c7      	ldr	r7, [r0, #28]
 800ee46:	b097      	sub	sp, #92	@ 0x5c
 800ee48:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ee4c:	ec55 4b10 	vmov	r4, r5, d0
 800ee50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ee52:	9107      	str	r1, [sp, #28]
 800ee54:	4681      	mov	r9, r0
 800ee56:	920c      	str	r2, [sp, #48]	@ 0x30
 800ee58:	9311      	str	r3, [sp, #68]	@ 0x44
 800ee5a:	b97f      	cbnz	r7, 800ee7c <_dtoa_r+0x3c>
 800ee5c:	2010      	movs	r0, #16
 800ee5e:	f000 fe09 	bl	800fa74 <malloc>
 800ee62:	4602      	mov	r2, r0
 800ee64:	f8c9 001c 	str.w	r0, [r9, #28]
 800ee68:	b920      	cbnz	r0, 800ee74 <_dtoa_r+0x34>
 800ee6a:	4ba9      	ldr	r3, [pc, #676]	@ (800f110 <_dtoa_r+0x2d0>)
 800ee6c:	21ef      	movs	r1, #239	@ 0xef
 800ee6e:	48a9      	ldr	r0, [pc, #676]	@ (800f114 <_dtoa_r+0x2d4>)
 800ee70:	f001 fc5e 	bl	8010730 <__assert_func>
 800ee74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee78:	6007      	str	r7, [r0, #0]
 800ee7a:	60c7      	str	r7, [r0, #12]
 800ee7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee80:	6819      	ldr	r1, [r3, #0]
 800ee82:	b159      	cbz	r1, 800ee9c <_dtoa_r+0x5c>
 800ee84:	685a      	ldr	r2, [r3, #4]
 800ee86:	604a      	str	r2, [r1, #4]
 800ee88:	2301      	movs	r3, #1
 800ee8a:	4093      	lsls	r3, r2
 800ee8c:	608b      	str	r3, [r1, #8]
 800ee8e:	4648      	mov	r0, r9
 800ee90:	f000 fee6 	bl	800fc60 <_Bfree>
 800ee94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	1e2b      	subs	r3, r5, #0
 800ee9e:	bfb9      	ittee	lt
 800eea0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eea4:	9305      	strlt	r3, [sp, #20]
 800eea6:	2300      	movge	r3, #0
 800eea8:	6033      	strge	r3, [r6, #0]
 800eeaa:	9f05      	ldr	r7, [sp, #20]
 800eeac:	4b9a      	ldr	r3, [pc, #616]	@ (800f118 <_dtoa_r+0x2d8>)
 800eeae:	bfbc      	itt	lt
 800eeb0:	2201      	movlt	r2, #1
 800eeb2:	6032      	strlt	r2, [r6, #0]
 800eeb4:	43bb      	bics	r3, r7
 800eeb6:	d112      	bne.n	800eede <_dtoa_r+0x9e>
 800eeb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eeba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eebe:	6013      	str	r3, [r2, #0]
 800eec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eec4:	4323      	orrs	r3, r4
 800eec6:	f000 855a 	beq.w	800f97e <_dtoa_r+0xb3e>
 800eeca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eecc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f12c <_dtoa_r+0x2ec>
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f000 855c 	beq.w	800f98e <_dtoa_r+0xb4e>
 800eed6:	f10a 0303 	add.w	r3, sl, #3
 800eeda:	f000 bd56 	b.w	800f98a <_dtoa_r+0xb4a>
 800eede:	ed9d 7b04 	vldr	d7, [sp, #16]
 800eee2:	2200      	movs	r2, #0
 800eee4:	ec51 0b17 	vmov	r0, r1, d7
 800eee8:	2300      	movs	r3, #0
 800eeea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800eeee:	f7f1 fe13 	bl	8000b18 <__aeabi_dcmpeq>
 800eef2:	4680      	mov	r8, r0
 800eef4:	b158      	cbz	r0, 800ef0e <_dtoa_r+0xce>
 800eef6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eef8:	2301      	movs	r3, #1
 800eefa:	6013      	str	r3, [r2, #0]
 800eefc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eefe:	b113      	cbz	r3, 800ef06 <_dtoa_r+0xc6>
 800ef00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ef02:	4b86      	ldr	r3, [pc, #536]	@ (800f11c <_dtoa_r+0x2dc>)
 800ef04:	6013      	str	r3, [r2, #0]
 800ef06:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f130 <_dtoa_r+0x2f0>
 800ef0a:	f000 bd40 	b.w	800f98e <_dtoa_r+0xb4e>
 800ef0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ef12:	aa14      	add	r2, sp, #80	@ 0x50
 800ef14:	a915      	add	r1, sp, #84	@ 0x54
 800ef16:	4648      	mov	r0, r9
 800ef18:	f001 f984 	bl	8010224 <__d2b>
 800ef1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ef20:	9002      	str	r0, [sp, #8]
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	d078      	beq.n	800f018 <_dtoa_r+0x1d8>
 800ef26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef28:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ef2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ef34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ef38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ef3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ef40:	4619      	mov	r1, r3
 800ef42:	2200      	movs	r2, #0
 800ef44:	4b76      	ldr	r3, [pc, #472]	@ (800f120 <_dtoa_r+0x2e0>)
 800ef46:	f7f1 f9c7 	bl	80002d8 <__aeabi_dsub>
 800ef4a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f0f8 <_dtoa_r+0x2b8>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	f7f1 fb7a 	bl	8000648 <__aeabi_dmul>
 800ef54:	a36a      	add	r3, pc, #424	@ (adr r3, 800f100 <_dtoa_r+0x2c0>)
 800ef56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5a:	f7f1 f9bf 	bl	80002dc <__adddf3>
 800ef5e:	4604      	mov	r4, r0
 800ef60:	4630      	mov	r0, r6
 800ef62:	460d      	mov	r5, r1
 800ef64:	f7f1 fb06 	bl	8000574 <__aeabi_i2d>
 800ef68:	a367      	add	r3, pc, #412	@ (adr r3, 800f108 <_dtoa_r+0x2c8>)
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	f7f1 fb6b 	bl	8000648 <__aeabi_dmul>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	4620      	mov	r0, r4
 800ef78:	4629      	mov	r1, r5
 800ef7a:	f7f1 f9af 	bl	80002dc <__adddf3>
 800ef7e:	4604      	mov	r4, r0
 800ef80:	460d      	mov	r5, r1
 800ef82:	f7f1 fe11 	bl	8000ba8 <__aeabi_d2iz>
 800ef86:	2200      	movs	r2, #0
 800ef88:	4607      	mov	r7, r0
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	4629      	mov	r1, r5
 800ef90:	f7f1 fdcc 	bl	8000b2c <__aeabi_dcmplt>
 800ef94:	b140      	cbz	r0, 800efa8 <_dtoa_r+0x168>
 800ef96:	4638      	mov	r0, r7
 800ef98:	f7f1 faec 	bl	8000574 <__aeabi_i2d>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	462b      	mov	r3, r5
 800efa0:	f7f1 fdba 	bl	8000b18 <__aeabi_dcmpeq>
 800efa4:	b900      	cbnz	r0, 800efa8 <_dtoa_r+0x168>
 800efa6:	3f01      	subs	r7, #1
 800efa8:	2f16      	cmp	r7, #22
 800efaa:	d852      	bhi.n	800f052 <_dtoa_r+0x212>
 800efac:	4b5d      	ldr	r3, [pc, #372]	@ (800f124 <_dtoa_r+0x2e4>)
 800efae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800efba:	f7f1 fdb7 	bl	8000b2c <__aeabi_dcmplt>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d049      	beq.n	800f056 <_dtoa_r+0x216>
 800efc2:	3f01      	subs	r7, #1
 800efc4:	2300      	movs	r3, #0
 800efc6:	9310      	str	r3, [sp, #64]	@ 0x40
 800efc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800efca:	1b9b      	subs	r3, r3, r6
 800efcc:	1e5a      	subs	r2, r3, #1
 800efce:	bf45      	ittet	mi
 800efd0:	f1c3 0301 	rsbmi	r3, r3, #1
 800efd4:	9300      	strmi	r3, [sp, #0]
 800efd6:	2300      	movpl	r3, #0
 800efd8:	2300      	movmi	r3, #0
 800efda:	9206      	str	r2, [sp, #24]
 800efdc:	bf54      	ite	pl
 800efde:	9300      	strpl	r3, [sp, #0]
 800efe0:	9306      	strmi	r3, [sp, #24]
 800efe2:	2f00      	cmp	r7, #0
 800efe4:	db39      	blt.n	800f05a <_dtoa_r+0x21a>
 800efe6:	9b06      	ldr	r3, [sp, #24]
 800efe8:	970d      	str	r7, [sp, #52]	@ 0x34
 800efea:	443b      	add	r3, r7
 800efec:	9306      	str	r3, [sp, #24]
 800efee:	2300      	movs	r3, #0
 800eff0:	9308      	str	r3, [sp, #32]
 800eff2:	9b07      	ldr	r3, [sp, #28]
 800eff4:	2b09      	cmp	r3, #9
 800eff6:	d863      	bhi.n	800f0c0 <_dtoa_r+0x280>
 800eff8:	2b05      	cmp	r3, #5
 800effa:	bfc4      	itt	gt
 800effc:	3b04      	subgt	r3, #4
 800effe:	9307      	strgt	r3, [sp, #28]
 800f000:	9b07      	ldr	r3, [sp, #28]
 800f002:	f1a3 0302 	sub.w	r3, r3, #2
 800f006:	bfcc      	ite	gt
 800f008:	2400      	movgt	r4, #0
 800f00a:	2401      	movle	r4, #1
 800f00c:	2b03      	cmp	r3, #3
 800f00e:	d863      	bhi.n	800f0d8 <_dtoa_r+0x298>
 800f010:	e8df f003 	tbb	[pc, r3]
 800f014:	2b375452 	.word	0x2b375452
 800f018:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f01c:	441e      	add	r6, r3
 800f01e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f022:	2b20      	cmp	r3, #32
 800f024:	bfc1      	itttt	gt
 800f026:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f02a:	409f      	lslgt	r7, r3
 800f02c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f030:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f034:	bfd6      	itet	le
 800f036:	f1c3 0320 	rsble	r3, r3, #32
 800f03a:	ea47 0003 	orrgt.w	r0, r7, r3
 800f03e:	fa04 f003 	lslle.w	r0, r4, r3
 800f042:	f7f1 fa87 	bl	8000554 <__aeabi_ui2d>
 800f046:	2201      	movs	r2, #1
 800f048:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f04c:	3e01      	subs	r6, #1
 800f04e:	9212      	str	r2, [sp, #72]	@ 0x48
 800f050:	e776      	b.n	800ef40 <_dtoa_r+0x100>
 800f052:	2301      	movs	r3, #1
 800f054:	e7b7      	b.n	800efc6 <_dtoa_r+0x186>
 800f056:	9010      	str	r0, [sp, #64]	@ 0x40
 800f058:	e7b6      	b.n	800efc8 <_dtoa_r+0x188>
 800f05a:	9b00      	ldr	r3, [sp, #0]
 800f05c:	1bdb      	subs	r3, r3, r7
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	427b      	negs	r3, r7
 800f062:	9308      	str	r3, [sp, #32]
 800f064:	2300      	movs	r3, #0
 800f066:	930d      	str	r3, [sp, #52]	@ 0x34
 800f068:	e7c3      	b.n	800eff2 <_dtoa_r+0x1b2>
 800f06a:	2301      	movs	r3, #1
 800f06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f06e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f070:	eb07 0b03 	add.w	fp, r7, r3
 800f074:	f10b 0301 	add.w	r3, fp, #1
 800f078:	2b01      	cmp	r3, #1
 800f07a:	9303      	str	r3, [sp, #12]
 800f07c:	bfb8      	it	lt
 800f07e:	2301      	movlt	r3, #1
 800f080:	e006      	b.n	800f090 <_dtoa_r+0x250>
 800f082:	2301      	movs	r3, #1
 800f084:	9309      	str	r3, [sp, #36]	@ 0x24
 800f086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f088:	2b00      	cmp	r3, #0
 800f08a:	dd28      	ble.n	800f0de <_dtoa_r+0x29e>
 800f08c:	469b      	mov	fp, r3
 800f08e:	9303      	str	r3, [sp, #12]
 800f090:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f094:	2100      	movs	r1, #0
 800f096:	2204      	movs	r2, #4
 800f098:	f102 0514 	add.w	r5, r2, #20
 800f09c:	429d      	cmp	r5, r3
 800f09e:	d926      	bls.n	800f0ee <_dtoa_r+0x2ae>
 800f0a0:	6041      	str	r1, [r0, #4]
 800f0a2:	4648      	mov	r0, r9
 800f0a4:	f000 fd9c 	bl	800fbe0 <_Balloc>
 800f0a8:	4682      	mov	sl, r0
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d142      	bne.n	800f134 <_dtoa_r+0x2f4>
 800f0ae:	4b1e      	ldr	r3, [pc, #120]	@ (800f128 <_dtoa_r+0x2e8>)
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	f240 11af 	movw	r1, #431	@ 0x1af
 800f0b6:	e6da      	b.n	800ee6e <_dtoa_r+0x2e>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	e7e3      	b.n	800f084 <_dtoa_r+0x244>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	e7d5      	b.n	800f06c <_dtoa_r+0x22c>
 800f0c0:	2401      	movs	r4, #1
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	9307      	str	r3, [sp, #28]
 800f0c6:	9409      	str	r4, [sp, #36]	@ 0x24
 800f0c8:	f04f 3bff 	mov.w	fp, #4294967295
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f8cd b00c 	str.w	fp, [sp, #12]
 800f0d2:	2312      	movs	r3, #18
 800f0d4:	920c      	str	r2, [sp, #48]	@ 0x30
 800f0d6:	e7db      	b.n	800f090 <_dtoa_r+0x250>
 800f0d8:	2301      	movs	r3, #1
 800f0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0dc:	e7f4      	b.n	800f0c8 <_dtoa_r+0x288>
 800f0de:	f04f 0b01 	mov.w	fp, #1
 800f0e2:	f8cd b00c 	str.w	fp, [sp, #12]
 800f0e6:	465b      	mov	r3, fp
 800f0e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f0ec:	e7d0      	b.n	800f090 <_dtoa_r+0x250>
 800f0ee:	3101      	adds	r1, #1
 800f0f0:	0052      	lsls	r2, r2, #1
 800f0f2:	e7d1      	b.n	800f098 <_dtoa_r+0x258>
 800f0f4:	f3af 8000 	nop.w
 800f0f8:	636f4361 	.word	0x636f4361
 800f0fc:	3fd287a7 	.word	0x3fd287a7
 800f100:	8b60c8b3 	.word	0x8b60c8b3
 800f104:	3fc68a28 	.word	0x3fc68a28
 800f108:	509f79fb 	.word	0x509f79fb
 800f10c:	3fd34413 	.word	0x3fd34413
 800f110:	080111d1 	.word	0x080111d1
 800f114:	080111e8 	.word	0x080111e8
 800f118:	7ff00000 	.word	0x7ff00000
 800f11c:	080111a1 	.word	0x080111a1
 800f120:	3ff80000 	.word	0x3ff80000
 800f124:	08011338 	.word	0x08011338
 800f128:	08011240 	.word	0x08011240
 800f12c:	080111cd 	.word	0x080111cd
 800f130:	080111a0 	.word	0x080111a0
 800f134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f138:	6018      	str	r0, [r3, #0]
 800f13a:	9b03      	ldr	r3, [sp, #12]
 800f13c:	2b0e      	cmp	r3, #14
 800f13e:	f200 80a1 	bhi.w	800f284 <_dtoa_r+0x444>
 800f142:	2c00      	cmp	r4, #0
 800f144:	f000 809e 	beq.w	800f284 <_dtoa_r+0x444>
 800f148:	2f00      	cmp	r7, #0
 800f14a:	dd33      	ble.n	800f1b4 <_dtoa_r+0x374>
 800f14c:	4b9c      	ldr	r3, [pc, #624]	@ (800f3c0 <_dtoa_r+0x580>)
 800f14e:	f007 020f 	and.w	r2, r7, #15
 800f152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f156:	ed93 7b00 	vldr	d7, [r3]
 800f15a:	05f8      	lsls	r0, r7, #23
 800f15c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f160:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f164:	d516      	bpl.n	800f194 <_dtoa_r+0x354>
 800f166:	4b97      	ldr	r3, [pc, #604]	@ (800f3c4 <_dtoa_r+0x584>)
 800f168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f16c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f170:	f7f1 fb94 	bl	800089c <__aeabi_ddiv>
 800f174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f178:	f004 040f 	and.w	r4, r4, #15
 800f17c:	2603      	movs	r6, #3
 800f17e:	4d91      	ldr	r5, [pc, #580]	@ (800f3c4 <_dtoa_r+0x584>)
 800f180:	b954      	cbnz	r4, 800f198 <_dtoa_r+0x358>
 800f182:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f18a:	f7f1 fb87 	bl	800089c <__aeabi_ddiv>
 800f18e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f192:	e028      	b.n	800f1e6 <_dtoa_r+0x3a6>
 800f194:	2602      	movs	r6, #2
 800f196:	e7f2      	b.n	800f17e <_dtoa_r+0x33e>
 800f198:	07e1      	lsls	r1, r4, #31
 800f19a:	d508      	bpl.n	800f1ae <_dtoa_r+0x36e>
 800f19c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f1a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f1a4:	f7f1 fa50 	bl	8000648 <__aeabi_dmul>
 800f1a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f1ac:	3601      	adds	r6, #1
 800f1ae:	1064      	asrs	r4, r4, #1
 800f1b0:	3508      	adds	r5, #8
 800f1b2:	e7e5      	b.n	800f180 <_dtoa_r+0x340>
 800f1b4:	f000 80af 	beq.w	800f316 <_dtoa_r+0x4d6>
 800f1b8:	427c      	negs	r4, r7
 800f1ba:	4b81      	ldr	r3, [pc, #516]	@ (800f3c0 <_dtoa_r+0x580>)
 800f1bc:	4d81      	ldr	r5, [pc, #516]	@ (800f3c4 <_dtoa_r+0x584>)
 800f1be:	f004 020f 	and.w	r2, r4, #15
 800f1c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f1ce:	f7f1 fa3b 	bl	8000648 <__aeabi_dmul>
 800f1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1d6:	1124      	asrs	r4, r4, #4
 800f1d8:	2300      	movs	r3, #0
 800f1da:	2602      	movs	r6, #2
 800f1dc:	2c00      	cmp	r4, #0
 800f1de:	f040 808f 	bne.w	800f300 <_dtoa_r+0x4c0>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1d3      	bne.n	800f18e <_dtoa_r+0x34e>
 800f1e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f000 8094 	beq.w	800f31a <_dtoa_r+0x4da>
 800f1f2:	4b75      	ldr	r3, [pc, #468]	@ (800f3c8 <_dtoa_r+0x588>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f7f1 fc97 	bl	8000b2c <__aeabi_dcmplt>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	f000 808b 	beq.w	800f31a <_dtoa_r+0x4da>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 8087 	beq.w	800f31a <_dtoa_r+0x4da>
 800f20c:	f1bb 0f00 	cmp.w	fp, #0
 800f210:	dd34      	ble.n	800f27c <_dtoa_r+0x43c>
 800f212:	4620      	mov	r0, r4
 800f214:	4b6d      	ldr	r3, [pc, #436]	@ (800f3cc <_dtoa_r+0x58c>)
 800f216:	2200      	movs	r2, #0
 800f218:	4629      	mov	r1, r5
 800f21a:	f7f1 fa15 	bl	8000648 <__aeabi_dmul>
 800f21e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f222:	f107 38ff 	add.w	r8, r7, #4294967295
 800f226:	3601      	adds	r6, #1
 800f228:	465c      	mov	r4, fp
 800f22a:	4630      	mov	r0, r6
 800f22c:	f7f1 f9a2 	bl	8000574 <__aeabi_i2d>
 800f230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f234:	f7f1 fa08 	bl	8000648 <__aeabi_dmul>
 800f238:	4b65      	ldr	r3, [pc, #404]	@ (800f3d0 <_dtoa_r+0x590>)
 800f23a:	2200      	movs	r2, #0
 800f23c:	f7f1 f84e 	bl	80002dc <__adddf3>
 800f240:	4605      	mov	r5, r0
 800f242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f246:	2c00      	cmp	r4, #0
 800f248:	d16a      	bne.n	800f320 <_dtoa_r+0x4e0>
 800f24a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f24e:	4b61      	ldr	r3, [pc, #388]	@ (800f3d4 <_dtoa_r+0x594>)
 800f250:	2200      	movs	r2, #0
 800f252:	f7f1 f841 	bl	80002d8 <__aeabi_dsub>
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f25e:	462a      	mov	r2, r5
 800f260:	4633      	mov	r3, r6
 800f262:	f7f1 fc81 	bl	8000b68 <__aeabi_dcmpgt>
 800f266:	2800      	cmp	r0, #0
 800f268:	f040 8298 	bne.w	800f79c <_dtoa_r+0x95c>
 800f26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f270:	462a      	mov	r2, r5
 800f272:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f276:	f7f1 fc59 	bl	8000b2c <__aeabi_dcmplt>
 800f27a:	bb38      	cbnz	r0, 800f2cc <_dtoa_r+0x48c>
 800f27c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f280:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f284:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f286:	2b00      	cmp	r3, #0
 800f288:	f2c0 8157 	blt.w	800f53a <_dtoa_r+0x6fa>
 800f28c:	2f0e      	cmp	r7, #14
 800f28e:	f300 8154 	bgt.w	800f53a <_dtoa_r+0x6fa>
 800f292:	4b4b      	ldr	r3, [pc, #300]	@ (800f3c0 <_dtoa_r+0x580>)
 800f294:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f298:	ed93 7b00 	vldr	d7, [r3]
 800f29c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	ed8d 7b00 	vstr	d7, [sp]
 800f2a4:	f280 80e5 	bge.w	800f472 <_dtoa_r+0x632>
 800f2a8:	9b03      	ldr	r3, [sp, #12]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f300 80e1 	bgt.w	800f472 <_dtoa_r+0x632>
 800f2b0:	d10c      	bne.n	800f2cc <_dtoa_r+0x48c>
 800f2b2:	4b48      	ldr	r3, [pc, #288]	@ (800f3d4 <_dtoa_r+0x594>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	ec51 0b17 	vmov	r0, r1, d7
 800f2ba:	f7f1 f9c5 	bl	8000648 <__aeabi_dmul>
 800f2be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2c2:	f7f1 fc47 	bl	8000b54 <__aeabi_dcmpge>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	f000 8266 	beq.w	800f798 <_dtoa_r+0x958>
 800f2cc:	2400      	movs	r4, #0
 800f2ce:	4625      	mov	r5, r4
 800f2d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2d2:	4656      	mov	r6, sl
 800f2d4:	ea6f 0803 	mvn.w	r8, r3
 800f2d8:	2700      	movs	r7, #0
 800f2da:	4621      	mov	r1, r4
 800f2dc:	4648      	mov	r0, r9
 800f2de:	f000 fcbf 	bl	800fc60 <_Bfree>
 800f2e2:	2d00      	cmp	r5, #0
 800f2e4:	f000 80bd 	beq.w	800f462 <_dtoa_r+0x622>
 800f2e8:	b12f      	cbz	r7, 800f2f6 <_dtoa_r+0x4b6>
 800f2ea:	42af      	cmp	r7, r5
 800f2ec:	d003      	beq.n	800f2f6 <_dtoa_r+0x4b6>
 800f2ee:	4639      	mov	r1, r7
 800f2f0:	4648      	mov	r0, r9
 800f2f2:	f000 fcb5 	bl	800fc60 <_Bfree>
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	4648      	mov	r0, r9
 800f2fa:	f000 fcb1 	bl	800fc60 <_Bfree>
 800f2fe:	e0b0      	b.n	800f462 <_dtoa_r+0x622>
 800f300:	07e2      	lsls	r2, r4, #31
 800f302:	d505      	bpl.n	800f310 <_dtoa_r+0x4d0>
 800f304:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f308:	f7f1 f99e 	bl	8000648 <__aeabi_dmul>
 800f30c:	3601      	adds	r6, #1
 800f30e:	2301      	movs	r3, #1
 800f310:	1064      	asrs	r4, r4, #1
 800f312:	3508      	adds	r5, #8
 800f314:	e762      	b.n	800f1dc <_dtoa_r+0x39c>
 800f316:	2602      	movs	r6, #2
 800f318:	e765      	b.n	800f1e6 <_dtoa_r+0x3a6>
 800f31a:	9c03      	ldr	r4, [sp, #12]
 800f31c:	46b8      	mov	r8, r7
 800f31e:	e784      	b.n	800f22a <_dtoa_r+0x3ea>
 800f320:	4b27      	ldr	r3, [pc, #156]	@ (800f3c0 <_dtoa_r+0x580>)
 800f322:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f328:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f32c:	4454      	add	r4, sl
 800f32e:	2900      	cmp	r1, #0
 800f330:	d054      	beq.n	800f3dc <_dtoa_r+0x59c>
 800f332:	4929      	ldr	r1, [pc, #164]	@ (800f3d8 <_dtoa_r+0x598>)
 800f334:	2000      	movs	r0, #0
 800f336:	f7f1 fab1 	bl	800089c <__aeabi_ddiv>
 800f33a:	4633      	mov	r3, r6
 800f33c:	462a      	mov	r2, r5
 800f33e:	f7f0 ffcb 	bl	80002d8 <__aeabi_dsub>
 800f342:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f346:	4656      	mov	r6, sl
 800f348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f34c:	f7f1 fc2c 	bl	8000ba8 <__aeabi_d2iz>
 800f350:	4605      	mov	r5, r0
 800f352:	f7f1 f90f 	bl	8000574 <__aeabi_i2d>
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f35e:	f7f0 ffbb 	bl	80002d8 <__aeabi_dsub>
 800f362:	3530      	adds	r5, #48	@ 0x30
 800f364:	4602      	mov	r2, r0
 800f366:	460b      	mov	r3, r1
 800f368:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f36c:	f806 5b01 	strb.w	r5, [r6], #1
 800f370:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f374:	f7f1 fbda 	bl	8000b2c <__aeabi_dcmplt>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d172      	bne.n	800f462 <_dtoa_r+0x622>
 800f37c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f380:	4911      	ldr	r1, [pc, #68]	@ (800f3c8 <_dtoa_r+0x588>)
 800f382:	2000      	movs	r0, #0
 800f384:	f7f0 ffa8 	bl	80002d8 <__aeabi_dsub>
 800f388:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f38c:	f7f1 fbce 	bl	8000b2c <__aeabi_dcmplt>
 800f390:	2800      	cmp	r0, #0
 800f392:	f040 80b4 	bne.w	800f4fe <_dtoa_r+0x6be>
 800f396:	42a6      	cmp	r6, r4
 800f398:	f43f af70 	beq.w	800f27c <_dtoa_r+0x43c>
 800f39c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f3cc <_dtoa_r+0x58c>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f7f1 f950 	bl	8000648 <__aeabi_dmul>
 800f3a8:	4b08      	ldr	r3, [pc, #32]	@ (800f3cc <_dtoa_r+0x58c>)
 800f3aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3b4:	f7f1 f948 	bl	8000648 <__aeabi_dmul>
 800f3b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3bc:	e7c4      	b.n	800f348 <_dtoa_r+0x508>
 800f3be:	bf00      	nop
 800f3c0:	08011338 	.word	0x08011338
 800f3c4:	08011310 	.word	0x08011310
 800f3c8:	3ff00000 	.word	0x3ff00000
 800f3cc:	40240000 	.word	0x40240000
 800f3d0:	401c0000 	.word	0x401c0000
 800f3d4:	40140000 	.word	0x40140000
 800f3d8:	3fe00000 	.word	0x3fe00000
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f7f1 f932 	bl	8000648 <__aeabi_dmul>
 800f3e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f3e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f3ea:	4656      	mov	r6, sl
 800f3ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3f0:	f7f1 fbda 	bl	8000ba8 <__aeabi_d2iz>
 800f3f4:	4605      	mov	r5, r0
 800f3f6:	f7f1 f8bd 	bl	8000574 <__aeabi_i2d>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f402:	f7f0 ff69 	bl	80002d8 <__aeabi_dsub>
 800f406:	3530      	adds	r5, #48	@ 0x30
 800f408:	f806 5b01 	strb.w	r5, [r6], #1
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	42a6      	cmp	r6, r4
 800f412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f416:	f04f 0200 	mov.w	r2, #0
 800f41a:	d124      	bne.n	800f466 <_dtoa_r+0x626>
 800f41c:	4baf      	ldr	r3, [pc, #700]	@ (800f6dc <_dtoa_r+0x89c>)
 800f41e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f422:	f7f0 ff5b 	bl	80002dc <__adddf3>
 800f426:	4602      	mov	r2, r0
 800f428:	460b      	mov	r3, r1
 800f42a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f42e:	f7f1 fb9b 	bl	8000b68 <__aeabi_dcmpgt>
 800f432:	2800      	cmp	r0, #0
 800f434:	d163      	bne.n	800f4fe <_dtoa_r+0x6be>
 800f436:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f43a:	49a8      	ldr	r1, [pc, #672]	@ (800f6dc <_dtoa_r+0x89c>)
 800f43c:	2000      	movs	r0, #0
 800f43e:	f7f0 ff4b 	bl	80002d8 <__aeabi_dsub>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f44a:	f7f1 fb6f 	bl	8000b2c <__aeabi_dcmplt>
 800f44e:	2800      	cmp	r0, #0
 800f450:	f43f af14 	beq.w	800f27c <_dtoa_r+0x43c>
 800f454:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f456:	1e73      	subs	r3, r6, #1
 800f458:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f45a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f45e:	2b30      	cmp	r3, #48	@ 0x30
 800f460:	d0f8      	beq.n	800f454 <_dtoa_r+0x614>
 800f462:	4647      	mov	r7, r8
 800f464:	e03b      	b.n	800f4de <_dtoa_r+0x69e>
 800f466:	4b9e      	ldr	r3, [pc, #632]	@ (800f6e0 <_dtoa_r+0x8a0>)
 800f468:	f7f1 f8ee 	bl	8000648 <__aeabi_dmul>
 800f46c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f470:	e7bc      	b.n	800f3ec <_dtoa_r+0x5ac>
 800f472:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f476:	4656      	mov	r6, sl
 800f478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f47c:	4620      	mov	r0, r4
 800f47e:	4629      	mov	r1, r5
 800f480:	f7f1 fa0c 	bl	800089c <__aeabi_ddiv>
 800f484:	f7f1 fb90 	bl	8000ba8 <__aeabi_d2iz>
 800f488:	4680      	mov	r8, r0
 800f48a:	f7f1 f873 	bl	8000574 <__aeabi_i2d>
 800f48e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f492:	f7f1 f8d9 	bl	8000648 <__aeabi_dmul>
 800f496:	4602      	mov	r2, r0
 800f498:	460b      	mov	r3, r1
 800f49a:	4620      	mov	r0, r4
 800f49c:	4629      	mov	r1, r5
 800f49e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f4a2:	f7f0 ff19 	bl	80002d8 <__aeabi_dsub>
 800f4a6:	f806 4b01 	strb.w	r4, [r6], #1
 800f4aa:	9d03      	ldr	r5, [sp, #12]
 800f4ac:	eba6 040a 	sub.w	r4, r6, sl
 800f4b0:	42a5      	cmp	r5, r4
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	d133      	bne.n	800f520 <_dtoa_r+0x6e0>
 800f4b8:	f7f0 ff10 	bl	80002dc <__adddf3>
 800f4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	460d      	mov	r5, r1
 800f4c4:	f7f1 fb50 	bl	8000b68 <__aeabi_dcmpgt>
 800f4c8:	b9c0      	cbnz	r0, 800f4fc <_dtoa_r+0x6bc>
 800f4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	f7f1 fb21 	bl	8000b18 <__aeabi_dcmpeq>
 800f4d6:	b110      	cbz	r0, 800f4de <_dtoa_r+0x69e>
 800f4d8:	f018 0f01 	tst.w	r8, #1
 800f4dc:	d10e      	bne.n	800f4fc <_dtoa_r+0x6bc>
 800f4de:	9902      	ldr	r1, [sp, #8]
 800f4e0:	4648      	mov	r0, r9
 800f4e2:	f000 fbbd 	bl	800fc60 <_Bfree>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	7033      	strb	r3, [r6, #0]
 800f4ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f4ec:	3701      	adds	r7, #1
 800f4ee:	601f      	str	r7, [r3, #0]
 800f4f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f000 824b 	beq.w	800f98e <_dtoa_r+0xb4e>
 800f4f8:	601e      	str	r6, [r3, #0]
 800f4fa:	e248      	b.n	800f98e <_dtoa_r+0xb4e>
 800f4fc:	46b8      	mov	r8, r7
 800f4fe:	4633      	mov	r3, r6
 800f500:	461e      	mov	r6, r3
 800f502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f506:	2a39      	cmp	r2, #57	@ 0x39
 800f508:	d106      	bne.n	800f518 <_dtoa_r+0x6d8>
 800f50a:	459a      	cmp	sl, r3
 800f50c:	d1f8      	bne.n	800f500 <_dtoa_r+0x6c0>
 800f50e:	2230      	movs	r2, #48	@ 0x30
 800f510:	f108 0801 	add.w	r8, r8, #1
 800f514:	f88a 2000 	strb.w	r2, [sl]
 800f518:	781a      	ldrb	r2, [r3, #0]
 800f51a:	3201      	adds	r2, #1
 800f51c:	701a      	strb	r2, [r3, #0]
 800f51e:	e7a0      	b.n	800f462 <_dtoa_r+0x622>
 800f520:	4b6f      	ldr	r3, [pc, #444]	@ (800f6e0 <_dtoa_r+0x8a0>)
 800f522:	2200      	movs	r2, #0
 800f524:	f7f1 f890 	bl	8000648 <__aeabi_dmul>
 800f528:	2200      	movs	r2, #0
 800f52a:	2300      	movs	r3, #0
 800f52c:	4604      	mov	r4, r0
 800f52e:	460d      	mov	r5, r1
 800f530:	f7f1 faf2 	bl	8000b18 <__aeabi_dcmpeq>
 800f534:	2800      	cmp	r0, #0
 800f536:	d09f      	beq.n	800f478 <_dtoa_r+0x638>
 800f538:	e7d1      	b.n	800f4de <_dtoa_r+0x69e>
 800f53a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f53c:	2a00      	cmp	r2, #0
 800f53e:	f000 80ea 	beq.w	800f716 <_dtoa_r+0x8d6>
 800f542:	9a07      	ldr	r2, [sp, #28]
 800f544:	2a01      	cmp	r2, #1
 800f546:	f300 80cd 	bgt.w	800f6e4 <_dtoa_r+0x8a4>
 800f54a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f54c:	2a00      	cmp	r2, #0
 800f54e:	f000 80c1 	beq.w	800f6d4 <_dtoa_r+0x894>
 800f552:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f556:	9c08      	ldr	r4, [sp, #32]
 800f558:	9e00      	ldr	r6, [sp, #0]
 800f55a:	9a00      	ldr	r2, [sp, #0]
 800f55c:	441a      	add	r2, r3
 800f55e:	9200      	str	r2, [sp, #0]
 800f560:	9a06      	ldr	r2, [sp, #24]
 800f562:	2101      	movs	r1, #1
 800f564:	441a      	add	r2, r3
 800f566:	4648      	mov	r0, r9
 800f568:	9206      	str	r2, [sp, #24]
 800f56a:	f000 fc2d 	bl	800fdc8 <__i2b>
 800f56e:	4605      	mov	r5, r0
 800f570:	b166      	cbz	r6, 800f58c <_dtoa_r+0x74c>
 800f572:	9b06      	ldr	r3, [sp, #24]
 800f574:	2b00      	cmp	r3, #0
 800f576:	dd09      	ble.n	800f58c <_dtoa_r+0x74c>
 800f578:	42b3      	cmp	r3, r6
 800f57a:	9a00      	ldr	r2, [sp, #0]
 800f57c:	bfa8      	it	ge
 800f57e:	4633      	movge	r3, r6
 800f580:	1ad2      	subs	r2, r2, r3
 800f582:	9200      	str	r2, [sp, #0]
 800f584:	9a06      	ldr	r2, [sp, #24]
 800f586:	1af6      	subs	r6, r6, r3
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	9306      	str	r3, [sp, #24]
 800f58c:	9b08      	ldr	r3, [sp, #32]
 800f58e:	b30b      	cbz	r3, 800f5d4 <_dtoa_r+0x794>
 800f590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f592:	2b00      	cmp	r3, #0
 800f594:	f000 80c6 	beq.w	800f724 <_dtoa_r+0x8e4>
 800f598:	2c00      	cmp	r4, #0
 800f59a:	f000 80c0 	beq.w	800f71e <_dtoa_r+0x8de>
 800f59e:	4629      	mov	r1, r5
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	4648      	mov	r0, r9
 800f5a4:	f000 fcc8 	bl	800ff38 <__pow5mult>
 800f5a8:	9a02      	ldr	r2, [sp, #8]
 800f5aa:	4601      	mov	r1, r0
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	4648      	mov	r0, r9
 800f5b0:	f000 fc20 	bl	800fdf4 <__multiply>
 800f5b4:	9902      	ldr	r1, [sp, #8]
 800f5b6:	4680      	mov	r8, r0
 800f5b8:	4648      	mov	r0, r9
 800f5ba:	f000 fb51 	bl	800fc60 <_Bfree>
 800f5be:	9b08      	ldr	r3, [sp, #32]
 800f5c0:	1b1b      	subs	r3, r3, r4
 800f5c2:	9308      	str	r3, [sp, #32]
 800f5c4:	f000 80b1 	beq.w	800f72a <_dtoa_r+0x8ea>
 800f5c8:	9a08      	ldr	r2, [sp, #32]
 800f5ca:	4641      	mov	r1, r8
 800f5cc:	4648      	mov	r0, r9
 800f5ce:	f000 fcb3 	bl	800ff38 <__pow5mult>
 800f5d2:	9002      	str	r0, [sp, #8]
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	4648      	mov	r0, r9
 800f5d8:	f000 fbf6 	bl	800fdc8 <__i2b>
 800f5dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5de:	4604      	mov	r4, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f000 81d8 	beq.w	800f996 <_dtoa_r+0xb56>
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	4648      	mov	r0, r9
 800f5ec:	f000 fca4 	bl	800ff38 <__pow5mult>
 800f5f0:	9b07      	ldr	r3, [sp, #28]
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	f300 809f 	bgt.w	800f738 <_dtoa_r+0x8f8>
 800f5fa:	9b04      	ldr	r3, [sp, #16]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f040 8097 	bne.w	800f730 <_dtoa_r+0x8f0>
 800f602:	9b05      	ldr	r3, [sp, #20]
 800f604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f040 8093 	bne.w	800f734 <_dtoa_r+0x8f4>
 800f60e:	9b05      	ldr	r3, [sp, #20]
 800f610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f614:	0d1b      	lsrs	r3, r3, #20
 800f616:	051b      	lsls	r3, r3, #20
 800f618:	b133      	cbz	r3, 800f628 <_dtoa_r+0x7e8>
 800f61a:	9b00      	ldr	r3, [sp, #0]
 800f61c:	3301      	adds	r3, #1
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	9b06      	ldr	r3, [sp, #24]
 800f622:	3301      	adds	r3, #1
 800f624:	9306      	str	r3, [sp, #24]
 800f626:	2301      	movs	r3, #1
 800f628:	9308      	str	r3, [sp, #32]
 800f62a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f000 81b8 	beq.w	800f9a2 <_dtoa_r+0xb62>
 800f632:	6923      	ldr	r3, [r4, #16]
 800f634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f638:	6918      	ldr	r0, [r3, #16]
 800f63a:	f000 fb79 	bl	800fd30 <__hi0bits>
 800f63e:	f1c0 0020 	rsb	r0, r0, #32
 800f642:	9b06      	ldr	r3, [sp, #24]
 800f644:	4418      	add	r0, r3
 800f646:	f010 001f 	ands.w	r0, r0, #31
 800f64a:	f000 8082 	beq.w	800f752 <_dtoa_r+0x912>
 800f64e:	f1c0 0320 	rsb	r3, r0, #32
 800f652:	2b04      	cmp	r3, #4
 800f654:	dd73      	ble.n	800f73e <_dtoa_r+0x8fe>
 800f656:	9b00      	ldr	r3, [sp, #0]
 800f658:	f1c0 001c 	rsb	r0, r0, #28
 800f65c:	4403      	add	r3, r0
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	9b06      	ldr	r3, [sp, #24]
 800f662:	4403      	add	r3, r0
 800f664:	4406      	add	r6, r0
 800f666:	9306      	str	r3, [sp, #24]
 800f668:	9b00      	ldr	r3, [sp, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	dd05      	ble.n	800f67a <_dtoa_r+0x83a>
 800f66e:	9902      	ldr	r1, [sp, #8]
 800f670:	461a      	mov	r2, r3
 800f672:	4648      	mov	r0, r9
 800f674:	f000 fcba 	bl	800ffec <__lshift>
 800f678:	9002      	str	r0, [sp, #8]
 800f67a:	9b06      	ldr	r3, [sp, #24]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	dd05      	ble.n	800f68c <_dtoa_r+0x84c>
 800f680:	4621      	mov	r1, r4
 800f682:	461a      	mov	r2, r3
 800f684:	4648      	mov	r0, r9
 800f686:	f000 fcb1 	bl	800ffec <__lshift>
 800f68a:	4604      	mov	r4, r0
 800f68c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d061      	beq.n	800f756 <_dtoa_r+0x916>
 800f692:	9802      	ldr	r0, [sp, #8]
 800f694:	4621      	mov	r1, r4
 800f696:	f000 fd15 	bl	80100c4 <__mcmp>
 800f69a:	2800      	cmp	r0, #0
 800f69c:	da5b      	bge.n	800f756 <_dtoa_r+0x916>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	9902      	ldr	r1, [sp, #8]
 800f6a2:	220a      	movs	r2, #10
 800f6a4:	4648      	mov	r0, r9
 800f6a6:	f000 fafd 	bl	800fca4 <__multadd>
 800f6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6ac:	9002      	str	r0, [sp, #8]
 800f6ae:	f107 38ff 	add.w	r8, r7, #4294967295
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	f000 8177 	beq.w	800f9a6 <_dtoa_r+0xb66>
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	220a      	movs	r2, #10
 800f6be:	4648      	mov	r0, r9
 800f6c0:	f000 faf0 	bl	800fca4 <__multadd>
 800f6c4:	f1bb 0f00 	cmp.w	fp, #0
 800f6c8:	4605      	mov	r5, r0
 800f6ca:	dc6f      	bgt.n	800f7ac <_dtoa_r+0x96c>
 800f6cc:	9b07      	ldr	r3, [sp, #28]
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	dc49      	bgt.n	800f766 <_dtoa_r+0x926>
 800f6d2:	e06b      	b.n	800f7ac <_dtoa_r+0x96c>
 800f6d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f6d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f6da:	e73c      	b.n	800f556 <_dtoa_r+0x716>
 800f6dc:	3fe00000 	.word	0x3fe00000
 800f6e0:	40240000 	.word	0x40240000
 800f6e4:	9b03      	ldr	r3, [sp, #12]
 800f6e6:	1e5c      	subs	r4, r3, #1
 800f6e8:	9b08      	ldr	r3, [sp, #32]
 800f6ea:	42a3      	cmp	r3, r4
 800f6ec:	db09      	blt.n	800f702 <_dtoa_r+0x8c2>
 800f6ee:	1b1c      	subs	r4, r3, r4
 800f6f0:	9b03      	ldr	r3, [sp, #12]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f6bf af30 	bge.w	800f558 <_dtoa_r+0x718>
 800f6f8:	9b00      	ldr	r3, [sp, #0]
 800f6fa:	9a03      	ldr	r2, [sp, #12]
 800f6fc:	1a9e      	subs	r6, r3, r2
 800f6fe:	2300      	movs	r3, #0
 800f700:	e72b      	b.n	800f55a <_dtoa_r+0x71a>
 800f702:	9b08      	ldr	r3, [sp, #32]
 800f704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f706:	9408      	str	r4, [sp, #32]
 800f708:	1ae3      	subs	r3, r4, r3
 800f70a:	441a      	add	r2, r3
 800f70c:	9e00      	ldr	r6, [sp, #0]
 800f70e:	9b03      	ldr	r3, [sp, #12]
 800f710:	920d      	str	r2, [sp, #52]	@ 0x34
 800f712:	2400      	movs	r4, #0
 800f714:	e721      	b.n	800f55a <_dtoa_r+0x71a>
 800f716:	9c08      	ldr	r4, [sp, #32]
 800f718:	9e00      	ldr	r6, [sp, #0]
 800f71a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f71c:	e728      	b.n	800f570 <_dtoa_r+0x730>
 800f71e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f722:	e751      	b.n	800f5c8 <_dtoa_r+0x788>
 800f724:	9a08      	ldr	r2, [sp, #32]
 800f726:	9902      	ldr	r1, [sp, #8]
 800f728:	e750      	b.n	800f5cc <_dtoa_r+0x78c>
 800f72a:	f8cd 8008 	str.w	r8, [sp, #8]
 800f72e:	e751      	b.n	800f5d4 <_dtoa_r+0x794>
 800f730:	2300      	movs	r3, #0
 800f732:	e779      	b.n	800f628 <_dtoa_r+0x7e8>
 800f734:	9b04      	ldr	r3, [sp, #16]
 800f736:	e777      	b.n	800f628 <_dtoa_r+0x7e8>
 800f738:	2300      	movs	r3, #0
 800f73a:	9308      	str	r3, [sp, #32]
 800f73c:	e779      	b.n	800f632 <_dtoa_r+0x7f2>
 800f73e:	d093      	beq.n	800f668 <_dtoa_r+0x828>
 800f740:	9a00      	ldr	r2, [sp, #0]
 800f742:	331c      	adds	r3, #28
 800f744:	441a      	add	r2, r3
 800f746:	9200      	str	r2, [sp, #0]
 800f748:	9a06      	ldr	r2, [sp, #24]
 800f74a:	441a      	add	r2, r3
 800f74c:	441e      	add	r6, r3
 800f74e:	9206      	str	r2, [sp, #24]
 800f750:	e78a      	b.n	800f668 <_dtoa_r+0x828>
 800f752:	4603      	mov	r3, r0
 800f754:	e7f4      	b.n	800f740 <_dtoa_r+0x900>
 800f756:	9b03      	ldr	r3, [sp, #12]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	46b8      	mov	r8, r7
 800f75c:	dc20      	bgt.n	800f7a0 <_dtoa_r+0x960>
 800f75e:	469b      	mov	fp, r3
 800f760:	9b07      	ldr	r3, [sp, #28]
 800f762:	2b02      	cmp	r3, #2
 800f764:	dd1e      	ble.n	800f7a4 <_dtoa_r+0x964>
 800f766:	f1bb 0f00 	cmp.w	fp, #0
 800f76a:	f47f adb1 	bne.w	800f2d0 <_dtoa_r+0x490>
 800f76e:	4621      	mov	r1, r4
 800f770:	465b      	mov	r3, fp
 800f772:	2205      	movs	r2, #5
 800f774:	4648      	mov	r0, r9
 800f776:	f000 fa95 	bl	800fca4 <__multadd>
 800f77a:	4601      	mov	r1, r0
 800f77c:	4604      	mov	r4, r0
 800f77e:	9802      	ldr	r0, [sp, #8]
 800f780:	f000 fca0 	bl	80100c4 <__mcmp>
 800f784:	2800      	cmp	r0, #0
 800f786:	f77f ada3 	ble.w	800f2d0 <_dtoa_r+0x490>
 800f78a:	4656      	mov	r6, sl
 800f78c:	2331      	movs	r3, #49	@ 0x31
 800f78e:	f806 3b01 	strb.w	r3, [r6], #1
 800f792:	f108 0801 	add.w	r8, r8, #1
 800f796:	e59f      	b.n	800f2d8 <_dtoa_r+0x498>
 800f798:	9c03      	ldr	r4, [sp, #12]
 800f79a:	46b8      	mov	r8, r7
 800f79c:	4625      	mov	r5, r4
 800f79e:	e7f4      	b.n	800f78a <_dtoa_r+0x94a>
 800f7a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f7a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f000 8101 	beq.w	800f9ae <_dtoa_r+0xb6e>
 800f7ac:	2e00      	cmp	r6, #0
 800f7ae:	dd05      	ble.n	800f7bc <_dtoa_r+0x97c>
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	4632      	mov	r2, r6
 800f7b4:	4648      	mov	r0, r9
 800f7b6:	f000 fc19 	bl	800ffec <__lshift>
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	9b08      	ldr	r3, [sp, #32]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d05c      	beq.n	800f87c <_dtoa_r+0xa3c>
 800f7c2:	6869      	ldr	r1, [r5, #4]
 800f7c4:	4648      	mov	r0, r9
 800f7c6:	f000 fa0b 	bl	800fbe0 <_Balloc>
 800f7ca:	4606      	mov	r6, r0
 800f7cc:	b928      	cbnz	r0, 800f7da <_dtoa_r+0x99a>
 800f7ce:	4b82      	ldr	r3, [pc, #520]	@ (800f9d8 <_dtoa_r+0xb98>)
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f7d6:	f7ff bb4a 	b.w	800ee6e <_dtoa_r+0x2e>
 800f7da:	692a      	ldr	r2, [r5, #16]
 800f7dc:	3202      	adds	r2, #2
 800f7de:	0092      	lsls	r2, r2, #2
 800f7e0:	f105 010c 	add.w	r1, r5, #12
 800f7e4:	300c      	adds	r0, #12
 800f7e6:	f7ff fa92 	bl	800ed0e <memcpy>
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4648      	mov	r0, r9
 800f7f0:	f000 fbfc 	bl	800ffec <__lshift>
 800f7f4:	f10a 0301 	add.w	r3, sl, #1
 800f7f8:	9300      	str	r3, [sp, #0]
 800f7fa:	eb0a 030b 	add.w	r3, sl, fp
 800f7fe:	9308      	str	r3, [sp, #32]
 800f800:	9b04      	ldr	r3, [sp, #16]
 800f802:	f003 0301 	and.w	r3, r3, #1
 800f806:	462f      	mov	r7, r5
 800f808:	9306      	str	r3, [sp, #24]
 800f80a:	4605      	mov	r5, r0
 800f80c:	9b00      	ldr	r3, [sp, #0]
 800f80e:	9802      	ldr	r0, [sp, #8]
 800f810:	4621      	mov	r1, r4
 800f812:	f103 3bff 	add.w	fp, r3, #4294967295
 800f816:	f7ff fa88 	bl	800ed2a <quorem>
 800f81a:	4603      	mov	r3, r0
 800f81c:	3330      	adds	r3, #48	@ 0x30
 800f81e:	9003      	str	r0, [sp, #12]
 800f820:	4639      	mov	r1, r7
 800f822:	9802      	ldr	r0, [sp, #8]
 800f824:	9309      	str	r3, [sp, #36]	@ 0x24
 800f826:	f000 fc4d 	bl	80100c4 <__mcmp>
 800f82a:	462a      	mov	r2, r5
 800f82c:	9004      	str	r0, [sp, #16]
 800f82e:	4621      	mov	r1, r4
 800f830:	4648      	mov	r0, r9
 800f832:	f000 fc63 	bl	80100fc <__mdiff>
 800f836:	68c2      	ldr	r2, [r0, #12]
 800f838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f83a:	4606      	mov	r6, r0
 800f83c:	bb02      	cbnz	r2, 800f880 <_dtoa_r+0xa40>
 800f83e:	4601      	mov	r1, r0
 800f840:	9802      	ldr	r0, [sp, #8]
 800f842:	f000 fc3f 	bl	80100c4 <__mcmp>
 800f846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f848:	4602      	mov	r2, r0
 800f84a:	4631      	mov	r1, r6
 800f84c:	4648      	mov	r0, r9
 800f84e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f850:	9309      	str	r3, [sp, #36]	@ 0x24
 800f852:	f000 fa05 	bl	800fc60 <_Bfree>
 800f856:	9b07      	ldr	r3, [sp, #28]
 800f858:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f85a:	9e00      	ldr	r6, [sp, #0]
 800f85c:	ea42 0103 	orr.w	r1, r2, r3
 800f860:	9b06      	ldr	r3, [sp, #24]
 800f862:	4319      	orrs	r1, r3
 800f864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f866:	d10d      	bne.n	800f884 <_dtoa_r+0xa44>
 800f868:	2b39      	cmp	r3, #57	@ 0x39
 800f86a:	d027      	beq.n	800f8bc <_dtoa_r+0xa7c>
 800f86c:	9a04      	ldr	r2, [sp, #16]
 800f86e:	2a00      	cmp	r2, #0
 800f870:	dd01      	ble.n	800f876 <_dtoa_r+0xa36>
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	3331      	adds	r3, #49	@ 0x31
 800f876:	f88b 3000 	strb.w	r3, [fp]
 800f87a:	e52e      	b.n	800f2da <_dtoa_r+0x49a>
 800f87c:	4628      	mov	r0, r5
 800f87e:	e7b9      	b.n	800f7f4 <_dtoa_r+0x9b4>
 800f880:	2201      	movs	r2, #1
 800f882:	e7e2      	b.n	800f84a <_dtoa_r+0xa0a>
 800f884:	9904      	ldr	r1, [sp, #16]
 800f886:	2900      	cmp	r1, #0
 800f888:	db04      	blt.n	800f894 <_dtoa_r+0xa54>
 800f88a:	9807      	ldr	r0, [sp, #28]
 800f88c:	4301      	orrs	r1, r0
 800f88e:	9806      	ldr	r0, [sp, #24]
 800f890:	4301      	orrs	r1, r0
 800f892:	d120      	bne.n	800f8d6 <_dtoa_r+0xa96>
 800f894:	2a00      	cmp	r2, #0
 800f896:	ddee      	ble.n	800f876 <_dtoa_r+0xa36>
 800f898:	9902      	ldr	r1, [sp, #8]
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	2201      	movs	r2, #1
 800f89e:	4648      	mov	r0, r9
 800f8a0:	f000 fba4 	bl	800ffec <__lshift>
 800f8a4:	4621      	mov	r1, r4
 800f8a6:	9002      	str	r0, [sp, #8]
 800f8a8:	f000 fc0c 	bl	80100c4 <__mcmp>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	9b00      	ldr	r3, [sp, #0]
 800f8b0:	dc02      	bgt.n	800f8b8 <_dtoa_r+0xa78>
 800f8b2:	d1e0      	bne.n	800f876 <_dtoa_r+0xa36>
 800f8b4:	07da      	lsls	r2, r3, #31
 800f8b6:	d5de      	bpl.n	800f876 <_dtoa_r+0xa36>
 800f8b8:	2b39      	cmp	r3, #57	@ 0x39
 800f8ba:	d1da      	bne.n	800f872 <_dtoa_r+0xa32>
 800f8bc:	2339      	movs	r3, #57	@ 0x39
 800f8be:	f88b 3000 	strb.w	r3, [fp]
 800f8c2:	4633      	mov	r3, r6
 800f8c4:	461e      	mov	r6, r3
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f8cc:	2a39      	cmp	r2, #57	@ 0x39
 800f8ce:	d04e      	beq.n	800f96e <_dtoa_r+0xb2e>
 800f8d0:	3201      	adds	r2, #1
 800f8d2:	701a      	strb	r2, [r3, #0]
 800f8d4:	e501      	b.n	800f2da <_dtoa_r+0x49a>
 800f8d6:	2a00      	cmp	r2, #0
 800f8d8:	dd03      	ble.n	800f8e2 <_dtoa_r+0xaa2>
 800f8da:	2b39      	cmp	r3, #57	@ 0x39
 800f8dc:	d0ee      	beq.n	800f8bc <_dtoa_r+0xa7c>
 800f8de:	3301      	adds	r3, #1
 800f8e0:	e7c9      	b.n	800f876 <_dtoa_r+0xa36>
 800f8e2:	9a00      	ldr	r2, [sp, #0]
 800f8e4:	9908      	ldr	r1, [sp, #32]
 800f8e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f8ea:	428a      	cmp	r2, r1
 800f8ec:	d028      	beq.n	800f940 <_dtoa_r+0xb00>
 800f8ee:	9902      	ldr	r1, [sp, #8]
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	220a      	movs	r2, #10
 800f8f4:	4648      	mov	r0, r9
 800f8f6:	f000 f9d5 	bl	800fca4 <__multadd>
 800f8fa:	42af      	cmp	r7, r5
 800f8fc:	9002      	str	r0, [sp, #8]
 800f8fe:	f04f 0300 	mov.w	r3, #0
 800f902:	f04f 020a 	mov.w	r2, #10
 800f906:	4639      	mov	r1, r7
 800f908:	4648      	mov	r0, r9
 800f90a:	d107      	bne.n	800f91c <_dtoa_r+0xadc>
 800f90c:	f000 f9ca 	bl	800fca4 <__multadd>
 800f910:	4607      	mov	r7, r0
 800f912:	4605      	mov	r5, r0
 800f914:	9b00      	ldr	r3, [sp, #0]
 800f916:	3301      	adds	r3, #1
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	e777      	b.n	800f80c <_dtoa_r+0x9cc>
 800f91c:	f000 f9c2 	bl	800fca4 <__multadd>
 800f920:	4629      	mov	r1, r5
 800f922:	4607      	mov	r7, r0
 800f924:	2300      	movs	r3, #0
 800f926:	220a      	movs	r2, #10
 800f928:	4648      	mov	r0, r9
 800f92a:	f000 f9bb 	bl	800fca4 <__multadd>
 800f92e:	4605      	mov	r5, r0
 800f930:	e7f0      	b.n	800f914 <_dtoa_r+0xad4>
 800f932:	f1bb 0f00 	cmp.w	fp, #0
 800f936:	bfcc      	ite	gt
 800f938:	465e      	movgt	r6, fp
 800f93a:	2601      	movle	r6, #1
 800f93c:	4456      	add	r6, sl
 800f93e:	2700      	movs	r7, #0
 800f940:	9902      	ldr	r1, [sp, #8]
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	2201      	movs	r2, #1
 800f946:	4648      	mov	r0, r9
 800f948:	f000 fb50 	bl	800ffec <__lshift>
 800f94c:	4621      	mov	r1, r4
 800f94e:	9002      	str	r0, [sp, #8]
 800f950:	f000 fbb8 	bl	80100c4 <__mcmp>
 800f954:	2800      	cmp	r0, #0
 800f956:	dcb4      	bgt.n	800f8c2 <_dtoa_r+0xa82>
 800f958:	d102      	bne.n	800f960 <_dtoa_r+0xb20>
 800f95a:	9b00      	ldr	r3, [sp, #0]
 800f95c:	07db      	lsls	r3, r3, #31
 800f95e:	d4b0      	bmi.n	800f8c2 <_dtoa_r+0xa82>
 800f960:	4633      	mov	r3, r6
 800f962:	461e      	mov	r6, r3
 800f964:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f968:	2a30      	cmp	r2, #48	@ 0x30
 800f96a:	d0fa      	beq.n	800f962 <_dtoa_r+0xb22>
 800f96c:	e4b5      	b.n	800f2da <_dtoa_r+0x49a>
 800f96e:	459a      	cmp	sl, r3
 800f970:	d1a8      	bne.n	800f8c4 <_dtoa_r+0xa84>
 800f972:	2331      	movs	r3, #49	@ 0x31
 800f974:	f108 0801 	add.w	r8, r8, #1
 800f978:	f88a 3000 	strb.w	r3, [sl]
 800f97c:	e4ad      	b.n	800f2da <_dtoa_r+0x49a>
 800f97e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f980:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f9dc <_dtoa_r+0xb9c>
 800f984:	b11b      	cbz	r3, 800f98e <_dtoa_r+0xb4e>
 800f986:	f10a 0308 	add.w	r3, sl, #8
 800f98a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f98c:	6013      	str	r3, [r2, #0]
 800f98e:	4650      	mov	r0, sl
 800f990:	b017      	add	sp, #92	@ 0x5c
 800f992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f996:	9b07      	ldr	r3, [sp, #28]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	f77f ae2e 	ble.w	800f5fa <_dtoa_r+0x7ba>
 800f99e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9a0:	9308      	str	r3, [sp, #32]
 800f9a2:	2001      	movs	r0, #1
 800f9a4:	e64d      	b.n	800f642 <_dtoa_r+0x802>
 800f9a6:	f1bb 0f00 	cmp.w	fp, #0
 800f9aa:	f77f aed9 	ble.w	800f760 <_dtoa_r+0x920>
 800f9ae:	4656      	mov	r6, sl
 800f9b0:	9802      	ldr	r0, [sp, #8]
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	f7ff f9b9 	bl	800ed2a <quorem>
 800f9b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f9bc:	f806 3b01 	strb.w	r3, [r6], #1
 800f9c0:	eba6 020a 	sub.w	r2, r6, sl
 800f9c4:	4593      	cmp	fp, r2
 800f9c6:	ddb4      	ble.n	800f932 <_dtoa_r+0xaf2>
 800f9c8:	9902      	ldr	r1, [sp, #8]
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	220a      	movs	r2, #10
 800f9ce:	4648      	mov	r0, r9
 800f9d0:	f000 f968 	bl	800fca4 <__multadd>
 800f9d4:	9002      	str	r0, [sp, #8]
 800f9d6:	e7eb      	b.n	800f9b0 <_dtoa_r+0xb70>
 800f9d8:	08011240 	.word	0x08011240
 800f9dc:	080111c4 	.word	0x080111c4

0800f9e0 <_free_r>:
 800f9e0:	b538      	push	{r3, r4, r5, lr}
 800f9e2:	4605      	mov	r5, r0
 800f9e4:	2900      	cmp	r1, #0
 800f9e6:	d041      	beq.n	800fa6c <_free_r+0x8c>
 800f9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9ec:	1f0c      	subs	r4, r1, #4
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	bfb8      	it	lt
 800f9f2:	18e4      	addlt	r4, r4, r3
 800f9f4:	f000 f8e8 	bl	800fbc8 <__malloc_lock>
 800f9f8:	4a1d      	ldr	r2, [pc, #116]	@ (800fa70 <_free_r+0x90>)
 800f9fa:	6813      	ldr	r3, [r2, #0]
 800f9fc:	b933      	cbnz	r3, 800fa0c <_free_r+0x2c>
 800f9fe:	6063      	str	r3, [r4, #4]
 800fa00:	6014      	str	r4, [r2, #0]
 800fa02:	4628      	mov	r0, r5
 800fa04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa08:	f000 b8e4 	b.w	800fbd4 <__malloc_unlock>
 800fa0c:	42a3      	cmp	r3, r4
 800fa0e:	d908      	bls.n	800fa22 <_free_r+0x42>
 800fa10:	6820      	ldr	r0, [r4, #0]
 800fa12:	1821      	adds	r1, r4, r0
 800fa14:	428b      	cmp	r3, r1
 800fa16:	bf01      	itttt	eq
 800fa18:	6819      	ldreq	r1, [r3, #0]
 800fa1a:	685b      	ldreq	r3, [r3, #4]
 800fa1c:	1809      	addeq	r1, r1, r0
 800fa1e:	6021      	streq	r1, [r4, #0]
 800fa20:	e7ed      	b.n	800f9fe <_free_r+0x1e>
 800fa22:	461a      	mov	r2, r3
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	b10b      	cbz	r3, 800fa2c <_free_r+0x4c>
 800fa28:	42a3      	cmp	r3, r4
 800fa2a:	d9fa      	bls.n	800fa22 <_free_r+0x42>
 800fa2c:	6811      	ldr	r1, [r2, #0]
 800fa2e:	1850      	adds	r0, r2, r1
 800fa30:	42a0      	cmp	r0, r4
 800fa32:	d10b      	bne.n	800fa4c <_free_r+0x6c>
 800fa34:	6820      	ldr	r0, [r4, #0]
 800fa36:	4401      	add	r1, r0
 800fa38:	1850      	adds	r0, r2, r1
 800fa3a:	4283      	cmp	r3, r0
 800fa3c:	6011      	str	r1, [r2, #0]
 800fa3e:	d1e0      	bne.n	800fa02 <_free_r+0x22>
 800fa40:	6818      	ldr	r0, [r3, #0]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	6053      	str	r3, [r2, #4]
 800fa46:	4408      	add	r0, r1
 800fa48:	6010      	str	r0, [r2, #0]
 800fa4a:	e7da      	b.n	800fa02 <_free_r+0x22>
 800fa4c:	d902      	bls.n	800fa54 <_free_r+0x74>
 800fa4e:	230c      	movs	r3, #12
 800fa50:	602b      	str	r3, [r5, #0]
 800fa52:	e7d6      	b.n	800fa02 <_free_r+0x22>
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	1821      	adds	r1, r4, r0
 800fa58:	428b      	cmp	r3, r1
 800fa5a:	bf04      	itt	eq
 800fa5c:	6819      	ldreq	r1, [r3, #0]
 800fa5e:	685b      	ldreq	r3, [r3, #4]
 800fa60:	6063      	str	r3, [r4, #4]
 800fa62:	bf04      	itt	eq
 800fa64:	1809      	addeq	r1, r1, r0
 800fa66:	6021      	streq	r1, [r4, #0]
 800fa68:	6054      	str	r4, [r2, #4]
 800fa6a:	e7ca      	b.n	800fa02 <_free_r+0x22>
 800fa6c:	bd38      	pop	{r3, r4, r5, pc}
 800fa6e:	bf00      	nop
 800fa70:	2000a6c4 	.word	0x2000a6c4

0800fa74 <malloc>:
 800fa74:	4b02      	ldr	r3, [pc, #8]	@ (800fa80 <malloc+0xc>)
 800fa76:	4601      	mov	r1, r0
 800fa78:	6818      	ldr	r0, [r3, #0]
 800fa7a:	f000 b825 	b.w	800fac8 <_malloc_r>
 800fa7e:	bf00      	nop
 800fa80:	20000194 	.word	0x20000194

0800fa84 <sbrk_aligned>:
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	4e0f      	ldr	r6, [pc, #60]	@ (800fac4 <sbrk_aligned+0x40>)
 800fa88:	460c      	mov	r4, r1
 800fa8a:	6831      	ldr	r1, [r6, #0]
 800fa8c:	4605      	mov	r5, r0
 800fa8e:	b911      	cbnz	r1, 800fa96 <sbrk_aligned+0x12>
 800fa90:	f000 fe3e 	bl	8010710 <_sbrk_r>
 800fa94:	6030      	str	r0, [r6, #0]
 800fa96:	4621      	mov	r1, r4
 800fa98:	4628      	mov	r0, r5
 800fa9a:	f000 fe39 	bl	8010710 <_sbrk_r>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	d103      	bne.n	800faaa <sbrk_aligned+0x26>
 800faa2:	f04f 34ff 	mov.w	r4, #4294967295
 800faa6:	4620      	mov	r0, r4
 800faa8:	bd70      	pop	{r4, r5, r6, pc}
 800faaa:	1cc4      	adds	r4, r0, #3
 800faac:	f024 0403 	bic.w	r4, r4, #3
 800fab0:	42a0      	cmp	r0, r4
 800fab2:	d0f8      	beq.n	800faa6 <sbrk_aligned+0x22>
 800fab4:	1a21      	subs	r1, r4, r0
 800fab6:	4628      	mov	r0, r5
 800fab8:	f000 fe2a 	bl	8010710 <_sbrk_r>
 800fabc:	3001      	adds	r0, #1
 800fabe:	d1f2      	bne.n	800faa6 <sbrk_aligned+0x22>
 800fac0:	e7ef      	b.n	800faa2 <sbrk_aligned+0x1e>
 800fac2:	bf00      	nop
 800fac4:	2000a6c0 	.word	0x2000a6c0

0800fac8 <_malloc_r>:
 800fac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800facc:	1ccd      	adds	r5, r1, #3
 800face:	f025 0503 	bic.w	r5, r5, #3
 800fad2:	3508      	adds	r5, #8
 800fad4:	2d0c      	cmp	r5, #12
 800fad6:	bf38      	it	cc
 800fad8:	250c      	movcc	r5, #12
 800fada:	2d00      	cmp	r5, #0
 800fadc:	4606      	mov	r6, r0
 800fade:	db01      	blt.n	800fae4 <_malloc_r+0x1c>
 800fae0:	42a9      	cmp	r1, r5
 800fae2:	d904      	bls.n	800faee <_malloc_r+0x26>
 800fae4:	230c      	movs	r3, #12
 800fae6:	6033      	str	r3, [r6, #0]
 800fae8:	2000      	movs	r0, #0
 800faea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fbc4 <_malloc_r+0xfc>
 800faf2:	f000 f869 	bl	800fbc8 <__malloc_lock>
 800faf6:	f8d8 3000 	ldr.w	r3, [r8]
 800fafa:	461c      	mov	r4, r3
 800fafc:	bb44      	cbnz	r4, 800fb50 <_malloc_r+0x88>
 800fafe:	4629      	mov	r1, r5
 800fb00:	4630      	mov	r0, r6
 800fb02:	f7ff ffbf 	bl	800fa84 <sbrk_aligned>
 800fb06:	1c43      	adds	r3, r0, #1
 800fb08:	4604      	mov	r4, r0
 800fb0a:	d158      	bne.n	800fbbe <_malloc_r+0xf6>
 800fb0c:	f8d8 4000 	ldr.w	r4, [r8]
 800fb10:	4627      	mov	r7, r4
 800fb12:	2f00      	cmp	r7, #0
 800fb14:	d143      	bne.n	800fb9e <_malloc_r+0xd6>
 800fb16:	2c00      	cmp	r4, #0
 800fb18:	d04b      	beq.n	800fbb2 <_malloc_r+0xea>
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	4639      	mov	r1, r7
 800fb1e:	4630      	mov	r0, r6
 800fb20:	eb04 0903 	add.w	r9, r4, r3
 800fb24:	f000 fdf4 	bl	8010710 <_sbrk_r>
 800fb28:	4581      	cmp	r9, r0
 800fb2a:	d142      	bne.n	800fbb2 <_malloc_r+0xea>
 800fb2c:	6821      	ldr	r1, [r4, #0]
 800fb2e:	1a6d      	subs	r5, r5, r1
 800fb30:	4629      	mov	r1, r5
 800fb32:	4630      	mov	r0, r6
 800fb34:	f7ff ffa6 	bl	800fa84 <sbrk_aligned>
 800fb38:	3001      	adds	r0, #1
 800fb3a:	d03a      	beq.n	800fbb2 <_malloc_r+0xea>
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	442b      	add	r3, r5
 800fb40:	6023      	str	r3, [r4, #0]
 800fb42:	f8d8 3000 	ldr.w	r3, [r8]
 800fb46:	685a      	ldr	r2, [r3, #4]
 800fb48:	bb62      	cbnz	r2, 800fba4 <_malloc_r+0xdc>
 800fb4a:	f8c8 7000 	str.w	r7, [r8]
 800fb4e:	e00f      	b.n	800fb70 <_malloc_r+0xa8>
 800fb50:	6822      	ldr	r2, [r4, #0]
 800fb52:	1b52      	subs	r2, r2, r5
 800fb54:	d420      	bmi.n	800fb98 <_malloc_r+0xd0>
 800fb56:	2a0b      	cmp	r2, #11
 800fb58:	d917      	bls.n	800fb8a <_malloc_r+0xc2>
 800fb5a:	1961      	adds	r1, r4, r5
 800fb5c:	42a3      	cmp	r3, r4
 800fb5e:	6025      	str	r5, [r4, #0]
 800fb60:	bf18      	it	ne
 800fb62:	6059      	strne	r1, [r3, #4]
 800fb64:	6863      	ldr	r3, [r4, #4]
 800fb66:	bf08      	it	eq
 800fb68:	f8c8 1000 	streq.w	r1, [r8]
 800fb6c:	5162      	str	r2, [r4, r5]
 800fb6e:	604b      	str	r3, [r1, #4]
 800fb70:	4630      	mov	r0, r6
 800fb72:	f000 f82f 	bl	800fbd4 <__malloc_unlock>
 800fb76:	f104 000b 	add.w	r0, r4, #11
 800fb7a:	1d23      	adds	r3, r4, #4
 800fb7c:	f020 0007 	bic.w	r0, r0, #7
 800fb80:	1ac2      	subs	r2, r0, r3
 800fb82:	bf1c      	itt	ne
 800fb84:	1a1b      	subne	r3, r3, r0
 800fb86:	50a3      	strne	r3, [r4, r2]
 800fb88:	e7af      	b.n	800faea <_malloc_r+0x22>
 800fb8a:	6862      	ldr	r2, [r4, #4]
 800fb8c:	42a3      	cmp	r3, r4
 800fb8e:	bf0c      	ite	eq
 800fb90:	f8c8 2000 	streq.w	r2, [r8]
 800fb94:	605a      	strne	r2, [r3, #4]
 800fb96:	e7eb      	b.n	800fb70 <_malloc_r+0xa8>
 800fb98:	4623      	mov	r3, r4
 800fb9a:	6864      	ldr	r4, [r4, #4]
 800fb9c:	e7ae      	b.n	800fafc <_malloc_r+0x34>
 800fb9e:	463c      	mov	r4, r7
 800fba0:	687f      	ldr	r7, [r7, #4]
 800fba2:	e7b6      	b.n	800fb12 <_malloc_r+0x4a>
 800fba4:	461a      	mov	r2, r3
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	42a3      	cmp	r3, r4
 800fbaa:	d1fb      	bne.n	800fba4 <_malloc_r+0xdc>
 800fbac:	2300      	movs	r3, #0
 800fbae:	6053      	str	r3, [r2, #4]
 800fbb0:	e7de      	b.n	800fb70 <_malloc_r+0xa8>
 800fbb2:	230c      	movs	r3, #12
 800fbb4:	6033      	str	r3, [r6, #0]
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	f000 f80c 	bl	800fbd4 <__malloc_unlock>
 800fbbc:	e794      	b.n	800fae8 <_malloc_r+0x20>
 800fbbe:	6005      	str	r5, [r0, #0]
 800fbc0:	e7d6      	b.n	800fb70 <_malloc_r+0xa8>
 800fbc2:	bf00      	nop
 800fbc4:	2000a6c4 	.word	0x2000a6c4

0800fbc8 <__malloc_lock>:
 800fbc8:	4801      	ldr	r0, [pc, #4]	@ (800fbd0 <__malloc_lock+0x8>)
 800fbca:	f7ff b89e 	b.w	800ed0a <__retarget_lock_acquire_recursive>
 800fbce:	bf00      	nop
 800fbd0:	2000a6bc 	.word	0x2000a6bc

0800fbd4 <__malloc_unlock>:
 800fbd4:	4801      	ldr	r0, [pc, #4]	@ (800fbdc <__malloc_unlock+0x8>)
 800fbd6:	f7ff b899 	b.w	800ed0c <__retarget_lock_release_recursive>
 800fbda:	bf00      	nop
 800fbdc:	2000a6bc 	.word	0x2000a6bc

0800fbe0 <_Balloc>:
 800fbe0:	b570      	push	{r4, r5, r6, lr}
 800fbe2:	69c6      	ldr	r6, [r0, #28]
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	460d      	mov	r5, r1
 800fbe8:	b976      	cbnz	r6, 800fc08 <_Balloc+0x28>
 800fbea:	2010      	movs	r0, #16
 800fbec:	f7ff ff42 	bl	800fa74 <malloc>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	61e0      	str	r0, [r4, #28]
 800fbf4:	b920      	cbnz	r0, 800fc00 <_Balloc+0x20>
 800fbf6:	4b18      	ldr	r3, [pc, #96]	@ (800fc58 <_Balloc+0x78>)
 800fbf8:	4818      	ldr	r0, [pc, #96]	@ (800fc5c <_Balloc+0x7c>)
 800fbfa:	216b      	movs	r1, #107	@ 0x6b
 800fbfc:	f000 fd98 	bl	8010730 <__assert_func>
 800fc00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc04:	6006      	str	r6, [r0, #0]
 800fc06:	60c6      	str	r6, [r0, #12]
 800fc08:	69e6      	ldr	r6, [r4, #28]
 800fc0a:	68f3      	ldr	r3, [r6, #12]
 800fc0c:	b183      	cbz	r3, 800fc30 <_Balloc+0x50>
 800fc0e:	69e3      	ldr	r3, [r4, #28]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc16:	b9b8      	cbnz	r0, 800fc48 <_Balloc+0x68>
 800fc18:	2101      	movs	r1, #1
 800fc1a:	fa01 f605 	lsl.w	r6, r1, r5
 800fc1e:	1d72      	adds	r2, r6, #5
 800fc20:	0092      	lsls	r2, r2, #2
 800fc22:	4620      	mov	r0, r4
 800fc24:	f000 fda2 	bl	801076c <_calloc_r>
 800fc28:	b160      	cbz	r0, 800fc44 <_Balloc+0x64>
 800fc2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc2e:	e00e      	b.n	800fc4e <_Balloc+0x6e>
 800fc30:	2221      	movs	r2, #33	@ 0x21
 800fc32:	2104      	movs	r1, #4
 800fc34:	4620      	mov	r0, r4
 800fc36:	f000 fd99 	bl	801076c <_calloc_r>
 800fc3a:	69e3      	ldr	r3, [r4, #28]
 800fc3c:	60f0      	str	r0, [r6, #12]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1e4      	bne.n	800fc0e <_Balloc+0x2e>
 800fc44:	2000      	movs	r0, #0
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	6802      	ldr	r2, [r0, #0]
 800fc4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc54:	e7f7      	b.n	800fc46 <_Balloc+0x66>
 800fc56:	bf00      	nop
 800fc58:	080111d1 	.word	0x080111d1
 800fc5c:	08011251 	.word	0x08011251

0800fc60 <_Bfree>:
 800fc60:	b570      	push	{r4, r5, r6, lr}
 800fc62:	69c6      	ldr	r6, [r0, #28]
 800fc64:	4605      	mov	r5, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	b976      	cbnz	r6, 800fc88 <_Bfree+0x28>
 800fc6a:	2010      	movs	r0, #16
 800fc6c:	f7ff ff02 	bl	800fa74 <malloc>
 800fc70:	4602      	mov	r2, r0
 800fc72:	61e8      	str	r0, [r5, #28]
 800fc74:	b920      	cbnz	r0, 800fc80 <_Bfree+0x20>
 800fc76:	4b09      	ldr	r3, [pc, #36]	@ (800fc9c <_Bfree+0x3c>)
 800fc78:	4809      	ldr	r0, [pc, #36]	@ (800fca0 <_Bfree+0x40>)
 800fc7a:	218f      	movs	r1, #143	@ 0x8f
 800fc7c:	f000 fd58 	bl	8010730 <__assert_func>
 800fc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc84:	6006      	str	r6, [r0, #0]
 800fc86:	60c6      	str	r6, [r0, #12]
 800fc88:	b13c      	cbz	r4, 800fc9a <_Bfree+0x3a>
 800fc8a:	69eb      	ldr	r3, [r5, #28]
 800fc8c:	6862      	ldr	r2, [r4, #4]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc94:	6021      	str	r1, [r4, #0]
 800fc96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc9a:	bd70      	pop	{r4, r5, r6, pc}
 800fc9c:	080111d1 	.word	0x080111d1
 800fca0:	08011251 	.word	0x08011251

0800fca4 <__multadd>:
 800fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca8:	690d      	ldr	r5, [r1, #16]
 800fcaa:	4607      	mov	r7, r0
 800fcac:	460c      	mov	r4, r1
 800fcae:	461e      	mov	r6, r3
 800fcb0:	f101 0c14 	add.w	ip, r1, #20
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	f8dc 3000 	ldr.w	r3, [ip]
 800fcba:	b299      	uxth	r1, r3
 800fcbc:	fb02 6101 	mla	r1, r2, r1, r6
 800fcc0:	0c1e      	lsrs	r6, r3, #16
 800fcc2:	0c0b      	lsrs	r3, r1, #16
 800fcc4:	fb02 3306 	mla	r3, r2, r6, r3
 800fcc8:	b289      	uxth	r1, r1
 800fcca:	3001      	adds	r0, #1
 800fccc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fcd0:	4285      	cmp	r5, r0
 800fcd2:	f84c 1b04 	str.w	r1, [ip], #4
 800fcd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fcda:	dcec      	bgt.n	800fcb6 <__multadd+0x12>
 800fcdc:	b30e      	cbz	r6, 800fd22 <__multadd+0x7e>
 800fcde:	68a3      	ldr	r3, [r4, #8]
 800fce0:	42ab      	cmp	r3, r5
 800fce2:	dc19      	bgt.n	800fd18 <__multadd+0x74>
 800fce4:	6861      	ldr	r1, [r4, #4]
 800fce6:	4638      	mov	r0, r7
 800fce8:	3101      	adds	r1, #1
 800fcea:	f7ff ff79 	bl	800fbe0 <_Balloc>
 800fcee:	4680      	mov	r8, r0
 800fcf0:	b928      	cbnz	r0, 800fcfe <__multadd+0x5a>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd28 <__multadd+0x84>)
 800fcf6:	480d      	ldr	r0, [pc, #52]	@ (800fd2c <__multadd+0x88>)
 800fcf8:	21ba      	movs	r1, #186	@ 0xba
 800fcfa:	f000 fd19 	bl	8010730 <__assert_func>
 800fcfe:	6922      	ldr	r2, [r4, #16]
 800fd00:	3202      	adds	r2, #2
 800fd02:	f104 010c 	add.w	r1, r4, #12
 800fd06:	0092      	lsls	r2, r2, #2
 800fd08:	300c      	adds	r0, #12
 800fd0a:	f7ff f800 	bl	800ed0e <memcpy>
 800fd0e:	4621      	mov	r1, r4
 800fd10:	4638      	mov	r0, r7
 800fd12:	f7ff ffa5 	bl	800fc60 <_Bfree>
 800fd16:	4644      	mov	r4, r8
 800fd18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd1c:	3501      	adds	r5, #1
 800fd1e:	615e      	str	r6, [r3, #20]
 800fd20:	6125      	str	r5, [r4, #16]
 800fd22:	4620      	mov	r0, r4
 800fd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd28:	08011240 	.word	0x08011240
 800fd2c:	08011251 	.word	0x08011251

0800fd30 <__hi0bits>:
 800fd30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd34:	4603      	mov	r3, r0
 800fd36:	bf36      	itet	cc
 800fd38:	0403      	lslcc	r3, r0, #16
 800fd3a:	2000      	movcs	r0, #0
 800fd3c:	2010      	movcc	r0, #16
 800fd3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd42:	bf3c      	itt	cc
 800fd44:	021b      	lslcc	r3, r3, #8
 800fd46:	3008      	addcc	r0, #8
 800fd48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd4c:	bf3c      	itt	cc
 800fd4e:	011b      	lslcc	r3, r3, #4
 800fd50:	3004      	addcc	r0, #4
 800fd52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd56:	bf3c      	itt	cc
 800fd58:	009b      	lslcc	r3, r3, #2
 800fd5a:	3002      	addcc	r0, #2
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	db05      	blt.n	800fd6c <__hi0bits+0x3c>
 800fd60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd64:	f100 0001 	add.w	r0, r0, #1
 800fd68:	bf08      	it	eq
 800fd6a:	2020      	moveq	r0, #32
 800fd6c:	4770      	bx	lr

0800fd6e <__lo0bits>:
 800fd6e:	6803      	ldr	r3, [r0, #0]
 800fd70:	4602      	mov	r2, r0
 800fd72:	f013 0007 	ands.w	r0, r3, #7
 800fd76:	d00b      	beq.n	800fd90 <__lo0bits+0x22>
 800fd78:	07d9      	lsls	r1, r3, #31
 800fd7a:	d421      	bmi.n	800fdc0 <__lo0bits+0x52>
 800fd7c:	0798      	lsls	r0, r3, #30
 800fd7e:	bf49      	itett	mi
 800fd80:	085b      	lsrmi	r3, r3, #1
 800fd82:	089b      	lsrpl	r3, r3, #2
 800fd84:	2001      	movmi	r0, #1
 800fd86:	6013      	strmi	r3, [r2, #0]
 800fd88:	bf5c      	itt	pl
 800fd8a:	6013      	strpl	r3, [r2, #0]
 800fd8c:	2002      	movpl	r0, #2
 800fd8e:	4770      	bx	lr
 800fd90:	b299      	uxth	r1, r3
 800fd92:	b909      	cbnz	r1, 800fd98 <__lo0bits+0x2a>
 800fd94:	0c1b      	lsrs	r3, r3, #16
 800fd96:	2010      	movs	r0, #16
 800fd98:	b2d9      	uxtb	r1, r3
 800fd9a:	b909      	cbnz	r1, 800fda0 <__lo0bits+0x32>
 800fd9c:	3008      	adds	r0, #8
 800fd9e:	0a1b      	lsrs	r3, r3, #8
 800fda0:	0719      	lsls	r1, r3, #28
 800fda2:	bf04      	itt	eq
 800fda4:	091b      	lsreq	r3, r3, #4
 800fda6:	3004      	addeq	r0, #4
 800fda8:	0799      	lsls	r1, r3, #30
 800fdaa:	bf04      	itt	eq
 800fdac:	089b      	lsreq	r3, r3, #2
 800fdae:	3002      	addeq	r0, #2
 800fdb0:	07d9      	lsls	r1, r3, #31
 800fdb2:	d403      	bmi.n	800fdbc <__lo0bits+0x4e>
 800fdb4:	085b      	lsrs	r3, r3, #1
 800fdb6:	f100 0001 	add.w	r0, r0, #1
 800fdba:	d003      	beq.n	800fdc4 <__lo0bits+0x56>
 800fdbc:	6013      	str	r3, [r2, #0]
 800fdbe:	4770      	bx	lr
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	4770      	bx	lr
 800fdc4:	2020      	movs	r0, #32
 800fdc6:	4770      	bx	lr

0800fdc8 <__i2b>:
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	460c      	mov	r4, r1
 800fdcc:	2101      	movs	r1, #1
 800fdce:	f7ff ff07 	bl	800fbe0 <_Balloc>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	b928      	cbnz	r0, 800fde2 <__i2b+0x1a>
 800fdd6:	4b05      	ldr	r3, [pc, #20]	@ (800fdec <__i2b+0x24>)
 800fdd8:	4805      	ldr	r0, [pc, #20]	@ (800fdf0 <__i2b+0x28>)
 800fdda:	f240 1145 	movw	r1, #325	@ 0x145
 800fdde:	f000 fca7 	bl	8010730 <__assert_func>
 800fde2:	2301      	movs	r3, #1
 800fde4:	6144      	str	r4, [r0, #20]
 800fde6:	6103      	str	r3, [r0, #16]
 800fde8:	bd10      	pop	{r4, pc}
 800fdea:	bf00      	nop
 800fdec:	08011240 	.word	0x08011240
 800fdf0:	08011251 	.word	0x08011251

0800fdf4 <__multiply>:
 800fdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf8:	4617      	mov	r7, r2
 800fdfa:	690a      	ldr	r2, [r1, #16]
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	bfa8      	it	ge
 800fe02:	463b      	movge	r3, r7
 800fe04:	4689      	mov	r9, r1
 800fe06:	bfa4      	itt	ge
 800fe08:	460f      	movge	r7, r1
 800fe0a:	4699      	movge	r9, r3
 800fe0c:	693d      	ldr	r5, [r7, #16]
 800fe0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	6879      	ldr	r1, [r7, #4]
 800fe16:	eb05 060a 	add.w	r6, r5, sl
 800fe1a:	42b3      	cmp	r3, r6
 800fe1c:	b085      	sub	sp, #20
 800fe1e:	bfb8      	it	lt
 800fe20:	3101      	addlt	r1, #1
 800fe22:	f7ff fedd 	bl	800fbe0 <_Balloc>
 800fe26:	b930      	cbnz	r0, 800fe36 <__multiply+0x42>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	4b41      	ldr	r3, [pc, #260]	@ (800ff30 <__multiply+0x13c>)
 800fe2c:	4841      	ldr	r0, [pc, #260]	@ (800ff34 <__multiply+0x140>)
 800fe2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe32:	f000 fc7d 	bl	8010730 <__assert_func>
 800fe36:	f100 0414 	add.w	r4, r0, #20
 800fe3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fe3e:	4623      	mov	r3, r4
 800fe40:	2200      	movs	r2, #0
 800fe42:	4573      	cmp	r3, lr
 800fe44:	d320      	bcc.n	800fe88 <__multiply+0x94>
 800fe46:	f107 0814 	add.w	r8, r7, #20
 800fe4a:	f109 0114 	add.w	r1, r9, #20
 800fe4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fe52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fe56:	9302      	str	r3, [sp, #8]
 800fe58:	1beb      	subs	r3, r5, r7
 800fe5a:	3b15      	subs	r3, #21
 800fe5c:	f023 0303 	bic.w	r3, r3, #3
 800fe60:	3304      	adds	r3, #4
 800fe62:	3715      	adds	r7, #21
 800fe64:	42bd      	cmp	r5, r7
 800fe66:	bf38      	it	cc
 800fe68:	2304      	movcc	r3, #4
 800fe6a:	9301      	str	r3, [sp, #4]
 800fe6c:	9b02      	ldr	r3, [sp, #8]
 800fe6e:	9103      	str	r1, [sp, #12]
 800fe70:	428b      	cmp	r3, r1
 800fe72:	d80c      	bhi.n	800fe8e <__multiply+0x9a>
 800fe74:	2e00      	cmp	r6, #0
 800fe76:	dd03      	ble.n	800fe80 <__multiply+0x8c>
 800fe78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d055      	beq.n	800ff2c <__multiply+0x138>
 800fe80:	6106      	str	r6, [r0, #16]
 800fe82:	b005      	add	sp, #20
 800fe84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe88:	f843 2b04 	str.w	r2, [r3], #4
 800fe8c:	e7d9      	b.n	800fe42 <__multiply+0x4e>
 800fe8e:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe92:	f1ba 0f00 	cmp.w	sl, #0
 800fe96:	d01f      	beq.n	800fed8 <__multiply+0xe4>
 800fe98:	46c4      	mov	ip, r8
 800fe9a:	46a1      	mov	r9, r4
 800fe9c:	2700      	movs	r7, #0
 800fe9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fea2:	f8d9 3000 	ldr.w	r3, [r9]
 800fea6:	fa1f fb82 	uxth.w	fp, r2
 800feaa:	b29b      	uxth	r3, r3
 800feac:	fb0a 330b 	mla	r3, sl, fp, r3
 800feb0:	443b      	add	r3, r7
 800feb2:	f8d9 7000 	ldr.w	r7, [r9]
 800feb6:	0c12      	lsrs	r2, r2, #16
 800feb8:	0c3f      	lsrs	r7, r7, #16
 800feba:	fb0a 7202 	mla	r2, sl, r2, r7
 800febe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fec8:	4565      	cmp	r5, ip
 800feca:	f849 3b04 	str.w	r3, [r9], #4
 800fece:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fed2:	d8e4      	bhi.n	800fe9e <__multiply+0xaa>
 800fed4:	9b01      	ldr	r3, [sp, #4]
 800fed6:	50e7      	str	r7, [r4, r3]
 800fed8:	9b03      	ldr	r3, [sp, #12]
 800feda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fede:	3104      	adds	r1, #4
 800fee0:	f1b9 0f00 	cmp.w	r9, #0
 800fee4:	d020      	beq.n	800ff28 <__multiply+0x134>
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	4647      	mov	r7, r8
 800feea:	46a4      	mov	ip, r4
 800feec:	f04f 0a00 	mov.w	sl, #0
 800fef0:	f8b7 b000 	ldrh.w	fp, [r7]
 800fef4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fef8:	fb09 220b 	mla	r2, r9, fp, r2
 800fefc:	4452      	add	r2, sl
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff04:	f84c 3b04 	str.w	r3, [ip], #4
 800ff08:	f857 3b04 	ldr.w	r3, [r7], #4
 800ff0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff10:	f8bc 3000 	ldrh.w	r3, [ip]
 800ff14:	fb09 330a 	mla	r3, r9, sl, r3
 800ff18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ff1c:	42bd      	cmp	r5, r7
 800ff1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff22:	d8e5      	bhi.n	800fef0 <__multiply+0xfc>
 800ff24:	9a01      	ldr	r2, [sp, #4]
 800ff26:	50a3      	str	r3, [r4, r2]
 800ff28:	3404      	adds	r4, #4
 800ff2a:	e79f      	b.n	800fe6c <__multiply+0x78>
 800ff2c:	3e01      	subs	r6, #1
 800ff2e:	e7a1      	b.n	800fe74 <__multiply+0x80>
 800ff30:	08011240 	.word	0x08011240
 800ff34:	08011251 	.word	0x08011251

0800ff38 <__pow5mult>:
 800ff38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff3c:	4615      	mov	r5, r2
 800ff3e:	f012 0203 	ands.w	r2, r2, #3
 800ff42:	4607      	mov	r7, r0
 800ff44:	460e      	mov	r6, r1
 800ff46:	d007      	beq.n	800ff58 <__pow5mult+0x20>
 800ff48:	4c25      	ldr	r4, [pc, #148]	@ (800ffe0 <__pow5mult+0xa8>)
 800ff4a:	3a01      	subs	r2, #1
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff52:	f7ff fea7 	bl	800fca4 <__multadd>
 800ff56:	4606      	mov	r6, r0
 800ff58:	10ad      	asrs	r5, r5, #2
 800ff5a:	d03d      	beq.n	800ffd8 <__pow5mult+0xa0>
 800ff5c:	69fc      	ldr	r4, [r7, #28]
 800ff5e:	b97c      	cbnz	r4, 800ff80 <__pow5mult+0x48>
 800ff60:	2010      	movs	r0, #16
 800ff62:	f7ff fd87 	bl	800fa74 <malloc>
 800ff66:	4602      	mov	r2, r0
 800ff68:	61f8      	str	r0, [r7, #28]
 800ff6a:	b928      	cbnz	r0, 800ff78 <__pow5mult+0x40>
 800ff6c:	4b1d      	ldr	r3, [pc, #116]	@ (800ffe4 <__pow5mult+0xac>)
 800ff6e:	481e      	ldr	r0, [pc, #120]	@ (800ffe8 <__pow5mult+0xb0>)
 800ff70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff74:	f000 fbdc 	bl	8010730 <__assert_func>
 800ff78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff7c:	6004      	str	r4, [r0, #0]
 800ff7e:	60c4      	str	r4, [r0, #12]
 800ff80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff88:	b94c      	cbnz	r4, 800ff9e <__pow5mult+0x66>
 800ff8a:	f240 2171 	movw	r1, #625	@ 0x271
 800ff8e:	4638      	mov	r0, r7
 800ff90:	f7ff ff1a 	bl	800fdc8 <__i2b>
 800ff94:	2300      	movs	r3, #0
 800ff96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	6003      	str	r3, [r0, #0]
 800ff9e:	f04f 0900 	mov.w	r9, #0
 800ffa2:	07eb      	lsls	r3, r5, #31
 800ffa4:	d50a      	bpl.n	800ffbc <__pow5mult+0x84>
 800ffa6:	4631      	mov	r1, r6
 800ffa8:	4622      	mov	r2, r4
 800ffaa:	4638      	mov	r0, r7
 800ffac:	f7ff ff22 	bl	800fdf4 <__multiply>
 800ffb0:	4631      	mov	r1, r6
 800ffb2:	4680      	mov	r8, r0
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	f7ff fe53 	bl	800fc60 <_Bfree>
 800ffba:	4646      	mov	r6, r8
 800ffbc:	106d      	asrs	r5, r5, #1
 800ffbe:	d00b      	beq.n	800ffd8 <__pow5mult+0xa0>
 800ffc0:	6820      	ldr	r0, [r4, #0]
 800ffc2:	b938      	cbnz	r0, 800ffd4 <__pow5mult+0x9c>
 800ffc4:	4622      	mov	r2, r4
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4638      	mov	r0, r7
 800ffca:	f7ff ff13 	bl	800fdf4 <__multiply>
 800ffce:	6020      	str	r0, [r4, #0]
 800ffd0:	f8c0 9000 	str.w	r9, [r0]
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	e7e4      	b.n	800ffa2 <__pow5mult+0x6a>
 800ffd8:	4630      	mov	r0, r6
 800ffda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffde:	bf00      	nop
 800ffe0:	08011304 	.word	0x08011304
 800ffe4:	080111d1 	.word	0x080111d1
 800ffe8:	08011251 	.word	0x08011251

0800ffec <__lshift>:
 800ffec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff0:	460c      	mov	r4, r1
 800fff2:	6849      	ldr	r1, [r1, #4]
 800fff4:	6923      	ldr	r3, [r4, #16]
 800fff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fffa:	68a3      	ldr	r3, [r4, #8]
 800fffc:	4607      	mov	r7, r0
 800fffe:	4691      	mov	r9, r2
 8010000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010004:	f108 0601 	add.w	r6, r8, #1
 8010008:	42b3      	cmp	r3, r6
 801000a:	db0b      	blt.n	8010024 <__lshift+0x38>
 801000c:	4638      	mov	r0, r7
 801000e:	f7ff fde7 	bl	800fbe0 <_Balloc>
 8010012:	4605      	mov	r5, r0
 8010014:	b948      	cbnz	r0, 801002a <__lshift+0x3e>
 8010016:	4602      	mov	r2, r0
 8010018:	4b28      	ldr	r3, [pc, #160]	@ (80100bc <__lshift+0xd0>)
 801001a:	4829      	ldr	r0, [pc, #164]	@ (80100c0 <__lshift+0xd4>)
 801001c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010020:	f000 fb86 	bl	8010730 <__assert_func>
 8010024:	3101      	adds	r1, #1
 8010026:	005b      	lsls	r3, r3, #1
 8010028:	e7ee      	b.n	8010008 <__lshift+0x1c>
 801002a:	2300      	movs	r3, #0
 801002c:	f100 0114 	add.w	r1, r0, #20
 8010030:	f100 0210 	add.w	r2, r0, #16
 8010034:	4618      	mov	r0, r3
 8010036:	4553      	cmp	r3, sl
 8010038:	db33      	blt.n	80100a2 <__lshift+0xb6>
 801003a:	6920      	ldr	r0, [r4, #16]
 801003c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010040:	f104 0314 	add.w	r3, r4, #20
 8010044:	f019 091f 	ands.w	r9, r9, #31
 8010048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801004c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010050:	d02b      	beq.n	80100aa <__lshift+0xbe>
 8010052:	f1c9 0e20 	rsb	lr, r9, #32
 8010056:	468a      	mov	sl, r1
 8010058:	2200      	movs	r2, #0
 801005a:	6818      	ldr	r0, [r3, #0]
 801005c:	fa00 f009 	lsl.w	r0, r0, r9
 8010060:	4310      	orrs	r0, r2
 8010062:	f84a 0b04 	str.w	r0, [sl], #4
 8010066:	f853 2b04 	ldr.w	r2, [r3], #4
 801006a:	459c      	cmp	ip, r3
 801006c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010070:	d8f3      	bhi.n	801005a <__lshift+0x6e>
 8010072:	ebac 0304 	sub.w	r3, ip, r4
 8010076:	3b15      	subs	r3, #21
 8010078:	f023 0303 	bic.w	r3, r3, #3
 801007c:	3304      	adds	r3, #4
 801007e:	f104 0015 	add.w	r0, r4, #21
 8010082:	4560      	cmp	r0, ip
 8010084:	bf88      	it	hi
 8010086:	2304      	movhi	r3, #4
 8010088:	50ca      	str	r2, [r1, r3]
 801008a:	b10a      	cbz	r2, 8010090 <__lshift+0xa4>
 801008c:	f108 0602 	add.w	r6, r8, #2
 8010090:	3e01      	subs	r6, #1
 8010092:	4638      	mov	r0, r7
 8010094:	612e      	str	r6, [r5, #16]
 8010096:	4621      	mov	r1, r4
 8010098:	f7ff fde2 	bl	800fc60 <_Bfree>
 801009c:	4628      	mov	r0, r5
 801009e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80100a6:	3301      	adds	r3, #1
 80100a8:	e7c5      	b.n	8010036 <__lshift+0x4a>
 80100aa:	3904      	subs	r1, #4
 80100ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80100b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80100b4:	459c      	cmp	ip, r3
 80100b6:	d8f9      	bhi.n	80100ac <__lshift+0xc0>
 80100b8:	e7ea      	b.n	8010090 <__lshift+0xa4>
 80100ba:	bf00      	nop
 80100bc:	08011240 	.word	0x08011240
 80100c0:	08011251 	.word	0x08011251

080100c4 <__mcmp>:
 80100c4:	690a      	ldr	r2, [r1, #16]
 80100c6:	4603      	mov	r3, r0
 80100c8:	6900      	ldr	r0, [r0, #16]
 80100ca:	1a80      	subs	r0, r0, r2
 80100cc:	b530      	push	{r4, r5, lr}
 80100ce:	d10e      	bne.n	80100ee <__mcmp+0x2a>
 80100d0:	3314      	adds	r3, #20
 80100d2:	3114      	adds	r1, #20
 80100d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80100d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80100dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80100e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80100e4:	4295      	cmp	r5, r2
 80100e6:	d003      	beq.n	80100f0 <__mcmp+0x2c>
 80100e8:	d205      	bcs.n	80100f6 <__mcmp+0x32>
 80100ea:	f04f 30ff 	mov.w	r0, #4294967295
 80100ee:	bd30      	pop	{r4, r5, pc}
 80100f0:	42a3      	cmp	r3, r4
 80100f2:	d3f3      	bcc.n	80100dc <__mcmp+0x18>
 80100f4:	e7fb      	b.n	80100ee <__mcmp+0x2a>
 80100f6:	2001      	movs	r0, #1
 80100f8:	e7f9      	b.n	80100ee <__mcmp+0x2a>
	...

080100fc <__mdiff>:
 80100fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010100:	4689      	mov	r9, r1
 8010102:	4606      	mov	r6, r0
 8010104:	4611      	mov	r1, r2
 8010106:	4648      	mov	r0, r9
 8010108:	4614      	mov	r4, r2
 801010a:	f7ff ffdb 	bl	80100c4 <__mcmp>
 801010e:	1e05      	subs	r5, r0, #0
 8010110:	d112      	bne.n	8010138 <__mdiff+0x3c>
 8010112:	4629      	mov	r1, r5
 8010114:	4630      	mov	r0, r6
 8010116:	f7ff fd63 	bl	800fbe0 <_Balloc>
 801011a:	4602      	mov	r2, r0
 801011c:	b928      	cbnz	r0, 801012a <__mdiff+0x2e>
 801011e:	4b3f      	ldr	r3, [pc, #252]	@ (801021c <__mdiff+0x120>)
 8010120:	f240 2137 	movw	r1, #567	@ 0x237
 8010124:	483e      	ldr	r0, [pc, #248]	@ (8010220 <__mdiff+0x124>)
 8010126:	f000 fb03 	bl	8010730 <__assert_func>
 801012a:	2301      	movs	r3, #1
 801012c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010130:	4610      	mov	r0, r2
 8010132:	b003      	add	sp, #12
 8010134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010138:	bfbc      	itt	lt
 801013a:	464b      	movlt	r3, r9
 801013c:	46a1      	movlt	r9, r4
 801013e:	4630      	mov	r0, r6
 8010140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010144:	bfba      	itte	lt
 8010146:	461c      	movlt	r4, r3
 8010148:	2501      	movlt	r5, #1
 801014a:	2500      	movge	r5, #0
 801014c:	f7ff fd48 	bl	800fbe0 <_Balloc>
 8010150:	4602      	mov	r2, r0
 8010152:	b918      	cbnz	r0, 801015c <__mdiff+0x60>
 8010154:	4b31      	ldr	r3, [pc, #196]	@ (801021c <__mdiff+0x120>)
 8010156:	f240 2145 	movw	r1, #581	@ 0x245
 801015a:	e7e3      	b.n	8010124 <__mdiff+0x28>
 801015c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010160:	6926      	ldr	r6, [r4, #16]
 8010162:	60c5      	str	r5, [r0, #12]
 8010164:	f109 0310 	add.w	r3, r9, #16
 8010168:	f109 0514 	add.w	r5, r9, #20
 801016c:	f104 0e14 	add.w	lr, r4, #20
 8010170:	f100 0b14 	add.w	fp, r0, #20
 8010174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801017c:	9301      	str	r3, [sp, #4]
 801017e:	46d9      	mov	r9, fp
 8010180:	f04f 0c00 	mov.w	ip, #0
 8010184:	9b01      	ldr	r3, [sp, #4]
 8010186:	f85e 0b04 	ldr.w	r0, [lr], #4
 801018a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801018e:	9301      	str	r3, [sp, #4]
 8010190:	fa1f f38a 	uxth.w	r3, sl
 8010194:	4619      	mov	r1, r3
 8010196:	b283      	uxth	r3, r0
 8010198:	1acb      	subs	r3, r1, r3
 801019a:	0c00      	lsrs	r0, r0, #16
 801019c:	4463      	add	r3, ip
 801019e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80101ac:	4576      	cmp	r6, lr
 80101ae:	f849 3b04 	str.w	r3, [r9], #4
 80101b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101b6:	d8e5      	bhi.n	8010184 <__mdiff+0x88>
 80101b8:	1b33      	subs	r3, r6, r4
 80101ba:	3b15      	subs	r3, #21
 80101bc:	f023 0303 	bic.w	r3, r3, #3
 80101c0:	3415      	adds	r4, #21
 80101c2:	3304      	adds	r3, #4
 80101c4:	42a6      	cmp	r6, r4
 80101c6:	bf38      	it	cc
 80101c8:	2304      	movcc	r3, #4
 80101ca:	441d      	add	r5, r3
 80101cc:	445b      	add	r3, fp
 80101ce:	461e      	mov	r6, r3
 80101d0:	462c      	mov	r4, r5
 80101d2:	4544      	cmp	r4, r8
 80101d4:	d30e      	bcc.n	80101f4 <__mdiff+0xf8>
 80101d6:	f108 0103 	add.w	r1, r8, #3
 80101da:	1b49      	subs	r1, r1, r5
 80101dc:	f021 0103 	bic.w	r1, r1, #3
 80101e0:	3d03      	subs	r5, #3
 80101e2:	45a8      	cmp	r8, r5
 80101e4:	bf38      	it	cc
 80101e6:	2100      	movcc	r1, #0
 80101e8:	440b      	add	r3, r1
 80101ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101ee:	b191      	cbz	r1, 8010216 <__mdiff+0x11a>
 80101f0:	6117      	str	r7, [r2, #16]
 80101f2:	e79d      	b.n	8010130 <__mdiff+0x34>
 80101f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80101f8:	46e6      	mov	lr, ip
 80101fa:	0c08      	lsrs	r0, r1, #16
 80101fc:	fa1c fc81 	uxtah	ip, ip, r1
 8010200:	4471      	add	r1, lr
 8010202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010206:	b289      	uxth	r1, r1
 8010208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801020c:	f846 1b04 	str.w	r1, [r6], #4
 8010210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010214:	e7dd      	b.n	80101d2 <__mdiff+0xd6>
 8010216:	3f01      	subs	r7, #1
 8010218:	e7e7      	b.n	80101ea <__mdiff+0xee>
 801021a:	bf00      	nop
 801021c:	08011240 	.word	0x08011240
 8010220:	08011251 	.word	0x08011251

08010224 <__d2b>:
 8010224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010228:	460f      	mov	r7, r1
 801022a:	2101      	movs	r1, #1
 801022c:	ec59 8b10 	vmov	r8, r9, d0
 8010230:	4616      	mov	r6, r2
 8010232:	f7ff fcd5 	bl	800fbe0 <_Balloc>
 8010236:	4604      	mov	r4, r0
 8010238:	b930      	cbnz	r0, 8010248 <__d2b+0x24>
 801023a:	4602      	mov	r2, r0
 801023c:	4b23      	ldr	r3, [pc, #140]	@ (80102cc <__d2b+0xa8>)
 801023e:	4824      	ldr	r0, [pc, #144]	@ (80102d0 <__d2b+0xac>)
 8010240:	f240 310f 	movw	r1, #783	@ 0x30f
 8010244:	f000 fa74 	bl	8010730 <__assert_func>
 8010248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801024c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010250:	b10d      	cbz	r5, 8010256 <__d2b+0x32>
 8010252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010256:	9301      	str	r3, [sp, #4]
 8010258:	f1b8 0300 	subs.w	r3, r8, #0
 801025c:	d023      	beq.n	80102a6 <__d2b+0x82>
 801025e:	4668      	mov	r0, sp
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	f7ff fd84 	bl	800fd6e <__lo0bits>
 8010266:	e9dd 1200 	ldrd	r1, r2, [sp]
 801026a:	b1d0      	cbz	r0, 80102a2 <__d2b+0x7e>
 801026c:	f1c0 0320 	rsb	r3, r0, #32
 8010270:	fa02 f303 	lsl.w	r3, r2, r3
 8010274:	430b      	orrs	r3, r1
 8010276:	40c2      	lsrs	r2, r0
 8010278:	6163      	str	r3, [r4, #20]
 801027a:	9201      	str	r2, [sp, #4]
 801027c:	9b01      	ldr	r3, [sp, #4]
 801027e:	61a3      	str	r3, [r4, #24]
 8010280:	2b00      	cmp	r3, #0
 8010282:	bf0c      	ite	eq
 8010284:	2201      	moveq	r2, #1
 8010286:	2202      	movne	r2, #2
 8010288:	6122      	str	r2, [r4, #16]
 801028a:	b1a5      	cbz	r5, 80102b6 <__d2b+0x92>
 801028c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010290:	4405      	add	r5, r0
 8010292:	603d      	str	r5, [r7, #0]
 8010294:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010298:	6030      	str	r0, [r6, #0]
 801029a:	4620      	mov	r0, r4
 801029c:	b003      	add	sp, #12
 801029e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102a2:	6161      	str	r1, [r4, #20]
 80102a4:	e7ea      	b.n	801027c <__d2b+0x58>
 80102a6:	a801      	add	r0, sp, #4
 80102a8:	f7ff fd61 	bl	800fd6e <__lo0bits>
 80102ac:	9b01      	ldr	r3, [sp, #4]
 80102ae:	6163      	str	r3, [r4, #20]
 80102b0:	3020      	adds	r0, #32
 80102b2:	2201      	movs	r2, #1
 80102b4:	e7e8      	b.n	8010288 <__d2b+0x64>
 80102b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80102be:	6038      	str	r0, [r7, #0]
 80102c0:	6918      	ldr	r0, [r3, #16]
 80102c2:	f7ff fd35 	bl	800fd30 <__hi0bits>
 80102c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102ca:	e7e5      	b.n	8010298 <__d2b+0x74>
 80102cc:	08011240 	.word	0x08011240
 80102d0:	08011251 	.word	0x08011251

080102d4 <__ssputs_r>:
 80102d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102d8:	688e      	ldr	r6, [r1, #8]
 80102da:	461f      	mov	r7, r3
 80102dc:	42be      	cmp	r6, r7
 80102de:	680b      	ldr	r3, [r1, #0]
 80102e0:	4682      	mov	sl, r0
 80102e2:	460c      	mov	r4, r1
 80102e4:	4690      	mov	r8, r2
 80102e6:	d82d      	bhi.n	8010344 <__ssputs_r+0x70>
 80102e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80102ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80102f0:	d026      	beq.n	8010340 <__ssputs_r+0x6c>
 80102f2:	6965      	ldr	r5, [r4, #20]
 80102f4:	6909      	ldr	r1, [r1, #16]
 80102f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102fa:	eba3 0901 	sub.w	r9, r3, r1
 80102fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010302:	1c7b      	adds	r3, r7, #1
 8010304:	444b      	add	r3, r9
 8010306:	106d      	asrs	r5, r5, #1
 8010308:	429d      	cmp	r5, r3
 801030a:	bf38      	it	cc
 801030c:	461d      	movcc	r5, r3
 801030e:	0553      	lsls	r3, r2, #21
 8010310:	d527      	bpl.n	8010362 <__ssputs_r+0x8e>
 8010312:	4629      	mov	r1, r5
 8010314:	f7ff fbd8 	bl	800fac8 <_malloc_r>
 8010318:	4606      	mov	r6, r0
 801031a:	b360      	cbz	r0, 8010376 <__ssputs_r+0xa2>
 801031c:	6921      	ldr	r1, [r4, #16]
 801031e:	464a      	mov	r2, r9
 8010320:	f7fe fcf5 	bl	800ed0e <memcpy>
 8010324:	89a3      	ldrh	r3, [r4, #12]
 8010326:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801032a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801032e:	81a3      	strh	r3, [r4, #12]
 8010330:	6126      	str	r6, [r4, #16]
 8010332:	6165      	str	r5, [r4, #20]
 8010334:	444e      	add	r6, r9
 8010336:	eba5 0509 	sub.w	r5, r5, r9
 801033a:	6026      	str	r6, [r4, #0]
 801033c:	60a5      	str	r5, [r4, #8]
 801033e:	463e      	mov	r6, r7
 8010340:	42be      	cmp	r6, r7
 8010342:	d900      	bls.n	8010346 <__ssputs_r+0x72>
 8010344:	463e      	mov	r6, r7
 8010346:	6820      	ldr	r0, [r4, #0]
 8010348:	4632      	mov	r2, r6
 801034a:	4641      	mov	r1, r8
 801034c:	f000 f9c6 	bl	80106dc <memmove>
 8010350:	68a3      	ldr	r3, [r4, #8]
 8010352:	1b9b      	subs	r3, r3, r6
 8010354:	60a3      	str	r3, [r4, #8]
 8010356:	6823      	ldr	r3, [r4, #0]
 8010358:	4433      	add	r3, r6
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	2000      	movs	r0, #0
 801035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010362:	462a      	mov	r2, r5
 8010364:	f000 fa28 	bl	80107b8 <_realloc_r>
 8010368:	4606      	mov	r6, r0
 801036a:	2800      	cmp	r0, #0
 801036c:	d1e0      	bne.n	8010330 <__ssputs_r+0x5c>
 801036e:	6921      	ldr	r1, [r4, #16]
 8010370:	4650      	mov	r0, sl
 8010372:	f7ff fb35 	bl	800f9e0 <_free_r>
 8010376:	230c      	movs	r3, #12
 8010378:	f8ca 3000 	str.w	r3, [sl]
 801037c:	89a3      	ldrh	r3, [r4, #12]
 801037e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010382:	81a3      	strh	r3, [r4, #12]
 8010384:	f04f 30ff 	mov.w	r0, #4294967295
 8010388:	e7e9      	b.n	801035e <__ssputs_r+0x8a>
	...

0801038c <_svfiprintf_r>:
 801038c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010390:	4698      	mov	r8, r3
 8010392:	898b      	ldrh	r3, [r1, #12]
 8010394:	061b      	lsls	r3, r3, #24
 8010396:	b09d      	sub	sp, #116	@ 0x74
 8010398:	4607      	mov	r7, r0
 801039a:	460d      	mov	r5, r1
 801039c:	4614      	mov	r4, r2
 801039e:	d510      	bpl.n	80103c2 <_svfiprintf_r+0x36>
 80103a0:	690b      	ldr	r3, [r1, #16]
 80103a2:	b973      	cbnz	r3, 80103c2 <_svfiprintf_r+0x36>
 80103a4:	2140      	movs	r1, #64	@ 0x40
 80103a6:	f7ff fb8f 	bl	800fac8 <_malloc_r>
 80103aa:	6028      	str	r0, [r5, #0]
 80103ac:	6128      	str	r0, [r5, #16]
 80103ae:	b930      	cbnz	r0, 80103be <_svfiprintf_r+0x32>
 80103b0:	230c      	movs	r3, #12
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	f04f 30ff 	mov.w	r0, #4294967295
 80103b8:	b01d      	add	sp, #116	@ 0x74
 80103ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103be:	2340      	movs	r3, #64	@ 0x40
 80103c0:	616b      	str	r3, [r5, #20]
 80103c2:	2300      	movs	r3, #0
 80103c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103c6:	2320      	movs	r3, #32
 80103c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80103d0:	2330      	movs	r3, #48	@ 0x30
 80103d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010570 <_svfiprintf_r+0x1e4>
 80103d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103da:	f04f 0901 	mov.w	r9, #1
 80103de:	4623      	mov	r3, r4
 80103e0:	469a      	mov	sl, r3
 80103e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e6:	b10a      	cbz	r2, 80103ec <_svfiprintf_r+0x60>
 80103e8:	2a25      	cmp	r2, #37	@ 0x25
 80103ea:	d1f9      	bne.n	80103e0 <_svfiprintf_r+0x54>
 80103ec:	ebba 0b04 	subs.w	fp, sl, r4
 80103f0:	d00b      	beq.n	801040a <_svfiprintf_r+0x7e>
 80103f2:	465b      	mov	r3, fp
 80103f4:	4622      	mov	r2, r4
 80103f6:	4629      	mov	r1, r5
 80103f8:	4638      	mov	r0, r7
 80103fa:	f7ff ff6b 	bl	80102d4 <__ssputs_r>
 80103fe:	3001      	adds	r0, #1
 8010400:	f000 80a7 	beq.w	8010552 <_svfiprintf_r+0x1c6>
 8010404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010406:	445a      	add	r2, fp
 8010408:	9209      	str	r2, [sp, #36]	@ 0x24
 801040a:	f89a 3000 	ldrb.w	r3, [sl]
 801040e:	2b00      	cmp	r3, #0
 8010410:	f000 809f 	beq.w	8010552 <_svfiprintf_r+0x1c6>
 8010414:	2300      	movs	r3, #0
 8010416:	f04f 32ff 	mov.w	r2, #4294967295
 801041a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801041e:	f10a 0a01 	add.w	sl, sl, #1
 8010422:	9304      	str	r3, [sp, #16]
 8010424:	9307      	str	r3, [sp, #28]
 8010426:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801042a:	931a      	str	r3, [sp, #104]	@ 0x68
 801042c:	4654      	mov	r4, sl
 801042e:	2205      	movs	r2, #5
 8010430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010434:	484e      	ldr	r0, [pc, #312]	@ (8010570 <_svfiprintf_r+0x1e4>)
 8010436:	f7ef fef3 	bl	8000220 <memchr>
 801043a:	9a04      	ldr	r2, [sp, #16]
 801043c:	b9d8      	cbnz	r0, 8010476 <_svfiprintf_r+0xea>
 801043e:	06d0      	lsls	r0, r2, #27
 8010440:	bf44      	itt	mi
 8010442:	2320      	movmi	r3, #32
 8010444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010448:	0711      	lsls	r1, r2, #28
 801044a:	bf44      	itt	mi
 801044c:	232b      	movmi	r3, #43	@ 0x2b
 801044e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010452:	f89a 3000 	ldrb.w	r3, [sl]
 8010456:	2b2a      	cmp	r3, #42	@ 0x2a
 8010458:	d015      	beq.n	8010486 <_svfiprintf_r+0xfa>
 801045a:	9a07      	ldr	r2, [sp, #28]
 801045c:	4654      	mov	r4, sl
 801045e:	2000      	movs	r0, #0
 8010460:	f04f 0c0a 	mov.w	ip, #10
 8010464:	4621      	mov	r1, r4
 8010466:	f811 3b01 	ldrb.w	r3, [r1], #1
 801046a:	3b30      	subs	r3, #48	@ 0x30
 801046c:	2b09      	cmp	r3, #9
 801046e:	d94b      	bls.n	8010508 <_svfiprintf_r+0x17c>
 8010470:	b1b0      	cbz	r0, 80104a0 <_svfiprintf_r+0x114>
 8010472:	9207      	str	r2, [sp, #28]
 8010474:	e014      	b.n	80104a0 <_svfiprintf_r+0x114>
 8010476:	eba0 0308 	sub.w	r3, r0, r8
 801047a:	fa09 f303 	lsl.w	r3, r9, r3
 801047e:	4313      	orrs	r3, r2
 8010480:	9304      	str	r3, [sp, #16]
 8010482:	46a2      	mov	sl, r4
 8010484:	e7d2      	b.n	801042c <_svfiprintf_r+0xa0>
 8010486:	9b03      	ldr	r3, [sp, #12]
 8010488:	1d19      	adds	r1, r3, #4
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	9103      	str	r1, [sp, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	bfbb      	ittet	lt
 8010492:	425b      	neglt	r3, r3
 8010494:	f042 0202 	orrlt.w	r2, r2, #2
 8010498:	9307      	strge	r3, [sp, #28]
 801049a:	9307      	strlt	r3, [sp, #28]
 801049c:	bfb8      	it	lt
 801049e:	9204      	strlt	r2, [sp, #16]
 80104a0:	7823      	ldrb	r3, [r4, #0]
 80104a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80104a4:	d10a      	bne.n	80104bc <_svfiprintf_r+0x130>
 80104a6:	7863      	ldrb	r3, [r4, #1]
 80104a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80104aa:	d132      	bne.n	8010512 <_svfiprintf_r+0x186>
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	1d1a      	adds	r2, r3, #4
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	9203      	str	r2, [sp, #12]
 80104b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80104b8:	3402      	adds	r4, #2
 80104ba:	9305      	str	r3, [sp, #20]
 80104bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010580 <_svfiprintf_r+0x1f4>
 80104c0:	7821      	ldrb	r1, [r4, #0]
 80104c2:	2203      	movs	r2, #3
 80104c4:	4650      	mov	r0, sl
 80104c6:	f7ef feab 	bl	8000220 <memchr>
 80104ca:	b138      	cbz	r0, 80104dc <_svfiprintf_r+0x150>
 80104cc:	9b04      	ldr	r3, [sp, #16]
 80104ce:	eba0 000a 	sub.w	r0, r0, sl
 80104d2:	2240      	movs	r2, #64	@ 0x40
 80104d4:	4082      	lsls	r2, r0
 80104d6:	4313      	orrs	r3, r2
 80104d8:	3401      	adds	r4, #1
 80104da:	9304      	str	r3, [sp, #16]
 80104dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e0:	4824      	ldr	r0, [pc, #144]	@ (8010574 <_svfiprintf_r+0x1e8>)
 80104e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104e6:	2206      	movs	r2, #6
 80104e8:	f7ef fe9a 	bl	8000220 <memchr>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d036      	beq.n	801055e <_svfiprintf_r+0x1d2>
 80104f0:	4b21      	ldr	r3, [pc, #132]	@ (8010578 <_svfiprintf_r+0x1ec>)
 80104f2:	bb1b      	cbnz	r3, 801053c <_svfiprintf_r+0x1b0>
 80104f4:	9b03      	ldr	r3, [sp, #12]
 80104f6:	3307      	adds	r3, #7
 80104f8:	f023 0307 	bic.w	r3, r3, #7
 80104fc:	3308      	adds	r3, #8
 80104fe:	9303      	str	r3, [sp, #12]
 8010500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010502:	4433      	add	r3, r6
 8010504:	9309      	str	r3, [sp, #36]	@ 0x24
 8010506:	e76a      	b.n	80103de <_svfiprintf_r+0x52>
 8010508:	fb0c 3202 	mla	r2, ip, r2, r3
 801050c:	460c      	mov	r4, r1
 801050e:	2001      	movs	r0, #1
 8010510:	e7a8      	b.n	8010464 <_svfiprintf_r+0xd8>
 8010512:	2300      	movs	r3, #0
 8010514:	3401      	adds	r4, #1
 8010516:	9305      	str	r3, [sp, #20]
 8010518:	4619      	mov	r1, r3
 801051a:	f04f 0c0a 	mov.w	ip, #10
 801051e:	4620      	mov	r0, r4
 8010520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010524:	3a30      	subs	r2, #48	@ 0x30
 8010526:	2a09      	cmp	r2, #9
 8010528:	d903      	bls.n	8010532 <_svfiprintf_r+0x1a6>
 801052a:	2b00      	cmp	r3, #0
 801052c:	d0c6      	beq.n	80104bc <_svfiprintf_r+0x130>
 801052e:	9105      	str	r1, [sp, #20]
 8010530:	e7c4      	b.n	80104bc <_svfiprintf_r+0x130>
 8010532:	fb0c 2101 	mla	r1, ip, r1, r2
 8010536:	4604      	mov	r4, r0
 8010538:	2301      	movs	r3, #1
 801053a:	e7f0      	b.n	801051e <_svfiprintf_r+0x192>
 801053c:	ab03      	add	r3, sp, #12
 801053e:	9300      	str	r3, [sp, #0]
 8010540:	462a      	mov	r2, r5
 8010542:	4b0e      	ldr	r3, [pc, #56]	@ (801057c <_svfiprintf_r+0x1f0>)
 8010544:	a904      	add	r1, sp, #16
 8010546:	4638      	mov	r0, r7
 8010548:	f7fd fe28 	bl	800e19c <_printf_float>
 801054c:	1c42      	adds	r2, r0, #1
 801054e:	4606      	mov	r6, r0
 8010550:	d1d6      	bne.n	8010500 <_svfiprintf_r+0x174>
 8010552:	89ab      	ldrh	r3, [r5, #12]
 8010554:	065b      	lsls	r3, r3, #25
 8010556:	f53f af2d 	bmi.w	80103b4 <_svfiprintf_r+0x28>
 801055a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801055c:	e72c      	b.n	80103b8 <_svfiprintf_r+0x2c>
 801055e:	ab03      	add	r3, sp, #12
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	462a      	mov	r2, r5
 8010564:	4b05      	ldr	r3, [pc, #20]	@ (801057c <_svfiprintf_r+0x1f0>)
 8010566:	a904      	add	r1, sp, #16
 8010568:	4638      	mov	r0, r7
 801056a:	f7fe f8af 	bl	800e6cc <_printf_i>
 801056e:	e7ed      	b.n	801054c <_svfiprintf_r+0x1c0>
 8010570:	080112aa 	.word	0x080112aa
 8010574:	080112b4 	.word	0x080112b4
 8010578:	0800e19d 	.word	0x0800e19d
 801057c:	080102d5 	.word	0x080102d5
 8010580:	080112b0 	.word	0x080112b0

08010584 <__sflush_r>:
 8010584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	0716      	lsls	r6, r2, #28
 801058e:	4605      	mov	r5, r0
 8010590:	460c      	mov	r4, r1
 8010592:	d454      	bmi.n	801063e <__sflush_r+0xba>
 8010594:	684b      	ldr	r3, [r1, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	dc02      	bgt.n	80105a0 <__sflush_r+0x1c>
 801059a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801059c:	2b00      	cmp	r3, #0
 801059e:	dd48      	ble.n	8010632 <__sflush_r+0xae>
 80105a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105a2:	2e00      	cmp	r6, #0
 80105a4:	d045      	beq.n	8010632 <__sflush_r+0xae>
 80105a6:	2300      	movs	r3, #0
 80105a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105ac:	682f      	ldr	r7, [r5, #0]
 80105ae:	6a21      	ldr	r1, [r4, #32]
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	d030      	beq.n	8010616 <__sflush_r+0x92>
 80105b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105b6:	89a3      	ldrh	r3, [r4, #12]
 80105b8:	0759      	lsls	r1, r3, #29
 80105ba:	d505      	bpl.n	80105c8 <__sflush_r+0x44>
 80105bc:	6863      	ldr	r3, [r4, #4]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105c2:	b10b      	cbz	r3, 80105c8 <__sflush_r+0x44>
 80105c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105c6:	1ad2      	subs	r2, r2, r3
 80105c8:	2300      	movs	r3, #0
 80105ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105cc:	6a21      	ldr	r1, [r4, #32]
 80105ce:	4628      	mov	r0, r5
 80105d0:	47b0      	blx	r6
 80105d2:	1c43      	adds	r3, r0, #1
 80105d4:	89a3      	ldrh	r3, [r4, #12]
 80105d6:	d106      	bne.n	80105e6 <__sflush_r+0x62>
 80105d8:	6829      	ldr	r1, [r5, #0]
 80105da:	291d      	cmp	r1, #29
 80105dc:	d82b      	bhi.n	8010636 <__sflush_r+0xb2>
 80105de:	4a2a      	ldr	r2, [pc, #168]	@ (8010688 <__sflush_r+0x104>)
 80105e0:	40ca      	lsrs	r2, r1
 80105e2:	07d6      	lsls	r6, r2, #31
 80105e4:	d527      	bpl.n	8010636 <__sflush_r+0xb2>
 80105e6:	2200      	movs	r2, #0
 80105e8:	6062      	str	r2, [r4, #4]
 80105ea:	04d9      	lsls	r1, r3, #19
 80105ec:	6922      	ldr	r2, [r4, #16]
 80105ee:	6022      	str	r2, [r4, #0]
 80105f0:	d504      	bpl.n	80105fc <__sflush_r+0x78>
 80105f2:	1c42      	adds	r2, r0, #1
 80105f4:	d101      	bne.n	80105fa <__sflush_r+0x76>
 80105f6:	682b      	ldr	r3, [r5, #0]
 80105f8:	b903      	cbnz	r3, 80105fc <__sflush_r+0x78>
 80105fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80105fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105fe:	602f      	str	r7, [r5, #0]
 8010600:	b1b9      	cbz	r1, 8010632 <__sflush_r+0xae>
 8010602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010606:	4299      	cmp	r1, r3
 8010608:	d002      	beq.n	8010610 <__sflush_r+0x8c>
 801060a:	4628      	mov	r0, r5
 801060c:	f7ff f9e8 	bl	800f9e0 <_free_r>
 8010610:	2300      	movs	r3, #0
 8010612:	6363      	str	r3, [r4, #52]	@ 0x34
 8010614:	e00d      	b.n	8010632 <__sflush_r+0xae>
 8010616:	2301      	movs	r3, #1
 8010618:	4628      	mov	r0, r5
 801061a:	47b0      	blx	r6
 801061c:	4602      	mov	r2, r0
 801061e:	1c50      	adds	r0, r2, #1
 8010620:	d1c9      	bne.n	80105b6 <__sflush_r+0x32>
 8010622:	682b      	ldr	r3, [r5, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d0c6      	beq.n	80105b6 <__sflush_r+0x32>
 8010628:	2b1d      	cmp	r3, #29
 801062a:	d001      	beq.n	8010630 <__sflush_r+0xac>
 801062c:	2b16      	cmp	r3, #22
 801062e:	d11e      	bne.n	801066e <__sflush_r+0xea>
 8010630:	602f      	str	r7, [r5, #0]
 8010632:	2000      	movs	r0, #0
 8010634:	e022      	b.n	801067c <__sflush_r+0xf8>
 8010636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801063a:	b21b      	sxth	r3, r3
 801063c:	e01b      	b.n	8010676 <__sflush_r+0xf2>
 801063e:	690f      	ldr	r7, [r1, #16]
 8010640:	2f00      	cmp	r7, #0
 8010642:	d0f6      	beq.n	8010632 <__sflush_r+0xae>
 8010644:	0793      	lsls	r3, r2, #30
 8010646:	680e      	ldr	r6, [r1, #0]
 8010648:	bf08      	it	eq
 801064a:	694b      	ldreq	r3, [r1, #20]
 801064c:	600f      	str	r7, [r1, #0]
 801064e:	bf18      	it	ne
 8010650:	2300      	movne	r3, #0
 8010652:	eba6 0807 	sub.w	r8, r6, r7
 8010656:	608b      	str	r3, [r1, #8]
 8010658:	f1b8 0f00 	cmp.w	r8, #0
 801065c:	dde9      	ble.n	8010632 <__sflush_r+0xae>
 801065e:	6a21      	ldr	r1, [r4, #32]
 8010660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010662:	4643      	mov	r3, r8
 8010664:	463a      	mov	r2, r7
 8010666:	4628      	mov	r0, r5
 8010668:	47b0      	blx	r6
 801066a:	2800      	cmp	r0, #0
 801066c:	dc08      	bgt.n	8010680 <__sflush_r+0xfc>
 801066e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010676:	81a3      	strh	r3, [r4, #12]
 8010678:	f04f 30ff 	mov.w	r0, #4294967295
 801067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010680:	4407      	add	r7, r0
 8010682:	eba8 0800 	sub.w	r8, r8, r0
 8010686:	e7e7      	b.n	8010658 <__sflush_r+0xd4>
 8010688:	20400001 	.word	0x20400001

0801068c <_fflush_r>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	690b      	ldr	r3, [r1, #16]
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	b913      	cbnz	r3, 801069c <_fflush_r+0x10>
 8010696:	2500      	movs	r5, #0
 8010698:	4628      	mov	r0, r5
 801069a:	bd38      	pop	{r3, r4, r5, pc}
 801069c:	b118      	cbz	r0, 80106a6 <_fflush_r+0x1a>
 801069e:	6a03      	ldr	r3, [r0, #32]
 80106a0:	b90b      	cbnz	r3, 80106a6 <_fflush_r+0x1a>
 80106a2:	f7fe f9bd 	bl	800ea20 <__sinit>
 80106a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d0f3      	beq.n	8010696 <_fflush_r+0xa>
 80106ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106b0:	07d0      	lsls	r0, r2, #31
 80106b2:	d404      	bmi.n	80106be <_fflush_r+0x32>
 80106b4:	0599      	lsls	r1, r3, #22
 80106b6:	d402      	bmi.n	80106be <_fflush_r+0x32>
 80106b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106ba:	f7fe fb26 	bl	800ed0a <__retarget_lock_acquire_recursive>
 80106be:	4628      	mov	r0, r5
 80106c0:	4621      	mov	r1, r4
 80106c2:	f7ff ff5f 	bl	8010584 <__sflush_r>
 80106c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106c8:	07da      	lsls	r2, r3, #31
 80106ca:	4605      	mov	r5, r0
 80106cc:	d4e4      	bmi.n	8010698 <_fflush_r+0xc>
 80106ce:	89a3      	ldrh	r3, [r4, #12]
 80106d0:	059b      	lsls	r3, r3, #22
 80106d2:	d4e1      	bmi.n	8010698 <_fflush_r+0xc>
 80106d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106d6:	f7fe fb19 	bl	800ed0c <__retarget_lock_release_recursive>
 80106da:	e7dd      	b.n	8010698 <_fflush_r+0xc>

080106dc <memmove>:
 80106dc:	4288      	cmp	r0, r1
 80106de:	b510      	push	{r4, lr}
 80106e0:	eb01 0402 	add.w	r4, r1, r2
 80106e4:	d902      	bls.n	80106ec <memmove+0x10>
 80106e6:	4284      	cmp	r4, r0
 80106e8:	4623      	mov	r3, r4
 80106ea:	d807      	bhi.n	80106fc <memmove+0x20>
 80106ec:	1e43      	subs	r3, r0, #1
 80106ee:	42a1      	cmp	r1, r4
 80106f0:	d008      	beq.n	8010704 <memmove+0x28>
 80106f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106fa:	e7f8      	b.n	80106ee <memmove+0x12>
 80106fc:	4402      	add	r2, r0
 80106fe:	4601      	mov	r1, r0
 8010700:	428a      	cmp	r2, r1
 8010702:	d100      	bne.n	8010706 <memmove+0x2a>
 8010704:	bd10      	pop	{r4, pc}
 8010706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801070a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801070e:	e7f7      	b.n	8010700 <memmove+0x24>

08010710 <_sbrk_r>:
 8010710:	b538      	push	{r3, r4, r5, lr}
 8010712:	4d06      	ldr	r5, [pc, #24]	@ (801072c <_sbrk_r+0x1c>)
 8010714:	2300      	movs	r3, #0
 8010716:	4604      	mov	r4, r0
 8010718:	4608      	mov	r0, r1
 801071a:	602b      	str	r3, [r5, #0]
 801071c:	f7f1 fbb8 	bl	8001e90 <_sbrk>
 8010720:	1c43      	adds	r3, r0, #1
 8010722:	d102      	bne.n	801072a <_sbrk_r+0x1a>
 8010724:	682b      	ldr	r3, [r5, #0]
 8010726:	b103      	cbz	r3, 801072a <_sbrk_r+0x1a>
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	2000a6b8 	.word	0x2000a6b8

08010730 <__assert_func>:
 8010730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010732:	4614      	mov	r4, r2
 8010734:	461a      	mov	r2, r3
 8010736:	4b09      	ldr	r3, [pc, #36]	@ (801075c <__assert_func+0x2c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4605      	mov	r5, r0
 801073c:	68d8      	ldr	r0, [r3, #12]
 801073e:	b14c      	cbz	r4, 8010754 <__assert_func+0x24>
 8010740:	4b07      	ldr	r3, [pc, #28]	@ (8010760 <__assert_func+0x30>)
 8010742:	9100      	str	r1, [sp, #0]
 8010744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010748:	4906      	ldr	r1, [pc, #24]	@ (8010764 <__assert_func+0x34>)
 801074a:	462b      	mov	r3, r5
 801074c:	f000 f870 	bl	8010830 <fiprintf>
 8010750:	f000 f880 	bl	8010854 <abort>
 8010754:	4b04      	ldr	r3, [pc, #16]	@ (8010768 <__assert_func+0x38>)
 8010756:	461c      	mov	r4, r3
 8010758:	e7f3      	b.n	8010742 <__assert_func+0x12>
 801075a:	bf00      	nop
 801075c:	20000194 	.word	0x20000194
 8010760:	080112c5 	.word	0x080112c5
 8010764:	080112d2 	.word	0x080112d2
 8010768:	08011300 	.word	0x08011300

0801076c <_calloc_r>:
 801076c:	b570      	push	{r4, r5, r6, lr}
 801076e:	fba1 5402 	umull	r5, r4, r1, r2
 8010772:	b934      	cbnz	r4, 8010782 <_calloc_r+0x16>
 8010774:	4629      	mov	r1, r5
 8010776:	f7ff f9a7 	bl	800fac8 <_malloc_r>
 801077a:	4606      	mov	r6, r0
 801077c:	b928      	cbnz	r0, 801078a <_calloc_r+0x1e>
 801077e:	4630      	mov	r0, r6
 8010780:	bd70      	pop	{r4, r5, r6, pc}
 8010782:	220c      	movs	r2, #12
 8010784:	6002      	str	r2, [r0, #0]
 8010786:	2600      	movs	r6, #0
 8010788:	e7f9      	b.n	801077e <_calloc_r+0x12>
 801078a:	462a      	mov	r2, r5
 801078c:	4621      	mov	r1, r4
 801078e:	f7fe f9e1 	bl	800eb54 <memset>
 8010792:	e7f4      	b.n	801077e <_calloc_r+0x12>

08010794 <__ascii_mbtowc>:
 8010794:	b082      	sub	sp, #8
 8010796:	b901      	cbnz	r1, 801079a <__ascii_mbtowc+0x6>
 8010798:	a901      	add	r1, sp, #4
 801079a:	b142      	cbz	r2, 80107ae <__ascii_mbtowc+0x1a>
 801079c:	b14b      	cbz	r3, 80107b2 <__ascii_mbtowc+0x1e>
 801079e:	7813      	ldrb	r3, [r2, #0]
 80107a0:	600b      	str	r3, [r1, #0]
 80107a2:	7812      	ldrb	r2, [r2, #0]
 80107a4:	1e10      	subs	r0, r2, #0
 80107a6:	bf18      	it	ne
 80107a8:	2001      	movne	r0, #1
 80107aa:	b002      	add	sp, #8
 80107ac:	4770      	bx	lr
 80107ae:	4610      	mov	r0, r2
 80107b0:	e7fb      	b.n	80107aa <__ascii_mbtowc+0x16>
 80107b2:	f06f 0001 	mvn.w	r0, #1
 80107b6:	e7f8      	b.n	80107aa <__ascii_mbtowc+0x16>

080107b8 <_realloc_r>:
 80107b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107bc:	4607      	mov	r7, r0
 80107be:	4614      	mov	r4, r2
 80107c0:	460d      	mov	r5, r1
 80107c2:	b921      	cbnz	r1, 80107ce <_realloc_r+0x16>
 80107c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107c8:	4611      	mov	r1, r2
 80107ca:	f7ff b97d 	b.w	800fac8 <_malloc_r>
 80107ce:	b92a      	cbnz	r2, 80107dc <_realloc_r+0x24>
 80107d0:	f7ff f906 	bl	800f9e0 <_free_r>
 80107d4:	4625      	mov	r5, r4
 80107d6:	4628      	mov	r0, r5
 80107d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107dc:	f000 f841 	bl	8010862 <_malloc_usable_size_r>
 80107e0:	4284      	cmp	r4, r0
 80107e2:	4606      	mov	r6, r0
 80107e4:	d802      	bhi.n	80107ec <_realloc_r+0x34>
 80107e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80107ea:	d8f4      	bhi.n	80107d6 <_realloc_r+0x1e>
 80107ec:	4621      	mov	r1, r4
 80107ee:	4638      	mov	r0, r7
 80107f0:	f7ff f96a 	bl	800fac8 <_malloc_r>
 80107f4:	4680      	mov	r8, r0
 80107f6:	b908      	cbnz	r0, 80107fc <_realloc_r+0x44>
 80107f8:	4645      	mov	r5, r8
 80107fa:	e7ec      	b.n	80107d6 <_realloc_r+0x1e>
 80107fc:	42b4      	cmp	r4, r6
 80107fe:	4622      	mov	r2, r4
 8010800:	4629      	mov	r1, r5
 8010802:	bf28      	it	cs
 8010804:	4632      	movcs	r2, r6
 8010806:	f7fe fa82 	bl	800ed0e <memcpy>
 801080a:	4629      	mov	r1, r5
 801080c:	4638      	mov	r0, r7
 801080e:	f7ff f8e7 	bl	800f9e0 <_free_r>
 8010812:	e7f1      	b.n	80107f8 <_realloc_r+0x40>

08010814 <__ascii_wctomb>:
 8010814:	4603      	mov	r3, r0
 8010816:	4608      	mov	r0, r1
 8010818:	b141      	cbz	r1, 801082c <__ascii_wctomb+0x18>
 801081a:	2aff      	cmp	r2, #255	@ 0xff
 801081c:	d904      	bls.n	8010828 <__ascii_wctomb+0x14>
 801081e:	228a      	movs	r2, #138	@ 0x8a
 8010820:	601a      	str	r2, [r3, #0]
 8010822:	f04f 30ff 	mov.w	r0, #4294967295
 8010826:	4770      	bx	lr
 8010828:	700a      	strb	r2, [r1, #0]
 801082a:	2001      	movs	r0, #1
 801082c:	4770      	bx	lr
	...

08010830 <fiprintf>:
 8010830:	b40e      	push	{r1, r2, r3}
 8010832:	b503      	push	{r0, r1, lr}
 8010834:	4601      	mov	r1, r0
 8010836:	ab03      	add	r3, sp, #12
 8010838:	4805      	ldr	r0, [pc, #20]	@ (8010850 <fiprintf+0x20>)
 801083a:	f853 2b04 	ldr.w	r2, [r3], #4
 801083e:	6800      	ldr	r0, [r0, #0]
 8010840:	9301      	str	r3, [sp, #4]
 8010842:	f000 f83f 	bl	80108c4 <_vfiprintf_r>
 8010846:	b002      	add	sp, #8
 8010848:	f85d eb04 	ldr.w	lr, [sp], #4
 801084c:	b003      	add	sp, #12
 801084e:	4770      	bx	lr
 8010850:	20000194 	.word	0x20000194

08010854 <abort>:
 8010854:	b508      	push	{r3, lr}
 8010856:	2006      	movs	r0, #6
 8010858:	f000 fa08 	bl	8010c6c <raise>
 801085c:	2001      	movs	r0, #1
 801085e:	f7f1 fa9f 	bl	8001da0 <_exit>

08010862 <_malloc_usable_size_r>:
 8010862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010866:	1f18      	subs	r0, r3, #4
 8010868:	2b00      	cmp	r3, #0
 801086a:	bfbc      	itt	lt
 801086c:	580b      	ldrlt	r3, [r1, r0]
 801086e:	18c0      	addlt	r0, r0, r3
 8010870:	4770      	bx	lr

08010872 <__sfputc_r>:
 8010872:	6893      	ldr	r3, [r2, #8]
 8010874:	3b01      	subs	r3, #1
 8010876:	2b00      	cmp	r3, #0
 8010878:	b410      	push	{r4}
 801087a:	6093      	str	r3, [r2, #8]
 801087c:	da08      	bge.n	8010890 <__sfputc_r+0x1e>
 801087e:	6994      	ldr	r4, [r2, #24]
 8010880:	42a3      	cmp	r3, r4
 8010882:	db01      	blt.n	8010888 <__sfputc_r+0x16>
 8010884:	290a      	cmp	r1, #10
 8010886:	d103      	bne.n	8010890 <__sfputc_r+0x1e>
 8010888:	f85d 4b04 	ldr.w	r4, [sp], #4
 801088c:	f000 b932 	b.w	8010af4 <__swbuf_r>
 8010890:	6813      	ldr	r3, [r2, #0]
 8010892:	1c58      	adds	r0, r3, #1
 8010894:	6010      	str	r0, [r2, #0]
 8010896:	7019      	strb	r1, [r3, #0]
 8010898:	4608      	mov	r0, r1
 801089a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801089e:	4770      	bx	lr

080108a0 <__sfputs_r>:
 80108a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108a2:	4606      	mov	r6, r0
 80108a4:	460f      	mov	r7, r1
 80108a6:	4614      	mov	r4, r2
 80108a8:	18d5      	adds	r5, r2, r3
 80108aa:	42ac      	cmp	r4, r5
 80108ac:	d101      	bne.n	80108b2 <__sfputs_r+0x12>
 80108ae:	2000      	movs	r0, #0
 80108b0:	e007      	b.n	80108c2 <__sfputs_r+0x22>
 80108b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108b6:	463a      	mov	r2, r7
 80108b8:	4630      	mov	r0, r6
 80108ba:	f7ff ffda 	bl	8010872 <__sfputc_r>
 80108be:	1c43      	adds	r3, r0, #1
 80108c0:	d1f3      	bne.n	80108aa <__sfputs_r+0xa>
 80108c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108c4 <_vfiprintf_r>:
 80108c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c8:	460d      	mov	r5, r1
 80108ca:	b09d      	sub	sp, #116	@ 0x74
 80108cc:	4614      	mov	r4, r2
 80108ce:	4698      	mov	r8, r3
 80108d0:	4606      	mov	r6, r0
 80108d2:	b118      	cbz	r0, 80108dc <_vfiprintf_r+0x18>
 80108d4:	6a03      	ldr	r3, [r0, #32]
 80108d6:	b90b      	cbnz	r3, 80108dc <_vfiprintf_r+0x18>
 80108d8:	f7fe f8a2 	bl	800ea20 <__sinit>
 80108dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108de:	07d9      	lsls	r1, r3, #31
 80108e0:	d405      	bmi.n	80108ee <_vfiprintf_r+0x2a>
 80108e2:	89ab      	ldrh	r3, [r5, #12]
 80108e4:	059a      	lsls	r2, r3, #22
 80108e6:	d402      	bmi.n	80108ee <_vfiprintf_r+0x2a>
 80108e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108ea:	f7fe fa0e 	bl	800ed0a <__retarget_lock_acquire_recursive>
 80108ee:	89ab      	ldrh	r3, [r5, #12]
 80108f0:	071b      	lsls	r3, r3, #28
 80108f2:	d501      	bpl.n	80108f8 <_vfiprintf_r+0x34>
 80108f4:	692b      	ldr	r3, [r5, #16]
 80108f6:	b99b      	cbnz	r3, 8010920 <_vfiprintf_r+0x5c>
 80108f8:	4629      	mov	r1, r5
 80108fa:	4630      	mov	r0, r6
 80108fc:	f000 f938 	bl	8010b70 <__swsetup_r>
 8010900:	b170      	cbz	r0, 8010920 <_vfiprintf_r+0x5c>
 8010902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010904:	07dc      	lsls	r4, r3, #31
 8010906:	d504      	bpl.n	8010912 <_vfiprintf_r+0x4e>
 8010908:	f04f 30ff 	mov.w	r0, #4294967295
 801090c:	b01d      	add	sp, #116	@ 0x74
 801090e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010912:	89ab      	ldrh	r3, [r5, #12]
 8010914:	0598      	lsls	r0, r3, #22
 8010916:	d4f7      	bmi.n	8010908 <_vfiprintf_r+0x44>
 8010918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801091a:	f7fe f9f7 	bl	800ed0c <__retarget_lock_release_recursive>
 801091e:	e7f3      	b.n	8010908 <_vfiprintf_r+0x44>
 8010920:	2300      	movs	r3, #0
 8010922:	9309      	str	r3, [sp, #36]	@ 0x24
 8010924:	2320      	movs	r3, #32
 8010926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801092a:	f8cd 800c 	str.w	r8, [sp, #12]
 801092e:	2330      	movs	r3, #48	@ 0x30
 8010930:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ae0 <_vfiprintf_r+0x21c>
 8010934:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010938:	f04f 0901 	mov.w	r9, #1
 801093c:	4623      	mov	r3, r4
 801093e:	469a      	mov	sl, r3
 8010940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010944:	b10a      	cbz	r2, 801094a <_vfiprintf_r+0x86>
 8010946:	2a25      	cmp	r2, #37	@ 0x25
 8010948:	d1f9      	bne.n	801093e <_vfiprintf_r+0x7a>
 801094a:	ebba 0b04 	subs.w	fp, sl, r4
 801094e:	d00b      	beq.n	8010968 <_vfiprintf_r+0xa4>
 8010950:	465b      	mov	r3, fp
 8010952:	4622      	mov	r2, r4
 8010954:	4629      	mov	r1, r5
 8010956:	4630      	mov	r0, r6
 8010958:	f7ff ffa2 	bl	80108a0 <__sfputs_r>
 801095c:	3001      	adds	r0, #1
 801095e:	f000 80a7 	beq.w	8010ab0 <_vfiprintf_r+0x1ec>
 8010962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010964:	445a      	add	r2, fp
 8010966:	9209      	str	r2, [sp, #36]	@ 0x24
 8010968:	f89a 3000 	ldrb.w	r3, [sl]
 801096c:	2b00      	cmp	r3, #0
 801096e:	f000 809f 	beq.w	8010ab0 <_vfiprintf_r+0x1ec>
 8010972:	2300      	movs	r3, #0
 8010974:	f04f 32ff 	mov.w	r2, #4294967295
 8010978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801097c:	f10a 0a01 	add.w	sl, sl, #1
 8010980:	9304      	str	r3, [sp, #16]
 8010982:	9307      	str	r3, [sp, #28]
 8010984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010988:	931a      	str	r3, [sp, #104]	@ 0x68
 801098a:	4654      	mov	r4, sl
 801098c:	2205      	movs	r2, #5
 801098e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010992:	4853      	ldr	r0, [pc, #332]	@ (8010ae0 <_vfiprintf_r+0x21c>)
 8010994:	f7ef fc44 	bl	8000220 <memchr>
 8010998:	9a04      	ldr	r2, [sp, #16]
 801099a:	b9d8      	cbnz	r0, 80109d4 <_vfiprintf_r+0x110>
 801099c:	06d1      	lsls	r1, r2, #27
 801099e:	bf44      	itt	mi
 80109a0:	2320      	movmi	r3, #32
 80109a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109a6:	0713      	lsls	r3, r2, #28
 80109a8:	bf44      	itt	mi
 80109aa:	232b      	movmi	r3, #43	@ 0x2b
 80109ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109b0:	f89a 3000 	ldrb.w	r3, [sl]
 80109b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80109b6:	d015      	beq.n	80109e4 <_vfiprintf_r+0x120>
 80109b8:	9a07      	ldr	r2, [sp, #28]
 80109ba:	4654      	mov	r4, sl
 80109bc:	2000      	movs	r0, #0
 80109be:	f04f 0c0a 	mov.w	ip, #10
 80109c2:	4621      	mov	r1, r4
 80109c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109c8:	3b30      	subs	r3, #48	@ 0x30
 80109ca:	2b09      	cmp	r3, #9
 80109cc:	d94b      	bls.n	8010a66 <_vfiprintf_r+0x1a2>
 80109ce:	b1b0      	cbz	r0, 80109fe <_vfiprintf_r+0x13a>
 80109d0:	9207      	str	r2, [sp, #28]
 80109d2:	e014      	b.n	80109fe <_vfiprintf_r+0x13a>
 80109d4:	eba0 0308 	sub.w	r3, r0, r8
 80109d8:	fa09 f303 	lsl.w	r3, r9, r3
 80109dc:	4313      	orrs	r3, r2
 80109de:	9304      	str	r3, [sp, #16]
 80109e0:	46a2      	mov	sl, r4
 80109e2:	e7d2      	b.n	801098a <_vfiprintf_r+0xc6>
 80109e4:	9b03      	ldr	r3, [sp, #12]
 80109e6:	1d19      	adds	r1, r3, #4
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	9103      	str	r1, [sp, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	bfbb      	ittet	lt
 80109f0:	425b      	neglt	r3, r3
 80109f2:	f042 0202 	orrlt.w	r2, r2, #2
 80109f6:	9307      	strge	r3, [sp, #28]
 80109f8:	9307      	strlt	r3, [sp, #28]
 80109fa:	bfb8      	it	lt
 80109fc:	9204      	strlt	r2, [sp, #16]
 80109fe:	7823      	ldrb	r3, [r4, #0]
 8010a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a02:	d10a      	bne.n	8010a1a <_vfiprintf_r+0x156>
 8010a04:	7863      	ldrb	r3, [r4, #1]
 8010a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a08:	d132      	bne.n	8010a70 <_vfiprintf_r+0x1ac>
 8010a0a:	9b03      	ldr	r3, [sp, #12]
 8010a0c:	1d1a      	adds	r2, r3, #4
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	9203      	str	r2, [sp, #12]
 8010a12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a16:	3402      	adds	r4, #2
 8010a18:	9305      	str	r3, [sp, #20]
 8010a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010af0 <_vfiprintf_r+0x22c>
 8010a1e:	7821      	ldrb	r1, [r4, #0]
 8010a20:	2203      	movs	r2, #3
 8010a22:	4650      	mov	r0, sl
 8010a24:	f7ef fbfc 	bl	8000220 <memchr>
 8010a28:	b138      	cbz	r0, 8010a3a <_vfiprintf_r+0x176>
 8010a2a:	9b04      	ldr	r3, [sp, #16]
 8010a2c:	eba0 000a 	sub.w	r0, r0, sl
 8010a30:	2240      	movs	r2, #64	@ 0x40
 8010a32:	4082      	lsls	r2, r0
 8010a34:	4313      	orrs	r3, r2
 8010a36:	3401      	adds	r4, #1
 8010a38:	9304      	str	r3, [sp, #16]
 8010a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a3e:	4829      	ldr	r0, [pc, #164]	@ (8010ae4 <_vfiprintf_r+0x220>)
 8010a40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a44:	2206      	movs	r2, #6
 8010a46:	f7ef fbeb 	bl	8000220 <memchr>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d03f      	beq.n	8010ace <_vfiprintf_r+0x20a>
 8010a4e:	4b26      	ldr	r3, [pc, #152]	@ (8010ae8 <_vfiprintf_r+0x224>)
 8010a50:	bb1b      	cbnz	r3, 8010a9a <_vfiprintf_r+0x1d6>
 8010a52:	9b03      	ldr	r3, [sp, #12]
 8010a54:	3307      	adds	r3, #7
 8010a56:	f023 0307 	bic.w	r3, r3, #7
 8010a5a:	3308      	adds	r3, #8
 8010a5c:	9303      	str	r3, [sp, #12]
 8010a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a60:	443b      	add	r3, r7
 8010a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a64:	e76a      	b.n	801093c <_vfiprintf_r+0x78>
 8010a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a6a:	460c      	mov	r4, r1
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	e7a8      	b.n	80109c2 <_vfiprintf_r+0xfe>
 8010a70:	2300      	movs	r3, #0
 8010a72:	3401      	adds	r4, #1
 8010a74:	9305      	str	r3, [sp, #20]
 8010a76:	4619      	mov	r1, r3
 8010a78:	f04f 0c0a 	mov.w	ip, #10
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a82:	3a30      	subs	r2, #48	@ 0x30
 8010a84:	2a09      	cmp	r2, #9
 8010a86:	d903      	bls.n	8010a90 <_vfiprintf_r+0x1cc>
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d0c6      	beq.n	8010a1a <_vfiprintf_r+0x156>
 8010a8c:	9105      	str	r1, [sp, #20]
 8010a8e:	e7c4      	b.n	8010a1a <_vfiprintf_r+0x156>
 8010a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a94:	4604      	mov	r4, r0
 8010a96:	2301      	movs	r3, #1
 8010a98:	e7f0      	b.n	8010a7c <_vfiprintf_r+0x1b8>
 8010a9a:	ab03      	add	r3, sp, #12
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	462a      	mov	r2, r5
 8010aa0:	4b12      	ldr	r3, [pc, #72]	@ (8010aec <_vfiprintf_r+0x228>)
 8010aa2:	a904      	add	r1, sp, #16
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f7fd fb79 	bl	800e19c <_printf_float>
 8010aaa:	4607      	mov	r7, r0
 8010aac:	1c78      	adds	r0, r7, #1
 8010aae:	d1d6      	bne.n	8010a5e <_vfiprintf_r+0x19a>
 8010ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ab2:	07d9      	lsls	r1, r3, #31
 8010ab4:	d405      	bmi.n	8010ac2 <_vfiprintf_r+0x1fe>
 8010ab6:	89ab      	ldrh	r3, [r5, #12]
 8010ab8:	059a      	lsls	r2, r3, #22
 8010aba:	d402      	bmi.n	8010ac2 <_vfiprintf_r+0x1fe>
 8010abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010abe:	f7fe f925 	bl	800ed0c <__retarget_lock_release_recursive>
 8010ac2:	89ab      	ldrh	r3, [r5, #12]
 8010ac4:	065b      	lsls	r3, r3, #25
 8010ac6:	f53f af1f 	bmi.w	8010908 <_vfiprintf_r+0x44>
 8010aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010acc:	e71e      	b.n	801090c <_vfiprintf_r+0x48>
 8010ace:	ab03      	add	r3, sp, #12
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	462a      	mov	r2, r5
 8010ad4:	4b05      	ldr	r3, [pc, #20]	@ (8010aec <_vfiprintf_r+0x228>)
 8010ad6:	a904      	add	r1, sp, #16
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f7fd fdf7 	bl	800e6cc <_printf_i>
 8010ade:	e7e4      	b.n	8010aaa <_vfiprintf_r+0x1e6>
 8010ae0:	080112aa 	.word	0x080112aa
 8010ae4:	080112b4 	.word	0x080112b4
 8010ae8:	0800e19d 	.word	0x0800e19d
 8010aec:	080108a1 	.word	0x080108a1
 8010af0:	080112b0 	.word	0x080112b0

08010af4 <__swbuf_r>:
 8010af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010af6:	460e      	mov	r6, r1
 8010af8:	4614      	mov	r4, r2
 8010afa:	4605      	mov	r5, r0
 8010afc:	b118      	cbz	r0, 8010b06 <__swbuf_r+0x12>
 8010afe:	6a03      	ldr	r3, [r0, #32]
 8010b00:	b90b      	cbnz	r3, 8010b06 <__swbuf_r+0x12>
 8010b02:	f7fd ff8d 	bl	800ea20 <__sinit>
 8010b06:	69a3      	ldr	r3, [r4, #24]
 8010b08:	60a3      	str	r3, [r4, #8]
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	071a      	lsls	r2, r3, #28
 8010b0e:	d501      	bpl.n	8010b14 <__swbuf_r+0x20>
 8010b10:	6923      	ldr	r3, [r4, #16]
 8010b12:	b943      	cbnz	r3, 8010b26 <__swbuf_r+0x32>
 8010b14:	4621      	mov	r1, r4
 8010b16:	4628      	mov	r0, r5
 8010b18:	f000 f82a 	bl	8010b70 <__swsetup_r>
 8010b1c:	b118      	cbz	r0, 8010b26 <__swbuf_r+0x32>
 8010b1e:	f04f 37ff 	mov.w	r7, #4294967295
 8010b22:	4638      	mov	r0, r7
 8010b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	6922      	ldr	r2, [r4, #16]
 8010b2a:	1a98      	subs	r0, r3, r2
 8010b2c:	6963      	ldr	r3, [r4, #20]
 8010b2e:	b2f6      	uxtb	r6, r6
 8010b30:	4283      	cmp	r3, r0
 8010b32:	4637      	mov	r7, r6
 8010b34:	dc05      	bgt.n	8010b42 <__swbuf_r+0x4e>
 8010b36:	4621      	mov	r1, r4
 8010b38:	4628      	mov	r0, r5
 8010b3a:	f7ff fda7 	bl	801068c <_fflush_r>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	d1ed      	bne.n	8010b1e <__swbuf_r+0x2a>
 8010b42:	68a3      	ldr	r3, [r4, #8]
 8010b44:	3b01      	subs	r3, #1
 8010b46:	60a3      	str	r3, [r4, #8]
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	1c5a      	adds	r2, r3, #1
 8010b4c:	6022      	str	r2, [r4, #0]
 8010b4e:	701e      	strb	r6, [r3, #0]
 8010b50:	6962      	ldr	r2, [r4, #20]
 8010b52:	1c43      	adds	r3, r0, #1
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d004      	beq.n	8010b62 <__swbuf_r+0x6e>
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	07db      	lsls	r3, r3, #31
 8010b5c:	d5e1      	bpl.n	8010b22 <__swbuf_r+0x2e>
 8010b5e:	2e0a      	cmp	r6, #10
 8010b60:	d1df      	bne.n	8010b22 <__swbuf_r+0x2e>
 8010b62:	4621      	mov	r1, r4
 8010b64:	4628      	mov	r0, r5
 8010b66:	f7ff fd91 	bl	801068c <_fflush_r>
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	d0d9      	beq.n	8010b22 <__swbuf_r+0x2e>
 8010b6e:	e7d6      	b.n	8010b1e <__swbuf_r+0x2a>

08010b70 <__swsetup_r>:
 8010b70:	b538      	push	{r3, r4, r5, lr}
 8010b72:	4b29      	ldr	r3, [pc, #164]	@ (8010c18 <__swsetup_r+0xa8>)
 8010b74:	4605      	mov	r5, r0
 8010b76:	6818      	ldr	r0, [r3, #0]
 8010b78:	460c      	mov	r4, r1
 8010b7a:	b118      	cbz	r0, 8010b84 <__swsetup_r+0x14>
 8010b7c:	6a03      	ldr	r3, [r0, #32]
 8010b7e:	b90b      	cbnz	r3, 8010b84 <__swsetup_r+0x14>
 8010b80:	f7fd ff4e 	bl	800ea20 <__sinit>
 8010b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b88:	0719      	lsls	r1, r3, #28
 8010b8a:	d422      	bmi.n	8010bd2 <__swsetup_r+0x62>
 8010b8c:	06da      	lsls	r2, r3, #27
 8010b8e:	d407      	bmi.n	8010ba0 <__swsetup_r+0x30>
 8010b90:	2209      	movs	r2, #9
 8010b92:	602a      	str	r2, [r5, #0]
 8010b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b98:	81a3      	strh	r3, [r4, #12]
 8010b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9e:	e033      	b.n	8010c08 <__swsetup_r+0x98>
 8010ba0:	0758      	lsls	r0, r3, #29
 8010ba2:	d512      	bpl.n	8010bca <__swsetup_r+0x5a>
 8010ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ba6:	b141      	cbz	r1, 8010bba <__swsetup_r+0x4a>
 8010ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bac:	4299      	cmp	r1, r3
 8010bae:	d002      	beq.n	8010bb6 <__swsetup_r+0x46>
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	f7fe ff15 	bl	800f9e0 <_free_r>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010bc0:	81a3      	strh	r3, [r4, #12]
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	6063      	str	r3, [r4, #4]
 8010bc6:	6923      	ldr	r3, [r4, #16]
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	f043 0308 	orr.w	r3, r3, #8
 8010bd0:	81a3      	strh	r3, [r4, #12]
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	b94b      	cbnz	r3, 8010bea <__swsetup_r+0x7a>
 8010bd6:	89a3      	ldrh	r3, [r4, #12]
 8010bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010be0:	d003      	beq.n	8010bea <__swsetup_r+0x7a>
 8010be2:	4621      	mov	r1, r4
 8010be4:	4628      	mov	r0, r5
 8010be6:	f000 f883 	bl	8010cf0 <__smakebuf_r>
 8010bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bee:	f013 0201 	ands.w	r2, r3, #1
 8010bf2:	d00a      	beq.n	8010c0a <__swsetup_r+0x9a>
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	60a2      	str	r2, [r4, #8]
 8010bf8:	6962      	ldr	r2, [r4, #20]
 8010bfa:	4252      	negs	r2, r2
 8010bfc:	61a2      	str	r2, [r4, #24]
 8010bfe:	6922      	ldr	r2, [r4, #16]
 8010c00:	b942      	cbnz	r2, 8010c14 <__swsetup_r+0xa4>
 8010c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c06:	d1c5      	bne.n	8010b94 <__swsetup_r+0x24>
 8010c08:	bd38      	pop	{r3, r4, r5, pc}
 8010c0a:	0799      	lsls	r1, r3, #30
 8010c0c:	bf58      	it	pl
 8010c0e:	6962      	ldrpl	r2, [r4, #20]
 8010c10:	60a2      	str	r2, [r4, #8]
 8010c12:	e7f4      	b.n	8010bfe <__swsetup_r+0x8e>
 8010c14:	2000      	movs	r0, #0
 8010c16:	e7f7      	b.n	8010c08 <__swsetup_r+0x98>
 8010c18:	20000194 	.word	0x20000194

08010c1c <_raise_r>:
 8010c1c:	291f      	cmp	r1, #31
 8010c1e:	b538      	push	{r3, r4, r5, lr}
 8010c20:	4605      	mov	r5, r0
 8010c22:	460c      	mov	r4, r1
 8010c24:	d904      	bls.n	8010c30 <_raise_r+0x14>
 8010c26:	2316      	movs	r3, #22
 8010c28:	6003      	str	r3, [r0, #0]
 8010c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2e:	bd38      	pop	{r3, r4, r5, pc}
 8010c30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c32:	b112      	cbz	r2, 8010c3a <_raise_r+0x1e>
 8010c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c38:	b94b      	cbnz	r3, 8010c4e <_raise_r+0x32>
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f000 f830 	bl	8010ca0 <_getpid_r>
 8010c40:	4622      	mov	r2, r4
 8010c42:	4601      	mov	r1, r0
 8010c44:	4628      	mov	r0, r5
 8010c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c4a:	f000 b817 	b.w	8010c7c <_kill_r>
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d00a      	beq.n	8010c68 <_raise_r+0x4c>
 8010c52:	1c59      	adds	r1, r3, #1
 8010c54:	d103      	bne.n	8010c5e <_raise_r+0x42>
 8010c56:	2316      	movs	r3, #22
 8010c58:	6003      	str	r3, [r0, #0]
 8010c5a:	2001      	movs	r0, #1
 8010c5c:	e7e7      	b.n	8010c2e <_raise_r+0x12>
 8010c5e:	2100      	movs	r1, #0
 8010c60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c64:	4620      	mov	r0, r4
 8010c66:	4798      	blx	r3
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e7e0      	b.n	8010c2e <_raise_r+0x12>

08010c6c <raise>:
 8010c6c:	4b02      	ldr	r3, [pc, #8]	@ (8010c78 <raise+0xc>)
 8010c6e:	4601      	mov	r1, r0
 8010c70:	6818      	ldr	r0, [r3, #0]
 8010c72:	f7ff bfd3 	b.w	8010c1c <_raise_r>
 8010c76:	bf00      	nop
 8010c78:	20000194 	.word	0x20000194

08010c7c <_kill_r>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	4d07      	ldr	r5, [pc, #28]	@ (8010c9c <_kill_r+0x20>)
 8010c80:	2300      	movs	r3, #0
 8010c82:	4604      	mov	r4, r0
 8010c84:	4608      	mov	r0, r1
 8010c86:	4611      	mov	r1, r2
 8010c88:	602b      	str	r3, [r5, #0]
 8010c8a:	f7f1 f879 	bl	8001d80 <_kill>
 8010c8e:	1c43      	adds	r3, r0, #1
 8010c90:	d102      	bne.n	8010c98 <_kill_r+0x1c>
 8010c92:	682b      	ldr	r3, [r5, #0]
 8010c94:	b103      	cbz	r3, 8010c98 <_kill_r+0x1c>
 8010c96:	6023      	str	r3, [r4, #0]
 8010c98:	bd38      	pop	{r3, r4, r5, pc}
 8010c9a:	bf00      	nop
 8010c9c:	2000a6b8 	.word	0x2000a6b8

08010ca0 <_getpid_r>:
 8010ca0:	f7f1 b866 	b.w	8001d70 <_getpid>

08010ca4 <__swhatbuf_r>:
 8010ca4:	b570      	push	{r4, r5, r6, lr}
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cac:	2900      	cmp	r1, #0
 8010cae:	b096      	sub	sp, #88	@ 0x58
 8010cb0:	4615      	mov	r5, r2
 8010cb2:	461e      	mov	r6, r3
 8010cb4:	da0d      	bge.n	8010cd2 <__swhatbuf_r+0x2e>
 8010cb6:	89a3      	ldrh	r3, [r4, #12]
 8010cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010cbc:	f04f 0100 	mov.w	r1, #0
 8010cc0:	bf14      	ite	ne
 8010cc2:	2340      	movne	r3, #64	@ 0x40
 8010cc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010cc8:	2000      	movs	r0, #0
 8010cca:	6031      	str	r1, [r6, #0]
 8010ccc:	602b      	str	r3, [r5, #0]
 8010cce:	b016      	add	sp, #88	@ 0x58
 8010cd0:	bd70      	pop	{r4, r5, r6, pc}
 8010cd2:	466a      	mov	r2, sp
 8010cd4:	f000 f848 	bl	8010d68 <_fstat_r>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	dbec      	blt.n	8010cb6 <__swhatbuf_r+0x12>
 8010cdc:	9901      	ldr	r1, [sp, #4]
 8010cde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010ce2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010ce6:	4259      	negs	r1, r3
 8010ce8:	4159      	adcs	r1, r3
 8010cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cee:	e7eb      	b.n	8010cc8 <__swhatbuf_r+0x24>

08010cf0 <__smakebuf_r>:
 8010cf0:	898b      	ldrh	r3, [r1, #12]
 8010cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cf4:	079d      	lsls	r5, r3, #30
 8010cf6:	4606      	mov	r6, r0
 8010cf8:	460c      	mov	r4, r1
 8010cfa:	d507      	bpl.n	8010d0c <__smakebuf_r+0x1c>
 8010cfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d00:	6023      	str	r3, [r4, #0]
 8010d02:	6123      	str	r3, [r4, #16]
 8010d04:	2301      	movs	r3, #1
 8010d06:	6163      	str	r3, [r4, #20]
 8010d08:	b003      	add	sp, #12
 8010d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d0c:	ab01      	add	r3, sp, #4
 8010d0e:	466a      	mov	r2, sp
 8010d10:	f7ff ffc8 	bl	8010ca4 <__swhatbuf_r>
 8010d14:	9f00      	ldr	r7, [sp, #0]
 8010d16:	4605      	mov	r5, r0
 8010d18:	4639      	mov	r1, r7
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	f7fe fed4 	bl	800fac8 <_malloc_r>
 8010d20:	b948      	cbnz	r0, 8010d36 <__smakebuf_r+0x46>
 8010d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d26:	059a      	lsls	r2, r3, #22
 8010d28:	d4ee      	bmi.n	8010d08 <__smakebuf_r+0x18>
 8010d2a:	f023 0303 	bic.w	r3, r3, #3
 8010d2e:	f043 0302 	orr.w	r3, r3, #2
 8010d32:	81a3      	strh	r3, [r4, #12]
 8010d34:	e7e2      	b.n	8010cfc <__smakebuf_r+0xc>
 8010d36:	89a3      	ldrh	r3, [r4, #12]
 8010d38:	6020      	str	r0, [r4, #0]
 8010d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d3e:	81a3      	strh	r3, [r4, #12]
 8010d40:	9b01      	ldr	r3, [sp, #4]
 8010d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d46:	b15b      	cbz	r3, 8010d60 <__smakebuf_r+0x70>
 8010d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	f000 f81d 	bl	8010d8c <_isatty_r>
 8010d52:	b128      	cbz	r0, 8010d60 <__smakebuf_r+0x70>
 8010d54:	89a3      	ldrh	r3, [r4, #12]
 8010d56:	f023 0303 	bic.w	r3, r3, #3
 8010d5a:	f043 0301 	orr.w	r3, r3, #1
 8010d5e:	81a3      	strh	r3, [r4, #12]
 8010d60:	89a3      	ldrh	r3, [r4, #12]
 8010d62:	431d      	orrs	r5, r3
 8010d64:	81a5      	strh	r5, [r4, #12]
 8010d66:	e7cf      	b.n	8010d08 <__smakebuf_r+0x18>

08010d68 <_fstat_r>:
 8010d68:	b538      	push	{r3, r4, r5, lr}
 8010d6a:	4d07      	ldr	r5, [pc, #28]	@ (8010d88 <_fstat_r+0x20>)
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	4604      	mov	r4, r0
 8010d70:	4608      	mov	r0, r1
 8010d72:	4611      	mov	r1, r2
 8010d74:	602b      	str	r3, [r5, #0]
 8010d76:	f7f1 f863 	bl	8001e40 <_fstat>
 8010d7a:	1c43      	adds	r3, r0, #1
 8010d7c:	d102      	bne.n	8010d84 <_fstat_r+0x1c>
 8010d7e:	682b      	ldr	r3, [r5, #0]
 8010d80:	b103      	cbz	r3, 8010d84 <_fstat_r+0x1c>
 8010d82:	6023      	str	r3, [r4, #0]
 8010d84:	bd38      	pop	{r3, r4, r5, pc}
 8010d86:	bf00      	nop
 8010d88:	2000a6b8 	.word	0x2000a6b8

08010d8c <_isatty_r>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	4d06      	ldr	r5, [pc, #24]	@ (8010da8 <_isatty_r+0x1c>)
 8010d90:	2300      	movs	r3, #0
 8010d92:	4604      	mov	r4, r0
 8010d94:	4608      	mov	r0, r1
 8010d96:	602b      	str	r3, [r5, #0]
 8010d98:	f7f1 f862 	bl	8001e60 <_isatty>
 8010d9c:	1c43      	adds	r3, r0, #1
 8010d9e:	d102      	bne.n	8010da6 <_isatty_r+0x1a>
 8010da0:	682b      	ldr	r3, [r5, #0]
 8010da2:	b103      	cbz	r3, 8010da6 <_isatty_r+0x1a>
 8010da4:	6023      	str	r3, [r4, #0]
 8010da6:	bd38      	pop	{r3, r4, r5, pc}
 8010da8:	2000a6b8 	.word	0x2000a6b8

08010dac <_init>:
 8010dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dae:	bf00      	nop
 8010db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010db2:	bc08      	pop	{r3}
 8010db4:	469e      	mov	lr, r3
 8010db6:	4770      	bx	lr

08010db8 <_fini>:
 8010db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dba:	bf00      	nop
 8010dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dbe:	bc08      	pop	{r3}
 8010dc0:	469e      	mov	lr, r3
 8010dc2:	4770      	bx	lr
